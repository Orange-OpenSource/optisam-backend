// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _account_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetScopeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetScopeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetScopeRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetScopeRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// GetScopeRequestValidationError is the validation error returned by
// GetScopeRequest.Validate if the designated constraints aren't met.
type GetScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScopeRequestValidationError) ErrorName() string { return "GetScopeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScopeRequestValidationError{}

var _GetScopeRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DropScopeDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropScopeDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DropScopeDataRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DropScopeDataRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DropScopeDataRequestValidationError is the validation error returned by
// DropScopeDataRequest.Validate if the designated constraints aren't met.
type DropScopeDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropScopeDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropScopeDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropScopeDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropScopeDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropScopeDataRequestValidationError) ErrorName() string {
	return "DropScopeDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropScopeDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropScopeDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropScopeDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropScopeDataRequestValidationError{}

var _DropScopeDataRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DropScopeDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropScopeDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DropScopeDataResponseValidationError is the validation error returned by
// DropScopeDataResponse.Validate if the designated constraints aren't met.
type DropScopeDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropScopeDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropScopeDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropScopeDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropScopeDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropScopeDataResponseValidationError) ErrorName() string {
	return "DropScopeDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropScopeDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropScopeDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropScopeDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropScopeDataResponseValidationError{}

// Validate checks the field values on ListScopesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListScopesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListScopesRequestValidationError is the validation error returned by
// ListScopesRequest.Validate if the designated constraints aren't met.
type ListScopesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScopesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScopesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScopesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScopesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScopesRequestValidationError) ErrorName() string {
	return "ListScopesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListScopesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScopesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScopesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScopesRequestValidationError{}

// Validate checks the field values on ListScopesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListScopesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListScopesResponseValidationError{
					field:  fmt.Sprintf("Scopes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListScopesResponseValidationError is the validation error returned by
// ListScopesResponse.Validate if the designated constraints aren't met.
type ListScopesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScopesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScopesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScopesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScopesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScopesResponseValidationError) ErrorName() string {
	return "ListScopesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListScopesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScopesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScopesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScopesResponseValidationError{}

// Validate checks the field values on Scope with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Scope) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScopeCode

	// no validation rules for ScopeName

	// no validation rules for CreatedBy

	if v, ok := interface{}(m.GetCreatedOn()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ScopeValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ScopeType

	// no validation rules for Expenditure

	return nil
}

// ScopeValidationError is the validation error returned by Scope.Validate if
// the designated constraints aren't met.
type ScopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeValidationError) ErrorName() string { return "ScopeValidationError" }

// Error satisfies the builtin error interface
func (e ScopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeValidationError{}

// Validate checks the field values on CreateScopeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateScopeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateScopeRequest_ScopeCode_Pattern.MatchString(m.GetScopeCode()) {
		return CreateScopeRequestValidationError{
			field:  "ScopeCode",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if !_CreateScopeRequest_ScopeName_Pattern.MatchString(m.GetScopeName()) {
		return CreateScopeRequestValidationError{
			field:  "ScopeName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
	}

	if _, ok := _CreateScopeRequest_ScopeType_InLookup[m.GetScopeType()]; !ok {
		return CreateScopeRequestValidationError{
			field:  "ScopeType",
			reason: "value must be in list [0 1]",
		}
	}

	return nil
}

// CreateScopeRequestValidationError is the validation error returned by
// CreateScopeRequest.Validate if the designated constraints aren't met.
type CreateScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScopeRequestValidationError) ErrorName() string {
	return "CreateScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScopeRequestValidationError{}

var _CreateScopeRequest_ScopeCode_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

var _CreateScopeRequest_ScopeName_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

var _CreateScopeRequest_ScopeType_InLookup = map[ScopeType]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on CreateScopeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateScopeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// CreateScopeResponseValidationError is the validation error returned by
// CreateScopeResponse.Validate if the designated constraints aren't met.
type CreateScopeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScopeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScopeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScopeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScopeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScopeResponseValidationError) ErrorName() string {
	return "CreateScopeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScopeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScopeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScopeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScopeResponseValidationError{}

// Validate checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChangePasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Old

	// no validation rules for New

	return nil
}

// ChangePasswordRequestValidationError is the validation error returned by
// ChangePasswordRequest.Validate if the designated constraints aren't met.
type ChangePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRequestValidationError) ErrorName() string {
	return "ChangePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRequestValidationError{}

// Validate checks the field values on ChangePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChangePasswordResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// ChangePasswordResponseValidationError is the validation error returned by
// ChangePasswordResponse.Validate if the designated constraints aren't met.
type ChangePasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordResponseValidationError) ErrorName() string {
	return "ChangePasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordResponseValidationError{}

// Validate checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	return nil
}

// DeleteGroupRequestValidationError is the validation error returned by
// DeleteGroupRequest.Validate if the designated constraints aren't met.
type DeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupRequestValidationError) ErrorName() string {
	return "DeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupRequestValidationError{}

// Validate checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteGroupResponseValidationError is the validation error returned by
// DeleteGroupResponse.Validate if the designated constraints aren't met.
type DeleteGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupResponseValidationError) ErrorName() string {
	return "DeleteGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupResponseValidationError{}

// Validate checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	if v, ok := interface{}(m.GetGroup()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupRequestValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateGroupRequestValidationError is the validation error returned by
// UpdateGroupRequest.Validate if the designated constraints aren't met.
type UpdateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupRequestValidationError) ErrorName() string {
	return "UpdateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupRequestValidationError{}

// Validate checks the field values on UpdateGroup with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateGroup) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateGroup_Name_Pattern.MatchString(m.GetName()) {
		return UpdateGroupValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
	}

	// no validation rules for GroupCompliance

	return nil
}

// UpdateGroupValidationError is the validation error returned by
// UpdateGroup.Validate if the designated constraints aren't met.
type UpdateGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupValidationError) ErrorName() string { return "UpdateGroupValidationError" }

// Error satisfies the builtin error interface
func (e UpdateGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupValidationError{}

var _UpdateGroup_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on GroupQueryParams with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GroupQueryParams) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// GroupQueryParamsValidationError is the validation error returned by
// GroupQueryParams.Validate if the designated constraints aren't met.
type GroupQueryParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupQueryParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupQueryParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupQueryParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupQueryParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupQueryParamsValidationError) ErrorName() string { return "GroupQueryParamsValidationError" }

// Error satisfies the builtin error interface
func (e GroupQueryParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupQueryParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupQueryParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupQueryParamsValidationError{}

// Validate checks the field values on ListChildGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListChildGroupsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	return nil
}

// ListChildGroupsRequestValidationError is the validation error returned by
// ListChildGroupsRequest.Validate if the designated constraints aren't met.
type ListChildGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChildGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChildGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChildGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChildGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChildGroupsRequestValidationError) ErrorName() string {
	return "ListChildGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChildGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChildGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChildGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChildGroupsRequestValidationError{}

// Validate checks the field values on ListGroupsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListGroupsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListGroupsRequestValidationError is the validation error returned by
// ListGroupsRequest.Validate if the designated constraints aren't met.
type ListGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupsRequestValidationError) ErrorName() string {
	return "ListGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupsRequestValidationError{}

// Validate checks the field values on ListGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGroupsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumOfRecords

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListGroupsResponseValidationError is the validation error returned by
// ListGroupsResponse.Validate if the designated constraints aren't met.
type ListGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupsResponseValidationError) ErrorName() string {
	return "ListGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupsResponseValidationError{}

// Validate checks the field values on Group with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Group) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if !_Group_Name_Pattern.MatchString(m.GetName()) {
		return GroupValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
	}

	// no validation rules for FullyQualifiedName

	// no validation rules for ParentId

	// no validation rules for NumOfChildGroups

	// no validation rules for NumOfUsers

	// no validation rules for GroupCompliance

	return nil
}

// GroupValidationError is the validation error returned by Group.Validate if
// the designated constraints aren't met.
type GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupValidationError) ErrorName() string { return "GroupValidationError" }

// Error satisfies the builtin error interface
func (e GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupValidationError{}

var _Group_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Account) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetUserId()); err != nil {
		return AccountValidationError{
			field:  "UserId",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if !_Account_UserId_Pattern.MatchString(m.GetUserId()) {
		return AccountValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\"",
		}
	}

	if !_Account_FirstName_Pattern.MatchString(m.GetFirstName()) {
		return AccountValidationError{
			field:  "FirstName",
			reason: "value does not match regex pattern \"^\\\\S(.*?)\\\\S$\"",
		}
	}

	if !_Account_LastName_Pattern.MatchString(m.GetLastName()) {
		return AccountValidationError{
			field:  "LastName",
			reason: "value does not match regex pattern \"^\\\\S(.*?)\\\\S$\"",
		}
	}

	if _, ok := _Account_Locale_InLookup[m.GetLocale()]; !ok {
		return AccountValidationError{
			field:  "Locale",
			reason: "value must be in list [en fr]",
		}
	}

	if _, ok := _Account_Role_InLookup[m.GetRole()]; !ok {
		return AccountValidationError{
			field:  "Role",
			reason: "value must be in list [1 2]",
		}
	}

	return nil
}

func (m *Account) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Account) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

var _Account_UserId_Pattern = regexp.MustCompile("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")

var _Account_FirstName_Pattern = regexp.MustCompile("^\\S(.*?)\\S$")

var _Account_LastName_Pattern = regexp.MustCompile("^\\S(.*?)\\S$")

var _Account_Locale_InLookup = map[string]struct{}{
	"en": {},
	"fr": {},
}

var _Account_Role_InLookup = map[ROLE]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on UpdateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAccount()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAccountRequestValidationError is the validation error returned by
// UpdateAccountRequest.Validate if the designated constraints aren't met.
type UpdateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountRequestValidationError) ErrorName() string {
	return "UpdateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountRequestValidationError{}

// Validate checks the field values on UpdateAccount with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateAccount) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetUserId()); err != nil {
		return UpdateAccountValidationError{
			field:  "UserId",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if !_UpdateAccount_UserId_Pattern.MatchString(m.GetUserId()) {
		return UpdateAccountValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\"",
		}
	}

	if !_UpdateAccount_FirstName_Pattern.MatchString(m.GetFirstName()) {
		return UpdateAccountValidationError{
			field:  "FirstName",
			reason: "value does not match regex pattern \"^\\\\S(.*?)\\\\S$\"",
		}
	}

	if !_UpdateAccount_LastName_Pattern.MatchString(m.GetLastName()) {
		return UpdateAccountValidationError{
			field:  "LastName",
			reason: "value does not match regex pattern \"^\\\\S(.*?)\\\\S$\"",
		}
	}

	if _, ok := _UpdateAccount_Locale_InLookup[m.GetLocale()]; !ok {
		return UpdateAccountValidationError{
			field:  "Locale",
			reason: "value must be in list [en fr]",
		}
	}

	// no validation rules for Role

	// no validation rules for ProfilePic

	return nil
}

func (m *UpdateAccount) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateAccount) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UpdateAccountValidationError is the validation error returned by
// UpdateAccount.Validate if the designated constraints aren't met.
type UpdateAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountValidationError) ErrorName() string { return "UpdateAccountValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountValidationError{}

var _UpdateAccount_UserId_Pattern = regexp.MustCompile("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")

var _UpdateAccount_FirstName_Pattern = regexp.MustCompile("^\\S(.*?)\\S$")

var _UpdateAccount_LastName_Pattern = regexp.MustCompile("^\\S(.*?)\\S$")

var _UpdateAccount_Locale_InLookup = map[string]struct{}{
	"en": {},
	"fr": {},
}

// Validate checks the field values on UpdateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpdateAccountResponseValidationError is the validation error returned by
// UpdateAccountResponse.Validate if the designated constraints aren't met.
type UpdateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountResponseValidationError) ErrorName() string {
	return "UpdateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountResponseValidationError{}

// Validate checks the field values on DeleteAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetUserId()); err != nil {
		return DeleteAccountRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if !_DeleteAccountRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		return DeleteAccountRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\"",
		}
	}

	return nil
}

func (m *DeleteAccountRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *DeleteAccountRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// DeleteAccountRequestValidationError is the validation error returned by
// DeleteAccountRequest.Validate if the designated constraints aren't met.
type DeleteAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountRequestValidationError) ErrorName() string {
	return "DeleteAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountRequestValidationError{}

var _DeleteAccountRequest_UserId_Pattern = regexp.MustCompile("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")

// Validate checks the field values on DeleteAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteAccountResponseValidationError is the validation error returned by
// DeleteAccountResponse.Validate if the designated constraints aren't met.
type DeleteAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountResponseValidationError) ErrorName() string {
	return "DeleteAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountResponseValidationError{}

// Validate checks the field values on GetAccountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetAccountRequestValidationError is the validation error returned by
// GetAccountRequest.Validate if the designated constraints aren't met.
type GetAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountRequestValidationError) ErrorName() string {
	return "GetAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountRequestValidationError{}

// Validate checks the field values on GetAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetUserId()); err != nil {
		return GetAccountResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if !_GetAccountResponse_UserId_Pattern.MatchString(m.GetUserId()) {
		return GetAccountResponseValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\"",
		}
	}

	if !_GetAccountResponse_FirstName_Pattern.MatchString(m.GetFirstName()) {
		return GetAccountResponseValidationError{
			field:  "FirstName",
			reason: "value does not match regex pattern \"^\\\\S(.*?)\\\\S$\"",
		}
	}

	if !_GetAccountResponse_LastName_Pattern.MatchString(m.GetLastName()) {
		return GetAccountResponseValidationError{
			field:  "LastName",
			reason: "value does not match regex pattern \"^\\\\S(.*?)\\\\S$\"",
		}
	}

	// no validation rules for Role

	// no validation rules for Locale

	// no validation rules for ProfilePic

	// no validation rules for FirstLogin

	return nil
}

func (m *GetAccountResponse) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetAccountResponse) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetAccountResponseValidationError is the validation error returned by
// GetAccountResponse.Validate if the designated constraints aren't met.
type GetAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountResponseValidationError) ErrorName() string {
	return "GetAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountResponseValidationError{}

var _GetAccountResponse_UserId_Pattern = regexp.MustCompile("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")

var _GetAccountResponse_FirstName_Pattern = regexp.MustCompile("^\\S(.*?)\\S$")

var _GetAccountResponse_LastName_Pattern = regexp.MustCompile("^\\S(.*?)\\S$")

// Validate checks the field values on GetUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUserFilter()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return GetUsersRequestValidationError{
				field:  "UserFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUsersRequestValidationError is the validation error returned by
// GetUsersRequest.Validate if the designated constraints aren't met.
type GetUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersRequestValidationError) ErrorName() string { return "GetUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersRequestValidationError{}

// Validate checks the field values on GetGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGroupUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	return nil
}

// GetGroupUsersRequestValidationError is the validation error returned by
// GetGroupUsersRequest.Validate if the designated constraints aren't met.
type GetGroupUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupUsersRequestValidationError) ErrorName() string {
	return "GetGroupUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupUsersRequestValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetUserId()); err != nil {
		return UserValidationError{
			field:  "UserId",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if !_User_UserId_Pattern.MatchString(m.GetUserId()) {
		return UserValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\"",
		}
	}

	if !_User_FirstName_Pattern.MatchString(m.GetFirstName()) {
		return UserValidationError{
			field:  "FirstName",
			reason: "value does not match regex pattern \"^\\\\S(.*?)\\\\S$\"",
		}
	}

	if !_User_LastName_Pattern.MatchString(m.GetLastName()) {
		return UserValidationError{
			field:  "LastName",
			reason: "value does not match regex pattern \"^\\\\S(.*?)\\\\S$\"",
		}
	}

	// no validation rules for Locale

	// no validation rules for Role

	// no validation rules for AccountStatus

	return nil
}

func (m *User) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *User) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

var _User_UserId_Pattern = regexp.MustCompile("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")

var _User_FirstName_Pattern = regexp.MustCompile("^\\S(.*?)\\S$")

var _User_LastName_Pattern = regexp.MustCompile("^\\S(.*?)\\S$")

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUsersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on AddGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddGroupUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	for idx, item := range m.GetUserId() {
		_, _ = idx, item

		if err := m._validateEmail(item); err != nil {
			return AddGroupUsersRequestValidationError{
				field:  fmt.Sprintf("UserId[%v]", idx),
				reason: "value must be a valid email address",
				cause:  err,
			}
		}

	}

	return nil
}

func (m *AddGroupUsersRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddGroupUsersRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AddGroupUsersRequestValidationError is the validation error returned by
// AddGroupUsersRequest.Validate if the designated constraints aren't met.
type AddGroupUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGroupUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGroupUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGroupUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGroupUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGroupUsersRequestValidationError) ErrorName() string {
	return "AddGroupUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddGroupUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGroupUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGroupUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGroupUsersRequestValidationError{}

// Validate checks the field values on DeleteGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteGroupUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	for idx, item := range m.GetUserId() {
		_, _ = idx, item

		if err := m._validateEmail(item); err != nil {
			return DeleteGroupUsersRequestValidationError{
				field:  fmt.Sprintf("UserId[%v]", idx),
				reason: "value must be a valid email address",
				cause:  err,
			}
		}

	}

	return nil
}

func (m *DeleteGroupUsersRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *DeleteGroupUsersRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// DeleteGroupUsersRequestValidationError is the validation error returned by
// DeleteGroupUsersRequest.Validate if the designated constraints aren't met.
type DeleteGroupUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupUsersRequestValidationError) ErrorName() string {
	return "DeleteGroupUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupUsersRequestValidationError{}

// Validate checks the field values on UserQueryParams with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserQueryParams) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AllUsers

	return nil
}

// UserQueryParamsValidationError is the validation error returned by
// UserQueryParams.Validate if the designated constraints aren't met.
type UserQueryParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserQueryParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserQueryParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserQueryParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserQueryParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserQueryParamsValidationError) ErrorName() string { return "UserQueryParamsValidationError" }

// Error satisfies the builtin error interface
func (e UserQueryParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserQueryParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserQueryParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserQueryParamsValidationError{}

// Validate checks the field values on UpsertScopeExpensesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertScopeExpensesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpsertScopeExpensesRequest_ScopeCode_Pattern.MatchString(m.GetScopeCode()) {
		return UpsertScopeExpensesRequestValidationError{
			field:  "ScopeCode",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if m.GetExpenses() < 0 {
		return UpsertScopeExpensesRequestValidationError{
			field:  "Expenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// UpsertScopeExpensesRequestValidationError is the validation error returned
// by UpsertScopeExpensesRequest.Validate if the designated constraints aren't met.
type UpsertScopeExpensesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertScopeExpensesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertScopeExpensesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertScopeExpensesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertScopeExpensesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertScopeExpensesRequestValidationError) ErrorName() string {
	return "UpsertScopeExpensesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertScopeExpensesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertScopeExpensesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertScopeExpensesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertScopeExpensesRequestValidationError{}

var _UpsertScopeExpensesRequest_ScopeCode_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ScopeExpenses with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ScopeExpenses) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScopeCode

	// no validation rules for Expenses

	return nil
}

// ScopeExpensesValidationError is the validation error returned by
// ScopeExpenses.Validate if the designated constraints aren't met.
type ScopeExpensesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeExpensesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeExpensesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeExpensesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeExpensesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeExpensesValidationError) ErrorName() string { return "ScopeExpensesValidationError" }

// Error satisfies the builtin error interface
func (e ScopeExpensesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeExpenses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeExpensesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeExpensesValidationError{}

// Validate checks the field values on GetScopeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetScopeListRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetScopeListRequestValidationError is the validation error returned by
// GetScopeListRequest.Validate if the designated constraints aren't met.
type GetScopeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScopeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScopeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScopeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScopeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScopeListRequestValidationError) ErrorName() string {
	return "GetScopeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetScopeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScopeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScopeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScopeListRequestValidationError{}

// Validate checks the field values on ScopeListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ScopeListResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ScopeListResponseValidationError is the validation error returned by
// ScopeListResponse.Validate if the designated constraints aren't met.
type ScopeListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeListResponseValidationError) ErrorName() string {
	return "ScopeListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScopeListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeListResponseValidationError{}

// Validate checks the field values on ListComplienceGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListComplienceGroupsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetComplienceGroups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListComplienceGroupsResponseValidationError{
					field:  fmt.Sprintf("ComplienceGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListComplienceGroupsResponseValidationError is the validation error returned
// by ListComplienceGroupsResponse.Validate if the designated constraints
// aren't met.
type ListComplienceGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComplienceGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComplienceGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComplienceGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComplienceGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComplienceGroupsResponseValidationError) ErrorName() string {
	return "ListComplienceGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListComplienceGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComplienceGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComplienceGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComplienceGroupsResponseValidationError{}

// Validate checks the field values on ComplienceGroup with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ComplienceGroup) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	// no validation rules for Name

	return nil
}

// ComplienceGroupValidationError is the validation error returned by
// ComplienceGroup.Validate if the designated constraints aren't met.
type ComplienceGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComplienceGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComplienceGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComplienceGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComplienceGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComplienceGroupValidationError) ErrorName() string { return "ComplienceGroupValidationError" }

// Error satisfies the builtin error interface
func (e ComplienceGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComplienceGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComplienceGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComplienceGroupValidationError{}

// Validate checks the field values on ResendAccountActivationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResendAccountActivationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for User

	return nil
}

// ResendAccountActivationRequestValidationError is the validation error
// returned by ResendAccountActivationRequest.Validate if the designated
// constraints aren't met.
type ResendAccountActivationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendAccountActivationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendAccountActivationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendAccountActivationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendAccountActivationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendAccountActivationRequestValidationError) ErrorName() string {
	return "ResendAccountActivationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResendAccountActivationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendAccountActivationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendAccountActivationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendAccountActivationRequestValidationError{}

// Validate checks the field values on ResendAccountActivationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResendAccountActivationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// ResendAccountActivationResponseValidationError is the validation error
// returned by ResendAccountActivationResponse.Validate if the designated
// constraints aren't met.
type ResendAccountActivationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendAccountActivationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendAccountActivationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendAccountActivationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendAccountActivationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendAccountActivationResponseValidationError) ErrorName() string {
	return "ResendAccountActivationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResendAccountActivationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendAccountActivationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendAccountActivationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendAccountActivationResponseValidationError{}
