// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MetricServiceClient is the client API for MetricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricServiceClient interface {
	// ListMetrices
	ListMetrices(ctx context.Context, in *ListMetricRequest, opts ...grpc.CallOption) (*ListMetricResponse, error)
	// DeleteMetric deletes the metric that is not used in the particular scope
	DeleteMetric(ctx context.Context, in *DeleteMetricRequest, opts ...grpc.CallOption) (*DeleteMetricResponse, error)
	// ListMetricType
	ListMetricType(ctx context.Context, in *ListMetricTypeRequest, opts ...grpc.CallOption) (*ListMetricTypeResponse, error)
	CreateMetric(ctx context.Context, in *CreateMetricRequest, opts ...grpc.CallOption) (*CreateMetricResponse, error)
	// CreateMetricOracleProcessorStandard will create an oracle.processor.standard metric
	CreateMetricOracleProcessorStandard(ctx context.Context, in *MetricOPS, opts ...grpc.CallOption) (*MetricOPS, error)
	// UpdateMetricOracleProcessorStandard will update an IBM.pvu.standard metric
	UpdateMetricOracleProcessorStandard(ctx context.Context, in *MetricOPS, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// CreateMetricOracleNUPStandard will create an oracle.nup.standard metric
	CreateMetricOracleNUPStandard(ctx context.Context, in *MetricNUP, opts ...grpc.CallOption) (*MetricNUP, error)
	// UpdateMetricOracleNUPStandard will update an IBM.pvu.standard metric
	UpdateMetricOracleNUPStandard(ctx context.Context, in *MetricNUP, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// CreateMetricSAGProcessorStandard will create an sag.processor.standard metric
	CreateMetricSAGProcessorStandard(ctx context.Context, in *MetricSPS, opts ...grpc.CallOption) (*MetricSPS, error)
	// UpdateMetricSAGProcessorStandard will update an IBM.pvu.standard metric
	UpdateMetricSAGProcessorStandard(ctx context.Context, in *MetricSPS, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// CreateMetricIBMPvuStandard will create an IBM.pvu.standard metric
	CreateMetricIBMPvuStandard(ctx context.Context, in *MetricIPS, opts ...grpc.CallOption) (*MetricIPS, error)
	// UpdateMetricIBMPvuStandard will update an IBM.pvu.standard metric
	UpdateMetricIBMPvuStandard(ctx context.Context, in *MetricIPS, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// CreateMetricAttrCounterStandard will create an attribute.counter.standard metric
	CreateMetricAttrCounterStandard(ctx context.Context, in *MetricACS, opts ...grpc.CallOption) (*MetricACS, error)
	// UpdateMetricAttrCounterStandard will update an metric.acs.attr_value metric
	UpdateMetricAttrCounterStandard(ctx context.Context, in *MetricACS, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// CreateMetricInstanceNumberStandard will create an instance.number.standard metric
	CreateMetricInstanceNumberStandard(ctx context.Context, in *MetricINM, opts ...grpc.CallOption) (*MetricINM, error)
	// UpdateMetricInstanceNumberStandard will update an instance.number.standard metric
	UpdateMetricInstanceNumberStandard(ctx context.Context, in *MetricINM, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// CreateMetricStaticStandard will create an static.standard metric
	CreateMetricStaticStandard(ctx context.Context, in *MetricSS, opts ...grpc.CallOption) (*MetricSS, error)
	// UpdateMetricStaticStandard will update an static.standard metric
	UpdateMetricStaticStandard(ctx context.Context, in *MetricSS, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// CreateMetricUserSumStandard will create an oracle.processor.standard metric
	CreateMetricUserSumStandard(ctx context.Context, in *MetricUSS, opts ...grpc.CallOption) (*MetricUSS, error)
	// CreateMetricAttrSumStandard will create an attribute.sum.standard metric
	CreateMetricAttrSumStandard(ctx context.Context, in *MetricAttrSum, opts ...grpc.CallOption) (*MetricAttrSum, error)
	// UpdateMetricAttrSumStandard will update an instance.number.standard metric
	UpdateMetricAttrSumStandard(ctx context.Context, in *MetricAttrSum, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// CreateMetricEquipAttrStandard will create an equipment.attribute.standard metric
	CreateMetricEquipAttrStandard(ctx context.Context, in *MetricEquipAtt, opts ...grpc.CallOption) (*MetricEquipAtt, error)
	// UpdateMetricEquipAttrStandard will update an equipment.attribute.standard metric
	UpdateMetricEquipAttrStandard(ctx context.Context, in *MetricEquipAtt, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// CreateMetricUserNominativeStandard will create an user.nominative.standard metric
	CreateMetricUserNominativeStandard(ctx context.Context, in *MetricUNS, opts ...grpc.CallOption) (*MetricUNS, error)
	// UpdateMetricUserNominativeStandard will update an user.nominative.standard metric
	UpdateMetricUserNominativeStandard(ctx context.Context, in *MetricUNS, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// CreateMetricUserConcurentStandard will create an user.concurrent.standard metric
	CreateMetricUserConcurentStandard(ctx context.Context, in *MetricUCS, opts ...grpc.CallOption) (*MetricUCS, error)
	// UpdateMetricUserConcurentStandard will update an user.concurrent.standard metric
	UpdateMetricUserConcurentStandard(ctx context.Context, in *MetricUCS, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// CreateMetricImport will create all metrics requested with default value
	CreateMetricImport(ctx context.Context, in *MetricImportRequest, opts ...grpc.CallOption) (*MetricImportResponse, error)
	CreateScopeMetric(ctx context.Context, in *CreateScopeMetricRequest, opts ...grpc.CallOption) (*CreateScopeMetricResponse, error)
	// CreateMetricSQLStandard will create an user.concurrent.standard metric
	CreateMetricSQLStandard(ctx context.Context, in *MetricScopeSQL, opts ...grpc.CallOption) (*MetricScopeSQL, error)
	//GetMetricConfiguration will get configuration of a metric
	GetMetricConfiguration(ctx context.Context, in *GetMetricConfigurationRequest, opts ...grpc.CallOption) (*GetMetricConfigurationResponse, error)
	DropMetricData(ctx context.Context, in *DropMetricDataRequest, opts ...grpc.CallOption) (*DropMetricDataResponse, error)
}

type metricServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricServiceClient(cc grpc.ClientConnInterface) MetricServiceClient {
	return &metricServiceClient{cc}
}

func (c *metricServiceClient) ListMetrices(ctx context.Context, in *ListMetricRequest, opts ...grpc.CallOption) (*ListMetricResponse, error) {
	out := new(ListMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/ListMetrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) DeleteMetric(ctx context.Context, in *DeleteMetricRequest, opts ...grpc.CallOption) (*DeleteMetricResponse, error) {
	out := new(DeleteMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/DeleteMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) ListMetricType(ctx context.Context, in *ListMetricTypeRequest, opts ...grpc.CallOption) (*ListMetricTypeResponse, error) {
	out := new(ListMetricTypeResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/ListMetricType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetric(ctx context.Context, in *CreateMetricRequest, opts ...grpc.CallOption) (*CreateMetricResponse, error) {
	out := new(CreateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricOracleProcessorStandard(ctx context.Context, in *MetricOPS, opts ...grpc.CallOption) (*MetricOPS, error) {
	out := new(MetricOPS)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricOracleProcessorStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricOracleProcessorStandard(ctx context.Context, in *MetricOPS, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/UpdateMetricOracleProcessorStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricOracleNUPStandard(ctx context.Context, in *MetricNUP, opts ...grpc.CallOption) (*MetricNUP, error) {
	out := new(MetricNUP)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricOracleNUPStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricOracleNUPStandard(ctx context.Context, in *MetricNUP, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/UpdateMetricOracleNUPStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricSAGProcessorStandard(ctx context.Context, in *MetricSPS, opts ...grpc.CallOption) (*MetricSPS, error) {
	out := new(MetricSPS)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricSAGProcessorStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricSAGProcessorStandard(ctx context.Context, in *MetricSPS, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/UpdateMetricSAGProcessorStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricIBMPvuStandard(ctx context.Context, in *MetricIPS, opts ...grpc.CallOption) (*MetricIPS, error) {
	out := new(MetricIPS)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricIBMPvuStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricIBMPvuStandard(ctx context.Context, in *MetricIPS, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/UpdateMetricIBMPvuStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricAttrCounterStandard(ctx context.Context, in *MetricACS, opts ...grpc.CallOption) (*MetricACS, error) {
	out := new(MetricACS)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricAttrCounterStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricAttrCounterStandard(ctx context.Context, in *MetricACS, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/UpdateMetricAttrCounterStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricInstanceNumberStandard(ctx context.Context, in *MetricINM, opts ...grpc.CallOption) (*MetricINM, error) {
	out := new(MetricINM)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricInstanceNumberStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricInstanceNumberStandard(ctx context.Context, in *MetricINM, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/UpdateMetricInstanceNumberStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricStaticStandard(ctx context.Context, in *MetricSS, opts ...grpc.CallOption) (*MetricSS, error) {
	out := new(MetricSS)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricStaticStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricStaticStandard(ctx context.Context, in *MetricSS, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/UpdateMetricStaticStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricUserSumStandard(ctx context.Context, in *MetricUSS, opts ...grpc.CallOption) (*MetricUSS, error) {
	out := new(MetricUSS)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricUserSumStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricAttrSumStandard(ctx context.Context, in *MetricAttrSum, opts ...grpc.CallOption) (*MetricAttrSum, error) {
	out := new(MetricAttrSum)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricAttrSumStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricAttrSumStandard(ctx context.Context, in *MetricAttrSum, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/UpdateMetricAttrSumStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricEquipAttrStandard(ctx context.Context, in *MetricEquipAtt, opts ...grpc.CallOption) (*MetricEquipAtt, error) {
	out := new(MetricEquipAtt)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricEquipAttrStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricEquipAttrStandard(ctx context.Context, in *MetricEquipAtt, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/UpdateMetricEquipAttrStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricUserNominativeStandard(ctx context.Context, in *MetricUNS, opts ...grpc.CallOption) (*MetricUNS, error) {
	out := new(MetricUNS)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricUserNominativeStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricUserNominativeStandard(ctx context.Context, in *MetricUNS, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/UpdateMetricUserNominativeStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricUserConcurentStandard(ctx context.Context, in *MetricUCS, opts ...grpc.CallOption) (*MetricUCS, error) {
	out := new(MetricUCS)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricUserConcurentStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricUserConcurentStandard(ctx context.Context, in *MetricUCS, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/UpdateMetricUserConcurentStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricImport(ctx context.Context, in *MetricImportRequest, opts ...grpc.CallOption) (*MetricImportResponse, error) {
	out := new(MetricImportResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateScopeMetric(ctx context.Context, in *CreateScopeMetricRequest, opts ...grpc.CallOption) (*CreateScopeMetricResponse, error) {
	out := new(CreateScopeMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateScopeMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) CreateMetricSQLStandard(ctx context.Context, in *MetricScopeSQL, opts ...grpc.CallOption) (*MetricScopeSQL, error) {
	out := new(MetricScopeSQL)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/CreateMetricSQLStandard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) GetMetricConfiguration(ctx context.Context, in *GetMetricConfigurationRequest, opts ...grpc.CallOption) (*GetMetricConfigurationResponse, error) {
	out := new(GetMetricConfigurationResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/GetMetricConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) DropMetricData(ctx context.Context, in *DropMetricDataRequest, opts ...grpc.CallOption) (*DropMetricDataResponse, error) {
	out := new(DropMetricDataResponse)
	err := c.cc.Invoke(ctx, "/optisam.metric.v1.MetricService/DropMetricData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricServiceServer is the server API for MetricService service.
// All implementations should embed UnimplementedMetricServiceServer
// for forward compatibility
type MetricServiceServer interface {
	// ListMetrices
	ListMetrices(context.Context, *ListMetricRequest) (*ListMetricResponse, error)
	// DeleteMetric deletes the metric that is not used in the particular scope
	DeleteMetric(context.Context, *DeleteMetricRequest) (*DeleteMetricResponse, error)
	// ListMetricType
	ListMetricType(context.Context, *ListMetricTypeRequest) (*ListMetricTypeResponse, error)
	CreateMetric(context.Context, *CreateMetricRequest) (*CreateMetricResponse, error)
	// CreateMetricOracleProcessorStandard will create an oracle.processor.standard metric
	CreateMetricOracleProcessorStandard(context.Context, *MetricOPS) (*MetricOPS, error)
	// UpdateMetricOracleProcessorStandard will update an IBM.pvu.standard metric
	UpdateMetricOracleProcessorStandard(context.Context, *MetricOPS) (*UpdateMetricResponse, error)
	// CreateMetricOracleNUPStandard will create an oracle.nup.standard metric
	CreateMetricOracleNUPStandard(context.Context, *MetricNUP) (*MetricNUP, error)
	// UpdateMetricOracleNUPStandard will update an IBM.pvu.standard metric
	UpdateMetricOracleNUPStandard(context.Context, *MetricNUP) (*UpdateMetricResponse, error)
	// CreateMetricSAGProcessorStandard will create an sag.processor.standard metric
	CreateMetricSAGProcessorStandard(context.Context, *MetricSPS) (*MetricSPS, error)
	// UpdateMetricSAGProcessorStandard will update an IBM.pvu.standard metric
	UpdateMetricSAGProcessorStandard(context.Context, *MetricSPS) (*UpdateMetricResponse, error)
	// CreateMetricIBMPvuStandard will create an IBM.pvu.standard metric
	CreateMetricIBMPvuStandard(context.Context, *MetricIPS) (*MetricIPS, error)
	// UpdateMetricIBMPvuStandard will update an IBM.pvu.standard metric
	UpdateMetricIBMPvuStandard(context.Context, *MetricIPS) (*UpdateMetricResponse, error)
	// CreateMetricAttrCounterStandard will create an attribute.counter.standard metric
	CreateMetricAttrCounterStandard(context.Context, *MetricACS) (*MetricACS, error)
	// UpdateMetricAttrCounterStandard will update an metric.acs.attr_value metric
	UpdateMetricAttrCounterStandard(context.Context, *MetricACS) (*UpdateMetricResponse, error)
	// CreateMetricInstanceNumberStandard will create an instance.number.standard metric
	CreateMetricInstanceNumberStandard(context.Context, *MetricINM) (*MetricINM, error)
	// UpdateMetricInstanceNumberStandard will update an instance.number.standard metric
	UpdateMetricInstanceNumberStandard(context.Context, *MetricINM) (*UpdateMetricResponse, error)
	// CreateMetricStaticStandard will create an static.standard metric
	CreateMetricStaticStandard(context.Context, *MetricSS) (*MetricSS, error)
	// UpdateMetricStaticStandard will update an static.standard metric
	UpdateMetricStaticStandard(context.Context, *MetricSS) (*UpdateMetricResponse, error)
	// CreateMetricUserSumStandard will create an oracle.processor.standard metric
	CreateMetricUserSumStandard(context.Context, *MetricUSS) (*MetricUSS, error)
	// CreateMetricAttrSumStandard will create an attribute.sum.standard metric
	CreateMetricAttrSumStandard(context.Context, *MetricAttrSum) (*MetricAttrSum, error)
	// UpdateMetricAttrSumStandard will update an instance.number.standard metric
	UpdateMetricAttrSumStandard(context.Context, *MetricAttrSum) (*UpdateMetricResponse, error)
	// CreateMetricEquipAttrStandard will create an equipment.attribute.standard metric
	CreateMetricEquipAttrStandard(context.Context, *MetricEquipAtt) (*MetricEquipAtt, error)
	// UpdateMetricEquipAttrStandard will update an equipment.attribute.standard metric
	UpdateMetricEquipAttrStandard(context.Context, *MetricEquipAtt) (*UpdateMetricResponse, error)
	// CreateMetricUserNominativeStandard will create an user.nominative.standard metric
	CreateMetricUserNominativeStandard(context.Context, *MetricUNS) (*MetricUNS, error)
	// UpdateMetricUserNominativeStandard will update an user.nominative.standard metric
	UpdateMetricUserNominativeStandard(context.Context, *MetricUNS) (*UpdateMetricResponse, error)
	// CreateMetricUserConcurentStandard will create an user.concurrent.standard metric
	CreateMetricUserConcurentStandard(context.Context, *MetricUCS) (*MetricUCS, error)
	// UpdateMetricUserConcurentStandard will update an user.concurrent.standard metric
	UpdateMetricUserConcurentStandard(context.Context, *MetricUCS) (*UpdateMetricResponse, error)
	// CreateMetricImport will create all metrics requested with default value
	CreateMetricImport(context.Context, *MetricImportRequest) (*MetricImportResponse, error)
	CreateScopeMetric(context.Context, *CreateScopeMetricRequest) (*CreateScopeMetricResponse, error)
	// CreateMetricSQLStandard will create an user.concurrent.standard metric
	CreateMetricSQLStandard(context.Context, *MetricScopeSQL) (*MetricScopeSQL, error)
	//GetMetricConfiguration will get configuration of a metric
	GetMetricConfiguration(context.Context, *GetMetricConfigurationRequest) (*GetMetricConfigurationResponse, error)
	DropMetricData(context.Context, *DropMetricDataRequest) (*DropMetricDataResponse, error)
}

// UnimplementedMetricServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMetricServiceServer struct {
}

func (UnimplementedMetricServiceServer) ListMetrices(context.Context, *ListMetricRequest) (*ListMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetrices not implemented")
}
func (UnimplementedMetricServiceServer) DeleteMetric(context.Context, *DeleteMetricRequest) (*DeleteMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetric not implemented")
}
func (UnimplementedMetricServiceServer) ListMetricType(context.Context, *ListMetricTypeRequest) (*ListMetricTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetricType not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetric(context.Context, *CreateMetricRequest) (*CreateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetric not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricOracleProcessorStandard(context.Context, *MetricOPS) (*MetricOPS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricOracleProcessorStandard not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricOracleProcessorStandard(context.Context, *MetricOPS) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricOracleProcessorStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricOracleNUPStandard(context.Context, *MetricNUP) (*MetricNUP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricOracleNUPStandard not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricOracleNUPStandard(context.Context, *MetricNUP) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricOracleNUPStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricSAGProcessorStandard(context.Context, *MetricSPS) (*MetricSPS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricSAGProcessorStandard not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricSAGProcessorStandard(context.Context, *MetricSPS) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricSAGProcessorStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricIBMPvuStandard(context.Context, *MetricIPS) (*MetricIPS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricIBMPvuStandard not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricIBMPvuStandard(context.Context, *MetricIPS) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricIBMPvuStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricAttrCounterStandard(context.Context, *MetricACS) (*MetricACS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricAttrCounterStandard not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricAttrCounterStandard(context.Context, *MetricACS) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricAttrCounterStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricInstanceNumberStandard(context.Context, *MetricINM) (*MetricINM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricInstanceNumberStandard not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricInstanceNumberStandard(context.Context, *MetricINM) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricInstanceNumberStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricStaticStandard(context.Context, *MetricSS) (*MetricSS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricStaticStandard not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricStaticStandard(context.Context, *MetricSS) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricStaticStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricUserSumStandard(context.Context, *MetricUSS) (*MetricUSS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricUserSumStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricAttrSumStandard(context.Context, *MetricAttrSum) (*MetricAttrSum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricAttrSumStandard not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricAttrSumStandard(context.Context, *MetricAttrSum) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricAttrSumStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricEquipAttrStandard(context.Context, *MetricEquipAtt) (*MetricEquipAtt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricEquipAttrStandard not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricEquipAttrStandard(context.Context, *MetricEquipAtt) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricEquipAttrStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricUserNominativeStandard(context.Context, *MetricUNS) (*MetricUNS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricUserNominativeStandard not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricUserNominativeStandard(context.Context, *MetricUNS) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricUserNominativeStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricUserConcurentStandard(context.Context, *MetricUCS) (*MetricUCS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricUserConcurentStandard not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricUserConcurentStandard(context.Context, *MetricUCS) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricUserConcurentStandard not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricImport(context.Context, *MetricImportRequest) (*MetricImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricImport not implemented")
}
func (UnimplementedMetricServiceServer) CreateScopeMetric(context.Context, *CreateScopeMetricRequest) (*CreateScopeMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScopeMetric not implemented")
}
func (UnimplementedMetricServiceServer) CreateMetricSQLStandard(context.Context, *MetricScopeSQL) (*MetricScopeSQL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricSQLStandard not implemented")
}
func (UnimplementedMetricServiceServer) GetMetricConfiguration(context.Context, *GetMetricConfigurationRequest) (*GetMetricConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricConfiguration not implemented")
}
func (UnimplementedMetricServiceServer) DropMetricData(context.Context, *DropMetricDataRequest) (*DropMetricDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropMetricData not implemented")
}

// UnsafeMetricServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricServiceServer will
// result in compilation errors.
type UnsafeMetricServiceServer interface {
	mustEmbedUnimplementedMetricServiceServer()
}

func RegisterMetricServiceServer(s grpc.ServiceRegistrar, srv MetricServiceServer) {
	s.RegisterService(&_MetricService_serviceDesc, srv)
}

func _MetricService_ListMetrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).ListMetrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/ListMetrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).ListMetrices(ctx, req.(*ListMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_DeleteMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).DeleteMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/DeleteMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).DeleteMetric(ctx, req.(*DeleteMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_ListMetricType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).ListMetricType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/ListMetricType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).ListMetricType(ctx, req.(*ListMetricTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetric(ctx, req.(*CreateMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricOracleProcessorStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricOPS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricOracleProcessorStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricOracleProcessorStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricOracleProcessorStandard(ctx, req.(*MetricOPS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricOracleProcessorStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricOPS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricOracleProcessorStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/UpdateMetricOracleProcessorStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricOracleProcessorStandard(ctx, req.(*MetricOPS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricOracleNUPStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricNUP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricOracleNUPStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricOracleNUPStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricOracleNUPStandard(ctx, req.(*MetricNUP))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricOracleNUPStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricNUP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricOracleNUPStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/UpdateMetricOracleNUPStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricOracleNUPStandard(ctx, req.(*MetricNUP))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricSAGProcessorStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricSPS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricSAGProcessorStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricSAGProcessorStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricSAGProcessorStandard(ctx, req.(*MetricSPS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricSAGProcessorStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricSPS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricSAGProcessorStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/UpdateMetricSAGProcessorStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricSAGProcessorStandard(ctx, req.(*MetricSPS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricIBMPvuStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricIPS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricIBMPvuStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricIBMPvuStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricIBMPvuStandard(ctx, req.(*MetricIPS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricIBMPvuStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricIPS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricIBMPvuStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/UpdateMetricIBMPvuStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricIBMPvuStandard(ctx, req.(*MetricIPS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricAttrCounterStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricACS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricAttrCounterStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricAttrCounterStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricAttrCounterStandard(ctx, req.(*MetricACS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricAttrCounterStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricACS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricAttrCounterStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/UpdateMetricAttrCounterStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricAttrCounterStandard(ctx, req.(*MetricACS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricInstanceNumberStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricINM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricInstanceNumberStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricInstanceNumberStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricInstanceNumberStandard(ctx, req.(*MetricINM))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricInstanceNumberStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricINM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricInstanceNumberStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/UpdateMetricInstanceNumberStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricInstanceNumberStandard(ctx, req.(*MetricINM))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricStaticStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricSS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricStaticStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricStaticStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricStaticStandard(ctx, req.(*MetricSS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricStaticStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricSS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricStaticStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/UpdateMetricStaticStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricStaticStandard(ctx, req.(*MetricSS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricUserSumStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricUSS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricUserSumStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricUserSumStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricUserSumStandard(ctx, req.(*MetricUSS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricAttrSumStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAttrSum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricAttrSumStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricAttrSumStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricAttrSumStandard(ctx, req.(*MetricAttrSum))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricAttrSumStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAttrSum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricAttrSumStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/UpdateMetricAttrSumStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricAttrSumStandard(ctx, req.(*MetricAttrSum))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricEquipAttrStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricEquipAtt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricEquipAttrStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricEquipAttrStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricEquipAttrStandard(ctx, req.(*MetricEquipAtt))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricEquipAttrStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricEquipAtt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricEquipAttrStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/UpdateMetricEquipAttrStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricEquipAttrStandard(ctx, req.(*MetricEquipAtt))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricUserNominativeStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricUNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricUserNominativeStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricUserNominativeStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricUserNominativeStandard(ctx, req.(*MetricUNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricUserNominativeStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricUNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricUserNominativeStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/UpdateMetricUserNominativeStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricUserNominativeStandard(ctx, req.(*MetricUNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricUserConcurentStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricUCS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricUserConcurentStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricUserConcurentStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricUserConcurentStandard(ctx, req.(*MetricUCS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricUserConcurentStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricUCS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricUserConcurentStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/UpdateMetricUserConcurentStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricUserConcurentStandard(ctx, req.(*MetricUCS))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricImport(ctx, req.(*MetricImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateScopeMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopeMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateScopeMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateScopeMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateScopeMetric(ctx, req.(*CreateScopeMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_CreateMetricSQLStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricScopeSQL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).CreateMetricSQLStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/CreateMetricSQLStandard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).CreateMetricSQLStandard(ctx, req.(*MetricScopeSQL))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_GetMetricConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).GetMetricConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/GetMetricConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).GetMetricConfiguration(ctx, req.(*GetMetricConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_DropMetricData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropMetricDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).DropMetricData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.metric.v1.MetricService/DropMetricData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).DropMetricData(ctx, req.(*DropMetricDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "optisam.metric.v1.MetricService",
	HandlerType: (*MetricServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMetrices",
			Handler:    _MetricService_ListMetrices_Handler,
		},
		{
			MethodName: "DeleteMetric",
			Handler:    _MetricService_DeleteMetric_Handler,
		},
		{
			MethodName: "ListMetricType",
			Handler:    _MetricService_ListMetricType_Handler,
		},
		{
			MethodName: "CreateMetric",
			Handler:    _MetricService_CreateMetric_Handler,
		},
		{
			MethodName: "CreateMetricOracleProcessorStandard",
			Handler:    _MetricService_CreateMetricOracleProcessorStandard_Handler,
		},
		{
			MethodName: "UpdateMetricOracleProcessorStandard",
			Handler:    _MetricService_UpdateMetricOracleProcessorStandard_Handler,
		},
		{
			MethodName: "CreateMetricOracleNUPStandard",
			Handler:    _MetricService_CreateMetricOracleNUPStandard_Handler,
		},
		{
			MethodName: "UpdateMetricOracleNUPStandard",
			Handler:    _MetricService_UpdateMetricOracleNUPStandard_Handler,
		},
		{
			MethodName: "CreateMetricSAGProcessorStandard",
			Handler:    _MetricService_CreateMetricSAGProcessorStandard_Handler,
		},
		{
			MethodName: "UpdateMetricSAGProcessorStandard",
			Handler:    _MetricService_UpdateMetricSAGProcessorStandard_Handler,
		},
		{
			MethodName: "CreateMetricIBMPvuStandard",
			Handler:    _MetricService_CreateMetricIBMPvuStandard_Handler,
		},
		{
			MethodName: "UpdateMetricIBMPvuStandard",
			Handler:    _MetricService_UpdateMetricIBMPvuStandard_Handler,
		},
		{
			MethodName: "CreateMetricAttrCounterStandard",
			Handler:    _MetricService_CreateMetricAttrCounterStandard_Handler,
		},
		{
			MethodName: "UpdateMetricAttrCounterStandard",
			Handler:    _MetricService_UpdateMetricAttrCounterStandard_Handler,
		},
		{
			MethodName: "CreateMetricInstanceNumberStandard",
			Handler:    _MetricService_CreateMetricInstanceNumberStandard_Handler,
		},
		{
			MethodName: "UpdateMetricInstanceNumberStandard",
			Handler:    _MetricService_UpdateMetricInstanceNumberStandard_Handler,
		},
		{
			MethodName: "CreateMetricStaticStandard",
			Handler:    _MetricService_CreateMetricStaticStandard_Handler,
		},
		{
			MethodName: "UpdateMetricStaticStandard",
			Handler:    _MetricService_UpdateMetricStaticStandard_Handler,
		},
		{
			MethodName: "CreateMetricUserSumStandard",
			Handler:    _MetricService_CreateMetricUserSumStandard_Handler,
		},
		{
			MethodName: "CreateMetricAttrSumStandard",
			Handler:    _MetricService_CreateMetricAttrSumStandard_Handler,
		},
		{
			MethodName: "UpdateMetricAttrSumStandard",
			Handler:    _MetricService_UpdateMetricAttrSumStandard_Handler,
		},
		{
			MethodName: "CreateMetricEquipAttrStandard",
			Handler:    _MetricService_CreateMetricEquipAttrStandard_Handler,
		},
		{
			MethodName: "UpdateMetricEquipAttrStandard",
			Handler:    _MetricService_UpdateMetricEquipAttrStandard_Handler,
		},
		{
			MethodName: "CreateMetricUserNominativeStandard",
			Handler:    _MetricService_CreateMetricUserNominativeStandard_Handler,
		},
		{
			MethodName: "UpdateMetricUserNominativeStandard",
			Handler:    _MetricService_UpdateMetricUserNominativeStandard_Handler,
		},
		{
			MethodName: "CreateMetricUserConcurentStandard",
			Handler:    _MetricService_CreateMetricUserConcurentStandard_Handler,
		},
		{
			MethodName: "UpdateMetricUserConcurentStandard",
			Handler:    _MetricService_UpdateMetricUserConcurentStandard_Handler,
		},
		{
			MethodName: "CreateMetricImport",
			Handler:    _MetricService_CreateMetricImport_Handler,
		},
		{
			MethodName: "CreateScopeMetric",
			Handler:    _MetricService_CreateScopeMetric_Handler,
		},
		{
			MethodName: "CreateMetricSQLStandard",
			Handler:    _MetricService_CreateMetricSQLStandard_Handler,
		},
		{
			MethodName: "GetMetricConfiguration",
			Handler:    _MetricService_GetMetricConfiguration_Handler,
		},
		{
			MethodName: "DropMetricData",
			Handler:    _MetricService_DropMetricData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metric.proto",
}
