// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: metric.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _metric_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DropMetricDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropMetricDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DropMetricDataRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DropMetricDataRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DropMetricDataRequestValidationError is the validation error returned by
// DropMetricDataRequest.Validate if the designated constraints aren't met.
type DropMetricDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropMetricDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropMetricDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropMetricDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropMetricDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropMetricDataRequestValidationError) ErrorName() string {
	return "DropMetricDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropMetricDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropMetricDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropMetricDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropMetricDataRequestValidationError{}

var _DropMetricDataRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DropMetricDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropMetricDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DropMetricDataResponseValidationError is the validation error returned by
// DropMetricDataResponse.Validate if the designated constraints aren't met.
type DropMetricDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropMetricDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropMetricDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropMetricDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropMetricDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropMetricDataResponseValidationError) ErrorName() string {
	return "DropMetricDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropMetricDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropMetricDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropMetricDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropMetricDataResponseValidationError{}

// Validate checks the field values on DeleteMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteMetricRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteMetricRequest_MetricName_Pattern.MatchString(m.GetMetricName()) {
		return DeleteMetricRequestValidationError{
			field:  "MetricName",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetScope()) != 3 {
		return DeleteMetricRequestValidationError{
			field:  "Scope",
			reason: "value length must be 3 runes",
		}

	}

	if !_DeleteMetricRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DeleteMetricRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"^[A-Z]+$\"",
		}
	}

	return nil
}

// DeleteMetricRequestValidationError is the validation error returned by
// DeleteMetricRequest.Validate if the designated constraints aren't met.
type DeleteMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMetricRequestValidationError) ErrorName() string {
	return "DeleteMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMetricRequestValidationError{}

var _DeleteMetricRequest_MetricName_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

var _DeleteMetricRequest_Scope_Pattern = regexp.MustCompile("^[A-Z]+$")

// Validate checks the field values on DeleteMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteMetricResponseValidationError is the validation error returned by
// DeleteMetricResponse.Validate if the designated constraints aren't met.
type DeleteMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMetricResponseValidationError) ErrorName() string {
	return "DeleteMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMetricResponseValidationError{}

// Validate checks the field values on CreateMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateMetricRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMetric()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CreateMetricRequestValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_CreateMetricRequest_SenderScope_Pattern.MatchString(m.GetSenderScope()) {
		return CreateMetricRequestValidationError{
			field:  "SenderScope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if !_CreateMetricRequest_RecieverScope_Pattern.MatchString(m.GetRecieverScope()) {
		return CreateMetricRequestValidationError{
			field:  "RecieverScope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// CreateMetricRequestValidationError is the validation error returned by
// CreateMetricRequest.Validate if the designated constraints aren't met.
type CreateMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricRequestValidationError) ErrorName() string {
	return "CreateMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricRequestValidationError{}

var _CreateMetricRequest_SenderScope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

var _CreateMetricRequest_RecieverScope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on CreateMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// CreateMetricResponseValidationError is the validation error returned by
// CreateMetricResponse.Validate if the designated constraints aren't met.
type CreateMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricResponseValidationError) ErrorName() string {
	return "CreateMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricResponseValidationError{}

// Validate checks the field values on GetMetricConfigurationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMetricConfigurationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMetricInfo()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return GetMetricConfigurationRequestValidationError{
				field:  "MetricInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GetID

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return GetMetricConfigurationRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// GetMetricConfigurationRequestValidationError is the validation error
// returned by GetMetricConfigurationRequest.Validate if the designated
// constraints aren't met.
type GetMetricConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricConfigurationRequestValidationError) ErrorName() string {
	return "GetMetricConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricConfigurationRequestValidationError{}

// Validate checks the field values on GetMetricConfigurationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMetricConfigurationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetricConfig

	return nil
}

// GetMetricConfigurationResponseValidationError is the validation error
// returned by GetMetricConfigurationResponse.Validate if the designated
// constraints aren't met.
type GetMetricConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricConfigurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricConfigurationResponseValidationError) ErrorName() string {
	return "GetMetricConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricConfigurationResponseValidationError{}

// Validate checks the field values on MetricUSS with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricUSS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricUSSValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricUSS_Name_Pattern.MatchString(m.GetName()) {
		return MetricUSSValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricUSSValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricUSSValidationError is the validation error returned by
// MetricUSS.Validate if the designated constraints aren't met.
type MetricUSSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricUSSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricUSSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricUSSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricUSSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricUSSValidationError) ErrorName() string { return "MetricUSSValidationError" }

// Error satisfies the builtin error interface
func (e MetricUSSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricUSS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricUSSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricUSSValidationError{}

var _MetricUSS_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

// Validate checks the field values on MetricINM with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricINM) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricINMValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricINM_Name_Pattern.MatchString(m.GetName()) {
		return MetricINMValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	if m.GetNumOfDeployments() <= 0 {
		return MetricINMValidationError{
			field:  "NumOfDeployments",
			reason: "value must be greater than 0",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricINMValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricINMValidationError is the validation error returned by
// MetricINM.Validate if the designated constraints aren't met.
type MetricINMValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricINMValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricINMValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricINMValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricINMValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricINMValidationError) ErrorName() string { return "MetricINMValidationError" }

// Error satisfies the builtin error interface
func (e MetricINMValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricINM.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricINMValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricINMValidationError{}

var _MetricINM_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

// Validate checks the field values on MetricSS with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricSS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricSSValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricSS_Name_Pattern.MatchString(m.GetName()) {
		return MetricSSValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	if m.GetReferenceValue() < 0 {
		return MetricSSValidationError{
			field:  "ReferenceValue",
			reason: "value must be greater than or equal to 0",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricSSValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricSSValidationError is the validation error returned by
// MetricSS.Validate if the designated constraints aren't met.
type MetricSSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricSSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricSSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricSSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricSSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricSSValidationError) ErrorName() string { return "MetricSSValidationError" }

// Error satisfies the builtin error interface
func (e MetricSSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricSS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricSSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricSSValidationError{}

var _MetricSS_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

// Validate checks the field values on UpdateMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpdateMetricResponseValidationError is the validation error returned by
// UpdateMetricResponse.Validate if the designated constraints aren't met.
type UpdateMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMetricResponseValidationError) ErrorName() string {
	return "UpdateMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMetricResponseValidationError{}

// Validate checks the field values on MetricAttrSum with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MetricAttrSum) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricAttrSumValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricAttrSum_Name_Pattern.MatchString(m.GetName()) {
		return MetricAttrSumValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for EqType

	// no validation rules for AttributeName

	if m.GetReferenceValue() <= 0 {
		return MetricAttrSumValidationError{
			field:  "ReferenceValue",
			reason: "value must be greater than 0",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricAttrSumValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricAttrSumValidationError is the validation error returned by
// MetricAttrSum.Validate if the designated constraints aren't met.
type MetricAttrSumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricAttrSumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricAttrSumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricAttrSumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricAttrSumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricAttrSumValidationError) ErrorName() string { return "MetricAttrSumValidationError" }

// Error satisfies the builtin error interface
func (e MetricAttrSumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricAttrSum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricAttrSumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricAttrSumValidationError{}

var _MetricAttrSum_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

// Validate checks the field values on MetricEquipAtt with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MetricEquipAtt) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricEquipAttValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricEquipAtt_Name_Pattern.MatchString(m.GetName()) {
		return MetricEquipAttValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for EqType

	// no validation rules for AttributeName

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return MetricEquipAttValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricEquipAtt_Environment_Pattern.MatchString(m.GetEnvironment()) {
		return MetricEquipAttValidationError{
			field:  "Environment",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9,]+$\"",
		}
	}

	if m.GetValue() <= 0 {
		return MetricEquipAttValidationError{
			field:  "Value",
			reason: "value must be greater than 0",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricEquipAttValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricEquipAttValidationError is the validation error returned by
// MetricEquipAtt.Validate if the designated constraints aren't met.
type MetricEquipAttValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricEquipAttValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricEquipAttValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricEquipAttValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricEquipAttValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricEquipAttValidationError) ErrorName() string { return "MetricEquipAttValidationError" }

// Error satisfies the builtin error interface
func (e MetricEquipAttValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricEquipAtt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricEquipAttValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricEquipAttValidationError{}

var _MetricEquipAtt_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

var _MetricEquipAtt_Environment_Pattern = regexp.MustCompile("^[a-zA-Z0-9,]+$")

// Validate checks the field values on MetricIPS with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricIPS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricIPSValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricIPS_Name_Pattern.MatchString(m.GetName()) {
		return MetricIPSValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for NumCoreAttrId

	// no validation rules for NumCPUAttrId

	// no validation rules for CoreFactorAttrId

	// no validation rules for BaseEqTypeId

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricIPSValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricIPSValidationError is the validation error returned by
// MetricIPS.Validate if the designated constraints aren't met.
type MetricIPSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricIPSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricIPSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricIPSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricIPSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricIPSValidationError) ErrorName() string { return "MetricIPSValidationError" }

// Error satisfies the builtin error interface
func (e MetricIPSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricIPS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricIPSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricIPSValidationError{}

var _MetricIPS_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

// Validate checks the field values on MetricSPS with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricSPS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricSPSValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricSPS_Name_Pattern.MatchString(m.GetName()) {
		return MetricSPSValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for NumCoreAttrId

	// no validation rules for NumCPUAttrId

	// no validation rules for CoreFactorAttrId

	// no validation rules for BaseEqTypeId

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricSPSValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricSPSValidationError is the validation error returned by
// MetricSPS.Validate if the designated constraints aren't met.
type MetricSPSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricSPSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricSPSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricSPSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricSPSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricSPSValidationError) ErrorName() string { return "MetricSPSValidationError" }

// Error satisfies the builtin error interface
func (e MetricSPSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricSPS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricSPSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricSPSValidationError{}

var _MetricSPS_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

// Validate checks the field values on MetricACS with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricACS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricACSValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricACS_Name_Pattern.MatchString(m.GetName()) {
		return MetricACSValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for EqType

	// no validation rules for AttributeName

	// no validation rules for Value

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricACSValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricACSValidationError is the validation error returned by
// MetricACS.Validate if the designated constraints aren't met.
type MetricACSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricACSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricACSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricACSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricACSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricACSValidationError) ErrorName() string { return "MetricACSValidationError" }

// Error satisfies the builtin error interface
func (e MetricACSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricACS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricACSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricACSValidationError{}

var _MetricACS_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

// Validate checks the field values on MetricUNS with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricUNS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricUNSValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricUNS_Name_Pattern.MatchString(m.GetName()) {
		return MetricUNSValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for Profile

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricUNSValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricUNSValidationError is the validation error returned by
// MetricUNS.Validate if the designated constraints aren't met.
type MetricUNSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricUNSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricUNSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricUNSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricUNSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricUNSValidationError) ErrorName() string { return "MetricUNSValidationError" }

// Error satisfies the builtin error interface
func (e MetricUNSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricUNS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricUNSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricUNSValidationError{}

var _MetricUNS_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

// Validate checks the field values on MetricUCS with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricUCS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricUCSValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricUCS_Name_Pattern.MatchString(m.GetName()) {
		return MetricUCSValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for Profile

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricUCSValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricUCSValidationError is the validation error returned by
// MetricUCS.Validate if the designated constraints aren't met.
type MetricUCSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricUCSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricUCSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricUCSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricUCSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricUCSValidationError) ErrorName() string { return "MetricUCSValidationError" }

// Error satisfies the builtin error interface
func (e MetricUCSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricUCS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricUCSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricUCSValidationError{}

var _MetricUCS_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

// Validate checks the field values on ListMetricRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListMetricRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListMetricRequest_Scopes_Pattern.MatchString(item) {
			return ListMetricRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListMetricRequestValidationError is the validation error returned by
// ListMetricRequest.Validate if the designated constraints aren't met.
type ListMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricRequestValidationError) ErrorName() string {
	return "ListMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricRequestValidationError{}

var _ListMetricRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetrices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListMetricResponseValidationError{
					field:  fmt.Sprintf("Metrices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMetricResponseValidationError is the validation error returned by
// ListMetricResponse.Validate if the designated constraints aren't met.
type ListMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricResponseValidationError) ErrorName() string {
	return "ListMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricResponseValidationError{}

// Validate checks the field values on Metric with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metric) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Default

	return nil
}

// MetricValidationError is the validation error returned by Metric.Validate if
// the designated constraints aren't met.
type MetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricValidationError) ErrorName() string { return "MetricValidationError" }

// Error satisfies the builtin error interface
func (e MetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricValidationError{}

// Validate checks the field values on ListMetricTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMetricTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListMetricTypeRequest_Scopes_Pattern.MatchString(item) {
			return ListMetricTypeRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListMetricTypeRequestValidationError is the validation error returned by
// ListMetricTypeRequest.Validate if the designated constraints aren't met.
type ListMetricTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricTypeRequestValidationError) ErrorName() string {
	return "ListMetricTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricTypeRequestValidationError{}

var _ListMetricTypeRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListMetricTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMetricTypeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListMetricTypeResponseValidationError{
					field:  fmt.Sprintf("Types[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMetricTypeResponseValidationError is the validation error returned by
// ListMetricTypeResponse.Validate if the designated constraints aren't met.
type ListMetricTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricTypeResponseValidationError) ErrorName() string {
	return "ListMetricTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricTypeResponseValidationError{}

// Validate checks the field values on MetricType with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Href

	// no validation rules for TypeId

	return nil
}

// MetricTypeValidationError is the validation error returned by
// MetricType.Validate if the designated constraints aren't met.
type MetricTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricTypeValidationError) ErrorName() string { return "MetricTypeValidationError" }

// Error satisfies the builtin error interface
func (e MetricTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricTypeValidationError{}

// Validate checks the field values on MetricOPS with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricOPS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricOPSValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricOPS_Name_Pattern.MatchString(m.GetName()) {
		return MetricOPSValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for NumCoreAttrId

	// no validation rules for NumCPUAttrId

	// no validation rules for CoreFactorAttrId

	// no validation rules for StartEqTypeId

	// no validation rules for BaseEqTypeId

	// no validation rules for AggerateLevelEqTypeId

	// no validation rules for EndEqTypeId

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricOPSValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricOPSValidationError is the validation error returned by
// MetricOPS.Validate if the designated constraints aren't met.
type MetricOPSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricOPSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricOPSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricOPSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricOPSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricOPSValidationError) ErrorName() string { return "MetricOPSValidationError" }

// Error satisfies the builtin error interface
func (e MetricOPSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricOPS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricOPSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricOPSValidationError{}

var _MetricOPS_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

// Validate checks the field values on MetricNUP with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricNUP) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return MetricNUPValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricNUP_Name_Pattern.MatchString(m.GetName()) {
		return MetricNUPValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for NumCoreAttrId

	// no validation rules for NumCPUAttrId

	// no validation rules for CoreFactorAttrId

	// no validation rules for StartEqTypeId

	// no validation rules for BaseEqTypeId

	// no validation rules for AggerateLevelEqTypeId

	// no validation rules for EndEqTypeId

	if m.GetNumberOfUsers() <= 0 {
		return MetricNUPValidationError{
			field:  "NumberOfUsers",
			reason: "value must be greater than 0",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricNUPValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	// no validation rules for Transform

	// no validation rules for TransformMetricName

	return nil
}

// MetricNUPValidationError is the validation error returned by
// MetricNUP.Validate if the designated constraints aren't met.
type MetricNUPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricNUPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricNUPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricNUPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricNUPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricNUPValidationError) ErrorName() string { return "MetricNUPValidationError" }

// Error satisfies the builtin error interface
func (e MetricNUPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricNUP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricNUPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricNUPValidationError{}

var _MetricNUP_Name_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")

// Validate checks the field values on ScopeFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ScopeFilter) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ScopeFilterValidationError is the validation error returned by
// ScopeFilter.Validate if the designated constraints aren't met.
type ScopeFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeFilterValidationError) ErrorName() string { return "ScopeFilterValidationError" }

// Error satisfies the builtin error interface
func (e ScopeFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeFilterValidationError{}

// Validate checks the field values on AggregationFilter with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AggregationFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NotForMetric

	return nil
}

// AggregationFilterValidationError is the validation error returned by
// AggregationFilter.Validate if the designated constraints aren't met.
type AggregationFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationFilterValidationError) ErrorName() string {
	return "AggregationFilterValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationFilterValidationError{}

// Validate checks the field values on StringFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilteringOrder

	// no validation rules for Filteringkey

	// no validation rules for FilterType

	return nil
}

// StringFilterValidationError is the validation error returned by
// StringFilter.Validate if the designated constraints aren't met.
type StringFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFilterValidationError) ErrorName() string { return "StringFilterValidationError" }

// Error satisfies the builtin error interface
func (e StringFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFilterValidationError{}

// Validate checks the field values on CreateScopeMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateScopeMetricRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateScopeMetricRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return CreateScopeMetricRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// CreateScopeMetricRequestValidationError is the validation error returned by
// CreateScopeMetricRequest.Validate if the designated constraints aren't met.
type CreateScopeMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScopeMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScopeMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScopeMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScopeMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScopeMetricRequestValidationError) ErrorName() string {
	return "CreateScopeMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScopeMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScopeMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScopeMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScopeMetricRequestValidationError{}

var _CreateScopeMetricRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on CreateScopeMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateScopeMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// CreateScopeMetricResponseValidationError is the validation error returned by
// CreateScopeMetricResponse.Validate if the designated constraints aren't met.
type CreateScopeMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScopeMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScopeMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScopeMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScopeMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScopeMetricResponseValidationError) ErrorName() string {
	return "CreateScopeMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScopeMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScopeMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScopeMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScopeMetricResponseValidationError{}

// Validate checks the field values on MetricImportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MetricImportRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_MetricImportRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return MetricImportRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// MetricImportRequestValidationError is the validation error returned by
// MetricImportRequest.Validate if the designated constraints aren't met.
type MetricImportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricImportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricImportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricImportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricImportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricImportRequestValidationError) ErrorName() string {
	return "MetricImportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MetricImportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricImportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricImportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricImportRequestValidationError{}

var _MetricImportRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on MetricImportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MetricImportResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// MetricImportResponseValidationError is the validation error returned by
// MetricImportResponse.Validate if the designated constraints aren't met.
type MetricImportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricImportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricImportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricImportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricImportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricImportResponseValidationError) ErrorName() string {
	return "MetricImportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MetricImportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricImportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricImportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricImportResponseValidationError{}

// Validate checks the field values on MetricScopeSQL with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MetricScopeSQL) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for MetricType

	if utf8.RuneCountInString(m.GetMetricName()) < 1 {
		return MetricScopeSQLValidationError{
			field:  "MetricName",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_MetricScopeSQL_MetricName_Pattern.MatchString(m.GetMetricName()) {
		return MetricScopeSQLValidationError{
			field:  "MetricName",
			reason: "value does not match regex pattern \"[.-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for Reference

	// no validation rules for Core

	// no validation rules for CPU

	// no validation rules for Default

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return MetricScopeSQLValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// MetricScopeSQLValidationError is the validation error returned by
// MetricScopeSQL.Validate if the designated constraints aren't met.
type MetricScopeSQLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricScopeSQLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricScopeSQLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricScopeSQLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricScopeSQLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricScopeSQLValidationError) ErrorName() string { return "MetricScopeSQLValidationError" }

// Error satisfies the builtin error interface
func (e MetricScopeSQLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricScopeSQL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricScopeSQLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricScopeSQLValidationError{}

var _MetricScopeSQL_MetricName_Pattern = regexp.MustCompile("[.-_A-Za-z0-9]+$")
