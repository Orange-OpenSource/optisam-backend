// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DpsServiceClient is the client API for DpsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DpsServiceClient interface {
	StoreCoreFactorReference(ctx context.Context, in *StoreReferenceDataRequest, opts ...grpc.CallOption) (*StoreReferenceDataResponse, error)
	GetAnalysisFileInfo(ctx context.Context, in *GetAnalysisFileInfoRequest, opts ...grpc.CallOption) (*GetAnalysisFileInfoResponse, error)
	ViewFactorReference(ctx context.Context, in *ViewReferenceDataRequest, opts ...grpc.CallOption) (*ViewReferenceDataResponse, error)
	ViewCoreFactorLogs(ctx context.Context, in *ViewCoreFactorLogsRequest, opts ...grpc.CallOption) (*ViewCoreFactorLogsResponse, error)
	DataAnalysis(ctx context.Context, in *DataAnalysisRequest, opts ...grpc.CallOption) (*DataAnalysisResponse, error)
	NotifyUpload(ctx context.Context, in *NotifyUploadRequest, opts ...grpc.CallOption) (*NotifyUploadResponse, error)
	DashboardQualityOverview(ctx context.Context, in *DashboardQualityOverviewRequest, opts ...grpc.CallOption) (*DashboardQualityOverviewResponse, error)
	ListUploadData(ctx context.Context, in *ListUploadRequest, opts ...grpc.CallOption) (*ListUploadResponse, error)
	ListUploadMetaData(ctx context.Context, in *ListUploadRequest, opts ...grpc.CallOption) (*ListUploadResponse, error)
	ListUploadGlobalData(ctx context.Context, in *ListUploadRequest, opts ...grpc.CallOption) (*ListUploadResponse, error)
	ListFailedRecord(ctx context.Context, in *ListFailedRequest, opts ...grpc.CallOption) (*ListFailedResponse, error)
	DeleteInventory(ctx context.Context, in *DeleteInventoryRequest, opts ...grpc.CallOption) (*DeleteInventoryResponse, error)
	DropUploadedFileData(ctx context.Context, in *DropUploadedFileDataRequest, opts ...grpc.CallOption) (*DropUploadedFileDataResponse, error)
	ListDeletionRecords(ctx context.Context, in *ListDeletionRequest, opts ...grpc.CallOption) (*ListDeletionResponse, error)
}

type dpsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpsServiceClient(cc grpc.ClientConnInterface) DpsServiceClient {
	return &dpsServiceClient{cc}
}

func (c *dpsServiceClient) StoreCoreFactorReference(ctx context.Context, in *StoreReferenceDataRequest, opts ...grpc.CallOption) (*StoreReferenceDataResponse, error) {
	out := new(StoreReferenceDataResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/StoreCoreFactorReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) GetAnalysisFileInfo(ctx context.Context, in *GetAnalysisFileInfoRequest, opts ...grpc.CallOption) (*GetAnalysisFileInfoResponse, error) {
	out := new(GetAnalysisFileInfoResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/GetAnalysisFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) ViewFactorReference(ctx context.Context, in *ViewReferenceDataRequest, opts ...grpc.CallOption) (*ViewReferenceDataResponse, error) {
	out := new(ViewReferenceDataResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/ViewFactorReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) ViewCoreFactorLogs(ctx context.Context, in *ViewCoreFactorLogsRequest, opts ...grpc.CallOption) (*ViewCoreFactorLogsResponse, error) {
	out := new(ViewCoreFactorLogsResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/ViewCoreFactorLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) DataAnalysis(ctx context.Context, in *DataAnalysisRequest, opts ...grpc.CallOption) (*DataAnalysisResponse, error) {
	out := new(DataAnalysisResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/DataAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) NotifyUpload(ctx context.Context, in *NotifyUploadRequest, opts ...grpc.CallOption) (*NotifyUploadResponse, error) {
	out := new(NotifyUploadResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/NotifyUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) DashboardQualityOverview(ctx context.Context, in *DashboardQualityOverviewRequest, opts ...grpc.CallOption) (*DashboardQualityOverviewResponse, error) {
	out := new(DashboardQualityOverviewResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/DashboardQualityOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) ListUploadData(ctx context.Context, in *ListUploadRequest, opts ...grpc.CallOption) (*ListUploadResponse, error) {
	out := new(ListUploadResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/ListUploadData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) ListUploadMetaData(ctx context.Context, in *ListUploadRequest, opts ...grpc.CallOption) (*ListUploadResponse, error) {
	out := new(ListUploadResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/ListUploadMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) ListUploadGlobalData(ctx context.Context, in *ListUploadRequest, opts ...grpc.CallOption) (*ListUploadResponse, error) {
	out := new(ListUploadResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/ListUploadGlobalData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) ListFailedRecord(ctx context.Context, in *ListFailedRequest, opts ...grpc.CallOption) (*ListFailedResponse, error) {
	out := new(ListFailedResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/ListFailedRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) DeleteInventory(ctx context.Context, in *DeleteInventoryRequest, opts ...grpc.CallOption) (*DeleteInventoryResponse, error) {
	out := new(DeleteInventoryResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/DeleteInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) DropUploadedFileData(ctx context.Context, in *DropUploadedFileDataRequest, opts ...grpc.CallOption) (*DropUploadedFileDataResponse, error) {
	out := new(DropUploadedFileDataResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/DropUploadedFileData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpsServiceClient) ListDeletionRecords(ctx context.Context, in *ListDeletionRequest, opts ...grpc.CallOption) (*ListDeletionResponse, error) {
	out := new(ListDeletionResponse)
	err := c.cc.Invoke(ctx, "/optisam.dps.v1.DpsService/ListDeletionRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpsServiceServer is the server API for DpsService service.
// All implementations should embed UnimplementedDpsServiceServer
// for forward compatibility
type DpsServiceServer interface {
	StoreCoreFactorReference(context.Context, *StoreReferenceDataRequest) (*StoreReferenceDataResponse, error)
	GetAnalysisFileInfo(context.Context, *GetAnalysisFileInfoRequest) (*GetAnalysisFileInfoResponse, error)
	ViewFactorReference(context.Context, *ViewReferenceDataRequest) (*ViewReferenceDataResponse, error)
	ViewCoreFactorLogs(context.Context, *ViewCoreFactorLogsRequest) (*ViewCoreFactorLogsResponse, error)
	DataAnalysis(context.Context, *DataAnalysisRequest) (*DataAnalysisResponse, error)
	NotifyUpload(context.Context, *NotifyUploadRequest) (*NotifyUploadResponse, error)
	DashboardQualityOverview(context.Context, *DashboardQualityOverviewRequest) (*DashboardQualityOverviewResponse, error)
	ListUploadData(context.Context, *ListUploadRequest) (*ListUploadResponse, error)
	ListUploadMetaData(context.Context, *ListUploadRequest) (*ListUploadResponse, error)
	ListUploadGlobalData(context.Context, *ListUploadRequest) (*ListUploadResponse, error)
	ListFailedRecord(context.Context, *ListFailedRequest) (*ListFailedResponse, error)
	DeleteInventory(context.Context, *DeleteInventoryRequest) (*DeleteInventoryResponse, error)
	DropUploadedFileData(context.Context, *DropUploadedFileDataRequest) (*DropUploadedFileDataResponse, error)
	ListDeletionRecords(context.Context, *ListDeletionRequest) (*ListDeletionResponse, error)
}

// UnimplementedDpsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDpsServiceServer struct {
}

func (UnimplementedDpsServiceServer) StoreCoreFactorReference(context.Context, *StoreReferenceDataRequest) (*StoreReferenceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreCoreFactorReference not implemented")
}
func (UnimplementedDpsServiceServer) GetAnalysisFileInfo(context.Context, *GetAnalysisFileInfoRequest) (*GetAnalysisFileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysisFileInfo not implemented")
}
func (UnimplementedDpsServiceServer) ViewFactorReference(context.Context, *ViewReferenceDataRequest) (*ViewReferenceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewFactorReference not implemented")
}
func (UnimplementedDpsServiceServer) ViewCoreFactorLogs(context.Context, *ViewCoreFactorLogsRequest) (*ViewCoreFactorLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewCoreFactorLogs not implemented")
}
func (UnimplementedDpsServiceServer) DataAnalysis(context.Context, *DataAnalysisRequest) (*DataAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataAnalysis not implemented")
}
func (UnimplementedDpsServiceServer) NotifyUpload(context.Context, *NotifyUploadRequest) (*NotifyUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUpload not implemented")
}
func (UnimplementedDpsServiceServer) DashboardQualityOverview(context.Context, *DashboardQualityOverviewRequest) (*DashboardQualityOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardQualityOverview not implemented")
}
func (UnimplementedDpsServiceServer) ListUploadData(context.Context, *ListUploadRequest) (*ListUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUploadData not implemented")
}
func (UnimplementedDpsServiceServer) ListUploadMetaData(context.Context, *ListUploadRequest) (*ListUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUploadMetaData not implemented")
}
func (UnimplementedDpsServiceServer) ListUploadGlobalData(context.Context, *ListUploadRequest) (*ListUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUploadGlobalData not implemented")
}
func (UnimplementedDpsServiceServer) ListFailedRecord(context.Context, *ListFailedRequest) (*ListFailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFailedRecord not implemented")
}
func (UnimplementedDpsServiceServer) DeleteInventory(context.Context, *DeleteInventoryRequest) (*DeleteInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInventory not implemented")
}
func (UnimplementedDpsServiceServer) DropUploadedFileData(context.Context, *DropUploadedFileDataRequest) (*DropUploadedFileDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropUploadedFileData not implemented")
}
func (UnimplementedDpsServiceServer) ListDeletionRecords(context.Context, *ListDeletionRequest) (*ListDeletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeletionRecords not implemented")
}

// UnsafeDpsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpsServiceServer will
// result in compilation errors.
type UnsafeDpsServiceServer interface {
	mustEmbedUnimplementedDpsServiceServer()
}

func RegisterDpsServiceServer(s grpc.ServiceRegistrar, srv DpsServiceServer) {
	s.RegisterService(&_DpsService_serviceDesc, srv)
}

func _DpsService_StoreCoreFactorReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreReferenceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).StoreCoreFactorReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/StoreCoreFactorReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).StoreCoreFactorReference(ctx, req.(*StoreReferenceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_GetAnalysisFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).GetAnalysisFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/GetAnalysisFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).GetAnalysisFileInfo(ctx, req.(*GetAnalysisFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_ViewFactorReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewReferenceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).ViewFactorReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/ViewFactorReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).ViewFactorReference(ctx, req.(*ViewReferenceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_ViewCoreFactorLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewCoreFactorLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).ViewCoreFactorLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/ViewCoreFactorLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).ViewCoreFactorLogs(ctx, req.(*ViewCoreFactorLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_DataAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).DataAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/DataAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).DataAnalysis(ctx, req.(*DataAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_NotifyUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).NotifyUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/NotifyUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).NotifyUpload(ctx, req.(*NotifyUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_DashboardQualityOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardQualityOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).DashboardQualityOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/DashboardQualityOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).DashboardQualityOverview(ctx, req.(*DashboardQualityOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_ListUploadData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).ListUploadData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/ListUploadData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).ListUploadData(ctx, req.(*ListUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_ListUploadMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).ListUploadMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/ListUploadMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).ListUploadMetaData(ctx, req.(*ListUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_ListUploadGlobalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).ListUploadGlobalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/ListUploadGlobalData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).ListUploadGlobalData(ctx, req.(*ListUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_ListFailedRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).ListFailedRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/ListFailedRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).ListFailedRecord(ctx, req.(*ListFailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_DeleteInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).DeleteInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/DeleteInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).DeleteInventory(ctx, req.(*DeleteInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_DropUploadedFileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropUploadedFileDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).DropUploadedFileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/DropUploadedFileData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).DropUploadedFileData(ctx, req.(*DropUploadedFileDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpsService_ListDeletionRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpsServiceServer).ListDeletionRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.dps.v1.DpsService/ListDeletionRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpsServiceServer).ListDeletionRecords(ctx, req.(*ListDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DpsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "optisam.dps.v1.DpsService",
	HandlerType: (*DpsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreCoreFactorReference",
			Handler:    _DpsService_StoreCoreFactorReference_Handler,
		},
		{
			MethodName: "GetAnalysisFileInfo",
			Handler:    _DpsService_GetAnalysisFileInfo_Handler,
		},
		{
			MethodName: "ViewFactorReference",
			Handler:    _DpsService_ViewFactorReference_Handler,
		},
		{
			MethodName: "ViewCoreFactorLogs",
			Handler:    _DpsService_ViewCoreFactorLogs_Handler,
		},
		{
			MethodName: "DataAnalysis",
			Handler:    _DpsService_DataAnalysis_Handler,
		},
		{
			MethodName: "NotifyUpload",
			Handler:    _DpsService_NotifyUpload_Handler,
		},
		{
			MethodName: "DashboardQualityOverview",
			Handler:    _DpsService_DashboardQualityOverview_Handler,
		},
		{
			MethodName: "ListUploadData",
			Handler:    _DpsService_ListUploadData_Handler,
		},
		{
			MethodName: "ListUploadMetaData",
			Handler:    _DpsService_ListUploadMetaData_Handler,
		},
		{
			MethodName: "ListUploadGlobalData",
			Handler:    _DpsService_ListUploadGlobalData_Handler,
		},
		{
			MethodName: "ListFailedRecord",
			Handler:    _DpsService_ListFailedRecord_Handler,
		},
		{
			MethodName: "DeleteInventory",
			Handler:    _DpsService_DeleteInventory_Handler,
		},
		{
			MethodName: "DropUploadedFileData",
			Handler:    _DpsService_DropUploadedFileData_Handler,
		},
		{
			MethodName: "ListDeletionRecords",
			Handler:    _DpsService_ListDeletionRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dps.proto",
}
