// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/api/v1/dps_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "gitlab.tech.orange/optisam/optisam-it/optisam-services/dps-service/pkg/api/v1"
	grpc "google.golang.org/grpc"
)

// MockDpsServiceClient is a mock of DpsServiceClient interface.
type MockDpsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDpsServiceClientMockRecorder
}

// MockDpsServiceClientMockRecorder is the mock recorder for MockDpsServiceClient.
type MockDpsServiceClientMockRecorder struct {
	mock *MockDpsServiceClient
}

// NewMockDpsServiceClient creates a new mock instance.
func NewMockDpsServiceClient(ctrl *gomock.Controller) *MockDpsServiceClient {
	mock := &MockDpsServiceClient{ctrl: ctrl}
	mock.recorder = &MockDpsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDpsServiceClient) EXPECT() *MockDpsServiceClientMockRecorder {
	return m.recorder
}

// CancelUpload mocks base method.
func (m *MockDpsServiceClient) CancelUpload(ctx context.Context, in *v1.CancelUploadRequest, opts ...grpc.CallOption) (*v1.CancelUploadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelUpload", varargs...)
	ret0, _ := ret[0].(*v1.CancelUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelUpload indicates an expected call of CancelUpload.
func (mr *MockDpsServiceClientMockRecorder) CancelUpload(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelUpload", reflect.TypeOf((*MockDpsServiceClient)(nil).CancelUpload), varargs...)
}

// DashboardQualityOverview mocks base method.
func (m *MockDpsServiceClient) DashboardQualityOverview(ctx context.Context, in *v1.DashboardQualityOverviewRequest, opts ...grpc.CallOption) (*v1.DashboardQualityOverviewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DashboardQualityOverview", varargs...)
	ret0, _ := ret[0].(*v1.DashboardQualityOverviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardQualityOverview indicates an expected call of DashboardQualityOverview.
func (mr *MockDpsServiceClientMockRecorder) DashboardQualityOverview(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardQualityOverview", reflect.TypeOf((*MockDpsServiceClient)(nil).DashboardQualityOverview), varargs...)
}

// DataAnalysis mocks base method.
func (m *MockDpsServiceClient) DataAnalysis(ctx context.Context, in *v1.DataAnalysisRequest, opts ...grpc.CallOption) (*v1.DataAnalysisResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DataAnalysis", varargs...)
	ret0, _ := ret[0].(*v1.DataAnalysisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataAnalysis indicates an expected call of DataAnalysis.
func (mr *MockDpsServiceClientMockRecorder) DataAnalysis(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataAnalysis", reflect.TypeOf((*MockDpsServiceClient)(nil).DataAnalysis), varargs...)
}

// DeleteInventory mocks base method.
func (m *MockDpsServiceClient) DeleteInventory(ctx context.Context, in *v1.DeleteInventoryRequest, opts ...grpc.CallOption) (*v1.DeleteInventoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInventory", varargs...)
	ret0, _ := ret[0].(*v1.DeleteInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInventory indicates an expected call of DeleteInventory.
func (mr *MockDpsServiceClientMockRecorder) DeleteInventory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInventory", reflect.TypeOf((*MockDpsServiceClient)(nil).DeleteInventory), varargs...)
}

// DropUploadedFileData mocks base method.
func (m *MockDpsServiceClient) DropUploadedFileData(ctx context.Context, in *v1.DropUploadedFileDataRequest, opts ...grpc.CallOption) (*v1.DropUploadedFileDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropUploadedFileData", varargs...)
	ret0, _ := ret[0].(*v1.DropUploadedFileDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropUploadedFileData indicates an expected call of DropUploadedFileData.
func (mr *MockDpsServiceClientMockRecorder) DropUploadedFileData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropUploadedFileData", reflect.TypeOf((*MockDpsServiceClient)(nil).DropUploadedFileData), varargs...)
}

// GetAllocMetricDetails mocks base method.
func (m *MockDpsServiceClient) GetAllocMetricDetails(ctx context.Context, in *v1.GetAllocMetricDetailsRequest, opts ...grpc.CallOption) (*v1.GetAllocMetricDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllocMetricDetails", varargs...)
	ret0, _ := ret[0].(*v1.GetAllocMetricDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllocMetricDetails indicates an expected call of GetAllocMetricDetails.
func (mr *MockDpsServiceClientMockRecorder) GetAllocMetricDetails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllocMetricDetails", reflect.TypeOf((*MockDpsServiceClient)(nil).GetAllocMetricDetails), varargs...)
}

// GetAnalysisFileInfo mocks base method.
func (m *MockDpsServiceClient) GetAnalysisFileInfo(ctx context.Context, in *v1.GetAnalysisFileInfoRequest, opts ...grpc.CallOption) (*v1.GetAnalysisFileInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAnalysisFileInfo", varargs...)
	ret0, _ := ret[0].(*v1.GetAnalysisFileInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalysisFileInfo indicates an expected call of GetAnalysisFileInfo.
func (mr *MockDpsServiceClientMockRecorder) GetAnalysisFileInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalysisFileInfo", reflect.TypeOf((*MockDpsServiceClient)(nil).GetAnalysisFileInfo), varargs...)
}

// ListDeletionRecords mocks base method.
func (m *MockDpsServiceClient) ListDeletionRecords(ctx context.Context, in *v1.ListDeletionRequest, opts ...grpc.CallOption) (*v1.ListDeletionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeletionRecords", varargs...)
	ret0, _ := ret[0].(*v1.ListDeletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeletionRecords indicates an expected call of ListDeletionRecords.
func (mr *MockDpsServiceClientMockRecorder) ListDeletionRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeletionRecords", reflect.TypeOf((*MockDpsServiceClient)(nil).ListDeletionRecords), varargs...)
}

// ListFailedRecord mocks base method.
func (m *MockDpsServiceClient) ListFailedRecord(ctx context.Context, in *v1.ListFailedRequest, opts ...grpc.CallOption) (*v1.ListFailedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFailedRecord", varargs...)
	ret0, _ := ret[0].(*v1.ListFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailedRecord indicates an expected call of ListFailedRecord.
func (mr *MockDpsServiceClientMockRecorder) ListFailedRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedRecord", reflect.TypeOf((*MockDpsServiceClient)(nil).ListFailedRecord), varargs...)
}

// ListUploadData mocks base method.
func (m *MockDpsServiceClient) ListUploadData(ctx context.Context, in *v1.ListUploadRequest, opts ...grpc.CallOption) (*v1.ListUploadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUploadData", varargs...)
	ret0, _ := ret[0].(*v1.ListUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUploadData indicates an expected call of ListUploadData.
func (mr *MockDpsServiceClientMockRecorder) ListUploadData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUploadData", reflect.TypeOf((*MockDpsServiceClient)(nil).ListUploadData), varargs...)
}

// ListUploadGlobalData mocks base method.
func (m *MockDpsServiceClient) ListUploadGlobalData(ctx context.Context, in *v1.ListUploadRequest, opts ...grpc.CallOption) (*v1.ListUploadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUploadGlobalData", varargs...)
	ret0, _ := ret[0].(*v1.ListUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUploadGlobalData indicates an expected call of ListUploadGlobalData.
func (mr *MockDpsServiceClientMockRecorder) ListUploadGlobalData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUploadGlobalData", reflect.TypeOf((*MockDpsServiceClient)(nil).ListUploadGlobalData), varargs...)
}

// ListUploadMetaData mocks base method.
func (m *MockDpsServiceClient) ListUploadMetaData(ctx context.Context, in *v1.ListUploadRequest, opts ...grpc.CallOption) (*v1.ListUploadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUploadMetaData", varargs...)
	ret0, _ := ret[0].(*v1.ListUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUploadMetaData indicates an expected call of ListUploadMetaData.
func (mr *MockDpsServiceClientMockRecorder) ListUploadMetaData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUploadMetaData", reflect.TypeOf((*MockDpsServiceClient)(nil).ListUploadMetaData), varargs...)
}

// NotifyUpload mocks base method.
func (m *MockDpsServiceClient) NotifyUpload(ctx context.Context, in *v1.NotifyUploadRequest, opts ...grpc.CallOption) (*v1.NotifyUploadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotifyUpload", varargs...)
	ret0, _ := ret[0].(*v1.NotifyUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyUpload indicates an expected call of NotifyUpload.
func (mr *MockDpsServiceClientMockRecorder) NotifyUpload(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUpload", reflect.TypeOf((*MockDpsServiceClient)(nil).NotifyUpload), varargs...)
}

// StoreCoreFactorReference mocks base method.
func (m *MockDpsServiceClient) StoreCoreFactorReference(ctx context.Context, in *v1.StoreReferenceDataRequest, opts ...grpc.CallOption) (*v1.StoreReferenceDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreCoreFactorReference", varargs...)
	ret0, _ := ret[0].(*v1.StoreReferenceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCoreFactorReference indicates an expected call of StoreCoreFactorReference.
func (mr *MockDpsServiceClientMockRecorder) StoreCoreFactorReference(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCoreFactorReference", reflect.TypeOf((*MockDpsServiceClient)(nil).StoreCoreFactorReference), varargs...)
}

// ViewCoreFactorLogs mocks base method.
func (m *MockDpsServiceClient) ViewCoreFactorLogs(ctx context.Context, in *v1.ViewCoreFactorLogsRequest, opts ...grpc.CallOption) (*v1.ViewCoreFactorLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ViewCoreFactorLogs", varargs...)
	ret0, _ := ret[0].(*v1.ViewCoreFactorLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCoreFactorLogs indicates an expected call of ViewCoreFactorLogs.
func (mr *MockDpsServiceClientMockRecorder) ViewCoreFactorLogs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCoreFactorLogs", reflect.TypeOf((*MockDpsServiceClient)(nil).ViewCoreFactorLogs), varargs...)
}

// ViewFactorReference mocks base method.
func (m *MockDpsServiceClient) ViewFactorReference(ctx context.Context, in *v1.ViewReferenceDataRequest, opts ...grpc.CallOption) (*v1.ViewReferenceDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ViewFactorReference", varargs...)
	ret0, _ := ret[0].(*v1.ViewReferenceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewFactorReference indicates an expected call of ViewFactorReference.
func (mr *MockDpsServiceClientMockRecorder) ViewFactorReference(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewFactorReference", reflect.TypeOf((*MockDpsServiceClient)(nil).ViewFactorReference), varargs...)
}

// MockDpsServiceServer is a mock of DpsServiceServer interface.
type MockDpsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDpsServiceServerMockRecorder
}

// MockDpsServiceServerMockRecorder is the mock recorder for MockDpsServiceServer.
type MockDpsServiceServerMockRecorder struct {
	mock *MockDpsServiceServer
}

// NewMockDpsServiceServer creates a new mock instance.
func NewMockDpsServiceServer(ctrl *gomock.Controller) *MockDpsServiceServer {
	mock := &MockDpsServiceServer{ctrl: ctrl}
	mock.recorder = &MockDpsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDpsServiceServer) EXPECT() *MockDpsServiceServerMockRecorder {
	return m.recorder
}

// CancelUpload mocks base method.
func (m *MockDpsServiceServer) CancelUpload(arg0 context.Context, arg1 *v1.CancelUploadRequest) (*v1.CancelUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelUpload", arg0, arg1)
	ret0, _ := ret[0].(*v1.CancelUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelUpload indicates an expected call of CancelUpload.
func (mr *MockDpsServiceServerMockRecorder) CancelUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelUpload", reflect.TypeOf((*MockDpsServiceServer)(nil).CancelUpload), arg0, arg1)
}

// DashboardQualityOverview mocks base method.
func (m *MockDpsServiceServer) DashboardQualityOverview(arg0 context.Context, arg1 *v1.DashboardQualityOverviewRequest) (*v1.DashboardQualityOverviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardQualityOverview", arg0, arg1)
	ret0, _ := ret[0].(*v1.DashboardQualityOverviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardQualityOverview indicates an expected call of DashboardQualityOverview.
func (mr *MockDpsServiceServerMockRecorder) DashboardQualityOverview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardQualityOverview", reflect.TypeOf((*MockDpsServiceServer)(nil).DashboardQualityOverview), arg0, arg1)
}

// DataAnalysis mocks base method.
func (m *MockDpsServiceServer) DataAnalysis(arg0 context.Context, arg1 *v1.DataAnalysisRequest) (*v1.DataAnalysisResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataAnalysis", arg0, arg1)
	ret0, _ := ret[0].(*v1.DataAnalysisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataAnalysis indicates an expected call of DataAnalysis.
func (mr *MockDpsServiceServerMockRecorder) DataAnalysis(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataAnalysis", reflect.TypeOf((*MockDpsServiceServer)(nil).DataAnalysis), arg0, arg1)
}

// DeleteInventory mocks base method.
func (m *MockDpsServiceServer) DeleteInventory(arg0 context.Context, arg1 *v1.DeleteInventoryRequest) (*v1.DeleteInventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInventory", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInventory indicates an expected call of DeleteInventory.
func (mr *MockDpsServiceServerMockRecorder) DeleteInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInventory", reflect.TypeOf((*MockDpsServiceServer)(nil).DeleteInventory), arg0, arg1)
}

// DropUploadedFileData mocks base method.
func (m *MockDpsServiceServer) DropUploadedFileData(arg0 context.Context, arg1 *v1.DropUploadedFileDataRequest) (*v1.DropUploadedFileDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropUploadedFileData", arg0, arg1)
	ret0, _ := ret[0].(*v1.DropUploadedFileDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropUploadedFileData indicates an expected call of DropUploadedFileData.
func (mr *MockDpsServiceServerMockRecorder) DropUploadedFileData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropUploadedFileData", reflect.TypeOf((*MockDpsServiceServer)(nil).DropUploadedFileData), arg0, arg1)
}

// GetAllocMetricDetails mocks base method.
func (m *MockDpsServiceServer) GetAllocMetricDetails(arg0 context.Context, arg1 *v1.GetAllocMetricDetailsRequest) (*v1.GetAllocMetricDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllocMetricDetails", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetAllocMetricDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllocMetricDetails indicates an expected call of GetAllocMetricDetails.
func (mr *MockDpsServiceServerMockRecorder) GetAllocMetricDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllocMetricDetails", reflect.TypeOf((*MockDpsServiceServer)(nil).GetAllocMetricDetails), arg0, arg1)
}

// GetAnalysisFileInfo mocks base method.
func (m *MockDpsServiceServer) GetAnalysisFileInfo(arg0 context.Context, arg1 *v1.GetAnalysisFileInfoRequest) (*v1.GetAnalysisFileInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalysisFileInfo", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetAnalysisFileInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalysisFileInfo indicates an expected call of GetAnalysisFileInfo.
func (mr *MockDpsServiceServerMockRecorder) GetAnalysisFileInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalysisFileInfo", reflect.TypeOf((*MockDpsServiceServer)(nil).GetAnalysisFileInfo), arg0, arg1)
}

// ListDeletionRecords mocks base method.
func (m *MockDpsServiceServer) ListDeletionRecords(arg0 context.Context, arg1 *v1.ListDeletionRequest) (*v1.ListDeletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeletionRecords", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListDeletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeletionRecords indicates an expected call of ListDeletionRecords.
func (mr *MockDpsServiceServerMockRecorder) ListDeletionRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeletionRecords", reflect.TypeOf((*MockDpsServiceServer)(nil).ListDeletionRecords), arg0, arg1)
}

// ListFailedRecord mocks base method.
func (m *MockDpsServiceServer) ListFailedRecord(arg0 context.Context, arg1 *v1.ListFailedRequest) (*v1.ListFailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedRecord", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailedRecord indicates an expected call of ListFailedRecord.
func (mr *MockDpsServiceServerMockRecorder) ListFailedRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedRecord", reflect.TypeOf((*MockDpsServiceServer)(nil).ListFailedRecord), arg0, arg1)
}

// ListUploadData mocks base method.
func (m *MockDpsServiceServer) ListUploadData(arg0 context.Context, arg1 *v1.ListUploadRequest) (*v1.ListUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUploadData", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUploadData indicates an expected call of ListUploadData.
func (mr *MockDpsServiceServerMockRecorder) ListUploadData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUploadData", reflect.TypeOf((*MockDpsServiceServer)(nil).ListUploadData), arg0, arg1)
}

// ListUploadGlobalData mocks base method.
func (m *MockDpsServiceServer) ListUploadGlobalData(arg0 context.Context, arg1 *v1.ListUploadRequest) (*v1.ListUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUploadGlobalData", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUploadGlobalData indicates an expected call of ListUploadGlobalData.
func (mr *MockDpsServiceServerMockRecorder) ListUploadGlobalData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUploadGlobalData", reflect.TypeOf((*MockDpsServiceServer)(nil).ListUploadGlobalData), arg0, arg1)
}

// ListUploadMetaData mocks base method.
func (m *MockDpsServiceServer) ListUploadMetaData(arg0 context.Context, arg1 *v1.ListUploadRequest) (*v1.ListUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUploadMetaData", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUploadMetaData indicates an expected call of ListUploadMetaData.
func (mr *MockDpsServiceServerMockRecorder) ListUploadMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUploadMetaData", reflect.TypeOf((*MockDpsServiceServer)(nil).ListUploadMetaData), arg0, arg1)
}

// NotifyUpload mocks base method.
func (m *MockDpsServiceServer) NotifyUpload(arg0 context.Context, arg1 *v1.NotifyUploadRequest) (*v1.NotifyUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyUpload", arg0, arg1)
	ret0, _ := ret[0].(*v1.NotifyUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyUpload indicates an expected call of NotifyUpload.
func (mr *MockDpsServiceServerMockRecorder) NotifyUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUpload", reflect.TypeOf((*MockDpsServiceServer)(nil).NotifyUpload), arg0, arg1)
}

// StoreCoreFactorReference mocks base method.
func (m *MockDpsServiceServer) StoreCoreFactorReference(arg0 context.Context, arg1 *v1.StoreReferenceDataRequest) (*v1.StoreReferenceDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCoreFactorReference", arg0, arg1)
	ret0, _ := ret[0].(*v1.StoreReferenceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCoreFactorReference indicates an expected call of StoreCoreFactorReference.
func (mr *MockDpsServiceServerMockRecorder) StoreCoreFactorReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCoreFactorReference", reflect.TypeOf((*MockDpsServiceServer)(nil).StoreCoreFactorReference), arg0, arg1)
}

// ViewCoreFactorLogs mocks base method.
func (m *MockDpsServiceServer) ViewCoreFactorLogs(arg0 context.Context, arg1 *v1.ViewCoreFactorLogsRequest) (*v1.ViewCoreFactorLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCoreFactorLogs", arg0, arg1)
	ret0, _ := ret[0].(*v1.ViewCoreFactorLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCoreFactorLogs indicates an expected call of ViewCoreFactorLogs.
func (mr *MockDpsServiceServerMockRecorder) ViewCoreFactorLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCoreFactorLogs", reflect.TypeOf((*MockDpsServiceServer)(nil).ViewCoreFactorLogs), arg0, arg1)
}

// ViewFactorReference mocks base method.
func (m *MockDpsServiceServer) ViewFactorReference(arg0 context.Context, arg1 *v1.ViewReferenceDataRequest) (*v1.ViewReferenceDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewFactorReference", arg0, arg1)
	ret0, _ := ret[0].(*v1.ViewReferenceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewFactorReference indicates an expected call of ViewFactorReference.
func (mr *MockDpsServiceServerMockRecorder) ViewFactorReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewFactorReference", reflect.TypeOf((*MockDpsServiceServer)(nil).ViewFactorReference), arg0, arg1)
}

// MockUnsafeDpsServiceServer is a mock of UnsafeDpsServiceServer interface.
type MockUnsafeDpsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDpsServiceServerMockRecorder
}

// MockUnsafeDpsServiceServerMockRecorder is the mock recorder for MockUnsafeDpsServiceServer.
type MockUnsafeDpsServiceServerMockRecorder struct {
	mock *MockUnsafeDpsServiceServer
}

// NewMockUnsafeDpsServiceServer creates a new mock instance.
func NewMockUnsafeDpsServiceServer(ctrl *gomock.Controller) *MockUnsafeDpsServiceServer {
	mock := &MockUnsafeDpsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDpsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDpsServiceServer) EXPECT() *MockUnsafeDpsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDpsServiceServer mocks base method.
func (m *MockUnsafeDpsServiceServer) mustEmbedUnimplementedDpsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDpsServiceServer")
}

// mustEmbedUnimplementedDpsServiceServer indicates an expected call of mustEmbedUnimplementedDpsServiceServer.
func (mr *MockUnsafeDpsServiceServerMockRecorder) mustEmbedUnimplementedDpsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDpsServiceServer", reflect.TypeOf((*MockUnsafeDpsServiceServer)(nil).mustEmbedUnimplementedDpsServiceServer))
}
