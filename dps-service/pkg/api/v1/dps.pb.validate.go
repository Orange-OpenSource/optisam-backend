// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dps.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _dps_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CancelUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelUploadRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UploadId

	// no validation rules for Scope

	// no validation rules for FileName

	return nil
}

// CancelUploadRequestValidationError is the validation error returned by
// CancelUploadRequest.Validate if the designated constraints aren't met.
type CancelUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelUploadRequestValidationError) ErrorName() string {
	return "CancelUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelUploadRequestValidationError{}

// Validate checks the field values on CancelUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelUploadResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// CancelUploadResponseValidationError is the validation error returned by
// CancelUploadResponse.Validate if the designated constraints aren't met.
type CancelUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelUploadResponseValidationError) ErrorName() string {
	return "CancelUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelUploadResponseValidationError{}

// Validate checks the field values on GetAnalysisFileInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAnalysisFileInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UploadId

	// no validation rules for Scope

	// no validation rules for FileType

	return nil
}

// GetAnalysisFileInfoRequestValidationError is the validation error returned
// by GetAnalysisFileInfoRequest.Validate if the designated constraints aren't met.
type GetAnalysisFileInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnalysisFileInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnalysisFileInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnalysisFileInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnalysisFileInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnalysisFileInfoRequestValidationError) ErrorName() string {
	return "GetAnalysisFileInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnalysisFileInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnalysisFileInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnalysisFileInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnalysisFileInfoRequestValidationError{}

// Validate checks the field values on GetAnalysisFileInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAnalysisFileInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FileName

	// no validation rules for ScopeType

	// no validation rules for IsOlderGeneric

	return nil
}

// GetAnalysisFileInfoResponseValidationError is the validation error returned
// by GetAnalysisFileInfoResponse.Validate if the designated constraints
// aren't met.
type GetAnalysisFileInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnalysisFileInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnalysisFileInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnalysisFileInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnalysisFileInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnalysisFileInfoResponseValidationError) ErrorName() string {
	return "GetAnalysisFileInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnalysisFileInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnalysisFileInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnalysisFileInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnalysisFileInfoResponseValidationError{}

// Validate checks the field values on ViewCoreFactorLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ViewCoreFactorLogsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ViewCoreFactorLogsRequestValidationError is the validation error returned by
// ViewCoreFactorLogsRequest.Validate if the designated constraints aren't met.
type ViewCoreFactorLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewCoreFactorLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewCoreFactorLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewCoreFactorLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewCoreFactorLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewCoreFactorLogsRequestValidationError) ErrorName() string {
	return "ViewCoreFactorLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ViewCoreFactorLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewCoreFactorLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewCoreFactorLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewCoreFactorLogsRequestValidationError{}

// Validate checks the field values on CoreFactorlogs with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CoreFactorlogs) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Filename

	if v, ok := interface{}(m.GetUploadedOn()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CoreFactorlogsValidationError{
				field:  "UploadedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CoreFactorlogsValidationError is the validation error returned by
// CoreFactorlogs.Validate if the designated constraints aren't met.
type CoreFactorlogsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreFactorlogsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreFactorlogsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreFactorlogsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreFactorlogsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreFactorlogsValidationError) ErrorName() string { return "CoreFactorlogsValidationError" }

// Error satisfies the builtin error interface
func (e CoreFactorlogsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreFactorlogs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreFactorlogsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreFactorlogsValidationError{}

// Validate checks the field values on ViewCoreFactorLogsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ViewCoreFactorLogsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCorefactorlogs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ViewCoreFactorLogsResponseValidationError{
					field:  fmt.Sprintf("Corefactorlogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ViewCoreFactorLogsResponseValidationError is the validation error returned
// by ViewCoreFactorLogsResponse.Validate if the designated constraints aren't met.
type ViewCoreFactorLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewCoreFactorLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewCoreFactorLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewCoreFactorLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewCoreFactorLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewCoreFactorLogsResponseValidationError) ErrorName() string {
	return "ViewCoreFactorLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ViewCoreFactorLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewCoreFactorLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewCoreFactorLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewCoreFactorLogsResponseValidationError{}

// Validate checks the field values on CoreFactorReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CoreFactorReference) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Manufacturer

	// no validation rules for Model

	// no validation rules for Corefactor

	return nil
}

// CoreFactorReferenceValidationError is the validation error returned by
// CoreFactorReference.Validate if the designated constraints aren't met.
type CoreFactorReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoreFactorReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoreFactorReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoreFactorReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoreFactorReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoreFactorReferenceValidationError) ErrorName() string {
	return "CoreFactorReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e CoreFactorReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoreFactorReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoreFactorReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoreFactorReferenceValidationError{}

// Validate checks the field values on ViewReferenceDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ViewReferenceDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageNo

	// no validation rules for PageSize

	return nil
}

// ViewReferenceDataRequestValidationError is the validation error returned by
// ViewReferenceDataRequest.Validate if the designated constraints aren't met.
type ViewReferenceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewReferenceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewReferenceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewReferenceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewReferenceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewReferenceDataRequestValidationError) ErrorName() string {
	return "ViewReferenceDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ViewReferenceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewReferenceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewReferenceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewReferenceDataRequestValidationError{}

// Validate checks the field values on ViewReferenceDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ViewReferenceDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetReferences() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ViewReferenceDataResponseValidationError{
					field:  fmt.Sprintf("References[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalRecord

	return nil
}

// ViewReferenceDataResponseValidationError is the validation error returned by
// ViewReferenceDataResponse.Validate if the designated constraints aren't met.
type ViewReferenceDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewReferenceDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewReferenceDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewReferenceDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewReferenceDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewReferenceDataResponseValidationError) ErrorName() string {
	return "ViewReferenceDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ViewReferenceDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewReferenceDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewReferenceDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewReferenceDataResponseValidationError{}

// Validate checks the field values on GetAllocMetricDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllocMetricDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Scope

	return nil
}

// GetAllocMetricDetailsRequestValidationError is the validation error returned
// by GetAllocMetricDetailsRequest.Validate if the designated constraints
// aren't met.
type GetAllocMetricDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllocMetricDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllocMetricDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllocMetricDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllocMetricDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllocMetricDetailsRequestValidationError) ErrorName() string {
	return "GetAllocMetricDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllocMetricDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllocMetricDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllocMetricDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllocMetricDetailsRequestValidationError{}

// Validate checks the field values on GetAllocMetricDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllocMetricDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetAllocMetricDetailsResponseValidationError is the validation error
// returned by GetAllocMetricDetailsResponse.Validate if the designated
// constraints aren't met.
type GetAllocMetricDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllocMetricDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllocMetricDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllocMetricDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllocMetricDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllocMetricDetailsResponseValidationError) ErrorName() string {
	return "GetAllocMetricDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllocMetricDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllocMetricDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllocMetricDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllocMetricDetailsResponseValidationError{}

// Validate checks the field values on StoreReferenceDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StoreReferenceDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReferenceData

	// no validation rules for Filename

	return nil
}

// StoreReferenceDataRequestValidationError is the validation error returned by
// StoreReferenceDataRequest.Validate if the designated constraints aren't met.
type StoreReferenceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreReferenceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreReferenceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreReferenceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreReferenceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreReferenceDataRequestValidationError) ErrorName() string {
	return "StoreReferenceDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StoreReferenceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreReferenceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreReferenceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreReferenceDataRequestValidationError{}

// Validate checks the field values on StoreReferenceDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StoreReferenceDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// StoreReferenceDataResponseValidationError is the validation error returned
// by StoreReferenceDataResponse.Validate if the designated constraints aren't met.
type StoreReferenceDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreReferenceDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreReferenceDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreReferenceDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreReferenceDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreReferenceDataResponseValidationError) ErrorName() string {
	return "StoreReferenceDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StoreReferenceDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreReferenceDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreReferenceDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreReferenceDataResponseValidationError{}

// Validate checks the field values on DataAnalysisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataAnalysisRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	if !_DataAnalysisRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DataAnalysisRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DataAnalysisRequestValidationError is the validation error returned by
// DataAnalysisRequest.Validate if the designated constraints aren't met.
type DataAnalysisRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataAnalysisRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataAnalysisRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataAnalysisRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataAnalysisRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataAnalysisRequestValidationError) ErrorName() string {
	return "DataAnalysisRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DataAnalysisRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataAnalysisRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataAnalysisRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataAnalysisRequestValidationError{}

var _DataAnalysisRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DataAnalysisResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataAnalysisResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Report

	// no validation rules for TargetFile

	// no validation rules for ErrorFile

	// no validation rules for Description

	return nil
}

// DataAnalysisResponseValidationError is the validation error returned by
// DataAnalysisResponse.Validate if the designated constraints aren't met.
type DataAnalysisResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataAnalysisResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataAnalysisResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataAnalysisResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataAnalysisResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataAnalysisResponseValidationError) ErrorName() string {
	return "DataAnalysisResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DataAnalysisResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataAnalysisResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataAnalysisResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataAnalysisResponseValidationError{}

// Validate checks the field values on ListDeletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeletionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListDeletionRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListDeletionRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	if _, ok := ListDeletionRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListDeletionRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := ListDeletionRequest_SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListDeletionRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if !_ListDeletionRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListDeletionRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ListDeletionRequestValidationError is the validation error returned by
// ListDeletionRequest.Validate if the designated constraints aren't met.
type ListDeletionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeletionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeletionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeletionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeletionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeletionRequestValidationError) ErrorName() string {
	return "ListDeletionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeletionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeletionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeletionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeletionRequestValidationError{}

var _ListDeletionRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListDeletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeletionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetDeletions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListDeletionResponseValidationError{
					field:  fmt.Sprintf("Deletions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListDeletionResponseValidationError is the validation error returned by
// ListDeletionResponse.Validate if the designated constraints aren't met.
type ListDeletionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeletionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeletionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeletionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeletionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeletionResponseValidationError) ErrorName() string {
	return "ListDeletionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeletionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeletionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeletionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeletionResponseValidationError{}

// Validate checks the field values on Deletion with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Deletion) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DeletionType

	// no validation rules for CreatedBy

	// no validation rules for Status

	if v, ok := interface{}(m.GetCreatedOn()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return DeletionValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeletionValidationError is the validation error returned by
// Deletion.Validate if the designated constraints aren't met.
type DeletionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletionValidationError) ErrorName() string { return "DeletionValidationError" }

// Error satisfies the builtin error interface
func (e DeletionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletionValidationError{}

// Validate checks the field values on DropUploadedFileDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropUploadedFileDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DropUploadedFileDataRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DropUploadedFileDataRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DropUploadedFileDataRequestValidationError is the validation error returned
// by DropUploadedFileDataRequest.Validate if the designated constraints
// aren't met.
type DropUploadedFileDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropUploadedFileDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropUploadedFileDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropUploadedFileDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropUploadedFileDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropUploadedFileDataRequestValidationError) ErrorName() string {
	return "DropUploadedFileDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropUploadedFileDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropUploadedFileDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropUploadedFileDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropUploadedFileDataRequestValidationError{}

var _DropUploadedFileDataRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DropUploadedFileDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropUploadedFileDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DropUploadedFileDataResponseValidationError is the validation error returned
// by DropUploadedFileDataResponse.Validate if the designated constraints
// aren't met.
type DropUploadedFileDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropUploadedFileDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropUploadedFileDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropUploadedFileDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropUploadedFileDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropUploadedFileDataResponseValidationError) ErrorName() string {
	return "DropUploadedFileDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropUploadedFileDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropUploadedFileDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropUploadedFileDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropUploadedFileDataResponseValidationError{}

// Validate checks the field values on DashboardQualityOverviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DashboardQualityOverviewRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _DashboardQualityOverviewRequest_Frequency_InLookup[m.GetFrequency()]; !ok {
		return DashboardQualityOverviewRequestValidationError{
			field:  "Frequency",
			reason: "value must be in list [0 1]",
		}
	}

	if m.GetNoOfDataPoints() > 12 {
		return DashboardQualityOverviewRequestValidationError{
			field:  "NoOfDataPoints",
			reason: "value must be less than or equal to 12",
		}
	}

	if !_DashboardQualityOverviewRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DashboardQualityOverviewRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DashboardQualityOverviewRequestValidationError is the validation error
// returned by DashboardQualityOverviewRequest.Validate if the designated
// constraints aren't met.
type DashboardQualityOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardQualityOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardQualityOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardQualityOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardQualityOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardQualityOverviewRequestValidationError) ErrorName() string {
	return "DashboardQualityOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardQualityOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardQualityOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardQualityOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardQualityOverviewRequestValidationError{}

var _DashboardQualityOverviewRequest_Frequency_InLookup = map[DashboardQualityOverviewRequest_Frequency]struct{}{
	0: {},
	1: {},
}

var _DashboardQualityOverviewRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DashboardQualityOverviewResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DashboardQualityOverviewResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DashboardQualityOverviewResponseValidationError is the validation error
// returned by DashboardQualityOverviewResponse.Validate if the designated
// constraints aren't met.
type DashboardQualityOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardQualityOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardQualityOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardQualityOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardQualityOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardQualityOverviewResponseValidationError) ErrorName() string {
	return "DashboardQualityOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardQualityOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardQualityOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardQualityOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardQualityOverviewResponseValidationError{}

// Validate checks the field values on NotifyUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotifyUploadRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Scope

	if _, ok := _NotifyUploadRequest_Type_InLookup[m.GetType()]; !ok {
		return NotifyUploadRequestValidationError{
			field:  "Type",
			reason: "value must be in list [data metadata globaldata]",
		}
	}

	// no validation rules for UploadId

	// no validation rules for UploadedBy

	if len(m.GetFiles()) < 1 {
		return NotifyUploadRequestValidationError{
			field:  "Files",
			reason: "value must contain at least 1 item(s)",
		}
	}

	// no validation rules for ScopeType

	// no validation rules for AnalysisId

	return nil
}

// NotifyUploadRequestValidationError is the validation error returned by
// NotifyUploadRequest.Validate if the designated constraints aren't met.
type NotifyUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyUploadRequestValidationError) ErrorName() string {
	return "NotifyUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyUploadRequestValidationError{}

var _NotifyUploadRequest_Type_InLookup = map[string]struct{}{
	"data":       {},
	"metadata":   {},
	"globaldata": {},
}

// Validate checks the field values on NotifyUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotifyUploadResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for FileUploadId

	return nil
}

// NotifyUploadResponseValidationError is the validation error returned by
// NotifyUploadResponse.Validate if the designated constraints aren't met.
type NotifyUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyUploadResponseValidationError) ErrorName() string {
	return "NotifyUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyUploadResponseValidationError{}

// Validate checks the field values on ListFailedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListFailedRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		return ListFailedRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetUploadId() <= 0 {
		return ListFailedRequestValidationError{
			field:  "UploadId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetPageNum() < 1 {
		return ListFailedRequestValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetPageSize() < 1 {
		return ListFailedRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// ListFailedRequestValidationError is the validation error returned by
// ListFailedRequest.Validate if the designated constraints aren't met.
type ListFailedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFailedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFailedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFailedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFailedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFailedRequestValidationError) ErrorName() string {
	return "ListFailedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFailedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFailedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFailedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFailedRequestValidationError{}

// Validate checks the field values on ListFailedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFailedResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFailedRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListFailedResponseValidationError{
					field:  fmt.Sprintf("FailedRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalRecords

	return nil
}

// ListFailedResponseValidationError is the validation error returned by
// ListFailedResponse.Validate if the designated constraints aren't met.
type ListFailedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFailedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFailedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFailedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFailedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFailedResponseValidationError) ErrorName() string {
	return "ListFailedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFailedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFailedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFailedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFailedResponseValidationError{}

// Validate checks the field values on FailedRecord with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FailedRecord) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	// no validation rules for Reason

	return nil
}

// FailedRecordValidationError is the validation error returned by
// FailedRecord.Validate if the designated constraints aren't met.
type FailedRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FailedRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FailedRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FailedRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FailedRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FailedRecordValidationError) ErrorName() string { return "FailedRecordValidationError" }

// Error satisfies the builtin error interface
func (e FailedRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFailedRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FailedRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FailedRecordValidationError{}

// Validate checks the field values on ListUploadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUploadRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListUploadRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListUploadRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	if _, ok := ListUploadRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListUploadRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := ListUploadRequest_SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListUploadRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if !_ListUploadRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListUploadRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if m.GetGlobalFileId() < 0 {
		return ListUploadRequestValidationError{
			field:  "GlobalFileId",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// ListUploadRequestValidationError is the validation error returned by
// ListUploadRequest.Validate if the designated constraints aren't met.
type ListUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUploadRequestValidationError) ErrorName() string {
	return "ListUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUploadRequestValidationError{}

var _ListUploadRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUploadResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetUploads() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListUploadResponseValidationError{
					field:  fmt.Sprintf("Uploads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUploadResponseValidationError is the validation error returned by
// ListUploadResponse.Validate if the designated constraints aren't met.
type ListUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUploadResponseValidationError) ErrorName() string {
	return "ListUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUploadResponseValidationError{}

// Validate checks the field values on Upload with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Upload) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UploadId

	// no validation rules for Scope

	// no validation rules for FileName

	// no validation rules for Status

	// no validation rules for UploadedBy

	if v, ok := interface{}(m.GetUploadedOn()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UploadValidationError{
				field:  "UploadedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalRecords

	// no validation rules for SuccessRecords

	// no validation rules for FailedRecords

	// no validation rules for Comments

	// no validation rules for ErrorFileApi

	return nil
}

// UploadValidationError is the validation error returned by Upload.Validate if
// the designated constraints aren't met.
type UploadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadValidationError) ErrorName() string { return "UploadValidationError" }

// Error satisfies the builtin error interface
func (e UploadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadValidationError{}

// Validate checks the field values on DeleteInventoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteInventoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteInventoryRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DeleteInventoryRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if _, ok := _DeleteInventoryRequest_DeletionType_InLookup[m.GetDeletionType()]; !ok {
		return DeleteInventoryRequestValidationError{
			field:  "DeletionType",
			reason: "value must be in list [0 1 2]",
		}
	}

	return nil
}

// DeleteInventoryRequestValidationError is the validation error returned by
// DeleteInventoryRequest.Validate if the designated constraints aren't met.
type DeleteInventoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInventoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInventoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInventoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInventoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInventoryRequestValidationError) ErrorName() string {
	return "DeleteInventoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInventoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInventoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInventoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInventoryRequestValidationError{}

var _DeleteInventoryRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

var _DeleteInventoryRequest_DeletionType_InLookup = map[DeleteInventoryRequestDeletionTypes]struct{}{
	0: {},
	1: {},
	2: {},
}

// Validate checks the field values on DeleteInventoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteInventoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteInventoryResponseValidationError is the validation error returned by
// DeleteInventoryResponse.Validate if the designated constraints aren't met.
type DeleteInventoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInventoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInventoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInventoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInventoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInventoryResponseValidationError) ErrorName() string {
	return "DeleteInventoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInventoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInventoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInventoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInventoryResponseValidationError{}
