// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.tech.orange/optisam/optisam-it/optisam-services/dps-service/pkg/repository/v1 (interfaces: Dps)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	db "gitlab.tech.orange/optisam/optisam-it/optisam-services/dps-service/pkg/repository/v1/postgres/db"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDps is a mock of Dps interface.
type MockDps struct {
	ctrl     *gomock.Controller
	recorder *MockDpsMockRecorder
}

// MockDpsMockRecorder is the mock recorder for MockDps.
type MockDpsMockRecorder struct {
	mock *MockDps
}

// NewMockDps creates a new mock instance.
func NewMockDps(ctrl *gomock.Controller) *MockDps {
	mock := &MockDps{ctrl: ctrl}
	mock.recorder = &MockDpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDps) EXPECT() *MockDpsMockRecorder {
	return m.recorder
}

// DeleteCoreFactorReference mocks base method.
func (m *MockDps) DeleteCoreFactorReference(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoreFactorReference", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCoreFactorReference indicates an expected call of DeleteCoreFactorReference.
func (mr *MockDpsMockRecorder) DeleteCoreFactorReference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoreFactorReference", reflect.TypeOf((*MockDps)(nil).DeleteCoreFactorReference), arg0)
}

// DropFileRecords mocks base method.
func (m *MockDps) DropFileRecords(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropFileRecords", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropFileRecords indicates an expected call of DropFileRecords.
func (mr *MockDpsMockRecorder) DropFileRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropFileRecords", reflect.TypeOf((*MockDps)(nil).DropFileRecords), arg0, arg1)
}

// GetActiveGID mocks base method.
func (m *MockDps) GetActiveGID(arg0 context.Context, arg1 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveGID", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveGID indicates an expected call of GetActiveGID.
func (mr *MockDpsMockRecorder) GetActiveGID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveGID", reflect.TypeOf((*MockDps)(nil).GetActiveGID), arg0, arg1)
}

// GetAllDataFileStatusByGID mocks base method.
func (m *MockDps) GetAllDataFileStatusByGID(arg0 context.Context, arg1 int32) ([]db.UploadStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDataFileStatusByGID", arg0, arg1)
	ret0, _ := ret[0].([]db.UploadStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDataFileStatusByGID indicates an expected call of GetAllDataFileStatusByGID.
func (mr *MockDpsMockRecorder) GetAllDataFileStatusByGID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDataFileStatusByGID", reflect.TypeOf((*MockDps)(nil).GetAllDataFileStatusByGID), arg0, arg1)
}

// GetCoreFactorList mocks base method.
func (m *MockDps) GetCoreFactorList(arg0 context.Context) ([]db.CoreFactorReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreFactorList", arg0)
	ret0, _ := ret[0].([]db.CoreFactorReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreFactorList indicates an expected call of GetCoreFactorList.
func (mr *MockDpsMockRecorder) GetCoreFactorList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreFactorList", reflect.TypeOf((*MockDps)(nil).GetCoreFactorList), arg0)
}

// GetCoreFactorLogs mocks base method.
func (m *MockDps) GetCoreFactorLogs(arg0 context.Context) ([]db.CoreFactorLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreFactorLogs", arg0)
	ret0, _ := ret[0].([]db.CoreFactorLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreFactorLogs indicates an expected call of GetCoreFactorLogs.
func (mr *MockDpsMockRecorder) GetCoreFactorLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreFactorLogs", reflect.TypeOf((*MockDps)(nil).GetCoreFactorLogs), arg0)
}

// GetCoreFactorReferences mocks base method.
func (m *MockDps) GetCoreFactorReferences(arg0 context.Context, arg1 db.GetCoreFactorReferencesParams) ([]db.GetCoreFactorReferencesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreFactorReferences", arg0, arg1)
	ret0, _ := ret[0].([]db.GetCoreFactorReferencesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreFactorReferences indicates an expected call of GetCoreFactorReferences.
func (mr *MockDpsMockRecorder) GetCoreFactorReferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreFactorReferences", reflect.TypeOf((*MockDps)(nil).GetCoreFactorReferences), arg0, arg1)
}

// GetDataFileRecords mocks base method.
func (m *MockDps) GetDataFileRecords(arg0 context.Context, arg1 db.GetDataFileRecordsParams) (db.GetDataFileRecordsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFileRecords", arg0, arg1)
	ret0, _ := ret[0].(db.GetDataFileRecordsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFileRecords indicates an expected call of GetDataFileRecords.
func (mr *MockDpsMockRecorder) GetDataFileRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFileRecords", reflect.TypeOf((*MockDps)(nil).GetDataFileRecords), arg0, arg1)
}

// GetDeletionStatus mocks base method.
func (m *MockDps) GetDeletionStatus(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletionStatus", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletionStatus indicates an expected call of GetDeletionStatus.
func (mr *MockDpsMockRecorder) GetDeletionStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletionStatus", reflect.TypeOf((*MockDps)(nil).GetDeletionStatus), arg0, arg1)
}

// GetEntityMonthWise mocks base method.
func (m *MockDps) GetEntityMonthWise(arg0 context.Context, arg1 db.GetEntityMonthWiseParams) ([]db.GetEntityMonthWiseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityMonthWise", arg0, arg1)
	ret0, _ := ret[0].([]db.GetEntityMonthWiseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityMonthWise indicates an expected call of GetEntityMonthWise.
func (mr *MockDpsMockRecorder) GetEntityMonthWise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityMonthWise", reflect.TypeOf((*MockDps)(nil).GetEntityMonthWise), arg0, arg1)
}

// GetFailedRecord mocks base method.
func (m *MockDps) GetFailedRecord(arg0 context.Context, arg1 db.GetFailedRecordParams) ([]db.GetFailedRecordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedRecord", arg0, arg1)
	ret0, _ := ret[0].([]db.GetFailedRecordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedRecord indicates an expected call of GetFailedRecord.
func (mr *MockDpsMockRecorder) GetFailedRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedRecord", reflect.TypeOf((*MockDps)(nil).GetFailedRecord), arg0, arg1)
}

// GetFailureReasons mocks base method.
func (m *MockDps) GetFailureReasons(arg0 context.Context, arg1 db.GetFailureReasonsParams) ([]db.GetFailureReasonsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailureReasons", arg0, arg1)
	ret0, _ := ret[0].([]db.GetFailureReasonsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailureReasons indicates an expected call of GetFailureReasons.
func (mr *MockDpsMockRecorder) GetFailureReasons(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailureReasons", reflect.TypeOf((*MockDps)(nil).GetFailureReasons), arg0, arg1)
}

// GetFileStatus mocks base method.
func (m *MockDps) GetFileStatus(arg0 context.Context, arg1 db.GetFileStatusParams) (db.UploadStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileStatus", arg0, arg1)
	ret0, _ := ret[0].(db.UploadStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileStatus indicates an expected call of GetFileStatus.
func (mr *MockDpsMockRecorder) GetFileStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileStatus", reflect.TypeOf((*MockDps)(nil).GetFileStatus), arg0, arg1)
}

// GetGlobalFileInfo mocks base method.
func (m *MockDps) GetGlobalFileInfo(arg0 context.Context, arg1 db.GetGlobalFileInfoParams) (db.GetGlobalFileInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalFileInfo", arg0, arg1)
	ret0, _ := ret[0].(db.GetGlobalFileInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalFileInfo indicates an expected call of GetGlobalFileInfo.
func (mr *MockDpsMockRecorder) GetGlobalFileInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalFileInfo", reflect.TypeOf((*MockDps)(nil).GetGlobalFileInfo), arg0, arg1)
}

// GetInjectionStatus mocks base method.
func (m *MockDps) GetInjectionStatus(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInjectionStatus", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInjectionStatus indicates an expected call of GetInjectionStatus.
func (mr *MockDpsMockRecorder) GetInjectionStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInjectionStatus", reflect.TypeOf((*MockDps)(nil).GetInjectionStatus), arg0, arg1)
}

// GetTransformedGlobalFileInfo mocks base method.
func (m *MockDps) GetTransformedGlobalFileInfo(arg0 context.Context) ([]db.GetTransformedGlobalFileInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransformedGlobalFileInfo", arg0)
	ret0, _ := ret[0].([]db.GetTransformedGlobalFileInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransformedGlobalFileInfo indicates an expected call of GetTransformedGlobalFileInfo.
func (mr *MockDpsMockRecorder) GetTransformedGlobalFileInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransformedGlobalFileInfo", reflect.TypeOf((*MockDps)(nil).GetTransformedGlobalFileInfo), arg0)
}

// InsertUploadedData mocks base method.
func (m *MockDps) InsertUploadedData(arg0 context.Context, arg1 db.InsertUploadedDataParams) (db.UploadedDataFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUploadedData", arg0, arg1)
	ret0, _ := ret[0].(db.UploadedDataFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUploadedData indicates an expected call of InsertUploadedData.
func (mr *MockDpsMockRecorder) InsertUploadedData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUploadedData", reflect.TypeOf((*MockDps)(nil).InsertUploadedData), arg0, arg1)
}

// InsertUploadedMetaData mocks base method.
func (m *MockDps) InsertUploadedMetaData(arg0 context.Context, arg1 db.InsertUploadedMetaDataParams) (db.UploadedDataFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUploadedMetaData", arg0, arg1)
	ret0, _ := ret[0].(db.UploadedDataFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUploadedMetaData indicates an expected call of InsertUploadedMetaData.
func (mr *MockDpsMockRecorder) InsertUploadedMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUploadedMetaData", reflect.TypeOf((*MockDps)(nil).InsertUploadedMetaData), arg0, arg1)
}

// ListDeletionRecrods mocks base method.
func (m *MockDps) ListDeletionRecrods(arg0 context.Context, arg1 db.ListDeletionRecrodsParams) ([]db.ListDeletionRecrodsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeletionRecrods", arg0, arg1)
	ret0, _ := ret[0].([]db.ListDeletionRecrodsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeletionRecrods indicates an expected call of ListDeletionRecrods.
func (mr *MockDpsMockRecorder) ListDeletionRecrods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeletionRecrods", reflect.TypeOf((*MockDps)(nil).ListDeletionRecrods), arg0, arg1)
}

// ListUploadedDataFiles mocks base method.
func (m *MockDps) ListUploadedDataFiles(arg0 context.Context, arg1 db.ListUploadedDataFilesParams) ([]db.ListUploadedDataFilesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUploadedDataFiles", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUploadedDataFilesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUploadedDataFiles indicates an expected call of ListUploadedDataFiles.
func (mr *MockDpsMockRecorder) ListUploadedDataFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUploadedDataFiles", reflect.TypeOf((*MockDps)(nil).ListUploadedDataFiles), arg0, arg1)
}

// ListUploadedGlobalDataFiles mocks base method.
func (m *MockDps) ListUploadedGlobalDataFiles(arg0 context.Context, arg1 db.ListUploadedGlobalDataFilesParams) ([]db.ListUploadedGlobalDataFilesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUploadedGlobalDataFiles", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUploadedGlobalDataFilesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUploadedGlobalDataFiles indicates an expected call of ListUploadedGlobalDataFiles.
func (mr *MockDpsMockRecorder) ListUploadedGlobalDataFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUploadedGlobalDataFiles", reflect.TypeOf((*MockDps)(nil).ListUploadedGlobalDataFiles), arg0, arg1)
}

// ListUploadedMetaDataFiles mocks base method.
func (m *MockDps) ListUploadedMetaDataFiles(arg0 context.Context, arg1 db.ListUploadedMetaDataFilesParams) ([]db.ListUploadedMetaDataFilesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUploadedMetaDataFiles", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUploadedMetaDataFilesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUploadedMetaDataFiles indicates an expected call of ListUploadedMetaDataFiles.
func (mr *MockDpsMockRecorder) ListUploadedMetaDataFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUploadedMetaDataFiles", reflect.TypeOf((*MockDps)(nil).ListUploadedMetaDataFiles), arg0, arg1)
}

// LogCoreFactor mocks base method.
func (m *MockDps) LogCoreFactor(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogCoreFactor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogCoreFactor indicates an expected call of LogCoreFactor.
func (mr *MockDpsMockRecorder) LogCoreFactor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogCoreFactor", reflect.TypeOf((*MockDps)(nil).LogCoreFactor), arg0, arg1)
}

// SetDeletionActive mocks base method.
func (m *MockDps) SetDeletionActive(arg0 context.Context, arg1 db.SetDeletionActiveParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeletionActive", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDeletionActive indicates an expected call of SetDeletionActive.
func (mr *MockDpsMockRecorder) SetDeletionActive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeletionActive", reflect.TypeOf((*MockDps)(nil).SetDeletionActive), arg0, arg1)
}

// StoreCoreFactorReferences mocks base method.
func (m *MockDps) StoreCoreFactorReferences(arg0 context.Context, arg1 map[string]map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCoreFactorReferences", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCoreFactorReferences indicates an expected call of StoreCoreFactorReferences.
func (mr *MockDpsMockRecorder) StoreCoreFactorReferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCoreFactorReferences", reflect.TypeOf((*MockDps)(nil).StoreCoreFactorReferences), arg0, arg1)
}

// UpdateDeletionStatus mocks base method.
func (m *MockDps) UpdateDeletionStatus(arg0 context.Context, arg1 db.UpdateDeletionStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeletionStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeletionStatus indicates an expected call of UpdateDeletionStatus.
func (mr *MockDpsMockRecorder) UpdateDeletionStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeletionStatus", reflect.TypeOf((*MockDps)(nil).UpdateDeletionStatus), arg0, arg1)
}

// UpdateFileFailedRecord mocks base method.
func (m *MockDps) UpdateFileFailedRecord(arg0 context.Context, arg1 db.UpdateFileFailedRecordParams) (db.UpdateFileFailedRecordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileFailedRecord", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateFileFailedRecordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFileFailedRecord indicates an expected call of UpdateFileFailedRecord.
func (mr *MockDpsMockRecorder) UpdateFileFailedRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileFailedRecord", reflect.TypeOf((*MockDps)(nil).UpdateFileFailedRecord), arg0, arg1)
}

// UpdateFileFailure mocks base method.
func (m *MockDps) UpdateFileFailure(arg0 context.Context, arg1 db.UpdateFileFailureParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileFailure", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileFailure indicates an expected call of UpdateFileFailure.
func (mr *MockDpsMockRecorder) UpdateFileFailure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileFailure", reflect.TypeOf((*MockDps)(nil).UpdateFileFailure), arg0, arg1)
}

// UpdateFileStatus mocks base method.
func (m *MockDps) UpdateFileStatus(arg0 context.Context, arg1 db.UpdateFileStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileStatus indicates an expected call of UpdateFileStatus.
func (mr *MockDpsMockRecorder) UpdateFileStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileStatus", reflect.TypeOf((*MockDps)(nil).UpdateFileStatus), arg0, arg1)
}

// UpdateFileStatusCancelled mocks base method.
func (m *MockDps) UpdateFileStatusCancelled(arg0 context.Context, arg1 db.UpdateFileStatusCancelledParams) (db.UploadStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileStatusCancelled", arg0, arg1)
	ret0, _ := ret[0].(db.UploadStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFileStatusCancelled indicates an expected call of UpdateFileStatusCancelled.
func (mr *MockDpsMockRecorder) UpdateFileStatusCancelled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileStatusCancelled", reflect.TypeOf((*MockDps)(nil).UpdateFileStatusCancelled), arg0, arg1)
}

// UpdateFileSuccessRecord mocks base method.
func (m *MockDps) UpdateFileSuccessRecord(arg0 context.Context, arg1 db.UpdateFileSuccessRecordParams) (db.UpdateFileSuccessRecordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileSuccessRecord", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateFileSuccessRecordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFileSuccessRecord indicates an expected call of UpdateFileSuccessRecord.
func (mr *MockDpsMockRecorder) UpdateFileSuccessRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSuccessRecord", reflect.TypeOf((*MockDps)(nil).UpdateFileSuccessRecord), arg0, arg1)
}

// UpdateFileTotalRecord mocks base method.
func (m *MockDps) UpdateFileTotalRecord(arg0 context.Context, arg1 db.UpdateFileTotalRecordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileTotalRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileTotalRecord indicates an expected call of UpdateFileTotalRecord.
func (mr *MockDpsMockRecorder) UpdateFileTotalRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileTotalRecord", reflect.TypeOf((*MockDps)(nil).UpdateFileTotalRecord), arg0, arg1)
}

// UpdateGlobalFileStatus mocks base method.
func (m *MockDps) UpdateGlobalFileStatus(arg0 context.Context, arg1 db.UpdateGlobalFileStatusParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalFileStatus", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalFileStatus indicates an expected call of UpdateGlobalFileStatus.
func (mr *MockDpsMockRecorder) UpdateGlobalFileStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalFileStatus", reflect.TypeOf((*MockDps)(nil).UpdateGlobalFileStatus), arg0, arg1)
}
