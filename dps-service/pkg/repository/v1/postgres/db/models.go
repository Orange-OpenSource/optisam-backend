// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"time"
)

type DataType string

const (
	DataTypeDATA       DataType = "DATA"
	DataTypeMETADATA   DataType = "METADATA"
	DataTypeGLOBALDATA DataType = "GLOBALDATA"
)

func (e *DataType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DataType(s)
	case string:
		*e = DataType(s)
	default:
		return fmt.Errorf("unsupported scan type for DataType: %T", src)
	}
	return nil
}

type DeletionType string

const (
	DeletionTypeACQRIGHTS      DeletionType = "ACQRIGHTS"
	DeletionTypeINVENTORYPARK  DeletionType = "INVENTORY_PARK"
	DeletionTypeWHOLEINVENTORY DeletionType = "WHOLE_INVENTORY"
)

func (e *DeletionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeletionType(s)
	case string:
		*e = DeletionType(s)
	default:
		return fmt.Errorf("unsupported scan type for DeletionType: %T", src)
	}
	return nil
}

type JobStatus string

const (
	JobStatusPENDING   JobStatus = "PENDING"
	JobStatusCOMPLETED JobStatus = "COMPLETED"
	JobStatusFAILED    JobStatus = "FAILED"
	JobStatusRETRY     JobStatus = "RETRY"
	JobStatusRUNNING   JobStatus = "RUNNING"
)

func (e *JobStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JobStatus(s)
	case string:
		*e = JobStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for JobStatus: %T", src)
	}
	return nil
}

type ScopeTypes string

const (
	ScopeTypesGENERIC  ScopeTypes = "GENERIC"
	ScopeTypesSPECIFIC ScopeTypes = "SPECIFIC"
)

func (e *ScopeTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ScopeTypes(s)
	case string:
		*e = ScopeTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for ScopeTypes: %T", src)
	}
	return nil
}

type UploadStatus string

const (
	UploadStatusCOMPLETED  UploadStatus = "COMPLETED"
	UploadStatusFAILED     UploadStatus = "FAILED"
	UploadStatusINPROGRESS UploadStatus = "INPROGRESS"
	UploadStatusPARTIAL    UploadStatus = "PARTIAL"
	UploadStatusPENDING    UploadStatus = "PENDING"
	UploadStatusPROCESSED  UploadStatus = "PROCESSED"
	UploadStatusSUCCESS    UploadStatus = "SUCCESS"
	UploadStatusUPLOADED   UploadStatus = "UPLOADED"
	UploadStatusCANCELLED  UploadStatus = "CANCELLED"
)

func (e *UploadStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UploadStatus(s)
	case string:
		*e = UploadStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UploadStatus: %T", src)
	}
	return nil
}

type CoreFactorLog struct {
	UploadID   int32     `json:"upload_id"`
	FileName   string    `json:"file_name"`
	UploadedOn time.Time `json:"uploaded_on"`
}

type CoreFactorReference struct {
	ID           int32  `json:"id"`
	Manufacturer string `json:"manufacturer"`
	Model        string `json:"model"`
	CoreFactor   string `json:"core_factor"`
}

type DeletionAudit struct {
	ID           int32          `json:"id"`
	Scope        string         `json:"scope"`
	DeletionType DeletionType   `json:"deletion_type"`
	Status       UploadStatus   `json:"status"`
	Reason       sql.NullString `json:"reason"`
	CreatedBy    string         `json:"created_by"`
	CreatedOn    time.Time      `json:"created_on"`
	UpdatedOn    sql.NullTime   `json:"updated_on"`
}

type Job struct {
	JobID      int32           `json:"job_id"`
	Type       string          `json:"type"`
	Status     JobStatus       `json:"status"`
	Data       json.RawMessage `json:"data"`
	Comments   sql.NullString  `json:"comments"`
	StartTime  sql.NullTime    `json:"start_time"`
	EndTime    sql.NullTime    `json:"end_time"`
	CreatedAt  time.Time       `json:"created_at"`
	RetryCount sql.NullInt32   `json:"retry_count"`
	MetaData   json.RawMessage `json:"meta_data"`
}

type UploadedDataFile struct {
	UploadID       int32          `json:"upload_id"`
	Gid            int32          `json:"gid"`
	Scope          string         `json:"scope"`
	DataType       DataType       `json:"data_type"`
	FileName       string         `json:"file_name"`
	Status         UploadStatus   `json:"status"`
	UploadedBy     string         `json:"uploaded_by"`
	UploadedOn     time.Time      `json:"uploaded_on"`
	UpdatedOn      sql.NullTime   `json:"updated_on"`
	TotalRecords   int32          `json:"total_records"`
	SuccessRecords int32          `json:"success_records"`
	FailedRecords  int32          `json:"failed_records"`
	Comments       sql.NullString `json:"comments"`
	ScopeType      ScopeTypes     `json:"scope_type"`
	AnalysisID     sql.NullString `json:"analysis_id"`
}
