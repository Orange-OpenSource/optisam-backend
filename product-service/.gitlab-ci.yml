.product-template:
  before_script:
    - ls -alsh
    - chmod 777 shared-vars.sh
    - . ./shared-vars.sh
    - cd product-service

.product-lint:
  extends: .product-template
  image: ${DOCKER_PROXY_HOST}/golangci/golangci-lint:latest-alpine
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/product-service/code-quality-report.json 
    reports:
      codequality: ${CI_PROJECT_DIR}/product-service/code-quality-report.json
      # junit: ${CI_PROJECT_DIR}/product-service/build/tests/lint-results.xml
    expire_in: 2d
  script:
    - export GO111MODULE="on"
    - export GOPROXY="${GOPROXY}"
    - golangci-lint run | tee code-quality-report.json  
    - ls -alSh
  allow_failure: true

.product-test:
  extends: .product-template
  services:
    - name: ${DOCKER_PROXY_HOST}/postgres:${POSTGRES_VERSION}-alpine
      alias: postgres
    - name: ${DOCKER_PROXY_HOST}/dgraph/standalone:${DGRAPH_VERSION}
      alias: dgraph
  variables:
      POSTGRES_DB: optisam
      POSTGRES_USER: optisam
      POSTGRES_PASSWORD: "optisam"
  image: ${DOCKER_PROXY_HOST}/golang:${GO_VERSION}
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/product-service/build/tests/test-results.xml
      - ${CI_PROJECT_DIR}/product-service/build/tests/cover.out
      - ${CI_PROJECT_DIR}/product-service/build/tests/cover.html
    reports:
      junit: ${CI_PROJECT_DIR}/product-service/build/tests/test-results.xml
    expire_in: 2d
  script:
    - export GOPATH="${CI_PROJECT_DIR}/product_service"
    - export GOGC=off
    - export GO111MODULE="on"
    - export GOPROXY="${GOPROXY}"
    - mkdir -p build/tests
    - go get gotest.tools/gotestsum@v1.7.0
    - ../product_service/bin/gotestsum --junitfile build/tests/test-results.xml -- -coverprofile=build/tests/cover.out ./...
    - go tool cover -html=build/tests/cover.out -o build/tests/cover.html
    - ls -alSh build/tests/ 


.product-sonar:
  extends: .product-template
  image: 
    name: ${DOCKER_PROXY_HOST}/sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  script:
    - chmod 777 shared-vars.sh
    - . ./shared-vars.sh
    - cd product-service
    - sonar-scanner -Dsonar.projectName=product-service -Dsonar.projectKey=product-service -Dsonar.login=${SONAR_TOKEN} ${SONAR_ARGS} -X
  allow_failure: true

.product-build:
  extends: .product-template
  image: ${DOCKER_PROXY_HOST}/golang:${GO_VERSION}-alpine
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/product_service/bin/
    expire_in: 3d
  script:
    - export GOPATH="${CI_PROJECT_DIR}/product_service"
    - export GOGC=off
    - export GO111MODULE="on"
    - export GOPROXY="${GOPROXY}"
    - export CI_BUILD_DATE=$(date +%FT%T%z)
    - (cd cmd/server; go install -v -ldflags="-X optisam-backend/product-service/pkg/cmd.version=${CI_COMMIT_SHA} -X optisam-backend/product-service/pkg/cmd.commitHash=${CI_COMMIT_SHA} -X optisam-backend/product-service/pkg/cmd.buildDate=${CI_BUILD_DATE}" .)
    - ls -alSh ../product_service/bin

.product-package:
  extends: .product-template
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - cd ..
    - mkdir -p /kaniko/.docker
    - echo $DOCKER_AUTH_CONFIG > /kaniko/.docker/config.json
  #  - echo "{\"auths\":{\"$DOCKER_REGISTRY\":{\"username\":\"$DOCKER_LOGIN\",\"password\":\"$DOCKER_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/product-service/Dockerfile --destination ${DOCKER_REGISTRY}/optisam/product-service:$TAG


.product-deploy_noprod:
  extends: .product-template
  image: ${DOCKER_PROXY_HOST}/openshift/origin-cli:v3.11
  script:
    - echo "Creating Openshift Resources"
    - oc login ${OCP_URL}  --token=${OCP_TOKEN}   --insecure-skip-tls-verify
    - oc project ${OCP_PROJECT}
    - oc create configmap config-product-$ENV --from-file=cmd/server/config-$ENV.toml -o yaml --dry-run | oc apply -f -
    - oc delete deploymentconfig optisam-product
    - oc process -f product-service.yml -p DB_PASSWORD=$DB_PASSWORD -p TAG=$TAG -p ENV=$ENV -p REPLICAS=$REPLICAS -p DOCKER_REGISTRY=$DOCKER_REGISTRY| oc apply -f -
    - oc rollout status dc/optisam-product
    - |
      end=$((SECONDS+300))
      while [ "$(oc get pods -l=app='optisam-product' -o jsonpath='{.items[*].status.containerStatuses[0].ready}')" != "true" ] && [ $SECONDS -lt $end ]; do
        sleep 8
        echo "Waiting for pod to be ready."
      done

.product-deploy_prod:
  extends: .product-template
  image: ${DOCKER_PROXY_HOST}/openshift/origin-cli:v3.11
  environment:
    name: prod
    url: https://optisam-product-prod.apps.fr01.paas.tech.orange
  script:
    - echo "Creating Openshift Resources"
    - oc login ${OCP_URL_PROD}  --token=${OCP_TOKEN_PROD}   --insecure-skip-tls-verify
    - oc project ${OCP_PROJECT_PROD}
    - oc create configmap config-product-prod --from-file=cmd/server/config-prod.toml -o yaml --dry-run | oc apply -f -
    - oc process -f product-service.yml -p DB_PASSWORD=$DB_PASSWORD_PROD -p TAG=$TAG -p ENV=prod -p REPLICAS=2 -p DOCKER_REGISTRY=$DOCKER_REGISTRY| oc apply -f -
    - oc rollout status dc/optisam-product


.product-integration_test:
  extends: .product-template
  image: optisam-it-virt-docker-stable.repos.tech.orange/optisam/karate:latest
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/product-service/surefire-reports
      - ${CI_PROJECT_DIR}/product-service/cucumber-html-reports
    reports:
      junit: ${CI_PROJECT_DIR}/product-service/surefire-reports/product.xml
    expire_in: 3d
  script:
    - java -Dkarate.config.dir=${CI_PROJECT_DIR} -jar /opt/karate/karate.jar -e=${ENV} -t ~@ignore -o ${CI_PROJECT_DIR}/product-service/ .
    - ls -alSh
  allow_failure: true

.product-performance_test:
  image:
    name: ${DOCKER_PROXY_HOST}/loadimpact/k6:latest
    entrypoint: ['']
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/product-service/build/tests/perf_report.json
      - ${CI_PROJECT_DIR}/product-service/build/tests/summary_export.json
    expire_in: 2d
  script:
    - ls -alsh
    - cd product-service
    - mkdir -p build/tests
    - echo "executing performance test in k6 container..."
    - k6 run --out json=build/tests/perf_report.json --summary-export=build/tests/summary_export.json ./test/perf/script.js
  allow_failure: true
  
