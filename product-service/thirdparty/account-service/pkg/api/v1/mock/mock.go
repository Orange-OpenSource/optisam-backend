// Code generated by MockGen. DO NOT EDIT.
// Source: ../../thirdparty/account-service/pkg/api/v1/account_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "gitlab.tech.orange/optisam/optisam-it/optisam-services/product-service/thirdparty/account-service/pkg/api/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAccountServiceClient is a mock of AccountServiceClient interface
type MockAccountServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceClientMockRecorder
}

// MockAccountServiceClientMockRecorder is the mock recorder for MockAccountServiceClient
type MockAccountServiceClientMockRecorder struct {
	mock *MockAccountServiceClient
}

// NewMockAccountServiceClient creates a new mock instance
func NewMockAccountServiceClient(ctrl *gomock.Controller) *MockAccountServiceClient {
	mock := &MockAccountServiceClient{ctrl: ctrl}
	mock.recorder = &MockAccountServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountServiceClient) EXPECT() *MockAccountServiceClientMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method
func (m *MockAccountServiceClient) CreateAccount(ctx context.Context, in *v1.Account, opts ...grpc.CallOption) (*v1.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(*v1.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockAccountServiceClientMockRecorder) CreateAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountServiceClient)(nil).CreateAccount), varargs...)
}

// ResendAccountActivationToken mocks base method
func (m *MockAccountServiceClient) ResendAccountActivationToken(ctx context.Context, in *v1.ResendAccountActivationRequest, opts ...grpc.CallOption) (*v1.ResendAccountActivationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResendAccountActivationToken", varargs...)
	ret0, _ := ret[0].(*v1.ResendAccountActivationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendAccountActivationToken indicates an expected call of ResendAccountActivationToken
func (mr *MockAccountServiceClientMockRecorder) ResendAccountActivationToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendAccountActivationToken", reflect.TypeOf((*MockAccountServiceClient)(nil).ResendAccountActivationToken), varargs...)
}

// UpdateAccount mocks base method
func (m *MockAccountServiceClient) UpdateAccount(ctx context.Context, in *v1.UpdateAccountRequest, opts ...grpc.CallOption) (*v1.UpdateAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccount", varargs...)
	ret0, _ := ret[0].(*v1.UpdateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockAccountServiceClientMockRecorder) UpdateAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountServiceClient)(nil).UpdateAccount), varargs...)
}

// DeleteAccount mocks base method
func (m *MockAccountServiceClient) DeleteAccount(ctx context.Context, in *v1.DeleteAccountRequest, opts ...grpc.CallOption) (*v1.DeleteAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccount", varargs...)
	ret0, _ := ret[0].(*v1.DeleteAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount
func (mr *MockAccountServiceClientMockRecorder) DeleteAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountServiceClient)(nil).DeleteAccount), varargs...)
}

// GetAccount mocks base method
func (m *MockAccountServiceClient) GetAccount(ctx context.Context, in *v1.GetAccountRequest, opts ...grpc.CallOption) (*v1.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*v1.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockAccountServiceClientMockRecorder) GetAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountServiceClient)(nil).GetAccount), varargs...)
}

// ChangePassword mocks base method
func (m *MockAccountServiceClient) ChangePassword(ctx context.Context, in *v1.ChangePasswordRequest, opts ...grpc.CallOption) (*v1.ChangePasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePassword", varargs...)
	ret0, _ := ret[0].(*v1.ChangePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockAccountServiceClientMockRecorder) ChangePassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAccountServiceClient)(nil).ChangePassword), varargs...)
}

// ListGroups mocks base method
func (m *MockAccountServiceClient) ListGroups(ctx context.Context, in *v1.ListGroupsRequest, opts ...grpc.CallOption) (*v1.ListGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroups", varargs...)
	ret0, _ := ret[0].(*v1.ListGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups
func (mr *MockAccountServiceClientMockRecorder) ListGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockAccountServiceClient)(nil).ListGroups), varargs...)
}

// ListUserGroups mocks base method
func (m *MockAccountServiceClient) ListUserGroups(ctx context.Context, in *v1.ListGroupsRequest, opts ...grpc.CallOption) (*v1.ListGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserGroups", varargs...)
	ret0, _ := ret[0].(*v1.ListGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserGroups indicates an expected call of ListUserGroups
func (mr *MockAccountServiceClientMockRecorder) ListUserGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserGroups", reflect.TypeOf((*MockAccountServiceClient)(nil).ListUserGroups), varargs...)
}

// CreateGroup mocks base method
func (m *MockAccountServiceClient) CreateGroup(ctx context.Context, in *v1.Group, opts ...grpc.CallOption) (*v1.Group, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroup", varargs...)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockAccountServiceClientMockRecorder) CreateGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockAccountServiceClient)(nil).CreateGroup), varargs...)
}

// UpdateGroup mocks base method
func (m *MockAccountServiceClient) UpdateGroup(ctx context.Context, in *v1.UpdateGroupRequest, opts ...grpc.CallOption) (*v1.Group, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroup", varargs...)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup
func (mr *MockAccountServiceClientMockRecorder) UpdateGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockAccountServiceClient)(nil).UpdateGroup), varargs...)
}

// DeleteGroup mocks base method
func (m *MockAccountServiceClient) DeleteGroup(ctx context.Context, in *v1.DeleteGroupRequest, opts ...grpc.CallOption) (*v1.DeleteGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroup", varargs...)
	ret0, _ := ret[0].(*v1.DeleteGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockAccountServiceClientMockRecorder) DeleteGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockAccountServiceClient)(nil).DeleteGroup), varargs...)
}

// ListChildGroups mocks base method
func (m *MockAccountServiceClient) ListChildGroups(ctx context.Context, in *v1.ListChildGroupsRequest, opts ...grpc.CallOption) (*v1.ListGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChildGroups", varargs...)
	ret0, _ := ret[0].(*v1.ListGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChildGroups indicates an expected call of ListChildGroups
func (mr *MockAccountServiceClientMockRecorder) ListChildGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChildGroups", reflect.TypeOf((*MockAccountServiceClient)(nil).ListChildGroups), varargs...)
}

// GetUsers mocks base method
func (m *MockAccountServiceClient) GetUsers(ctx context.Context, in *v1.GetUsersRequest, opts ...grpc.CallOption) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockAccountServiceClientMockRecorder) GetUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAccountServiceClient)(nil).GetUsers), varargs...)
}

// GetGroupUsers mocks base method
func (m *MockAccountServiceClient) GetGroupUsers(ctx context.Context, in *v1.GetGroupUsersRequest, opts ...grpc.CallOption) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupUsers", varargs...)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupUsers indicates an expected call of GetGroupUsers
func (mr *MockAccountServiceClientMockRecorder) GetGroupUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupUsers", reflect.TypeOf((*MockAccountServiceClient)(nil).GetGroupUsers), varargs...)
}

// AddGroupUser mocks base method
func (m *MockAccountServiceClient) AddGroupUser(ctx context.Context, in *v1.AddGroupUsersRequest, opts ...grpc.CallOption) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGroupUser", varargs...)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGroupUser indicates an expected call of AddGroupUser
func (mr *MockAccountServiceClientMockRecorder) AddGroupUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupUser", reflect.TypeOf((*MockAccountServiceClient)(nil).AddGroupUser), varargs...)
}

// DeleteGroupUser mocks base method
func (m *MockAccountServiceClient) DeleteGroupUser(ctx context.Context, in *v1.DeleteGroupUsersRequest, opts ...grpc.CallOption) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupUser", varargs...)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupUser indicates an expected call of DeleteGroupUser
func (mr *MockAccountServiceClientMockRecorder) DeleteGroupUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupUser", reflect.TypeOf((*MockAccountServiceClient)(nil).DeleteGroupUser), varargs...)
}

// CreateScope mocks base method
func (m *MockAccountServiceClient) CreateScope(ctx context.Context, in *v1.CreateScopeRequest, opts ...grpc.CallOption) (*v1.CreateScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateScope", varargs...)
	ret0, _ := ret[0].(*v1.CreateScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScope indicates an expected call of CreateScope
func (mr *MockAccountServiceClientMockRecorder) CreateScope(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScope", reflect.TypeOf((*MockAccountServiceClient)(nil).CreateScope), varargs...)
}

// ListScopes mocks base method
func (m *MockAccountServiceClient) ListScopes(ctx context.Context, in *v1.ListScopesRequest, opts ...grpc.CallOption) (*v1.ListScopesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScopes", varargs...)
	ret0, _ := ret[0].(*v1.ListScopesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScopes indicates an expected call of ListScopes
func (mr *MockAccountServiceClientMockRecorder) ListScopes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScopes", reflect.TypeOf((*MockAccountServiceClient)(nil).ListScopes), varargs...)
}

// DropScopeData mocks base method
func (m *MockAccountServiceClient) DropScopeData(ctx context.Context, in *v1.DropScopeDataRequest, opts ...grpc.CallOption) (*v1.DropScopeDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropScopeData", varargs...)
	ret0, _ := ret[0].(*v1.DropScopeDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropScopeData indicates an expected call of DropScopeData
func (mr *MockAccountServiceClientMockRecorder) DropScopeData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropScopeData", reflect.TypeOf((*MockAccountServiceClient)(nil).DropScopeData), varargs...)
}

// GetScope mocks base method
func (m *MockAccountServiceClient) GetScope(ctx context.Context, in *v1.GetScopeRequest, opts ...grpc.CallOption) (*v1.Scope, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScope", varargs...)
	ret0, _ := ret[0].(*v1.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScope indicates an expected call of GetScope
func (mr *MockAccountServiceClientMockRecorder) GetScope(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScope", reflect.TypeOf((*MockAccountServiceClient)(nil).GetScope), varargs...)
}

// UpsertScopeExpenses mocks base method
func (m *MockAccountServiceClient) UpsertScopeExpenses(ctx context.Context, in *v1.UpsertScopeExpensesRequest, opts ...grpc.CallOption) (*v1.CreateScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertScopeExpenses", varargs...)
	ret0, _ := ret[0].(*v1.CreateScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertScopeExpenses indicates an expected call of UpsertScopeExpenses
func (mr *MockAccountServiceClientMockRecorder) UpsertScopeExpenses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScopeExpenses", reflect.TypeOf((*MockAccountServiceClient)(nil).UpsertScopeExpenses), varargs...)
}

// GetScopeExpenses mocks base method
func (m *MockAccountServiceClient) GetScopeExpenses(ctx context.Context, in *v1.GetScopeRequest, opts ...grpc.CallOption) (*v1.ScopeExpenses, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScopeExpenses", varargs...)
	ret0, _ := ret[0].(*v1.ScopeExpenses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopeExpenses indicates an expected call of GetScopeExpenses
func (mr *MockAccountServiceClientMockRecorder) GetScopeExpenses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopeExpenses", reflect.TypeOf((*MockAccountServiceClient)(nil).GetScopeExpenses), varargs...)
}

// GetScopeLists mocks base method
func (m *MockAccountServiceClient) GetScopeLists(ctx context.Context, in *v1.GetScopeListRequest, opts ...grpc.CallOption) (*v1.ScopeListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScopeLists", varargs...)
	ret0, _ := ret[0].(*v1.ScopeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopeLists indicates an expected call of GetScopeLists
func (mr *MockAccountServiceClientMockRecorder) GetScopeLists(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopeLists", reflect.TypeOf((*MockAccountServiceClient)(nil).GetScopeLists), varargs...)
}

// ListComplienceGroups mocks base method
func (m *MockAccountServiceClient) ListComplienceGroups(ctx context.Context, in *v1.ListGroupsRequest, opts ...grpc.CallOption) (*v1.ListComplienceGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListComplienceGroups", varargs...)
	ret0, _ := ret[0].(*v1.ListComplienceGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplienceGroups indicates an expected call of ListComplienceGroups
func (mr *MockAccountServiceClientMockRecorder) ListComplienceGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplienceGroups", reflect.TypeOf((*MockAccountServiceClient)(nil).ListComplienceGroups), varargs...)
}

// GetAdminUserScope mocks base method
func (m *MockAccountServiceClient) GetAdminUserScope(ctx context.Context, in *v1.GetAdminUserScopeRequest, opts ...grpc.CallOption) (*v1.GetAdminUserScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAdminUserScope", varargs...)
	ret0, _ := ret[0].(*v1.GetAdminUserScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminUserScope indicates an expected call of GetAdminUserScope
func (mr *MockAccountServiceClientMockRecorder) GetAdminUserScope(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUserScope", reflect.TypeOf((*MockAccountServiceClient)(nil).GetAdminUserScope), varargs...)
}

// MockAccountServiceServer is a mock of AccountServiceServer interface
type MockAccountServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceServerMockRecorder
}

// MockAccountServiceServerMockRecorder is the mock recorder for MockAccountServiceServer
type MockAccountServiceServerMockRecorder struct {
	mock *MockAccountServiceServer
}

// NewMockAccountServiceServer creates a new mock instance
func NewMockAccountServiceServer(ctrl *gomock.Controller) *MockAccountServiceServer {
	mock := &MockAccountServiceServer{ctrl: ctrl}
	mock.recorder = &MockAccountServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountServiceServer) EXPECT() *MockAccountServiceServerMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method
func (m *MockAccountServiceServer) CreateAccount(arg0 context.Context, arg1 *v1.Account) (*v1.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(*v1.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockAccountServiceServerMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountServiceServer)(nil).CreateAccount), arg0, arg1)
}

// ResendAccountActivationToken mocks base method
func (m *MockAccountServiceServer) ResendAccountActivationToken(arg0 context.Context, arg1 *v1.ResendAccountActivationRequest) (*v1.ResendAccountActivationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendAccountActivationToken", arg0, arg1)
	ret0, _ := ret[0].(*v1.ResendAccountActivationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResendAccountActivationToken indicates an expected call of ResendAccountActivationToken
func (mr *MockAccountServiceServerMockRecorder) ResendAccountActivationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendAccountActivationToken", reflect.TypeOf((*MockAccountServiceServer)(nil).ResendAccountActivationToken), arg0, arg1)
}

// UpdateAccount mocks base method
func (m *MockAccountServiceServer) UpdateAccount(arg0 context.Context, arg1 *v1.UpdateAccountRequest) (*v1.UpdateAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockAccountServiceServerMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountServiceServer)(nil).UpdateAccount), arg0, arg1)
}

// DeleteAccount mocks base method
func (m *MockAccountServiceServer) DeleteAccount(arg0 context.Context, arg1 *v1.DeleteAccountRequest) (*v1.DeleteAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount
func (mr *MockAccountServiceServerMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountServiceServer)(nil).DeleteAccount), arg0, arg1)
}

// GetAccount mocks base method
func (m *MockAccountServiceServer) GetAccount(arg0 context.Context, arg1 *v1.GetAccountRequest) (*v1.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockAccountServiceServerMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountServiceServer)(nil).GetAccount), arg0, arg1)
}

// ChangePassword mocks base method
func (m *MockAccountServiceServer) ChangePassword(arg0 context.Context, arg1 *v1.ChangePasswordRequest) (*v1.ChangePasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(*v1.ChangePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockAccountServiceServerMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAccountServiceServer)(nil).ChangePassword), arg0, arg1)
}

// ListGroups mocks base method
func (m *MockAccountServiceServer) ListGroups(arg0 context.Context, arg1 *v1.ListGroupsRequest) (*v1.ListGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups
func (mr *MockAccountServiceServerMockRecorder) ListGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockAccountServiceServer)(nil).ListGroups), arg0, arg1)
}

// ListUserGroups mocks base method
func (m *MockAccountServiceServer) ListUserGroups(arg0 context.Context, arg1 *v1.ListGroupsRequest) (*v1.ListGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserGroups", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserGroups indicates an expected call of ListUserGroups
func (mr *MockAccountServiceServerMockRecorder) ListUserGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserGroups", reflect.TypeOf((*MockAccountServiceServer)(nil).ListUserGroups), arg0, arg1)
}

// CreateGroup mocks base method
func (m *MockAccountServiceServer) CreateGroup(arg0 context.Context, arg1 *v1.Group) (*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockAccountServiceServerMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockAccountServiceServer)(nil).CreateGroup), arg0, arg1)
}

// UpdateGroup mocks base method
func (m *MockAccountServiceServer) UpdateGroup(arg0 context.Context, arg1 *v1.UpdateGroupRequest) (*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0, arg1)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup
func (mr *MockAccountServiceServerMockRecorder) UpdateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockAccountServiceServer)(nil).UpdateGroup), arg0, arg1)
}

// DeleteGroup mocks base method
func (m *MockAccountServiceServer) DeleteGroup(arg0 context.Context, arg1 *v1.DeleteGroupRequest) (*v1.DeleteGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockAccountServiceServerMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockAccountServiceServer)(nil).DeleteGroup), arg0, arg1)
}

// ListChildGroups mocks base method
func (m *MockAccountServiceServer) ListChildGroups(arg0 context.Context, arg1 *v1.ListChildGroupsRequest) (*v1.ListGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChildGroups", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChildGroups indicates an expected call of ListChildGroups
func (mr *MockAccountServiceServerMockRecorder) ListChildGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChildGroups", reflect.TypeOf((*MockAccountServiceServer)(nil).ListChildGroups), arg0, arg1)
}

// GetUsers mocks base method
func (m *MockAccountServiceServer) GetUsers(arg0 context.Context, arg1 *v1.GetUsersRequest) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockAccountServiceServerMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAccountServiceServer)(nil).GetUsers), arg0, arg1)
}

// GetGroupUsers mocks base method
func (m *MockAccountServiceServer) GetGroupUsers(arg0 context.Context, arg1 *v1.GetGroupUsersRequest) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupUsers", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupUsers indicates an expected call of GetGroupUsers
func (mr *MockAccountServiceServerMockRecorder) GetGroupUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupUsers", reflect.TypeOf((*MockAccountServiceServer)(nil).GetGroupUsers), arg0, arg1)
}

// AddGroupUser mocks base method
func (m *MockAccountServiceServer) AddGroupUser(arg0 context.Context, arg1 *v1.AddGroupUsersRequest) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGroupUser indicates an expected call of AddGroupUser
func (mr *MockAccountServiceServerMockRecorder) AddGroupUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupUser", reflect.TypeOf((*MockAccountServiceServer)(nil).AddGroupUser), arg0, arg1)
}

// DeleteGroupUser mocks base method
func (m *MockAccountServiceServer) DeleteGroupUser(arg0 context.Context, arg1 *v1.DeleteGroupUsersRequest) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupUser indicates an expected call of DeleteGroupUser
func (mr *MockAccountServiceServerMockRecorder) DeleteGroupUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupUser", reflect.TypeOf((*MockAccountServiceServer)(nil).DeleteGroupUser), arg0, arg1)
}

// CreateScope mocks base method
func (m *MockAccountServiceServer) CreateScope(arg0 context.Context, arg1 *v1.CreateScopeRequest) (*v1.CreateScopeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScope", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScope indicates an expected call of CreateScope
func (mr *MockAccountServiceServerMockRecorder) CreateScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScope", reflect.TypeOf((*MockAccountServiceServer)(nil).CreateScope), arg0, arg1)
}

// ListScopes mocks base method
func (m *MockAccountServiceServer) ListScopes(arg0 context.Context, arg1 *v1.ListScopesRequest) (*v1.ListScopesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScopes", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListScopesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScopes indicates an expected call of ListScopes
func (mr *MockAccountServiceServerMockRecorder) ListScopes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScopes", reflect.TypeOf((*MockAccountServiceServer)(nil).ListScopes), arg0, arg1)
}

// DropScopeData mocks base method
func (m *MockAccountServiceServer) DropScopeData(arg0 context.Context, arg1 *v1.DropScopeDataRequest) (*v1.DropScopeDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropScopeData", arg0, arg1)
	ret0, _ := ret[0].(*v1.DropScopeDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropScopeData indicates an expected call of DropScopeData
func (mr *MockAccountServiceServerMockRecorder) DropScopeData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropScopeData", reflect.TypeOf((*MockAccountServiceServer)(nil).DropScopeData), arg0, arg1)
}

// GetScope mocks base method
func (m *MockAccountServiceServer) GetScope(arg0 context.Context, arg1 *v1.GetScopeRequest) (*v1.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScope", arg0, arg1)
	ret0, _ := ret[0].(*v1.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScope indicates an expected call of GetScope
func (mr *MockAccountServiceServerMockRecorder) GetScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScope", reflect.TypeOf((*MockAccountServiceServer)(nil).GetScope), arg0, arg1)
}

// UpsertScopeExpenses mocks base method
func (m *MockAccountServiceServer) UpsertScopeExpenses(arg0 context.Context, arg1 *v1.UpsertScopeExpensesRequest) (*v1.CreateScopeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertScopeExpenses", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertScopeExpenses indicates an expected call of UpsertScopeExpenses
func (mr *MockAccountServiceServerMockRecorder) UpsertScopeExpenses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScopeExpenses", reflect.TypeOf((*MockAccountServiceServer)(nil).UpsertScopeExpenses), arg0, arg1)
}

// GetScopeExpenses mocks base method
func (m *MockAccountServiceServer) GetScopeExpenses(arg0 context.Context, arg1 *v1.GetScopeRequest) (*v1.ScopeExpenses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopeExpenses", arg0, arg1)
	ret0, _ := ret[0].(*v1.ScopeExpenses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopeExpenses indicates an expected call of GetScopeExpenses
func (mr *MockAccountServiceServerMockRecorder) GetScopeExpenses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopeExpenses", reflect.TypeOf((*MockAccountServiceServer)(nil).GetScopeExpenses), arg0, arg1)
}

// GetScopeLists mocks base method
func (m *MockAccountServiceServer) GetScopeLists(arg0 context.Context, arg1 *v1.GetScopeListRequest) (*v1.ScopeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopeLists", arg0, arg1)
	ret0, _ := ret[0].(*v1.ScopeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopeLists indicates an expected call of GetScopeLists
func (mr *MockAccountServiceServerMockRecorder) GetScopeLists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopeLists", reflect.TypeOf((*MockAccountServiceServer)(nil).GetScopeLists), arg0, arg1)
}

// ListComplienceGroups mocks base method
func (m *MockAccountServiceServer) ListComplienceGroups(arg0 context.Context, arg1 *v1.ListGroupsRequest) (*v1.ListComplienceGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplienceGroups", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListComplienceGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplienceGroups indicates an expected call of ListComplienceGroups
func (mr *MockAccountServiceServerMockRecorder) ListComplienceGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplienceGroups", reflect.TypeOf((*MockAccountServiceServer)(nil).ListComplienceGroups), arg0, arg1)
}

// GetAdminUserScope mocks base method
func (m *MockAccountServiceServer) GetAdminUserScope(arg0 context.Context, arg1 *v1.GetAdminUserScopeRequest) (*v1.GetAdminUserScopeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminUserScope", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetAdminUserScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminUserScope indicates an expected call of GetAdminUserScope
func (mr *MockAccountServiceServerMockRecorder) GetAdminUserScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUserScope", reflect.TypeOf((*MockAccountServiceServer)(nil).GetAdminUserScope), arg0, arg1)
}

// MockUnsafeAccountServiceServer is a mock of UnsafeAccountServiceServer interface
type MockUnsafeAccountServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAccountServiceServerMockRecorder
}

// MockUnsafeAccountServiceServerMockRecorder is the mock recorder for MockUnsafeAccountServiceServer
type MockUnsafeAccountServiceServerMockRecorder struct {
	mock *MockUnsafeAccountServiceServer
}

// NewMockUnsafeAccountServiceServer creates a new mock instance
func NewMockUnsafeAccountServiceServer(ctrl *gomock.Controller) *MockUnsafeAccountServiceServer {
	mock := &MockUnsafeAccountServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAccountServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnsafeAccountServiceServer) EXPECT() *MockUnsafeAccountServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAccountServiceServer mocks base method
func (m *MockUnsafeAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAccountServiceServer")
}

// mustEmbedUnimplementedAccountServiceServer indicates an expected call of mustEmbedUnimplementedAccountServiceServer
func (mr *MockUnsafeAccountServiceServerMockRecorder) mustEmbedUnimplementedAccountServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAccountServiceServer", reflect.TypeOf((*MockUnsafeAccountServiceServer)(nil).mustEmbedUnimplementedAccountServiceServer))
}
