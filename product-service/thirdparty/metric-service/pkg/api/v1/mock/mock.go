// Code generated by MockGen. DO NOT EDIT.
// Source: ../../thirdparty/metric-service/pkg/api/v1/metric_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "gitlab.tech.orange/optisam/optisam-it/optisam-services/product-service/thirdparty/metric-service/pkg/api/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockMetricServiceClient is a mock of MetricServiceClient interface
type MockMetricServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceClientMockRecorder
}

// MockMetricServiceClientMockRecorder is the mock recorder for MockMetricServiceClient
type MockMetricServiceClientMockRecorder struct {
	mock *MockMetricServiceClient
}

// NewMockMetricServiceClient creates a new mock instance
func NewMockMetricServiceClient(ctrl *gomock.Controller) *MockMetricServiceClient {
	mock := &MockMetricServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetricServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricServiceClient) EXPECT() *MockMetricServiceClientMockRecorder {
	return m.recorder
}

// ListMetrices mocks base method
func (m *MockMetricServiceClient) ListMetrices(ctx context.Context, in *v1.ListMetricRequest, opts ...grpc.CallOption) (*v1.ListMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetrices", varargs...)
	ret0, _ := ret[0].(*v1.ListMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetrices indicates an expected call of ListMetrices
func (mr *MockMetricServiceClientMockRecorder) ListMetrices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetrices", reflect.TypeOf((*MockMetricServiceClient)(nil).ListMetrices), varargs...)
}

// DeleteMetric mocks base method
func (m *MockMetricServiceClient) DeleteMetric(ctx context.Context, in *v1.DeleteMetricRequest, opts ...grpc.CallOption) (*v1.DeleteMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMetric", varargs...)
	ret0, _ := ret[0].(*v1.DeleteMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMetric indicates an expected call of DeleteMetric
func (mr *MockMetricServiceClientMockRecorder) DeleteMetric(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetric", reflect.TypeOf((*MockMetricServiceClient)(nil).DeleteMetric), varargs...)
}

// ListMetricType mocks base method
func (m *MockMetricServiceClient) ListMetricType(ctx context.Context, in *v1.ListMetricTypeRequest, opts ...grpc.CallOption) (*v1.ListMetricTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetricType", varargs...)
	ret0, _ := ret[0].(*v1.ListMetricTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricType indicates an expected call of ListMetricType
func (mr *MockMetricServiceClientMockRecorder) ListMetricType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricType", reflect.TypeOf((*MockMetricServiceClient)(nil).ListMetricType), varargs...)
}

// CreateMetric mocks base method
func (m *MockMetricServiceClient) CreateMetric(ctx context.Context, in *v1.CreateMetricRequest, opts ...grpc.CallOption) (*v1.CreateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetric", varargs...)
	ret0, _ := ret[0].(*v1.CreateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetric indicates an expected call of CreateMetric
func (mr *MockMetricServiceClientMockRecorder) CreateMetric(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetric", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetric), varargs...)
}

// CreateMetricOracleProcessorStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricOracleProcessorStandard(ctx context.Context, in *v1.MetricOPS, opts ...grpc.CallOption) (*v1.MetricOPS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricOracleProcessorStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricOPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricOracleProcessorStandard indicates an expected call of CreateMetricOracleProcessorStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricOracleProcessorStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricOracleProcessorStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricOracleProcessorStandard), varargs...)
}

// UpdateMetricOracleProcessorStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricOracleProcessorStandard(ctx context.Context, in *v1.MetricOPS, opts ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricOracleProcessorStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricOracleProcessorStandard indicates an expected call of UpdateMetricOracleProcessorStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricOracleProcessorStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricOracleProcessorStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricOracleProcessorStandard), varargs...)
}

// CreateMetricOracleNUPStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricOracleNUPStandard(ctx context.Context, in *v1.MetricNUP, opts ...grpc.CallOption) (*v1.MetricNUP, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricOracleNUPStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricNUP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricOracleNUPStandard indicates an expected call of CreateMetricOracleNUPStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricOracleNUPStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricOracleNUPStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricOracleNUPStandard), varargs...)
}

// UpdateMetricOracleNUPStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricOracleNUPStandard(ctx context.Context, in *v1.MetricNUP, opts ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricOracleNUPStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricOracleNUPStandard indicates an expected call of UpdateMetricOracleNUPStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricOracleNUPStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricOracleNUPStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricOracleNUPStandard), varargs...)
}

// CreateMetricSAGProcessorStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricSAGProcessorStandard(ctx context.Context, in *v1.MetricSPS, opts ...grpc.CallOption) (*v1.MetricSPS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricSAGProcessorStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricSPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricSAGProcessorStandard indicates an expected call of CreateMetricSAGProcessorStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricSAGProcessorStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricSAGProcessorStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricSAGProcessorStandard), varargs...)
}

// UpdateMetricSAGProcessorStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricSAGProcessorStandard(ctx context.Context, in *v1.MetricSPS, opts ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricSAGProcessorStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricSAGProcessorStandard indicates an expected call of UpdateMetricSAGProcessorStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricSAGProcessorStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricSAGProcessorStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricSAGProcessorStandard), varargs...)
}

// CreateMetricIBMPvuStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricIBMPvuStandard(ctx context.Context, in *v1.MetricIPS, opts ...grpc.CallOption) (*v1.MetricIPS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricIBMPvuStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricIPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricIBMPvuStandard indicates an expected call of CreateMetricIBMPvuStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricIBMPvuStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricIBMPvuStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricIBMPvuStandard), varargs...)
}

// UpdateMetricIBMPvuStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricIBMPvuStandard(ctx context.Context, in *v1.MetricIPS, opts ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricIBMPvuStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricIBMPvuStandard indicates an expected call of UpdateMetricIBMPvuStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricIBMPvuStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricIBMPvuStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricIBMPvuStandard), varargs...)
}

// CreateMetricAttrCounterStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricAttrCounterStandard(ctx context.Context, in *v1.MetricACS, opts ...grpc.CallOption) (*v1.MetricACS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricAttrCounterStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricACS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricAttrCounterStandard indicates an expected call of CreateMetricAttrCounterStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricAttrCounterStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricAttrCounterStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricAttrCounterStandard), varargs...)
}

// UpdateMetricAttrCounterStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricAttrCounterStandard(ctx context.Context, in *v1.MetricACS, opts ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricAttrCounterStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricAttrCounterStandard indicates an expected call of UpdateMetricAttrCounterStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricAttrCounterStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricAttrCounterStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricAttrCounterStandard), varargs...)
}

// CreateMetricInstanceNumberStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricInstanceNumberStandard(ctx context.Context, in *v1.MetricINM, opts ...grpc.CallOption) (*v1.MetricINM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricInstanceNumberStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricINM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricInstanceNumberStandard indicates an expected call of CreateMetricInstanceNumberStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricInstanceNumberStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricInstanceNumberStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricInstanceNumberStandard), varargs...)
}

// UpdateMetricInstanceNumberStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricInstanceNumberStandard(ctx context.Context, in *v1.MetricINM, opts ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricInstanceNumberStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricInstanceNumberStandard indicates an expected call of UpdateMetricInstanceNumberStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricInstanceNumberStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricInstanceNumberStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricInstanceNumberStandard), varargs...)
}

// CreateMetricStaticStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricStaticStandard(ctx context.Context, in *v1.MetricSS, opts ...grpc.CallOption) (*v1.MetricSS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricStaticStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricSS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricStaticStandard indicates an expected call of CreateMetricStaticStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricStaticStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricStaticStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricStaticStandard), varargs...)
}

// UpdateMetricStaticStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricStaticStandard(ctx context.Context, in *v1.MetricSS, opts ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricStaticStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricStaticStandard indicates an expected call of UpdateMetricStaticStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricStaticStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricStaticStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricStaticStandard), varargs...)
}

// CreateMetricUserSumStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricUserSumStandard(ctx context.Context, in *v1.MetricUSS, opts ...grpc.CallOption) (*v1.MetricUSS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricUserSumStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricUSS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricUserSumStandard indicates an expected call of CreateMetricUserSumStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricUserSumStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricUserSumStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricUserSumStandard), varargs...)
}

// CreateMetricAttrSumStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricAttrSumStandard(ctx context.Context, in *v1.MetricAttrSum, opts ...grpc.CallOption) (*v1.MetricAttrSum, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricAttrSumStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricAttrSum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricAttrSumStandard indicates an expected call of CreateMetricAttrSumStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricAttrSumStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricAttrSumStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricAttrSumStandard), varargs...)
}

// UpdateMetricAttrSumStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricAttrSumStandard(ctx context.Context, in *v1.MetricAttrSum, opts ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricAttrSumStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricAttrSumStandard indicates an expected call of UpdateMetricAttrSumStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricAttrSumStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricAttrSumStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricAttrSumStandard), varargs...)
}

// CreateMetricEquipAttrStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricEquipAttrStandard(ctx context.Context, in *v1.MetricEquipAtt, opts ...grpc.CallOption) (*v1.MetricEquipAtt, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricEquipAttrStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricEquipAtt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricEquipAttrStandard indicates an expected call of CreateMetricEquipAttrStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricEquipAttrStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricEquipAttrStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricEquipAttrStandard), varargs...)
}

// UpdateMetricEquipAttrStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricEquipAttrStandard(ctx context.Context, in *v1.MetricEquipAtt, opts ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricEquipAttrStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricEquipAttrStandard indicates an expected call of UpdateMetricEquipAttrStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricEquipAttrStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricEquipAttrStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricEquipAttrStandard), varargs...)
}

// CreateMetricUserNominativeStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricUserNominativeStandard(ctx context.Context, in *v1.MetricUNS, opts ...grpc.CallOption) (*v1.MetricUNS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricUserNominativeStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricUNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricUserNominativeStandard indicates an expected call of CreateMetricUserNominativeStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricUserNominativeStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricUserNominativeStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricUserNominativeStandard), varargs...)
}

// UpdateMetricUserNominativeStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricUserNominativeStandard(ctx context.Context, in *v1.MetricUNS, opts ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricUserNominativeStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricUserNominativeStandard indicates an expected call of UpdateMetricUserNominativeStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricUserNominativeStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricUserNominativeStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricUserNominativeStandard), varargs...)
}

// CreateMetricUserConcurentStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricUserConcurentStandard(ctx context.Context, in *v1.MetricUCS, opts ...grpc.CallOption) (*v1.MetricUCS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricUserConcurentStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricUCS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricUserConcurentStandard indicates an expected call of CreateMetricUserConcurentStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricUserConcurentStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricUserConcurentStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricUserConcurentStandard), varargs...)
}

// UpdateMetricUserConcurentStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricUserConcurentStandard(ctx context.Context, in *v1.MetricUCS, opts ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricUserConcurentStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricUserConcurentStandard indicates an expected call of UpdateMetricUserConcurentStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricUserConcurentStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricUserConcurentStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricUserConcurentStandard), varargs...)
}

// CreateMetricImport mocks base method
func (m *MockMetricServiceClient) CreateMetricImport(ctx context.Context, in *v1.MetricImportRequest, opts ...grpc.CallOption) (*v1.MetricImportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricImport", varargs...)
	ret0, _ := ret[0].(*v1.MetricImportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricImport indicates an expected call of CreateMetricImport
func (mr *MockMetricServiceClientMockRecorder) CreateMetricImport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricImport", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricImport), varargs...)
}

// CreateScopeMetric mocks base method
func (m *MockMetricServiceClient) CreateScopeMetric(ctx context.Context, in *v1.CreateScopeMetricRequest, opts ...grpc.CallOption) (*v1.CreateScopeMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateScopeMetric", varargs...)
	ret0, _ := ret[0].(*v1.CreateScopeMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScopeMetric indicates an expected call of CreateScopeMetric
func (mr *MockMetricServiceClientMockRecorder) CreateScopeMetric(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScopeMetric", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateScopeMetric), varargs...)
}

// CreateMetricSQLStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricSQLStandard(ctx context.Context, in *v1.MetricScopeSQL, opts ...grpc.CallOption) (*v1.MetricScopeSQL, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricSQLStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricScopeSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricSQLStandard indicates an expected call of CreateMetricSQLStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricSQLStandard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricSQLStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricSQLStandard), varargs...)
}

// GetMetricConfiguration mocks base method
func (m *MockMetricServiceClient) GetMetricConfiguration(ctx context.Context, in *v1.GetMetricConfigurationRequest, opts ...grpc.CallOption) (*v1.GetMetricConfigurationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricConfiguration", varargs...)
	ret0, _ := ret[0].(*v1.GetMetricConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricConfiguration indicates an expected call of GetMetricConfiguration
func (mr *MockMetricServiceClientMockRecorder) GetMetricConfiguration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricConfiguration", reflect.TypeOf((*MockMetricServiceClient)(nil).GetMetricConfiguration), varargs...)
}

// DropMetricData mocks base method
func (m *MockMetricServiceClient) DropMetricData(ctx context.Context, in *v1.DropMetricDataRequest, opts ...grpc.CallOption) (*v1.DropMetricDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropMetricData", varargs...)
	ret0, _ := ret[0].(*v1.DropMetricDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMetricData indicates an expected call of DropMetricData
func (mr *MockMetricServiceClientMockRecorder) DropMetricData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMetricData", reflect.TypeOf((*MockMetricServiceClient)(nil).DropMetricData), varargs...)
}

// MockMetricServiceServer is a mock of MetricServiceServer interface
type MockMetricServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceServerMockRecorder
}

// MockMetricServiceServerMockRecorder is the mock recorder for MockMetricServiceServer
type MockMetricServiceServerMockRecorder struct {
	mock *MockMetricServiceServer
}

// NewMockMetricServiceServer creates a new mock instance
func NewMockMetricServiceServer(ctrl *gomock.Controller) *MockMetricServiceServer {
	mock := &MockMetricServiceServer{ctrl: ctrl}
	mock.recorder = &MockMetricServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricServiceServer) EXPECT() *MockMetricServiceServerMockRecorder {
	return m.recorder
}

// ListMetrices mocks base method
func (m *MockMetricServiceServer) ListMetrices(arg0 context.Context, arg1 *v1.ListMetricRequest) (*v1.ListMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetrices", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetrices indicates an expected call of ListMetrices
func (mr *MockMetricServiceServerMockRecorder) ListMetrices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetrices", reflect.TypeOf((*MockMetricServiceServer)(nil).ListMetrices), arg0, arg1)
}

// DeleteMetric mocks base method
func (m *MockMetricServiceServer) DeleteMetric(arg0 context.Context, arg1 *v1.DeleteMetricRequest) (*v1.DeleteMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetric", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMetric indicates an expected call of DeleteMetric
func (mr *MockMetricServiceServerMockRecorder) DeleteMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetric", reflect.TypeOf((*MockMetricServiceServer)(nil).DeleteMetric), arg0, arg1)
}

// ListMetricType mocks base method
func (m *MockMetricServiceServer) ListMetricType(arg0 context.Context, arg1 *v1.ListMetricTypeRequest) (*v1.ListMetricTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricType", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListMetricTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricType indicates an expected call of ListMetricType
func (mr *MockMetricServiceServerMockRecorder) ListMetricType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricType", reflect.TypeOf((*MockMetricServiceServer)(nil).ListMetricType), arg0, arg1)
}

// CreateMetric mocks base method
func (m *MockMetricServiceServer) CreateMetric(arg0 context.Context, arg1 *v1.CreateMetricRequest) (*v1.CreateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetric", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetric indicates an expected call of CreateMetric
func (mr *MockMetricServiceServerMockRecorder) CreateMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetric", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetric), arg0, arg1)
}

// CreateMetricOracleProcessorStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricOracleProcessorStandard(arg0 context.Context, arg1 *v1.MetricOPS) (*v1.MetricOPS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricOracleProcessorStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricOPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricOracleProcessorStandard indicates an expected call of CreateMetricOracleProcessorStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricOracleProcessorStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricOracleProcessorStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricOracleProcessorStandard), arg0, arg1)
}

// UpdateMetricOracleProcessorStandard mocks base method
func (m *MockMetricServiceServer) UpdateMetricOracleProcessorStandard(arg0 context.Context, arg1 *v1.MetricOPS) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricOracleProcessorStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricOracleProcessorStandard indicates an expected call of UpdateMetricOracleProcessorStandard
func (mr *MockMetricServiceServerMockRecorder) UpdateMetricOracleProcessorStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricOracleProcessorStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMetricOracleProcessorStandard), arg0, arg1)
}

// CreateMetricOracleNUPStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricOracleNUPStandard(arg0 context.Context, arg1 *v1.MetricNUP) (*v1.MetricNUP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricOracleNUPStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricNUP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricOracleNUPStandard indicates an expected call of CreateMetricOracleNUPStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricOracleNUPStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricOracleNUPStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricOracleNUPStandard), arg0, arg1)
}

// UpdateMetricOracleNUPStandard mocks base method
func (m *MockMetricServiceServer) UpdateMetricOracleNUPStandard(arg0 context.Context, arg1 *v1.MetricNUP) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricOracleNUPStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricOracleNUPStandard indicates an expected call of UpdateMetricOracleNUPStandard
func (mr *MockMetricServiceServerMockRecorder) UpdateMetricOracleNUPStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricOracleNUPStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMetricOracleNUPStandard), arg0, arg1)
}

// CreateMetricSAGProcessorStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricSAGProcessorStandard(arg0 context.Context, arg1 *v1.MetricSPS) (*v1.MetricSPS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricSAGProcessorStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricSPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricSAGProcessorStandard indicates an expected call of CreateMetricSAGProcessorStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricSAGProcessorStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricSAGProcessorStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricSAGProcessorStandard), arg0, arg1)
}

// UpdateMetricSAGProcessorStandard mocks base method
func (m *MockMetricServiceServer) UpdateMetricSAGProcessorStandard(arg0 context.Context, arg1 *v1.MetricSPS) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricSAGProcessorStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricSAGProcessorStandard indicates an expected call of UpdateMetricSAGProcessorStandard
func (mr *MockMetricServiceServerMockRecorder) UpdateMetricSAGProcessorStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricSAGProcessorStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMetricSAGProcessorStandard), arg0, arg1)
}

// CreateMetricIBMPvuStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricIBMPvuStandard(arg0 context.Context, arg1 *v1.MetricIPS) (*v1.MetricIPS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricIBMPvuStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricIPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricIBMPvuStandard indicates an expected call of CreateMetricIBMPvuStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricIBMPvuStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricIBMPvuStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricIBMPvuStandard), arg0, arg1)
}

// UpdateMetricIBMPvuStandard mocks base method
func (m *MockMetricServiceServer) UpdateMetricIBMPvuStandard(arg0 context.Context, arg1 *v1.MetricIPS) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricIBMPvuStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricIBMPvuStandard indicates an expected call of UpdateMetricIBMPvuStandard
func (mr *MockMetricServiceServerMockRecorder) UpdateMetricIBMPvuStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricIBMPvuStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMetricIBMPvuStandard), arg0, arg1)
}

// CreateMetricAttrCounterStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricAttrCounterStandard(arg0 context.Context, arg1 *v1.MetricACS) (*v1.MetricACS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricAttrCounterStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricACS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricAttrCounterStandard indicates an expected call of CreateMetricAttrCounterStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricAttrCounterStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricAttrCounterStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricAttrCounterStandard), arg0, arg1)
}

// UpdateMetricAttrCounterStandard mocks base method
func (m *MockMetricServiceServer) UpdateMetricAttrCounterStandard(arg0 context.Context, arg1 *v1.MetricACS) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricAttrCounterStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricAttrCounterStandard indicates an expected call of UpdateMetricAttrCounterStandard
func (mr *MockMetricServiceServerMockRecorder) UpdateMetricAttrCounterStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricAttrCounterStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMetricAttrCounterStandard), arg0, arg1)
}

// CreateMetricInstanceNumberStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricInstanceNumberStandard(arg0 context.Context, arg1 *v1.MetricINM) (*v1.MetricINM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricInstanceNumberStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricINM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricInstanceNumberStandard indicates an expected call of CreateMetricInstanceNumberStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricInstanceNumberStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricInstanceNumberStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricInstanceNumberStandard), arg0, arg1)
}

// UpdateMetricInstanceNumberStandard mocks base method
func (m *MockMetricServiceServer) UpdateMetricInstanceNumberStandard(arg0 context.Context, arg1 *v1.MetricINM) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricInstanceNumberStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricInstanceNumberStandard indicates an expected call of UpdateMetricInstanceNumberStandard
func (mr *MockMetricServiceServerMockRecorder) UpdateMetricInstanceNumberStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricInstanceNumberStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMetricInstanceNumberStandard), arg0, arg1)
}

// CreateMetricStaticStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricStaticStandard(arg0 context.Context, arg1 *v1.MetricSS) (*v1.MetricSS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricStaticStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricSS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricStaticStandard indicates an expected call of CreateMetricStaticStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricStaticStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricStaticStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricStaticStandard), arg0, arg1)
}

// UpdateMetricStaticStandard mocks base method
func (m *MockMetricServiceServer) UpdateMetricStaticStandard(arg0 context.Context, arg1 *v1.MetricSS) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricStaticStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricStaticStandard indicates an expected call of UpdateMetricStaticStandard
func (mr *MockMetricServiceServerMockRecorder) UpdateMetricStaticStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricStaticStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMetricStaticStandard), arg0, arg1)
}

// CreateMetricUserSumStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricUserSumStandard(arg0 context.Context, arg1 *v1.MetricUSS) (*v1.MetricUSS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricUserSumStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricUSS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricUserSumStandard indicates an expected call of CreateMetricUserSumStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricUserSumStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricUserSumStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricUserSumStandard), arg0, arg1)
}

// CreateMetricAttrSumStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricAttrSumStandard(arg0 context.Context, arg1 *v1.MetricAttrSum) (*v1.MetricAttrSum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricAttrSumStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricAttrSum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricAttrSumStandard indicates an expected call of CreateMetricAttrSumStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricAttrSumStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricAttrSumStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricAttrSumStandard), arg0, arg1)
}

// UpdateMetricAttrSumStandard mocks base method
func (m *MockMetricServiceServer) UpdateMetricAttrSumStandard(arg0 context.Context, arg1 *v1.MetricAttrSum) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricAttrSumStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricAttrSumStandard indicates an expected call of UpdateMetricAttrSumStandard
func (mr *MockMetricServiceServerMockRecorder) UpdateMetricAttrSumStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricAttrSumStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMetricAttrSumStandard), arg0, arg1)
}

// CreateMetricEquipAttrStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricEquipAttrStandard(arg0 context.Context, arg1 *v1.MetricEquipAtt) (*v1.MetricEquipAtt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricEquipAttrStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricEquipAtt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricEquipAttrStandard indicates an expected call of CreateMetricEquipAttrStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricEquipAttrStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricEquipAttrStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricEquipAttrStandard), arg0, arg1)
}

// UpdateMetricEquipAttrStandard mocks base method
func (m *MockMetricServiceServer) UpdateMetricEquipAttrStandard(arg0 context.Context, arg1 *v1.MetricEquipAtt) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricEquipAttrStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricEquipAttrStandard indicates an expected call of UpdateMetricEquipAttrStandard
func (mr *MockMetricServiceServerMockRecorder) UpdateMetricEquipAttrStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricEquipAttrStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMetricEquipAttrStandard), arg0, arg1)
}

// CreateMetricUserNominativeStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricUserNominativeStandard(arg0 context.Context, arg1 *v1.MetricUNS) (*v1.MetricUNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricUserNominativeStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricUNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricUserNominativeStandard indicates an expected call of CreateMetricUserNominativeStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricUserNominativeStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricUserNominativeStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricUserNominativeStandard), arg0, arg1)
}

// UpdateMetricUserNominativeStandard mocks base method
func (m *MockMetricServiceServer) UpdateMetricUserNominativeStandard(arg0 context.Context, arg1 *v1.MetricUNS) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricUserNominativeStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricUserNominativeStandard indicates an expected call of UpdateMetricUserNominativeStandard
func (mr *MockMetricServiceServerMockRecorder) UpdateMetricUserNominativeStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricUserNominativeStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMetricUserNominativeStandard), arg0, arg1)
}

// CreateMetricUserConcurentStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricUserConcurentStandard(arg0 context.Context, arg1 *v1.MetricUCS) (*v1.MetricUCS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricUserConcurentStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricUCS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricUserConcurentStandard indicates an expected call of CreateMetricUserConcurentStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricUserConcurentStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricUserConcurentStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricUserConcurentStandard), arg0, arg1)
}

// UpdateMetricUserConcurentStandard mocks base method
func (m *MockMetricServiceServer) UpdateMetricUserConcurentStandard(arg0 context.Context, arg1 *v1.MetricUCS) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricUserConcurentStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricUserConcurentStandard indicates an expected call of UpdateMetricUserConcurentStandard
func (mr *MockMetricServiceServerMockRecorder) UpdateMetricUserConcurentStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricUserConcurentStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).UpdateMetricUserConcurentStandard), arg0, arg1)
}

// CreateMetricImport mocks base method
func (m *MockMetricServiceServer) CreateMetricImport(arg0 context.Context, arg1 *v1.MetricImportRequest) (*v1.MetricImportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricImport", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricImportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricImport indicates an expected call of CreateMetricImport
func (mr *MockMetricServiceServerMockRecorder) CreateMetricImport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricImport", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricImport), arg0, arg1)
}

// CreateScopeMetric mocks base method
func (m *MockMetricServiceServer) CreateScopeMetric(arg0 context.Context, arg1 *v1.CreateScopeMetricRequest) (*v1.CreateScopeMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScopeMetric", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateScopeMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScopeMetric indicates an expected call of CreateScopeMetric
func (mr *MockMetricServiceServerMockRecorder) CreateScopeMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScopeMetric", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateScopeMetric), arg0, arg1)
}

// CreateMetricSQLStandard mocks base method
func (m *MockMetricServiceServer) CreateMetricSQLStandard(arg0 context.Context, arg1 *v1.MetricScopeSQL) (*v1.MetricScopeSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricSQLStandard", arg0, arg1)
	ret0, _ := ret[0].(*v1.MetricScopeSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricSQLStandard indicates an expected call of CreateMetricSQLStandard
func (mr *MockMetricServiceServerMockRecorder) CreateMetricSQLStandard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricSQLStandard", reflect.TypeOf((*MockMetricServiceServer)(nil).CreateMetricSQLStandard), arg0, arg1)
}

// GetMetricConfiguration mocks base method
func (m *MockMetricServiceServer) GetMetricConfiguration(arg0 context.Context, arg1 *v1.GetMetricConfigurationRequest) (*v1.GetMetricConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetMetricConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricConfiguration indicates an expected call of GetMetricConfiguration
func (mr *MockMetricServiceServerMockRecorder) GetMetricConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricConfiguration", reflect.TypeOf((*MockMetricServiceServer)(nil).GetMetricConfiguration), arg0, arg1)
}

// DropMetricData mocks base method
func (m *MockMetricServiceServer) DropMetricData(arg0 context.Context, arg1 *v1.DropMetricDataRequest) (*v1.DropMetricDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropMetricData", arg0, arg1)
	ret0, _ := ret[0].(*v1.DropMetricDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMetricData indicates an expected call of DropMetricData
func (mr *MockMetricServiceServerMockRecorder) DropMetricData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMetricData", reflect.TypeOf((*MockMetricServiceServer)(nil).DropMetricData), arg0, arg1)
}

// MockUnsafeMetricServiceServer is a mock of UnsafeMetricServiceServer interface
type MockUnsafeMetricServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMetricServiceServerMockRecorder
}

// MockUnsafeMetricServiceServerMockRecorder is the mock recorder for MockUnsafeMetricServiceServer
type MockUnsafeMetricServiceServerMockRecorder struct {
	mock *MockUnsafeMetricServiceServer
}

// NewMockUnsafeMetricServiceServer creates a new mock instance
func NewMockUnsafeMetricServiceServer(ctrl *gomock.Controller) *MockUnsafeMetricServiceServer {
	mock := &MockUnsafeMetricServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMetricServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnsafeMetricServiceServer) EXPECT() *MockUnsafeMetricServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMetricServiceServer mocks base method
func (m *MockUnsafeMetricServiceServer) mustEmbedUnimplementedMetricServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricServiceServer")
}

// mustEmbedUnimplementedMetricServiceServer indicates an expected call of mustEmbedUnimplementedMetricServiceServer
func (mr *MockUnsafeMetricServiceServerMockRecorder) mustEmbedUnimplementedMetricServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricServiceServer", reflect.TypeOf((*MockUnsafeMetricServiceServer)(nil).mustEmbedUnimplementedMetricServiceServer))
}
