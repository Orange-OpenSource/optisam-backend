// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: equipment.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SortOrder int32

const (
	SortOrder_ASC  SortOrder = 0
	SortOrder_asc  SortOrder = 0
	SortOrder_DESC SortOrder = 1
	SortOrder_desc SortOrder = 1
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "ASC",
		// Duplicate value: 0: "asc",
		1: "DESC",
		// Duplicate value: 1: "desc",
	}
	SortOrder_value = map[string]int32{
		"ASC":  0,
		"asc":  0,
		"DESC": 1,
		"desc": 1,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_equipment_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_equipment_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{0}
}

type DataTypes int32

const (
	DataTypes_UNKNOWN DataTypes = 0
	DataTypes_STRING  DataTypes = 1
	DataTypes_INT     DataTypes = 2
	DataTypes_FLOAT   DataTypes = 3
)

// Enum value maps for DataTypes.
var (
	DataTypes_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "INT",
		3: "FLOAT",
	}
	DataTypes_value = map[string]int32{
		"UNKNOWN": 0,
		"STRING":  1,
		"INT":     2,
		"FLOAT":   3,
	}
)

func (x DataTypes) Enum() *DataTypes {
	p := new(DataTypes)
	*p = x
	return p
}

func (x DataTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_equipment_proto_enumTypes[1].Descriptor()
}

func (DataTypes) Type() protoreflect.EnumType {
	return &file_equipment_proto_enumTypes[1]
}

func (x DataTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTypes.Descriptor instead.
func (DataTypes) EnumDescriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{1}
}

type EquipmentMetadataRequest_Attributes int32

const (
	EquipmentMetadataRequest_All      EquipmentMetadataRequest_Attributes = 0 // TODO : ALL caps
	EquipmentMetadataRequest_Mapped   EquipmentMetadataRequest_Attributes = 1
	EquipmentMetadataRequest_Unmapped EquipmentMetadataRequest_Attributes = 2
)

// Enum value maps for EquipmentMetadataRequest_Attributes.
var (
	EquipmentMetadataRequest_Attributes_name = map[int32]string{
		0: "All",
		1: "Mapped",
		2: "Unmapped",
	}
	EquipmentMetadataRequest_Attributes_value = map[string]int32{
		"All":      0,
		"Mapped":   1,
		"Unmapped": 2,
	}
)

func (x EquipmentMetadataRequest_Attributes) Enum() *EquipmentMetadataRequest_Attributes {
	p := new(EquipmentMetadataRequest_Attributes)
	*p = x
	return p
}

func (x EquipmentMetadataRequest_Attributes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentMetadataRequest_Attributes) Descriptor() protoreflect.EnumDescriptor {
	return file_equipment_proto_enumTypes[2].Descriptor()
}

func (EquipmentMetadataRequest_Attributes) Type() protoreflect.EnumType {
	return &file_equipment_proto_enumTypes[2]
}

func (x EquipmentMetadataRequest_Attributes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentMetadataRequest_Attributes.Descriptor instead.
func (EquipmentMetadataRequest_Attributes) EnumDescriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{36, 0}
}

type ListEquipmentMetadataRequest_Type int32

const (
	ListEquipmentMetadataRequest_UN_MAPPED ListEquipmentMetadataRequest_Type = 0
	ListEquipmentMetadataRequest_MAPPED    ListEquipmentMetadataRequest_Type = 1
	ListEquipmentMetadataRequest_ALL       ListEquipmentMetadataRequest_Type = 2
)

// Enum value maps for ListEquipmentMetadataRequest_Type.
var (
	ListEquipmentMetadataRequest_Type_name = map[int32]string{
		0: "UN_MAPPED",
		1: "MAPPED",
		2: "ALL",
	}
	ListEquipmentMetadataRequest_Type_value = map[string]int32{
		"UN_MAPPED": 0,
		"MAPPED":    1,
		"ALL":       2,
	}
)

func (x ListEquipmentMetadataRequest_Type) Enum() *ListEquipmentMetadataRequest_Type {
	p := new(ListEquipmentMetadataRequest_Type)
	*p = x
	return p
}

func (x ListEquipmentMetadataRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListEquipmentMetadataRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_equipment_proto_enumTypes[3].Descriptor()
}

func (ListEquipmentMetadataRequest_Type) Type() protoreflect.EnumType {
	return &file_equipment_proto_enumTypes[3]
}

func (x ListEquipmentMetadataRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListEquipmentMetadataRequest_Type.Descriptor instead.
func (ListEquipmentMetadataRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{37, 0}
}

type StringFilter_Type int32

const (
	StringFilter_REGEX StringFilter_Type = 0
	StringFilter_EQ    StringFilter_Type = 1
)

// Enum value maps for StringFilter_Type.
var (
	StringFilter_Type_name = map[int32]string{
		0: "REGEX",
		1: "EQ",
	}
	StringFilter_Type_value = map[string]int32{
		"REGEX": 0,
		"EQ":    1,
	}
)

func (x StringFilter_Type) Enum() *StringFilter_Type {
	p := new(StringFilter_Type)
	*p = x
	return p
}

func (x StringFilter_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringFilter_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_equipment_proto_enumTypes[4].Descriptor()
}

func (StringFilter_Type) Type() protoreflect.EnumType {
	return &file_equipment_proto_enumTypes[4]
}

func (x StringFilter_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StringFilter_Type.Descriptor instead.
func (StringFilter_Type) EnumDescriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{46, 0}
}

type GetMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetMetricsRequest) Reset() {
	*x = GetMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsRequest) ProtoMessage() {}

func (x *GetMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetMetricsRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{0}
}

func (x *GetMetricsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	Type []string `protobuf:"bytes,2,rep,name=type,proto3" json:"type,omitempty"`
}

func (x *GetMetricsResponse) Reset() {
	*x = GetMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsResponse) ProtoMessage() {}

func (x *GetMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetMetricsResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{1}
}

func (x *GetMetricsResponse) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *GetMetricsResponse) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

type CreateGenericScopeEquipmentTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *CreateGenericScopeEquipmentTypesRequest) Reset() {
	*x = CreateGenericScopeEquipmentTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGenericScopeEquipmentTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGenericScopeEquipmentTypesRequest) ProtoMessage() {}

func (x *CreateGenericScopeEquipmentTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGenericScopeEquipmentTypesRequest.ProtoReflect.Descriptor instead.
func (*CreateGenericScopeEquipmentTypesRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGenericScopeEquipmentTypesRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type CreateGenericScopeEquipmentTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *CreateGenericScopeEquipmentTypesResponse) Reset() {
	*x = CreateGenericScopeEquipmentTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGenericScopeEquipmentTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGenericScopeEquipmentTypesResponse) ProtoMessage() {}

func (x *CreateGenericScopeEquipmentTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGenericScopeEquipmentTypesResponse.ProtoReflect.Descriptor instead.
func (*CreateGenericScopeEquipmentTypesResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{3}
}

func (x *CreateGenericScopeEquipmentTypesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DropMetaDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DropMetaDataRequest) Reset() {
	*x = DropMetaDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropMetaDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropMetaDataRequest) ProtoMessage() {}

func (x *DropMetaDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropMetaDataRequest.ProtoReflect.Descriptor instead.
func (*DropMetaDataRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{4}
}

func (x *DropMetaDataRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DropMetaDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *DropMetaDataResponse) Reset() {
	*x = DropMetaDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropMetaDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropMetaDataResponse) ProtoMessage() {}

func (x *DropMetaDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropMetaDataResponse.ProtoReflect.Descriptor instead.
func (*DropMetaDataResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{5}
}

func (x *DropMetaDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type EquipmentsPerEquipmentTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *EquipmentsPerEquipmentTypeRequest) Reset() {
	*x = EquipmentsPerEquipmentTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentsPerEquipmentTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentsPerEquipmentTypeRequest) ProtoMessage() {}

func (x *EquipmentsPerEquipmentTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentsPerEquipmentTypeRequest.ProtoReflect.Descriptor instead.
func (*EquipmentsPerEquipmentTypeRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{6}
}

func (x *EquipmentsPerEquipmentTypeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type EquipmentsPerEquipmentTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypesEquipments []*TypeEquipments `protobuf:"bytes,1,rep,name=types_equipments,json=typesEquipments,proto3" json:"types_equipments,omitempty"`
}

func (x *EquipmentsPerEquipmentTypeResponse) Reset() {
	*x = EquipmentsPerEquipmentTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentsPerEquipmentTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentsPerEquipmentTypeResponse) ProtoMessage() {}

func (x *EquipmentsPerEquipmentTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentsPerEquipmentTypeResponse.ProtoReflect.Descriptor instead.
func (*EquipmentsPerEquipmentTypeResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{7}
}

func (x *EquipmentsPerEquipmentTypeResponse) GetTypesEquipments() []*TypeEquipments {
	if x != nil {
		return x.TypesEquipments
	}
	return nil
}

type TypeEquipments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipType     string `protobuf:"bytes,1,opt,name=equip_type,json=equipType,proto3" json:"equip_type,omitempty"`
	NumEquipments int32  `protobuf:"varint,2,opt,name=num_equipments,json=numEquipments,proto3" json:"num_equipments,omitempty"`
}

func (x *TypeEquipments) Reset() {
	*x = TypeEquipments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeEquipments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeEquipments) ProtoMessage() {}

func (x *TypeEquipments) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeEquipments.ProtoReflect.Descriptor instead.
func (*TypeEquipments) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{8}
}

func (x *TypeEquipments) GetEquipType() string {
	if x != nil {
		return x.EquipType
	}
	return ""
}

func (x *TypeEquipments) GetNumEquipments() int32 {
	if x != nil {
		return x.NumEquipments
	}
	return 0
}

type UpsertMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataType       string   `protobuf:"bytes,1,opt,name=metadata_type,json=metadataType,proto3" json:"metadata_type,omitempty"`
	MetadataSource     string   `protobuf:"bytes,2,opt,name=metadata_source,json=metadataSource,proto3" json:"metadata_source,omitempty"`
	MetadataAttributes []string `protobuf:"bytes,3,rep,name=metadata_attributes,json=metadataAttributes,proto3" json:"metadata_attributes,omitempty"`
	Scope              string   `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *UpsertMetadataRequest) Reset() {
	*x = UpsertMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMetadataRequest) ProtoMessage() {}

func (x *UpsertMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMetadataRequest.ProtoReflect.Descriptor instead.
func (*UpsertMetadataRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{9}
}

func (x *UpsertMetadataRequest) GetMetadataType() string {
	if x != nil {
		return x.MetadataType
	}
	return ""
}

func (x *UpsertMetadataRequest) GetMetadataSource() string {
	if x != nil {
		return x.MetadataSource
	}
	return ""
}

func (x *UpsertMetadataRequest) GetMetadataAttributes() []string {
	if x != nil {
		return x.MetadataAttributes
	}
	return nil
}

func (x *UpsertMetadataRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type UpsertMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpsertMetadataResponse) Reset() {
	*x = UpsertMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMetadataResponse) ProtoMessage() {}

func (x *UpsertMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMetadataResponse.ProtoReflect.Descriptor instead.
func (*UpsertMetadataResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{10}
}

func (x *UpsertMetadataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpdateAtrributeOldScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *UpdateAtrributeOldScopeRequest) Reset() {
	*x = UpdateAtrributeOldScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAtrributeOldScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAtrributeOldScopeRequest) ProtoMessage() {}

func (x *UpdateAtrributeOldScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAtrributeOldScopeRequest.ProtoReflect.Descriptor instead.
func (*UpdateAtrributeOldScopeRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateAtrributeOldScopeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type UpdateAtrributeOldScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *UpdateAtrributeOldScopeResponse) Reset() {
	*x = UpdateAtrributeOldScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAtrributeOldScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAtrributeOldScopeResponse) ProtoMessage() {}

func (x *UpdateAtrributeOldScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAtrributeOldScopeResponse.ProtoReflect.Descriptor instead.
func (*UpdateAtrributeOldScopeResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateAtrributeOldScopeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpsertEquipmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  string          `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	EqType string          `protobuf:"bytes,2,opt,name=eq_type,json=eqType,proto3" json:"eq_type,omitempty"`
	EqData *_struct.Struct `protobuf:"bytes,3,opt,name=eq_data,json=eqData,proto3" json:"eq_data,omitempty"`
}

func (x *UpsertEquipmentRequest) Reset() {
	*x = UpsertEquipmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertEquipmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertEquipmentRequest) ProtoMessage() {}

func (x *UpsertEquipmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertEquipmentRequest.ProtoReflect.Descriptor instead.
func (*UpsertEquipmentRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{13}
}

func (x *UpsertEquipmentRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpsertEquipmentRequest) GetEqType() string {
	if x != nil {
		return x.EqType
	}
	return ""
}

func (x *UpsertEquipmentRequest) GetEqData() *_struct.Struct {
	if x != nil {
		return x.EqData
	}
	return nil
}

type UpsertAllocMetricByFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Swidtag          string `protobuf:"bytes,2,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	EquipmentId      string `protobuf:"bytes,3,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	AllocatedMetrics string `protobuf:"bytes,4,opt,name=allocated_metrics,json=allocatedMetrics,proto3" json:"allocated_metrics,omitempty"`
	AllocatedUsers   int32  `protobuf:"varint,5,opt,name=allocated_users,json=allocatedUsers,proto3" json:"allocated_users,omitempty"`
}

func (x *UpsertAllocMetricByFileRequest) Reset() {
	*x = UpsertAllocMetricByFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAllocMetricByFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAllocMetricByFileRequest) ProtoMessage() {}

func (x *UpsertAllocMetricByFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAllocMetricByFileRequest.ProtoReflect.Descriptor instead.
func (*UpsertAllocMetricByFileRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{14}
}

func (x *UpsertAllocMetricByFileRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpsertAllocMetricByFileRequest) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *UpsertAllocMetricByFileRequest) GetEquipmentId() string {
	if x != nil {
		return x.EquipmentId
	}
	return ""
}

func (x *UpsertAllocMetricByFileRequest) GetAllocatedMetrics() string {
	if x != nil {
		return x.AllocatedMetrics
	}
	return ""
}

func (x *UpsertAllocMetricByFileRequest) GetAllocatedUsers() int32 {
	if x != nil {
		return x.AllocatedUsers
	}
	return 0
}

type UpsertAllocMetricByFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpsertAllocMetricByFileResponse) Reset() {
	*x = UpsertAllocMetricByFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAllocMetricByFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAllocMetricByFileResponse) ProtoMessage() {}

func (x *UpsertAllocMetricByFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAllocMetricByFileResponse.ProtoReflect.Descriptor instead.
func (*UpsertAllocMetricByFileResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{15}
}

func (x *UpsertAllocMetricByFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpsertEquipmentAllocatedMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Swidtag          string `protobuf:"bytes,2,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	EquipmentId      string `protobuf:"bytes,3,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	EqType           string `protobuf:"bytes,4,opt,name=eq_type,json=eqType,proto3" json:"eq_type,omitempty"`
	EquipmentUser    int32  `protobuf:"varint,5,opt,name=equipment_user,json=equipmentUser,proto3" json:"equipment_user,omitempty"`
	AllocatedMetrics string `protobuf:"bytes,6,opt,name=allocated_metrics,json=allocatedMetrics,proto3" json:"allocated_metrics,omitempty"`
}

func (x *UpsertEquipmentAllocatedMetricRequest) Reset() {
	*x = UpsertEquipmentAllocatedMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertEquipmentAllocatedMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertEquipmentAllocatedMetricRequest) ProtoMessage() {}

func (x *UpsertEquipmentAllocatedMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertEquipmentAllocatedMetricRequest.ProtoReflect.Descriptor instead.
func (*UpsertEquipmentAllocatedMetricRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{16}
}

func (x *UpsertEquipmentAllocatedMetricRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpsertEquipmentAllocatedMetricRequest) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *UpsertEquipmentAllocatedMetricRequest) GetEquipmentId() string {
	if x != nil {
		return x.EquipmentId
	}
	return ""
}

func (x *UpsertEquipmentAllocatedMetricRequest) GetEqType() string {
	if x != nil {
		return x.EqType
	}
	return ""
}

func (x *UpsertEquipmentAllocatedMetricRequest) GetEquipmentUser() int32 {
	if x != nil {
		return x.EquipmentUser
	}
	return 0
}

func (x *UpsertEquipmentAllocatedMetricRequest) GetAllocatedMetrics() string {
	if x != nil {
		return x.AllocatedMetrics
	}
	return ""
}

type DeleteEquipmentAllocatedMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Swidtag          string `protobuf:"bytes,2,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	EquipmentId      string `protobuf:"bytes,3,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	EqType           string `protobuf:"bytes,4,opt,name=eq_type,json=eqType,proto3" json:"eq_type,omitempty"`
	AllocatedMetrics string `protobuf:"bytes,5,opt,name=allocated_metrics,json=allocatedMetrics,proto3" json:"allocated_metrics,omitempty"`
}

func (x *DeleteEquipmentAllocatedMetricRequest) Reset() {
	*x = DeleteEquipmentAllocatedMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEquipmentAllocatedMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEquipmentAllocatedMetricRequest) ProtoMessage() {}

func (x *DeleteEquipmentAllocatedMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEquipmentAllocatedMetricRequest.ProtoReflect.Descriptor instead.
func (*DeleteEquipmentAllocatedMetricRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteEquipmentAllocatedMetricRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *DeleteEquipmentAllocatedMetricRequest) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *DeleteEquipmentAllocatedMetricRequest) GetEquipmentId() string {
	if x != nil {
		return x.EquipmentId
	}
	return ""
}

func (x *DeleteEquipmentAllocatedMetricRequest) GetEqType() string {
	if x != nil {
		return x.EqType
	}
	return ""
}

func (x *DeleteEquipmentAllocatedMetricRequest) GetAllocatedMetrics() string {
	if x != nil {
		return x.AllocatedMetrics
	}
	return ""
}

type UpsertEquipmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpsertEquipmentResponse) Reset() {
	*x = UpsertEquipmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertEquipmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertEquipmentResponse) ProtoMessage() {}

func (x *UpsertEquipmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertEquipmentResponse.ProtoReflect.Descriptor instead.
func (*UpsertEquipmentResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{18}
}

func (x *UpsertEquipmentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListEquipmentsForProductAggregationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EqTypeId     string    `protobuf:"bytes,2,opt,name=eq_type_id,json=eqTypeId,proto3" json:"eq_type_id,omitempty"`
	PageNum      int32     `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32     `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       string    `protobuf:"bytes,5,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder    SortOrder `protobuf:"varint,6,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.equipment.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams string    `protobuf:"bytes,7,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes       []string  `protobuf:"bytes,8,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListEquipmentsForProductAggregationRequest) Reset() {
	*x = ListEquipmentsForProductAggregationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEquipmentsForProductAggregationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEquipmentsForProductAggregationRequest) ProtoMessage() {}

func (x *ListEquipmentsForProductAggregationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEquipmentsForProductAggregationRequest.ProtoReflect.Descriptor instead.
func (*ListEquipmentsForProductAggregationRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{19}
}

func (x *ListEquipmentsForProductAggregationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEquipmentsForProductAggregationRequest) GetEqTypeId() string {
	if x != nil {
		return x.EqTypeId
	}
	return ""
}

func (x *ListEquipmentsForProductAggregationRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListEquipmentsForProductAggregationRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEquipmentsForProductAggregationRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListEquipmentsForProductAggregationRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_ASC
}

func (x *ListEquipmentsForProductAggregationRequest) GetSearchParams() string {
	if x != nil {
		return x.SearchParams
	}
	return ""
}

func (x *ListEquipmentsForProductAggregationRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListEquipmentsForProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag      string    `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	EqTypeId     string    `protobuf:"bytes,2,opt,name=eq_type_id,json=eqTypeId,proto3" json:"eq_type_id,omitempty"`
	PageNum      int32     `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32     `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       string    `protobuf:"bytes,5,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder    SortOrder `protobuf:"varint,6,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.equipment.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams string    `protobuf:"bytes,7,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes       []string  `protobuf:"bytes,8,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListEquipmentsForProductRequest) Reset() {
	*x = ListEquipmentsForProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEquipmentsForProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEquipmentsForProductRequest) ProtoMessage() {}

func (x *ListEquipmentsForProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEquipmentsForProductRequest.ProtoReflect.Descriptor instead.
func (*ListEquipmentsForProductRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{20}
}

func (x *ListEquipmentsForProductRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ListEquipmentsForProductRequest) GetEqTypeId() string {
	if x != nil {
		return x.EqTypeId
	}
	return ""
}

func (x *ListEquipmentsForProductRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListEquipmentsForProductRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEquipmentsForProductRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListEquipmentsForProductRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_ASC
}

func (x *ListEquipmentsForProductRequest) GetSearchParams() string {
	if x != nil {
		return x.SearchParams
	}
	return ""
}

func (x *ListEquipmentsForProductRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListEquipmentChildrenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId         string    `protobuf:"bytes,1,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	EquipId        string    `protobuf:"bytes,2,opt,name=equip_id,json=equipId,proto3" json:"equip_id,omitempty"`
	ChildrenTypeId string    `protobuf:"bytes,3,opt,name=children_type_id,json=childrenTypeId,proto3" json:"children_type_id,omitempty"`
	PageNum        int32     `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize       int32     `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy         string    `protobuf:"bytes,6,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder      SortOrder `protobuf:"varint,7,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.equipment.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams   string    `protobuf:"bytes,8,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"` // "attr1=val1,attr2=val2,attr3=val3,..."
	Scopes         []string  `protobuf:"bytes,9,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListEquipmentChildrenRequest) Reset() {
	*x = ListEquipmentChildrenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEquipmentChildrenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEquipmentChildrenRequest) ProtoMessage() {}

func (x *ListEquipmentChildrenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEquipmentChildrenRequest.ProtoReflect.Descriptor instead.
func (*ListEquipmentChildrenRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{21}
}

func (x *ListEquipmentChildrenRequest) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *ListEquipmentChildrenRequest) GetEquipId() string {
	if x != nil {
		return x.EquipId
	}
	return ""
}

func (x *ListEquipmentChildrenRequest) GetChildrenTypeId() string {
	if x != nil {
		return x.ChildrenTypeId
	}
	return ""
}

func (x *ListEquipmentChildrenRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListEquipmentChildrenRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEquipmentChildrenRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListEquipmentChildrenRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_ASC
}

func (x *ListEquipmentChildrenRequest) GetSearchParams() string {
	if x != nil {
		return x.SearchParams
	}
	return ""
}

func (x *ListEquipmentChildrenRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListEquipmentParentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId  string   `protobuf:"bytes,1,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	EquipId string   `protobuf:"bytes,2,opt,name=equip_id,json=equipId,proto3" json:"equip_id,omitempty"`
	Scopes  []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListEquipmentParentsRequest) Reset() {
	*x = ListEquipmentParentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEquipmentParentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEquipmentParentsRequest) ProtoMessage() {}

func (x *ListEquipmentParentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEquipmentParentsRequest.ProtoReflect.Descriptor instead.
func (*ListEquipmentParentsRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{22}
}

func (x *ListEquipmentParentsRequest) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *ListEquipmentParentsRequest) GetEquipId() string {
	if x != nil {
		return x.EquipId
	}
	return ""
}

func (x *ListEquipmentParentsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GetEquipmentParentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equipments string `protobuf:"bytes,1,opt,name=equipments,proto3" json:"equipments,omitempty"`
}

func (x *GetEquipmentParentsResponse) Reset() {
	*x = GetEquipmentParentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquipmentParentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentParentsResponse) ProtoMessage() {}

func (x *GetEquipmentParentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentParentsResponse.ProtoReflect.Descriptor instead.
func (*GetEquipmentParentsResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{23}
}

func (x *GetEquipmentParentsResponse) GetEquipments() string {
	if x != nil {
		return x.Equipments
	}
	return ""
}

type GetEquipmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId  string   `protobuf:"bytes,1,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	EquipId string   `protobuf:"bytes,2,opt,name=equip_id,json=equipId,proto3" json:"equip_id,omitempty"`
	Scopes  []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *GetEquipmentRequest) Reset() {
	*x = GetEquipmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquipmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentRequest) ProtoMessage() {}

func (x *GetEquipmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentRequest.ProtoReflect.Descriptor instead.
func (*GetEquipmentRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{24}
}

func (x *GetEquipmentRequest) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *GetEquipmentRequest) GetEquipId() string {
	if x != nil {
		return x.EquipId
	}
	return ""
}

func (x *GetEquipmentRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GetEquipmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equipment string `protobuf:"bytes,1,opt,name=equipment,proto3" json:"equipment,omitempty"`
}

func (x *GetEquipmentResponse) Reset() {
	*x = GetEquipmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquipmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentResponse) ProtoMessage() {}

func (x *GetEquipmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentResponse.ProtoReflect.Descriptor instead.
func (*GetEquipmentResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{25}
}

func (x *GetEquipmentResponse) GetEquipment() string {
	if x != nil {
		return x.Equipment
	}
	return ""
}

type ListEquipmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId       string       `protobuf:"bytes,1,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	PageNum      int32        `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32        `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       string       `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder    SortOrder    `protobuf:"varint,5,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.equipment.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams string       `protobuf:"bytes,6,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Filter       *EquipFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Scopes       []string     `protobuf:"bytes,8,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListEquipmentsRequest) Reset() {
	*x = ListEquipmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEquipmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEquipmentsRequest) ProtoMessage() {}

func (x *ListEquipmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEquipmentsRequest.ProtoReflect.Descriptor instead.
func (*ListEquipmentsRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{26}
}

func (x *ListEquipmentsRequest) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *ListEquipmentsRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListEquipmentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEquipmentsRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListEquipmentsRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_ASC
}

func (x *ListEquipmentsRequest) GetSearchParams() string {
	if x != nil {
		return x.SearchParams
	}
	return ""
}

func (x *ListEquipmentsRequest) GetFilter() *EquipFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListEquipmentsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type EquipFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId *StringFilter `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ProductId     *StringFilter `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	InstanceId    *StringFilter `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *EquipFilter) Reset() {
	*x = EquipFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipFilter) ProtoMessage() {}

func (x *EquipFilter) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipFilter.ProtoReflect.Descriptor instead.
func (*EquipFilter) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{27}
}

func (x *EquipFilter) GetApplicationId() *StringFilter {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

func (x *EquipFilter) GetProductId() *StringFilter {
	if x != nil {
		return x.ProductId
	}
	return nil
}

func (x *EquipFilter) GetInstanceId() *StringFilter {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

type ListEquipmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32  `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Equipments   []byte `protobuf:"bytes,2,opt,name=equipments,proto3" json:"equipments,omitempty"`
}

func (x *ListEquipmentsResponse) Reset() {
	*x = ListEquipmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEquipmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEquipmentsResponse) ProtoMessage() {}

func (x *ListEquipmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEquipmentsResponse.ProtoReflect.Descriptor instead.
func (*ListEquipmentsResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{28}
}

func (x *ListEquipmentsResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListEquipmentsResponse) GetEquipments() []byte {
	if x != nil {
		return x.Equipments
	}
	return nil
}

type DropEquipmentDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DropEquipmentDataRequest) Reset() {
	*x = DropEquipmentDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropEquipmentDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropEquipmentDataRequest) ProtoMessage() {}

func (x *DropEquipmentDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropEquipmentDataRequest.ProtoReflect.Descriptor instead.
func (*DropEquipmentDataRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{29}
}

func (x *DropEquipmentDataRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DropEquipmentDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DropEquipmentDataResponse) Reset() {
	*x = DropEquipmentDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropEquipmentDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropEquipmentDataResponse) ProtoMessage() {}

func (x *DropEquipmentDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropEquipmentDataResponse.ProtoReflect.Descriptor instead.
func (*DropEquipmentDataResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{30}
}

func (x *DropEquipmentDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpdateEquipmentTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Only send parent id if equipment type does not have a parent.
	ParentId   string          `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Attributes []*Attribute    `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Updattr    []*UpdAttribute `protobuf:"bytes,4,rep,name=updattr,proto3" json:"updattr,omitempty"`
	Scopes     []string        `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *UpdateEquipmentTypeRequest) Reset() {
	*x = UpdateEquipmentTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEquipmentTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEquipmentTypeRequest) ProtoMessage() {}

func (x *UpdateEquipmentTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEquipmentTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateEquipmentTypeRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateEquipmentTypeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateEquipmentTypeRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *UpdateEquipmentTypeRequest) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *UpdateEquipmentTypeRequest) GetUpdattr() []*UpdAttribute {
	if x != nil {
		return x.Updattr
	}
	return nil
}

func (x *UpdateEquipmentTypeRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type DeleteEquipmentTypeAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EquipType        string      `protobuf:"bytes,2,opt,name=equip_type,json=equipType,proto3" json:"equip_type,omitempty"`
	Scope            string      `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	DeleteAttributes *DeleteAttr `protobuf:"bytes,4,opt,name=deleteAttributes,proto3" json:"deleteAttributes,omitempty"`
}

func (x *DeleteEquipmentTypeAttrRequest) Reset() {
	*x = DeleteEquipmentTypeAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEquipmentTypeAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEquipmentTypeAttrRequest) ProtoMessage() {}

func (x *DeleteEquipmentTypeAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEquipmentTypeAttrRequest.ProtoReflect.Descriptor instead.
func (*DeleteEquipmentTypeAttrRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteEquipmentTypeAttrRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteEquipmentTypeAttrRequest) GetEquipType() string {
	if x != nil {
		return x.EquipType
	}
	return ""
}

func (x *DeleteEquipmentTypeAttrRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *DeleteEquipmentTypeAttrRequest) GetDeleteAttributes() *DeleteAttr {
	if x != nil {
		return x.DeleteAttributes
	}
	return nil
}

type DeleteEquipmentTypeAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteEquipmentTypeAttrResponse) Reset() {
	*x = DeleteEquipmentTypeAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEquipmentTypeAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEquipmentTypeAttrResponse) ProtoMessage() {}

func (x *DeleteEquipmentTypeAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEquipmentTypeAttrResponse.ProtoReflect.Descriptor instead.
func (*DeleteEquipmentTypeAttrResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteEquipmentTypeAttrResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteEquipmentTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipType string `protobuf:"bytes,1,opt,name=equip_type,json=equipType,proto3" json:"equip_type,omitempty"`
	Scope     string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DeleteEquipmentTypeRequest) Reset() {
	*x = DeleteEquipmentTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEquipmentTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEquipmentTypeRequest) ProtoMessage() {}

func (x *DeleteEquipmentTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEquipmentTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteEquipmentTypeRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteEquipmentTypeRequest) GetEquipType() string {
	if x != nil {
		return x.EquipType
	}
	return ""
}

func (x *DeleteEquipmentTypeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DeleteEquipmentTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteEquipmentTypeResponse) Reset() {
	*x = DeleteEquipmentTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEquipmentTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEquipmentTypeResponse) ProtoMessage() {}

func (x *DeleteEquipmentTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEquipmentTypeResponse.ProtoReflect.Descriptor instead.
func (*DeleteEquipmentTypeResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteEquipmentTypeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type EquipmentMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string                              `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Attributes EquipmentMetadataRequest_Attributes `protobuf:"varint,2,opt,name=attributes,proto3,enum=optisam.equipment.v1.EquipmentMetadataRequest_Attributes" json:"attributes,omitempty"`
	Scopes     []string                            `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *EquipmentMetadataRequest) Reset() {
	*x = EquipmentMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentMetadataRequest) ProtoMessage() {}

func (x *EquipmentMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentMetadataRequest.ProtoReflect.Descriptor instead.
func (*EquipmentMetadataRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{36}
}

func (x *EquipmentMetadataRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *EquipmentMetadataRequest) GetAttributes() EquipmentMetadataRequest_Attributes {
	if x != nil {
		return x.Attributes
	}
	return EquipmentMetadataRequest_All
}

func (x *EquipmentMetadataRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListEquipmentMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   ListEquipmentMetadataRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=optisam.equipment.v1.ListEquipmentMetadataRequest_Type" json:"type,omitempty"`
	Scopes []string                          `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListEquipmentMetadataRequest) Reset() {
	*x = ListEquipmentMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEquipmentMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEquipmentMetadataRequest) ProtoMessage() {}

func (x *ListEquipmentMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEquipmentMetadataRequest.ProtoReflect.Descriptor instead.
func (*ListEquipmentMetadataRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{37}
}

func (x *ListEquipmentMetadataRequest) GetType() ListEquipmentMetadataRequest_Type {
	if x != nil {
		return x.Type
	}
	return ListEquipmentMetadataRequest_UN_MAPPED
}

func (x *ListEquipmentMetadataRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListEquipmentMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []*EquipmentMetadata `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ListEquipmentMetadataResponse) Reset() {
	*x = ListEquipmentMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEquipmentMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEquipmentMetadataResponse) ProtoMessage() {}

func (x *ListEquipmentMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEquipmentMetadataResponse.ProtoReflect.Descriptor instead.
func (*ListEquipmentMetadataResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{38}
}

func (x *ListEquipmentMetadataResponse) GetMetadata() []*EquipmentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type EquipmentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Scopes     []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Attributes []string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *EquipmentMetadata) Reset() {
	*x = EquipmentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentMetadata) ProtoMessage() {}

func (x *EquipmentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentMetadata.ProtoReflect.Descriptor instead.
func (*EquipmentMetadata) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{39}
}

func (x *EquipmentMetadata) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *EquipmentMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EquipmentMetadata) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *EquipmentMetadata) GetAttributes() []string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type EquipmentTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *EquipmentTypesRequest) Reset() {
	*x = EquipmentTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentTypesRequest) ProtoMessage() {}

func (x *EquipmentTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentTypesRequest.ProtoReflect.Descriptor instead.
func (*EquipmentTypesRequest) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{40}
}

func (x *EquipmentTypesRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type EquipmentTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentTypes []*EquipmentType `protobuf:"bytes,1,rep,name=equipment_types,json=equipmentTypes,proto3" json:"equipment_types,omitempty"`
}

func (x *EquipmentTypesResponse) Reset() {
	*x = EquipmentTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentTypesResponse) ProtoMessage() {}

func (x *EquipmentTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentTypesResponse.ProtoReflect.Descriptor instead.
func (*EquipmentTypesResponse) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{41}
}

func (x *EquipmentTypesResponse) GetEquipmentTypes() []*EquipmentType {
	if x != nil {
		return x.EquipmentTypes
	}
	return nil
}

type EquipmentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string       `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type           string       `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ParentId       string       `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	ParentType     string       `protobuf:"bytes,4,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty"`
	MetadataId     string       `protobuf:"bytes,5,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	MetadataSource string       `protobuf:"bytes,6,opt,name=metadata_source,json=metadataSource,proto3" json:"metadata_source,omitempty"`
	Attributes     []*Attribute `protobuf:"bytes,7,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Scopes         []string     `protobuf:"bytes,8,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *EquipmentType) Reset() {
	*x = EquipmentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentType) ProtoMessage() {}

func (x *EquipmentType) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentType.ProtoReflect.Descriptor instead.
func (*EquipmentType) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{42}
}

func (x *EquipmentType) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *EquipmentType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EquipmentType) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *EquipmentType) GetParentType() string {
	if x != nil {
		return x.ParentType
	}
	return ""
}

func (x *EquipmentType) GetMetadataId() string {
	if x != nil {
		return x.MetadataId
	}
	return ""
}

func (x *EquipmentType) GetMetadataSource() string {
	if x != nil {
		return x.MetadataSource
	}
	return ""
}

func (x *EquipmentType) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *EquipmentType) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name             string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DataType         DataTypes `protobuf:"varint,3,opt,name=data_type,json=dataType,proto3,enum=optisam.equipment.v1.DataTypes" json:"data_type,omitempty"`
	PrimaryKey       bool      `protobuf:"varint,4,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	Displayed        bool      `protobuf:"varint,5,opt,name=displayed,proto3" json:"displayed,omitempty"`
	Searchable       bool      `protobuf:"varint,6,opt,name=searchable,proto3" json:"searchable,omitempty"`
	ParentIdentifier bool      `protobuf:"varint,7,opt,name=parent_identifier,json=parentIdentifier,proto3" json:"parent_identifier,omitempty"`
	MappedTo         string    `protobuf:"bytes,8,opt,name=mapped_to,json=mappedTo,proto3" json:"mapped_to,omitempty"`
	Simulated        bool      `protobuf:"varint,9,opt,name=simulated,proto3" json:"simulated,omitempty"`
	SchemaName       string    `protobuf:"bytes,16,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	// Types that are assignable to Val:
	//	*Attribute_IntVal
	//	*Attribute_FloatVal
	//	*Attribute_StringVal
	Val isAttribute_Val `protobuf_oneof:"val"`
	// Types that are assignable to OldVal:
	//	*Attribute_IntValOld
	//	*Attribute_FloatValOld
	//	*Attribute_StringValOld
	OldVal isAttribute_OldVal `protobuf_oneof:"old_val"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{43}
}

func (x *Attribute) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attribute) GetDataType() DataTypes {
	if x != nil {
		return x.DataType
	}
	return DataTypes_UNKNOWN
}

func (x *Attribute) GetPrimaryKey() bool {
	if x != nil {
		return x.PrimaryKey
	}
	return false
}

func (x *Attribute) GetDisplayed() bool {
	if x != nil {
		return x.Displayed
	}
	return false
}

func (x *Attribute) GetSearchable() bool {
	if x != nil {
		return x.Searchable
	}
	return false
}

func (x *Attribute) GetParentIdentifier() bool {
	if x != nil {
		return x.ParentIdentifier
	}
	return false
}

func (x *Attribute) GetMappedTo() string {
	if x != nil {
		return x.MappedTo
	}
	return ""
}

func (x *Attribute) GetSimulated() bool {
	if x != nil {
		return x.Simulated
	}
	return false
}

func (x *Attribute) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (m *Attribute) GetVal() isAttribute_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *Attribute) GetIntVal() int32 {
	if x, ok := x.GetVal().(*Attribute_IntVal); ok {
		return x.IntVal
	}
	return 0
}

func (x *Attribute) GetFloatVal() float32 {
	if x, ok := x.GetVal().(*Attribute_FloatVal); ok {
		return x.FloatVal
	}
	return 0
}

func (x *Attribute) GetStringVal() string {
	if x, ok := x.GetVal().(*Attribute_StringVal); ok {
		return x.StringVal
	}
	return ""
}

func (m *Attribute) GetOldVal() isAttribute_OldVal {
	if m != nil {
		return m.OldVal
	}
	return nil
}

func (x *Attribute) GetIntValOld() int32 {
	if x, ok := x.GetOldVal().(*Attribute_IntValOld); ok {
		return x.IntValOld
	}
	return 0
}

func (x *Attribute) GetFloatValOld() float32 {
	if x, ok := x.GetOldVal().(*Attribute_FloatValOld); ok {
		return x.FloatValOld
	}
	return 0
}

func (x *Attribute) GetStringValOld() string {
	if x, ok := x.GetOldVal().(*Attribute_StringValOld); ok {
		return x.StringValOld
	}
	return ""
}

type isAttribute_Val interface {
	isAttribute_Val()
}

type Attribute_IntVal struct {
	IntVal int32 `protobuf:"varint,10,opt,name=int_val,json=intVal,proto3,oneof"`
}

type Attribute_FloatVal struct {
	FloatVal float32 `protobuf:"fixed32,11,opt,name=float_val,json=floatVal,proto3,oneof"`
}

type Attribute_StringVal struct {
	StringVal string `protobuf:"bytes,12,opt,name=string_val,json=stringVal,proto3,oneof"`
}

func (*Attribute_IntVal) isAttribute_Val() {}

func (*Attribute_FloatVal) isAttribute_Val() {}

func (*Attribute_StringVal) isAttribute_Val() {}

type isAttribute_OldVal interface {
	isAttribute_OldVal()
}

type Attribute_IntValOld struct {
	IntValOld int32 `protobuf:"varint,13,opt,name=int_val_old,json=intValOld,proto3,oneof"`
}

type Attribute_FloatValOld struct {
	FloatValOld float32 `protobuf:"fixed32,14,opt,name=float_val_old,json=floatValOld,proto3,oneof"`
}

type Attribute_StringValOld struct {
	StringValOld string `protobuf:"bytes,15,opt,name=string_val_old,json=stringValOld,proto3,oneof"`
}

func (*Attribute_IntValOld) isAttribute_OldVal() {}

func (*Attribute_FloatValOld) isAttribute_OldVal() {}

func (*Attribute_StringValOld) isAttribute_OldVal() {}

type DeleteAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteAttr) Reset() {
	*x = DeleteAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttr) ProtoMessage() {}

func (x *DeleteAttr) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttr.ProtoReflect.Descriptor instead.
func (*DeleteAttr) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteAttr) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeleteAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SchemaName string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	Displayed  bool   `protobuf:"varint,3,opt,name=displayed,proto3" json:"displayed,omitempty"`
	Searchable bool   `protobuf:"varint,4,opt,name=searchable,proto3" json:"searchable,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdAttribute) Reset() {
	*x = UpdAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdAttribute) ProtoMessage() {}

func (x *UpdAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdAttribute.ProtoReflect.Descriptor instead.
func (*UpdAttribute) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{45}
}

func (x *UpdAttribute) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdAttribute) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *UpdAttribute) GetDisplayed() bool {
	if x != nil {
		return x.Displayed
	}
	return false
}

func (x *UpdAttribute) GetSearchable() bool {
	if x != nil {
		return x.Searchable
	}
	return false
}

func (x *UpdAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StringFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilteringOrder       int32             `protobuf:"varint,1,opt,name=filteringOrder,proto3" json:"filteringOrder,omitempty"`
	Filteringkey         string            `protobuf:"bytes,2,opt,name=filteringkey,proto3" json:"filteringkey,omitempty"`
	FilterType           StringFilter_Type `protobuf:"varint,3,opt,name=filter_type,json=filterType,proto3,enum=optisam.equipment.v1.StringFilter_Type" json:"filter_type,omitempty"`
	FilteringkeyMultiple []string          `protobuf:"bytes,4,rep,name=filteringkey_multiple,json=filteringkeyMultiple,proto3" json:"filteringkey_multiple,omitempty"`
}

func (x *StringFilter) Reset() {
	*x = StringFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equipment_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFilter) ProtoMessage() {}

func (x *StringFilter) ProtoReflect() protoreflect.Message {
	mi := &file_equipment_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFilter.ProtoReflect.Descriptor instead.
func (*StringFilter) Descriptor() ([]byte, []int) {
	return file_equipment_proto_rawDescGZIP(), []int{46}
}

func (x *StringFilter) GetFilteringOrder() int32 {
	if x != nil {
		return x.FilteringOrder
	}
	return 0
}

func (x *StringFilter) GetFilteringkey() string {
	if x != nil {
		return x.Filteringkey
	}
	return ""
}

func (x *StringFilter) GetFilterType() StringFilter_Type {
	if x != nil {
		return x.FilterType
	}
	return StringFilter_REGEX
}

func (x *StringFilter) GetFilteringkeyMultiple() []string {
	if x != nil {
		return x.FilteringkeyMultiple
	}
	return nil
}

var File_equipment_proto protoreflect.FileDescriptor

var file_equipment_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa,
	0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d,
	0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x28, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x40, 0x0a, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62,
	0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x22, 0x30, 0x0a, 0x14, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x21, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c,
	0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0x75, 0x0a, 0x22, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x0e, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x75, 0x6d, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x98, 0x01, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x36, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x72, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4f, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x72, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x6c, 0x64, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x71, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x06, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x1f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x25, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x71,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x71, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x10, 0x03, 0x18, 0x03, 0x32, 0x08, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x71, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x71, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0x33, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0xa4, 0x03, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x71, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x71, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xe8,
	0x07, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x4c,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xc8, 0x01, 0x28, 0x0a, 0x92, 0x41, 0x22,
	0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65,
	0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03,
	0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xa0, 0x03, 0x0a, 0x1f,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x71,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0xfa, 0x42, 0x07, 0x1a,
	0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f, 0x40, 0x69,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xc8, 0x01, 0x28, 0x0a,
	0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x40, 0x69, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22,
	0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xc2,
	0x03, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x2c, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32, 0x0b,
	0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a, 0x05,
	0x18, 0xc8, 0x01, 0x28, 0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69,
	0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x3e, 0x0a,
	0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42,
	0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42,
	0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xae, 0x03, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x29,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32, 0x0b, 0x50, 0x61, 0x67, 0x65,
	0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f, 0x40,
	0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xc8, 0x01, 0x28,
	0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20,
	0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x40, 0x69, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x39,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98,
	0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0b, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x5c, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x18, 0x44,
	0x72, 0x6f, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c,
	0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0x35, 0x0a, 0x19, 0x44, 0x72, 0x6f, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x74,
	0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x74, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01,
	0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x7f, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x2d, 0x5f,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x10, 0x03, 0x18,
	0x03, 0x32, 0x08, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0x37, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x18,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x63, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22,
	0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x2f,
	0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x10, 0x02, 0x22,
	0xd2, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x55, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x50, 0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x4c, 0x4c, 0x10, 0x02, 0x22, 0x64, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01,
	0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x15, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17,
	0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07,
	0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22,
	0x66, 0x0a, 0x16, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10,
	0x5e, 0x5b, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01,
	0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x22, 0xd9, 0x04, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42,
	0x0c, 0xfa, 0x42, 0x09, 0x82, 0x01, 0x06, 0x18, 0x01, 0x18, 0x02, 0x18, 0x03, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x4f, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x4f,
	0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x4f, 0x6c, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61,
	0x6c, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x22, 0x30, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa,
	0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x0c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6b,
	0x65, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x19, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51,
	0x10, 0x01, 0x2a, 0x35, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x10, 0x03, 0x32, 0xd4, 0x20, 0x0a, 0x10, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92,
	0x01, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x01, 0x2a, 0x12, 0xb6, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x34, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x3a, 0x01, 0x2a, 0x12, 0xb6, 0x01, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x72, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4f, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x72, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f,
	0x6c, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x72, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6f, 0x6c, 0x64, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xc5, 0x01, 0x0a, 0x1a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12,
	0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x8c, 0x01,
	0x0a, 0x0f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xe2, 0x01, 0x0a,
	0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x3b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4e, 0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x3a, 0x01, 0x2a, 0x5a, 0x26, 0x32, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x3a, 0x01,
	0x2a, 0x12, 0xc6, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x3b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x7b, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x98, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0x8d, 0x01,
	0x0a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x82, 0x01,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x27, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x23, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x7d, 0x12, 0xb1, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x34, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x1a, 0x1c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x5a,
	0x21, 0x32, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a,
	0x01, 0x2a, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x97, 0x01, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72,
	0x6f, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72,
	0x6f, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a,
	0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xaf, 0x01,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12,
	0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0xc3, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xe5, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc6, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x7d, 0x2f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x71, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x72, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x7d, 0x42, 0x38, 0x5a, 0x36, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_equipment_proto_rawDescOnce sync.Once
	file_equipment_proto_rawDescData = file_equipment_proto_rawDesc
)

func file_equipment_proto_rawDescGZIP() []byte {
	file_equipment_proto_rawDescOnce.Do(func() {
		file_equipment_proto_rawDescData = protoimpl.X.CompressGZIP(file_equipment_proto_rawDescData)
	})
	return file_equipment_proto_rawDescData
}

var file_equipment_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_equipment_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_equipment_proto_goTypes = []interface{}{
	(SortOrder)(0),                                     // 0: optisam.equipment.v1.SortOrder
	(DataTypes)(0),                                     // 1: optisam.equipment.v1.DataTypes
	(EquipmentMetadataRequest_Attributes)(0),           // 2: optisam.equipment.v1.EquipmentMetadataRequest.Attributes
	(ListEquipmentMetadataRequest_Type)(0),             // 3: optisam.equipment.v1.ListEquipmentMetadataRequest.Type
	(StringFilter_Type)(0),                             // 4: optisam.equipment.v1.StringFilter.Type
	(*GetMetricsRequest)(nil),                          // 5: optisam.equipment.v1.GetMetricsRequest
	(*GetMetricsResponse)(nil),                         // 6: optisam.equipment.v1.GetMetricsResponse
	(*CreateGenericScopeEquipmentTypesRequest)(nil),    // 7: optisam.equipment.v1.CreateGenericScopeEquipmentTypesRequest
	(*CreateGenericScopeEquipmentTypesResponse)(nil),   // 8: optisam.equipment.v1.CreateGenericScopeEquipmentTypesResponse
	(*DropMetaDataRequest)(nil),                        // 9: optisam.equipment.v1.DropMetaDataRequest
	(*DropMetaDataResponse)(nil),                       // 10: optisam.equipment.v1.DropMetaDataResponse
	(*EquipmentsPerEquipmentTypeRequest)(nil),          // 11: optisam.equipment.v1.EquipmentsPerEquipmentTypeRequest
	(*EquipmentsPerEquipmentTypeResponse)(nil),         // 12: optisam.equipment.v1.EquipmentsPerEquipmentTypeResponse
	(*TypeEquipments)(nil),                             // 13: optisam.equipment.v1.TypeEquipments
	(*UpsertMetadataRequest)(nil),                      // 14: optisam.equipment.v1.UpsertMetadataRequest
	(*UpsertMetadataResponse)(nil),                     // 15: optisam.equipment.v1.UpsertMetadataResponse
	(*UpdateAtrributeOldScopeRequest)(nil),             // 16: optisam.equipment.v1.UpdateAtrributeOldScopeRequest
	(*UpdateAtrributeOldScopeResponse)(nil),            // 17: optisam.equipment.v1.UpdateAtrributeOldScopeResponse
	(*UpsertEquipmentRequest)(nil),                     // 18: optisam.equipment.v1.UpsertEquipmentRequest
	(*UpsertAllocMetricByFileRequest)(nil),             // 19: optisam.equipment.v1.UpsertAllocMetricByFileRequest
	(*UpsertAllocMetricByFileResponse)(nil),            // 20: optisam.equipment.v1.UpsertAllocMetricByFileResponse
	(*UpsertEquipmentAllocatedMetricRequest)(nil),      // 21: optisam.equipment.v1.UpsertEquipmentAllocatedMetricRequest
	(*DeleteEquipmentAllocatedMetricRequest)(nil),      // 22: optisam.equipment.v1.DeleteEquipmentAllocatedMetricRequest
	(*UpsertEquipmentResponse)(nil),                    // 23: optisam.equipment.v1.UpsertEquipmentResponse
	(*ListEquipmentsForProductAggregationRequest)(nil), // 24: optisam.equipment.v1.ListEquipmentsForProductAggregationRequest
	(*ListEquipmentsForProductRequest)(nil),            // 25: optisam.equipment.v1.ListEquipmentsForProductRequest
	(*ListEquipmentChildrenRequest)(nil),               // 26: optisam.equipment.v1.ListEquipmentChildrenRequest
	(*ListEquipmentParentsRequest)(nil),                // 27: optisam.equipment.v1.ListEquipmentParentsRequest
	(*GetEquipmentParentsResponse)(nil),                // 28: optisam.equipment.v1.GetEquipmentParentsResponse
	(*GetEquipmentRequest)(nil),                        // 29: optisam.equipment.v1.GetEquipmentRequest
	(*GetEquipmentResponse)(nil),                       // 30: optisam.equipment.v1.GetEquipmentResponse
	(*ListEquipmentsRequest)(nil),                      // 31: optisam.equipment.v1.ListEquipmentsRequest
	(*EquipFilter)(nil),                                // 32: optisam.equipment.v1.EquipFilter
	(*ListEquipmentsResponse)(nil),                     // 33: optisam.equipment.v1.ListEquipmentsResponse
	(*DropEquipmentDataRequest)(nil),                   // 34: optisam.equipment.v1.DropEquipmentDataRequest
	(*DropEquipmentDataResponse)(nil),                  // 35: optisam.equipment.v1.DropEquipmentDataResponse
	(*UpdateEquipmentTypeRequest)(nil),                 // 36: optisam.equipment.v1.UpdateEquipmentTypeRequest
	(*DeleteEquipmentTypeAttrRequest)(nil),             // 37: optisam.equipment.v1.DeleteEquipmentTypeAttrRequest
	(*DeleteEquipmentTypeAttrResponse)(nil),            // 38: optisam.equipment.v1.DeleteEquipmentTypeAttrResponse
	(*DeleteEquipmentTypeRequest)(nil),                 // 39: optisam.equipment.v1.DeleteEquipmentTypeRequest
	(*DeleteEquipmentTypeResponse)(nil),                // 40: optisam.equipment.v1.DeleteEquipmentTypeResponse
	(*EquipmentMetadataRequest)(nil),                   // 41: optisam.equipment.v1.EquipmentMetadataRequest
	(*ListEquipmentMetadataRequest)(nil),               // 42: optisam.equipment.v1.ListEquipmentMetadataRequest
	(*ListEquipmentMetadataResponse)(nil),              // 43: optisam.equipment.v1.ListEquipmentMetadataResponse
	(*EquipmentMetadata)(nil),                          // 44: optisam.equipment.v1.EquipmentMetadata
	(*EquipmentTypesRequest)(nil),                      // 45: optisam.equipment.v1.EquipmentTypesRequest
	(*EquipmentTypesResponse)(nil),                     // 46: optisam.equipment.v1.EquipmentTypesResponse
	(*EquipmentType)(nil),                              // 47: optisam.equipment.v1.EquipmentType
	(*Attribute)(nil),                                  // 48: optisam.equipment.v1.Attribute
	(*DeleteAttr)(nil),                                 // 49: optisam.equipment.v1.DeleteAttr
	(*UpdAttribute)(nil),                               // 50: optisam.equipment.v1.UpdAttribute
	(*StringFilter)(nil),                               // 51: optisam.equipment.v1.StringFilter
	(*_struct.Struct)(nil),                             // 52: google.protobuf.Struct
}
var file_equipment_proto_depIdxs = []int32{
	13, // 0: optisam.equipment.v1.EquipmentsPerEquipmentTypeResponse.types_equipments:type_name -> optisam.equipment.v1.TypeEquipments
	52, // 1: optisam.equipment.v1.UpsertEquipmentRequest.eq_data:type_name -> google.protobuf.Struct
	0,  // 2: optisam.equipment.v1.ListEquipmentsForProductAggregationRequest.sort_order:type_name -> optisam.equipment.v1.SortOrder
	0,  // 3: optisam.equipment.v1.ListEquipmentsForProductRequest.sort_order:type_name -> optisam.equipment.v1.SortOrder
	0,  // 4: optisam.equipment.v1.ListEquipmentChildrenRequest.sort_order:type_name -> optisam.equipment.v1.SortOrder
	0,  // 5: optisam.equipment.v1.ListEquipmentsRequest.sort_order:type_name -> optisam.equipment.v1.SortOrder
	32, // 6: optisam.equipment.v1.ListEquipmentsRequest.filter:type_name -> optisam.equipment.v1.EquipFilter
	51, // 7: optisam.equipment.v1.EquipFilter.application_id:type_name -> optisam.equipment.v1.StringFilter
	51, // 8: optisam.equipment.v1.EquipFilter.product_id:type_name -> optisam.equipment.v1.StringFilter
	51, // 9: optisam.equipment.v1.EquipFilter.instance_id:type_name -> optisam.equipment.v1.StringFilter
	48, // 10: optisam.equipment.v1.UpdateEquipmentTypeRequest.attributes:type_name -> optisam.equipment.v1.Attribute
	50, // 11: optisam.equipment.v1.UpdateEquipmentTypeRequest.updattr:type_name -> optisam.equipment.v1.UpdAttribute
	49, // 12: optisam.equipment.v1.DeleteEquipmentTypeAttrRequest.deleteAttributes:type_name -> optisam.equipment.v1.DeleteAttr
	2,  // 13: optisam.equipment.v1.EquipmentMetadataRequest.attributes:type_name -> optisam.equipment.v1.EquipmentMetadataRequest.Attributes
	3,  // 14: optisam.equipment.v1.ListEquipmentMetadataRequest.type:type_name -> optisam.equipment.v1.ListEquipmentMetadataRequest.Type
	44, // 15: optisam.equipment.v1.ListEquipmentMetadataResponse.metadata:type_name -> optisam.equipment.v1.EquipmentMetadata
	47, // 16: optisam.equipment.v1.EquipmentTypesResponse.equipment_types:type_name -> optisam.equipment.v1.EquipmentType
	48, // 17: optisam.equipment.v1.EquipmentType.attributes:type_name -> optisam.equipment.v1.Attribute
	1,  // 18: optisam.equipment.v1.Attribute.data_type:type_name -> optisam.equipment.v1.DataTypes
	4,  // 19: optisam.equipment.v1.StringFilter.filter_type:type_name -> optisam.equipment.v1.StringFilter.Type
	7,  // 20: optisam.equipment.v1.EquipmentService.CreateGenericScopeEquipmentTypes:input_type -> optisam.equipment.v1.CreateGenericScopeEquipmentTypesRequest
	14, // 21: optisam.equipment.v1.EquipmentService.UpsertMetadata:input_type -> optisam.equipment.v1.UpsertMetadataRequest
	19, // 22: optisam.equipment.v1.EquipmentService.UpsertAllocMetricByFile:input_type -> optisam.equipment.v1.UpsertAllocMetricByFileRequest
	16, // 23: optisam.equipment.v1.EquipmentService.UpdateAtrributeOldScope:input_type -> optisam.equipment.v1.UpdateAtrributeOldScopeRequest
	11, // 24: optisam.equipment.v1.EquipmentService.EquipmentsPerEquipmentType:input_type -> optisam.equipment.v1.EquipmentsPerEquipmentTypeRequest
	18, // 25: optisam.equipment.v1.EquipmentService.UpsertEquipment:input_type -> optisam.equipment.v1.UpsertEquipmentRequest
	21, // 26: optisam.equipment.v1.EquipmentService.UpsertEquipmentAllocatedMetric:input_type -> optisam.equipment.v1.UpsertEquipmentAllocatedMetricRequest
	22, // 27: optisam.equipment.v1.EquipmentService.DeleteEquipmentAllocatedMetric:input_type -> optisam.equipment.v1.DeleteEquipmentAllocatedMetricRequest
	42, // 28: optisam.equipment.v1.EquipmentService.ListEquipmentsMetadata:input_type -> optisam.equipment.v1.ListEquipmentMetadataRequest
	41, // 29: optisam.equipment.v1.EquipmentService.GetEquipmentMetadata:input_type -> optisam.equipment.v1.EquipmentMetadataRequest
	45, // 30: optisam.equipment.v1.EquipmentService.EquipmentsTypes:input_type -> optisam.equipment.v1.EquipmentTypesRequest
	5,  // 31: optisam.equipment.v1.EquipmentService.GetMetrics:input_type -> optisam.equipment.v1.GetMetricsRequest
	47, // 32: optisam.equipment.v1.EquipmentService.CreateEquipmentType:input_type -> optisam.equipment.v1.EquipmentType
	39, // 33: optisam.equipment.v1.EquipmentService.DeleteEquipmentType:input_type -> optisam.equipment.v1.DeleteEquipmentTypeRequest
	37, // 34: optisam.equipment.v1.EquipmentService.DeleteEquipmentTypeAttr:input_type -> optisam.equipment.v1.DeleteEquipmentTypeAttrRequest
	36, // 35: optisam.equipment.v1.EquipmentService.UpdateEquipmentType:input_type -> optisam.equipment.v1.UpdateEquipmentTypeRequest
	31, // 36: optisam.equipment.v1.EquipmentService.ListEquipments:input_type -> optisam.equipment.v1.ListEquipmentsRequest
	34, // 37: optisam.equipment.v1.EquipmentService.DropEquipmentData:input_type -> optisam.equipment.v1.DropEquipmentDataRequest
	29, // 38: optisam.equipment.v1.EquipmentService.GetEquipment:input_type -> optisam.equipment.v1.GetEquipmentRequest
	27, // 39: optisam.equipment.v1.EquipmentService.ListEquipmentParents:input_type -> optisam.equipment.v1.ListEquipmentParentsRequest
	26, // 40: optisam.equipment.v1.EquipmentService.ListEquipmentChildren:input_type -> optisam.equipment.v1.ListEquipmentChildrenRequest
	24, // 41: optisam.equipment.v1.EquipmentService.ListEquipmentsForProductAggregation:input_type -> optisam.equipment.v1.ListEquipmentsForProductAggregationRequest
	25, // 42: optisam.equipment.v1.EquipmentService.ListEquipmentsForProduct:input_type -> optisam.equipment.v1.ListEquipmentsForProductRequest
	9,  // 43: optisam.equipment.v1.EquipmentService.DropMetaData:input_type -> optisam.equipment.v1.DropMetaDataRequest
	8,  // 44: optisam.equipment.v1.EquipmentService.CreateGenericScopeEquipmentTypes:output_type -> optisam.equipment.v1.CreateGenericScopeEquipmentTypesResponse
	15, // 45: optisam.equipment.v1.EquipmentService.UpsertMetadata:output_type -> optisam.equipment.v1.UpsertMetadataResponse
	20, // 46: optisam.equipment.v1.EquipmentService.UpsertAllocMetricByFile:output_type -> optisam.equipment.v1.UpsertAllocMetricByFileResponse
	17, // 47: optisam.equipment.v1.EquipmentService.UpdateAtrributeOldScope:output_type -> optisam.equipment.v1.UpdateAtrributeOldScopeResponse
	12, // 48: optisam.equipment.v1.EquipmentService.EquipmentsPerEquipmentType:output_type -> optisam.equipment.v1.EquipmentsPerEquipmentTypeResponse
	23, // 49: optisam.equipment.v1.EquipmentService.UpsertEquipment:output_type -> optisam.equipment.v1.UpsertEquipmentResponse
	23, // 50: optisam.equipment.v1.EquipmentService.UpsertEquipmentAllocatedMetric:output_type -> optisam.equipment.v1.UpsertEquipmentResponse
	23, // 51: optisam.equipment.v1.EquipmentService.DeleteEquipmentAllocatedMetric:output_type -> optisam.equipment.v1.UpsertEquipmentResponse
	43, // 52: optisam.equipment.v1.EquipmentService.ListEquipmentsMetadata:output_type -> optisam.equipment.v1.ListEquipmentMetadataResponse
	44, // 53: optisam.equipment.v1.EquipmentService.GetEquipmentMetadata:output_type -> optisam.equipment.v1.EquipmentMetadata
	46, // 54: optisam.equipment.v1.EquipmentService.EquipmentsTypes:output_type -> optisam.equipment.v1.EquipmentTypesResponse
	6,  // 55: optisam.equipment.v1.EquipmentService.GetMetrics:output_type -> optisam.equipment.v1.GetMetricsResponse
	47, // 56: optisam.equipment.v1.EquipmentService.CreateEquipmentType:output_type -> optisam.equipment.v1.EquipmentType
	40, // 57: optisam.equipment.v1.EquipmentService.DeleteEquipmentType:output_type -> optisam.equipment.v1.DeleteEquipmentTypeResponse
	38, // 58: optisam.equipment.v1.EquipmentService.DeleteEquipmentTypeAttr:output_type -> optisam.equipment.v1.DeleteEquipmentTypeAttrResponse
	47, // 59: optisam.equipment.v1.EquipmentService.UpdateEquipmentType:output_type -> optisam.equipment.v1.EquipmentType
	33, // 60: optisam.equipment.v1.EquipmentService.ListEquipments:output_type -> optisam.equipment.v1.ListEquipmentsResponse
	35, // 61: optisam.equipment.v1.EquipmentService.DropEquipmentData:output_type -> optisam.equipment.v1.DropEquipmentDataResponse
	30, // 62: optisam.equipment.v1.EquipmentService.GetEquipment:output_type -> optisam.equipment.v1.GetEquipmentResponse
	33, // 63: optisam.equipment.v1.EquipmentService.ListEquipmentParents:output_type -> optisam.equipment.v1.ListEquipmentsResponse
	33, // 64: optisam.equipment.v1.EquipmentService.ListEquipmentChildren:output_type -> optisam.equipment.v1.ListEquipmentsResponse
	33, // 65: optisam.equipment.v1.EquipmentService.ListEquipmentsForProductAggregation:output_type -> optisam.equipment.v1.ListEquipmentsResponse
	33, // 66: optisam.equipment.v1.EquipmentService.ListEquipmentsForProduct:output_type -> optisam.equipment.v1.ListEquipmentsResponse
	10, // 67: optisam.equipment.v1.EquipmentService.DropMetaData:output_type -> optisam.equipment.v1.DropMetaDataResponse
	44, // [44:68] is the sub-list for method output_type
	20, // [20:44] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_equipment_proto_init() }
func file_equipment_proto_init() {
	if File_equipment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_equipment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGenericScopeEquipmentTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGenericScopeEquipmentTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropMetaDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropMetaDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentsPerEquipmentTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentsPerEquipmentTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeEquipments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAtrributeOldScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAtrributeOldScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertEquipmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAllocMetricByFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAllocMetricByFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertEquipmentAllocatedMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEquipmentAllocatedMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertEquipmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEquipmentsForProductAggregationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEquipmentsForProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEquipmentChildrenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEquipmentParentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquipmentParentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquipmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquipmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEquipmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEquipmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropEquipmentDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropEquipmentDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEquipmentTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEquipmentTypeAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEquipmentTypeAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEquipmentTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEquipmentTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEquipmentMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEquipmentMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equipment_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_equipment_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*Attribute_IntVal)(nil),
		(*Attribute_FloatVal)(nil),
		(*Attribute_StringVal)(nil),
		(*Attribute_IntValOld)(nil),
		(*Attribute_FloatValOld)(nil),
		(*Attribute_StringValOld)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_equipment_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_equipment_proto_goTypes,
		DependencyIndexes: file_equipment_proto_depIdxs,
		EnumInfos:         file_equipment_proto_enumTypes,
		MessageInfos:      file_equipment_proto_msgTypes,
	}.Build()
	File_equipment_proto = out.File
	file_equipment_proto_rawDesc = nil
	file_equipment_proto_goTypes = nil
	file_equipment_proto_depIdxs = nil
}
