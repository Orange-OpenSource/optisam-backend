/*
 * product.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 5.0.1-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://optisam-product-int.apps.fr01.paas.tech.orange";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export let options = {

    insecureSkipTLSVerify: true,
    httpDebug: 'full',
    vus: 2,
    iterations: 5,
    thresholds: {
        http_req_duration: ['p(70)<1000'], 
    },
  
 
};

export function setup() {
    let loginRes = http.post(`https://optisam-auth-int.apps.fr01.paas.tech.orange/api/v1/token`, {
        username: "admin@test.com",
        password: "admin",
        grant_type: "password"
      });
    let authToken = loginRes.json('access_token');
    check(authToken, { 'logged in successfully': () => authToken !== '' });
    return authToken;
}

export default function(authToken) {

    console.log("authToken"+authToken)
    let headers = {
        'Authorization': `Bearer ${authToken}`}
    console.log("headers"+headers)

    group("/api/v1/dashboard/editors/products", () => {
        let scope = "OFR";
        let url = BASE_URL + `/api/v1/dashboard/editors/products?scope=${scope}`;
        // Request No. 1
        let request = http.get(url,{headers:headers});
        check(request, {
            "A successful response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/api/v1/dashboard/overview", () => {
        let scope = "OFR";
        let url = BASE_URL + `/api/v1/dashboard/overview?scope=${scope}`;
        // Request No. 1
        let request = http.get(url,{headers:headers});
        check(request, {
            "A successful response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/api/v1/editors", () => {
        let scopes = "OFR";
        let url = BASE_URL + `/api/v1/editors?scopes=${scopes}`;
        // Request No. 1
        let request = http.get(url,{headers:headers});
        check(request, {
            "A successful response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/api/v1/editors/products", () => {
        let editor = "Oracle";
        let scopes = "OFR";
        let url = BASE_URL + `/api/v1/editors/products?scopes=${scopes}&editor=${editor}`;
        // Request No. 1
        let request = http.get(url,{headers:headers});
        check(request, {
            "A successful response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/api/v1/product/{swid_tag}", () => {
        let swidTag = "oraent000003";
        let scopes = "OFR";
        let url = BASE_URL + `/api/v1/product/${swidTag}?scopes=${scopes}`;
        // Request No. 1
        let request = http.get(url,{headers:headers});
        check(request, {
            "A successful response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/api/v1/product/{swid_tag}/options", () => {
        let swidTag = "oraent000003";
        let scopes = "OFR";
        let url = BASE_URL + `/api/v1/product/${swidTag}/options?scopes=${scopes}`;
        // Request No. 1
        let request = http.get(url,{headers:headers});
        check(request, {
            "A successful response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/api/v1/products", () => {
        let searchParamsSwidTagFilteringOrder = "TODO_EDIT_THE_SEARCH_PARAMS.SWIDTAG.FILTERINGORDER";
        let searchParamsEditorFilteringkeyMultiple = "TODO_EDIT_THE_SEARCH_PARAMS.EDITOR.FILTERINGKEY_MULTIPLE";
        let searchParamsEquipmentIdFilteringkey = "TODO_EDIT_THE_SEARCH_PARAMS.EQUIPMENT_ID.FILTERINGKEY";
        let searchParamsEquipmentIdFilteringOrder = "TODO_EDIT_THE_SEARCH_PARAMS.EQUIPMENT_ID.FILTERINGORDER";
        let pageSize = 10;
        let searchParamsEditorFilterType = "TODO_EDIT_THE_SEARCH_PARAMS.EDITOR.FILTER_TYPE";
        let searchParamsNameFilteringkeyMultiple = "TODO_EDIT_THE_SEARCH_PARAMS.NAME.FILTERINGKEY_MULTIPLE";
        let searchParamsEditorFilteringkey = "TODO_EDIT_THE_SEARCH_PARAMS.EDITOR.FILTERINGKEY";
        let searchParamsEquipmentIdFilteringkeyMultiple = "TODO_EDIT_THE_SEARCH_PARAMS.EQUIPMENT_ID.FILTERINGKEY_MULTIPLE";
        let searchParamsSwidTagFilteringkey = "TODO_EDIT_THE_SEARCH_PARAMS.SWIDTAG.FILTERINGKEY";
        let searchParamsNameFilteringOrder = "TODO_EDIT_THE_SEARCH_PARAMS.NAME.FILTERINGORDER";
        let searchParamsEquipmentIdFilterType = "TODO_EDIT_THE_SEARCH_PARAMS.EQUIPMENT_ID.FILTER_TYPE";
        let sortBy = "name";
        let searchParamsNameFilterType = "TODO_EDIT_THE_SEARCH_PARAMS.NAME.FILTER_TYPE";
        let searchParamsApplicationIdFilteringkeyMultiple = "TODO_EDIT_THE_SEARCH_PARAMS.APPLICATION_ID.FILTERINGKEY_MULTIPLE";
        let searchParamsApplicationIdFilterType = "TODO_EDIT_THE_SEARCH_PARAMS.APPLICATION_ID.FILTER_TYPE";
        let searchParamsEditorFilteringOrder = "TODO_EDIT_THE_SEARCH_PARAMS.EDITOR.FILTERINGORDER";
        let searchParamsNameFilteringkey = "TODO_EDIT_THE_SEARCH_PARAMS.NAME.FILTERINGKEY";
        let pageNum = 1;
        let searchParamsApplicationIdFilteringOrder = "TODO_EDIT_THE_SEARCH_PARAMS.APPLICATION_ID.FILTERINGORDER";
        let searchParamsSwidTagFilterType = "TODO_EDIT_THE_SEARCH_PARAMS.SWIDTAG.FILTER_TYPE";
        let sortOrder = "asc";
        let searchParamsSwidTagFilteringkeyMultiple = "TODO_EDIT_THE_SEARCH_PARAMS.SWIDTAG.FILTERINGKEY_MULTIPLE";
        let scopes = "OFR";
        let searchParamsApplicationIdFilteringkey = "TODO_EDIT_THE_SEARCH_PARAMS.APPLICATION_ID.FILTERINGKEY";
        let url = BASE_URL + `/api/v1/products?page_num=${pageNum}&page_size=${pageSize}&sort_by=${sortBy}&sort_order=${sortOrder}&scopes=${scopes}`;
        // Request No. 1
        let request = http.get(url,{headers:headers});
        check(request, {
            "A successful response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

//         // Request No. 2
//         // TODO: edit the parameters of the request body.
//         body = {"swidTag": "string", "name": "string", "category": "string", "edition": "string", "editor": "string", "version": "string", "optionOf": "string", "scope": "string", "applications": {"operation": "string", "applicationId": "list"}, "equipments": {"operation": "string", "equipmentusers": "list"}};
//         params = {headers: {"Content-Type": "application/json"}};
//         request = http.post(url, body, params);
//         check(request, {
//             "A successful response.": (r) => r.status === 200
//         });
//         sleep(SLEEP_DURATION);
     });
//     group("/api/v1/products/aggregation", () => {
//         let url = BASE_URL + `/api/v1/products/aggregation`;
//         // Request No. 1
//         // TODO: edit the parameters of the request body.
//         let body = {"aggregationId": "integer", "aggregationName": "string", "aggregationScope": "string", "actionType": "string", "swidtags": "list"};
//         let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
//         let request = http.post(url, body, params);
//         check(request, {
//             "A successful response.": (r) => r.status === 200
//         });
//         sleep(SLEEP_DURATION);
//     });
    group("/api/v1/products/aggregations", () => {
        let searchParamsSwidTagFilteringOrder = "TODO_EDIT_THE_SEARCH_PARAMS.SWIDTAG.FILTERINGORDER";
        let searchParamsEditorFilteringkeyMultiple = "TODO_EDIT_THE_SEARCH_PARAMS.EDITOR.FILTERINGKEY_MULTIPLE";
        let searchParamsProductNameFilterType = "TODO_EDIT_THE_SEARCH_PARAMS.PRODUCT_NAME.FILTER_TYPE";
        let searchParamsProductNameFilteringkey = "TODO_EDIT_THE_SEARCH_PARAMS.PRODUCT_NAME.FILTERINGKEY";
        let searchParamsProductNameFilteringOrder = "TODO_EDIT_THE_SEARCH_PARAMS.PRODUCT_NAME.FILTERINGORDER";
        let pageSize = 10;
        let searchParamsEditorFilteringOrder = "TODO_EDIT_THE_SEARCH_PARAMS.EDITOR.FILTERINGORDER";
        let searchParamsEditorFilterType = "TODO_EDIT_THE_SEARCH_PARAMS.EDITOR.FILTER_TYPE";
        let searchParamsNameFilteringkey = "TODO_EDIT_THE_SEARCH_PARAMS.NAME.FILTERINGKEY";
        let searchParamsNameFilteringkeyMultiple = "TODO_EDIT_THE_SEARCH_PARAMS.NAME.FILTERINGKEY_MULTIPLE";
        let searchParamsProductNameFilteringkeyMultiple = "TODO_EDIT_THE_SEARCH_PARAMS.PRODUCT_NAME.FILTERINGKEY_MULTIPLE";
        let pageNum = 1;
        let searchParamsEditorFilteringkey = "TODO_EDIT_THE_SEARCH_PARAMS.EDITOR.FILTERINGKEY";
        let searchParamsSwidTagFilteringkey = "TODO_EDIT_THE_SEARCH_PARAMS.SWIDTAG.FILTERINGKEY";
        let searchParamsSwidTagFilterType = "TODO_EDIT_THE_SEARCH_PARAMS.SWIDTAG.FILTER_TYPE";
        let searchParamsNameFilteringOrder = "TODO_EDIT_THE_SEARCH_PARAMS.NAME.FILTERINGORDER";
        let sortOrder = "asc";
        let searchParamsSwidTagFilteringkeyMultiple = "TODO_EDIT_THE_SEARCH_PARAMS.SWIDTAG.FILTERINGKEY_MULTIPLE";
        let sortBy = "aggregation_name";
        let searchParamsNameFilterType = "TODO_EDIT_THE_SEARCH_PARAMS.NAME.FILTER_TYPE";
        let scopes = "OFR";
        let url = BASE_URL + `/api/v1/products/aggregations?page_num=${pageNum}&page_size=${pageSize}&sort_by=${sortBy}&sort_order=${sortOrder}&scopes=${scopes}`;
        // Request No. 1
        let request = http.get(url,{headers:headers});
        check(request, {
            "A successful response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/api/v1/products/aggregations/productview/{ID}/details", () => {
        let ID = 38;
        let scopes = "OFR";
        let url = BASE_URL + `/api/v1/products/aggregations/productview/${ID}/details?scopes=${scopes}`;
        // Request No. 1
        let request = http.get(url,{headers:headers});
        check(request, {
            "A successful response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/api/v1/products/aggregations/productview/{ID}/options", () => {
        let ID = 38;
        let scopes = "OFR";
        let url = BASE_URL + `/api/v1/products/aggregations/productview/${ID}/options?scopes=${scopes}`;
        // Request No. 1
        let request = http.get(url,{headers:headers});
        check(request, {
            "A successful response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/api/v1/products/aggregations/{ID}/products", () => {
        let ID = "38";
        let scopes = "OFR";
        let url = BASE_URL + `/api/v1/products/aggregations/${ID}/products?scopes=${scopes}`;
        // Request No. 1
        let request = http.get(url,{headers:headers});
        check(request, {
            "A successful response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
 }


