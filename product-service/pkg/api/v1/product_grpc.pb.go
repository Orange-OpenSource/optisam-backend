// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	DashboardOverview(ctx context.Context, in *DashboardOverviewRequest, opts ...grpc.CallOption) (*DashboardOverviewResponse, error)
	ProductsPerEditor(ctx context.Context, in *ProductsPerEditorRequest, opts ...grpc.CallOption) (*ProductsPerEditorResponse, error)
	GetRightsInfoByEditor(ctx context.Context, in *GetRightsInfoByEditorRequest, opts ...grpc.CallOption) (*GetRightsInfoByEditorResponse, error)
	GetProductDetail(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	ProductsPercOpenClosedSource(ctx context.Context, in *ProductsPercOpenClosedSourceRequest, opts ...grpc.CallOption) (*ProductsPercOpenClosedSourceResponse, error)
	GetProductOptions(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductOptionsResponse, error)
	ListProductAggregationView(ctx context.Context, in *ListProductAggregationViewRequest, opts ...grpc.CallOption) (*ListProductAggregationViewResponse, error)
	AggregatedRightDetails(ctx context.Context, in *AggregatedRightDetailsRequest, opts ...grpc.CallOption) (*AggregatedRightDetailsResponse, error)
	ListDeployedAndAcquiredEditors(ctx context.Context, in *ListDeployedAndAcquiredEditorsRequest, opts ...grpc.CallOption) (*ListEditorsResponse, error)
	ListEditors(ctx context.Context, in *ListEditorsRequest, opts ...grpc.CallOption) (*ListEditorsResponse, error)
	GetAvailableLicenses(ctx context.Context, in *GetAvailableLicensesRequest, opts ...grpc.CallOption) (*GetAvailableLicensesResponse, error)
	ListEditorProducts(ctx context.Context, in *ListEditorProductsRequest, opts ...grpc.CallOption) (*ListEditorProductsResponse, error)
	UpsertProduct(ctx context.Context, in *UpsertProductRequest, opts ...grpc.CallOption) (*UpsertProductResponse, error)
	UpsertAcqRights(ctx context.Context, in *UpsertAcqRightsRequest, opts ...grpc.CallOption) (*UpsertAcqRightsResponse, error)
	ProductsPerMetricType(ctx context.Context, in *ProductsPerMetricTypeRequest, opts ...grpc.CallOption) (*ProductsPerMetricTypeResponse, error)
	ComplianceAlert(ctx context.Context, in *ComplianceAlertRequest, opts ...grpc.CallOption) (*ComplianceAlertResponse, error)
	CounterfeitedProducts(ctx context.Context, in *CounterfeitedProductsRequest, opts ...grpc.CallOption) (*CounterfeitedProductsResponse, error)
	GroupComplianceEditorCost(ctx context.Context, in *GroupComplianceEditorRequest, opts ...grpc.CallOption) (*GroupComplianceEditorResponse, error)
	OverdeployedProducts(ctx context.Context, in *OverdeployedProductsRequest, opts ...grpc.CallOption) (*OverdeployedProductsResponse, error)
	SoftwareExpenditureByScope(ctx context.Context, in *SoftwareExpenditureByScopeRequest, opts ...grpc.CallOption) (*SoftwareExpenditureByScopeResponse, error)
	DashboardQualityProducts(ctx context.Context, in *DashboardQualityProductsRequest, opts ...grpc.CallOption) (*DashboardQualityProductsResponse, error)
	ListAcqRights(ctx context.Context, in *ListAcqRightsRequest, opts ...grpc.CallOption) (*ListAcqRightsResponse, error)
	ListAggregatedAcqRights(ctx context.Context, in *ListAggregatedAcqRightsRequest, opts ...grpc.CallOption) (*ListAggregatedAcqRightsResponse, error)
	GetAllEditorsCatalog(ctx context.Context, in *GetAllEditorsCatalogRequest, opts ...grpc.CallOption) (*GetAllEditorsCatalogResponse, error)
	CreateAggregation(ctx context.Context, in *Aggregation, opts ...grpc.CallOption) (*AggregationResponse, error)
	CreateAggregatedRights(ctx context.Context, in *AggregatedRightsRequest, opts ...grpc.CallOption) (*AggregatedRightsResponse, error)
	UpdateAggregatedRights(ctx context.Context, in *AggregatedRightsRequest, opts ...grpc.CallOption) (*AggregatedRightsResponse, error)
	DeleteAggregatedRights(ctx context.Context, in *DeleteAggregatedRightsRequest, opts ...grpc.CallOption) (*DeleteAggregatedRightsResponse, error)
	DownloadAggregatedRightsFile(ctx context.Context, in *DownloadAggregatedRightsFileRequest, opts ...grpc.CallOption) (*DownloadAggregatedRightsFileResponse, error)
	ListAggregationEditors(ctx context.Context, in *ListAggregationEditorsRequest, opts ...grpc.CallOption) (*ListAggregationEditorsResponse, error)
	ListAggregationProducts(ctx context.Context, in *ListAggregationProductsRequest, opts ...grpc.CallOption) (*ListAggregationProductsResponse, error)
	ListAggregations(ctx context.Context, in *ListAggregationsRequest, opts ...grpc.CallOption) (*ListAggregationsResponse, error)
	UpdateAggregation(ctx context.Context, in *Aggregation, opts ...grpc.CallOption) (*AggregationResponse, error)
	DeleteAggregation(ctx context.Context, in *DeleteAggregationRequest, opts ...grpc.CallOption) (*AggregationResponse, error)
	OverviewProductQuality(ctx context.Context, in *OverviewProductQualityRequest, opts ...grpc.CallOption) (*OverviewProductQualityResponse, error)
	ProductMaintenancePerc(ctx context.Context, in *ProductMaintenancePercRequest, opts ...grpc.CallOption) (*ProductMaintenancePercResponse, error)
	ProductNoMaintenanceDetails(ctx context.Context, in *ProductNoMaintenanceDetailsRequest, opts ...grpc.CallOption) (*ProductNoMaintenanceDetailsResponse, error)
	DropProductData(ctx context.Context, in *DropProductDataRequest, opts ...grpc.CallOption) (*DropProductDataResponse, error)
	DropAggregationData(ctx context.Context, in *DropAggregationDataRequest, opts ...grpc.CallOption) (*DropAggregationDataResponse, error)
	CreateAcqRight(ctx context.Context, in *AcqRightRequest, opts ...grpc.CallOption) (*AcqRightResponse, error)
	CreateDashboardUpdateJob(ctx context.Context, in *CreateDashboardUpdateJobRequest, opts ...grpc.CallOption) (*CreateDashboardUpdateJobResponse, error)
	UpsertAllocatedMetricEquipment(ctx context.Context, in *UpsertAllocateMetricEquipementRequest, opts ...grpc.CallOption) (*UpsertAllocateMetricEquipementResponse, error)
	DeleteAllocatedMetricEquipment(ctx context.Context, in *DropAllocateMetricEquipementRequest, opts ...grpc.CallOption) (*UpsertAllocateMetricEquipementResponse, error)
	GetBanner(ctx context.Context, in *GetBannerRequest, opts ...grpc.CallOption) (*GetBannerResponse, error)
	UpdateAcqRight(ctx context.Context, in *AcqRightRequest, opts ...grpc.CallOption) (*AcqRightResponse, error)
	UpdateAcqrightsSharedLicenses(ctx context.Context, in *UpdateSharedLicensesRequest, opts ...grpc.CallOption) (*UpdateSharedLicensesResponse, error)
	UpdateAggrightsSharedLicenses(ctx context.Context, in *UpdateAggrightsSharedLicensesRequest, opts ...grpc.CallOption) (*UpdateSharedLicensesResponse, error)
	DeleteAcqRight(ctx context.Context, in *DeleteAcqRightRequest, opts ...grpc.CallOption) (*DeleteAcqRightResponse, error)
	DownloadAcqRightFile(ctx context.Context, in *DownloadAcqRightFileRequest, opts ...grpc.CallOption) (*DownloadAcqRightFileResponse, error)
	GetEquipmentsByProduct(ctx context.Context, in *GetEquipmentsByProductRequest, opts ...grpc.CallOption) (*GetEquipmentsByProductResponse, error)
	GetAggregationAcqrightsExpandedView(ctx context.Context, in *GetAggregationAcqrightsExpandedViewRequest, opts ...grpc.CallOption) (*GetAggregationAcqrightsExpandedViewResponse, error)
	GetAggregationById(ctx context.Context, in *GetAggregationByIdRequest, opts ...grpc.CallOption) (*GetAggregationByIdResponse, error)
	GetAggregationProductsExpandedView(ctx context.Context, in *GetAggregationProductsExpandedViewRequest, opts ...grpc.CallOption) (*GetAggregationProductsExpandedViewResponse, error)
	GetApplicationsByProduct(ctx context.Context, in *GetApplicationsByProductRequest, opts ...grpc.CallOption) (*GetApplicationsByProductResponse, error)
	GetProductCountByApp(ctx context.Context, in *GetProductCountByAppRequest, opts ...grpc.CallOption) (*GetProductCountByAppResponse, error)
	//rpc UpsertNominativeUser(UpserNominativeUserRequest)returns (UpserNominativeUserResponse) {
	//option (google.api.http) = {
	//post : "/api/v1/product/nominative/users"
	//body : "*"
	//};
	//}
	UpsertProductConcurrentUser(ctx context.Context, in *ProductConcurrentUserRequest, opts ...grpc.CallOption) (*ProductConcurrentUserResponse, error)
	ListNominativeUser(ctx context.Context, in *ListNominativeUsersRequest, opts ...grpc.CallOption) (*ListNominativeUsersResponse, error)
	NominativeUserExport(ctx context.Context, in *NominativeUsersExportRequest, opts ...grpc.CallOption) (*ListNominativeUsersExportResponse, error)
	ConcurrentUserExport(ctx context.Context, in *ListConcurrentUsersExportRequest, opts ...grpc.CallOption) (*ListConcurrentUsersResponse, error)
	ListConcurrentUsers(ctx context.Context, in *ListConcurrentUsersRequest, opts ...grpc.CallOption) (*ListConcurrentUsersResponse, error)
	DeleteConcurrentUsers(ctx context.Context, in *DeleteConcurrentUsersRequest, opts ...grpc.CallOption) (*DeleteConcurrentUsersResponse, error)
	DeleteNominativeUsers(ctx context.Context, in *DeleteNominativeUserRequest, opts ...grpc.CallOption) (*DeleteNominativeUserResponse, error)
	GetTotalSharedAmount(ctx context.Context, in *GetTotalSharedAmountRequest, opts ...grpc.CallOption) (*GetTotalSharedAmountResponse, error)
	GroupComplianceProduct(ctx context.Context, in *GroupComplianceProductRequest, opts ...grpc.CallOption) (*GroupComplianceProductResponse, error)
	GetProductListByEditor(ctx context.Context, in *GetProductListByEditorRequest, opts ...grpc.CallOption) (*GetProductListByEditorResponse, error)
	GetConcurrentUsersHistroy(ctx context.Context, in *GetConcurrentUsersHistroyRequest, opts ...grpc.CallOption) (*GetConcurrentUsersHistroyResponse, error)
	GetUnderusageLicenceByEditorProduct(ctx context.Context, in *GetUnderusageByEditorRequest, opts ...grpc.CallOption) (*GetUnderusageByEditorResponse, error)
	GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error)
	DeleteSharedLicenses(ctx context.Context, in *DeleteSharedLicensesRequest, opts ...grpc.CallOption) (*DeleteSharedLicensesResponse, error)
	ListNominativeUserFileUpload(ctx context.Context, in *ListNominativeUsersFileUploadRequest, opts ...grpc.CallOption) (*ListNominativeUsersFileUploadResponse, error)
	GetEditorExpensesByScope(ctx context.Context, in *EditorExpensesByScopeRequest, opts ...grpc.CallOption) (*EditorExpensesByScopeResponse, error)
	GetEditorProductExpensesByScope(ctx context.Context, in *EditorProductsExpensesByScopeRequest, opts ...grpc.CallOption) (*EditorProductExpensesByScopeResponse, error)
	ProductLocationType(ctx context.Context, in *GetDeploymentTypeRequest, opts ...grpc.CallOption) (*GetDeploymentTypeResponse, error)
	GetMaintenanceBySwidtag(ctx context.Context, in *GetMaintenanceBySwidtagRequest, opts ...grpc.CallOption) (*GetMaintenanceBySwidtagResponse, error)
	GetTrueUpLicences(ctx context.Context, in *GetTrueUpLicencesRequest, opts ...grpc.CallOption) (*GetTrueUpLicencesResponse, error)
	GetWasteUpLicences(ctx context.Context, in *GetWasteUpLicencesRequest, opts ...grpc.CallOption) (*GetWasteUpLicencesResponse, error)
	GetProductInformationBySwidTag(ctx context.Context, in *GetProductInformationBySwidTagRequest, opts ...grpc.CallOption) (*GetProductInformationBySwidTagResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DashboardOverview(ctx context.Context, in *DashboardOverviewRequest, opts ...grpc.CallOption) (*DashboardOverviewResponse, error) {
	out := new(DashboardOverviewResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DashboardOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductsPerEditor(ctx context.Context, in *ProductsPerEditorRequest, opts ...grpc.CallOption) (*ProductsPerEditorResponse, error) {
	out := new(ProductsPerEditorResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ProductsPerEditor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetRightsInfoByEditor(ctx context.Context, in *GetRightsInfoByEditorRequest, opts ...grpc.CallOption) (*GetRightsInfoByEditorResponse, error) {
	out := new(GetRightsInfoByEditorResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetRightsInfoByEditor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductDetail(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetProductDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductsPercOpenClosedSource(ctx context.Context, in *ProductsPercOpenClosedSourceRequest, opts ...grpc.CallOption) (*ProductsPercOpenClosedSourceResponse, error) {
	out := new(ProductsPercOpenClosedSourceResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ProductsPercOpenClosedSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductOptions(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductOptionsResponse, error) {
	out := new(ProductOptionsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetProductOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListProductAggregationView(ctx context.Context, in *ListProductAggregationViewRequest, opts ...grpc.CallOption) (*ListProductAggregationViewResponse, error) {
	out := new(ListProductAggregationViewResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListProductAggregationView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) AggregatedRightDetails(ctx context.Context, in *AggregatedRightDetailsRequest, opts ...grpc.CallOption) (*AggregatedRightDetailsResponse, error) {
	out := new(AggregatedRightDetailsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/AggregatedRightDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListDeployedAndAcquiredEditors(ctx context.Context, in *ListDeployedAndAcquiredEditorsRequest, opts ...grpc.CallOption) (*ListEditorsResponse, error) {
	out := new(ListEditorsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListDeployedAndAcquiredEditors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListEditors(ctx context.Context, in *ListEditorsRequest, opts ...grpc.CallOption) (*ListEditorsResponse, error) {
	out := new(ListEditorsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListEditors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAvailableLicenses(ctx context.Context, in *GetAvailableLicensesRequest, opts ...grpc.CallOption) (*GetAvailableLicensesResponse, error) {
	out := new(GetAvailableLicensesResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetAvailableLicenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListEditorProducts(ctx context.Context, in *ListEditorProductsRequest, opts ...grpc.CallOption) (*ListEditorProductsResponse, error) {
	out := new(ListEditorProductsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListEditorProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpsertProduct(ctx context.Context, in *UpsertProductRequest, opts ...grpc.CallOption) (*UpsertProductResponse, error) {
	out := new(UpsertProductResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/UpsertProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpsertAcqRights(ctx context.Context, in *UpsertAcqRightsRequest, opts ...grpc.CallOption) (*UpsertAcqRightsResponse, error) {
	out := new(UpsertAcqRightsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/UpsertAcqRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductsPerMetricType(ctx context.Context, in *ProductsPerMetricTypeRequest, opts ...grpc.CallOption) (*ProductsPerMetricTypeResponse, error) {
	out := new(ProductsPerMetricTypeResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ProductsPerMetricType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ComplianceAlert(ctx context.Context, in *ComplianceAlertRequest, opts ...grpc.CallOption) (*ComplianceAlertResponse, error) {
	out := new(ComplianceAlertResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ComplianceAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CounterfeitedProducts(ctx context.Context, in *CounterfeitedProductsRequest, opts ...grpc.CallOption) (*CounterfeitedProductsResponse, error) {
	out := new(CounterfeitedProductsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/CounterfeitedProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GroupComplianceEditorCost(ctx context.Context, in *GroupComplianceEditorRequest, opts ...grpc.CallOption) (*GroupComplianceEditorResponse, error) {
	out := new(GroupComplianceEditorResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GroupComplianceEditorCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) OverdeployedProducts(ctx context.Context, in *OverdeployedProductsRequest, opts ...grpc.CallOption) (*OverdeployedProductsResponse, error) {
	out := new(OverdeployedProductsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/OverdeployedProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SoftwareExpenditureByScope(ctx context.Context, in *SoftwareExpenditureByScopeRequest, opts ...grpc.CallOption) (*SoftwareExpenditureByScopeResponse, error) {
	out := new(SoftwareExpenditureByScopeResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/SoftwareExpenditureByScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DashboardQualityProducts(ctx context.Context, in *DashboardQualityProductsRequest, opts ...grpc.CallOption) (*DashboardQualityProductsResponse, error) {
	out := new(DashboardQualityProductsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DashboardQualityProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListAcqRights(ctx context.Context, in *ListAcqRightsRequest, opts ...grpc.CallOption) (*ListAcqRightsResponse, error) {
	out := new(ListAcqRightsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListAcqRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListAggregatedAcqRights(ctx context.Context, in *ListAggregatedAcqRightsRequest, opts ...grpc.CallOption) (*ListAggregatedAcqRightsResponse, error) {
	out := new(ListAggregatedAcqRightsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListAggregatedAcqRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllEditorsCatalog(ctx context.Context, in *GetAllEditorsCatalogRequest, opts ...grpc.CallOption) (*GetAllEditorsCatalogResponse, error) {
	out := new(GetAllEditorsCatalogResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetAllEditorsCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateAggregation(ctx context.Context, in *Aggregation, opts ...grpc.CallOption) (*AggregationResponse, error) {
	out := new(AggregationResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/CreateAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateAggregatedRights(ctx context.Context, in *AggregatedRightsRequest, opts ...grpc.CallOption) (*AggregatedRightsResponse, error) {
	out := new(AggregatedRightsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/CreateAggregatedRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateAggregatedRights(ctx context.Context, in *AggregatedRightsRequest, opts ...grpc.CallOption) (*AggregatedRightsResponse, error) {
	out := new(AggregatedRightsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/UpdateAggregatedRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAggregatedRights(ctx context.Context, in *DeleteAggregatedRightsRequest, opts ...grpc.CallOption) (*DeleteAggregatedRightsResponse, error) {
	out := new(DeleteAggregatedRightsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DeleteAggregatedRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DownloadAggregatedRightsFile(ctx context.Context, in *DownloadAggregatedRightsFileRequest, opts ...grpc.CallOption) (*DownloadAggregatedRightsFileResponse, error) {
	out := new(DownloadAggregatedRightsFileResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DownloadAggregatedRightsFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListAggregationEditors(ctx context.Context, in *ListAggregationEditorsRequest, opts ...grpc.CallOption) (*ListAggregationEditorsResponse, error) {
	out := new(ListAggregationEditorsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListAggregationEditors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListAggregationProducts(ctx context.Context, in *ListAggregationProductsRequest, opts ...grpc.CallOption) (*ListAggregationProductsResponse, error) {
	out := new(ListAggregationProductsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListAggregationProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListAggregations(ctx context.Context, in *ListAggregationsRequest, opts ...grpc.CallOption) (*ListAggregationsResponse, error) {
	out := new(ListAggregationsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListAggregations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateAggregation(ctx context.Context, in *Aggregation, opts ...grpc.CallOption) (*AggregationResponse, error) {
	out := new(AggregationResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/UpdateAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAggregation(ctx context.Context, in *DeleteAggregationRequest, opts ...grpc.CallOption) (*AggregationResponse, error) {
	out := new(AggregationResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DeleteAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) OverviewProductQuality(ctx context.Context, in *OverviewProductQualityRequest, opts ...grpc.CallOption) (*OverviewProductQualityResponse, error) {
	out := new(OverviewProductQualityResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/OverviewProductQuality", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductMaintenancePerc(ctx context.Context, in *ProductMaintenancePercRequest, opts ...grpc.CallOption) (*ProductMaintenancePercResponse, error) {
	out := new(ProductMaintenancePercResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ProductMaintenancePerc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductNoMaintenanceDetails(ctx context.Context, in *ProductNoMaintenanceDetailsRequest, opts ...grpc.CallOption) (*ProductNoMaintenanceDetailsResponse, error) {
	out := new(ProductNoMaintenanceDetailsResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ProductNoMaintenanceDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DropProductData(ctx context.Context, in *DropProductDataRequest, opts ...grpc.CallOption) (*DropProductDataResponse, error) {
	out := new(DropProductDataResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DropProductData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DropAggregationData(ctx context.Context, in *DropAggregationDataRequest, opts ...grpc.CallOption) (*DropAggregationDataResponse, error) {
	out := new(DropAggregationDataResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DropAggregationData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateAcqRight(ctx context.Context, in *AcqRightRequest, opts ...grpc.CallOption) (*AcqRightResponse, error) {
	out := new(AcqRightResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/CreateAcqRight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateDashboardUpdateJob(ctx context.Context, in *CreateDashboardUpdateJobRequest, opts ...grpc.CallOption) (*CreateDashboardUpdateJobResponse, error) {
	out := new(CreateDashboardUpdateJobResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/CreateDashboardUpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpsertAllocatedMetricEquipment(ctx context.Context, in *UpsertAllocateMetricEquipementRequest, opts ...grpc.CallOption) (*UpsertAllocateMetricEquipementResponse, error) {
	out := new(UpsertAllocateMetricEquipementResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/UpsertAllocatedMetricEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAllocatedMetricEquipment(ctx context.Context, in *DropAllocateMetricEquipementRequest, opts ...grpc.CallOption) (*UpsertAllocateMetricEquipementResponse, error) {
	out := new(UpsertAllocateMetricEquipementResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DeleteAllocatedMetricEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetBanner(ctx context.Context, in *GetBannerRequest, opts ...grpc.CallOption) (*GetBannerResponse, error) {
	out := new(GetBannerResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateAcqRight(ctx context.Context, in *AcqRightRequest, opts ...grpc.CallOption) (*AcqRightResponse, error) {
	out := new(AcqRightResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/UpdateAcqRight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateAcqrightsSharedLicenses(ctx context.Context, in *UpdateSharedLicensesRequest, opts ...grpc.CallOption) (*UpdateSharedLicensesResponse, error) {
	out := new(UpdateSharedLicensesResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/UpdateAcqrightsSharedLicenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateAggrightsSharedLicenses(ctx context.Context, in *UpdateAggrightsSharedLicensesRequest, opts ...grpc.CallOption) (*UpdateSharedLicensesResponse, error) {
	out := new(UpdateSharedLicensesResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/UpdateAggrightsSharedLicenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAcqRight(ctx context.Context, in *DeleteAcqRightRequest, opts ...grpc.CallOption) (*DeleteAcqRightResponse, error) {
	out := new(DeleteAcqRightResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DeleteAcqRight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DownloadAcqRightFile(ctx context.Context, in *DownloadAcqRightFileRequest, opts ...grpc.CallOption) (*DownloadAcqRightFileResponse, error) {
	out := new(DownloadAcqRightFileResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DownloadAcqRightFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetEquipmentsByProduct(ctx context.Context, in *GetEquipmentsByProductRequest, opts ...grpc.CallOption) (*GetEquipmentsByProductResponse, error) {
	out := new(GetEquipmentsByProductResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetEquipmentsByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAggregationAcqrightsExpandedView(ctx context.Context, in *GetAggregationAcqrightsExpandedViewRequest, opts ...grpc.CallOption) (*GetAggregationAcqrightsExpandedViewResponse, error) {
	out := new(GetAggregationAcqrightsExpandedViewResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetAggregationAcqrightsExpandedView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAggregationById(ctx context.Context, in *GetAggregationByIdRequest, opts ...grpc.CallOption) (*GetAggregationByIdResponse, error) {
	out := new(GetAggregationByIdResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetAggregationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAggregationProductsExpandedView(ctx context.Context, in *GetAggregationProductsExpandedViewRequest, opts ...grpc.CallOption) (*GetAggregationProductsExpandedViewResponse, error) {
	out := new(GetAggregationProductsExpandedViewResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetAggregationProductsExpandedView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetApplicationsByProduct(ctx context.Context, in *GetApplicationsByProductRequest, opts ...grpc.CallOption) (*GetApplicationsByProductResponse, error) {
	out := new(GetApplicationsByProductResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetApplicationsByProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductCountByApp(ctx context.Context, in *GetProductCountByAppRequest, opts ...grpc.CallOption) (*GetProductCountByAppResponse, error) {
	out := new(GetProductCountByAppResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetProductCountByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpsertProductConcurrentUser(ctx context.Context, in *ProductConcurrentUserRequest, opts ...grpc.CallOption) (*ProductConcurrentUserResponse, error) {
	out := new(ProductConcurrentUserResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/UpsertProductConcurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListNominativeUser(ctx context.Context, in *ListNominativeUsersRequest, opts ...grpc.CallOption) (*ListNominativeUsersResponse, error) {
	out := new(ListNominativeUsersResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListNominativeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) NominativeUserExport(ctx context.Context, in *NominativeUsersExportRequest, opts ...grpc.CallOption) (*ListNominativeUsersExportResponse, error) {
	out := new(ListNominativeUsersExportResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/NominativeUserExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ConcurrentUserExport(ctx context.Context, in *ListConcurrentUsersExportRequest, opts ...grpc.CallOption) (*ListConcurrentUsersResponse, error) {
	out := new(ListConcurrentUsersResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ConcurrentUserExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListConcurrentUsers(ctx context.Context, in *ListConcurrentUsersRequest, opts ...grpc.CallOption) (*ListConcurrentUsersResponse, error) {
	out := new(ListConcurrentUsersResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListConcurrentUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteConcurrentUsers(ctx context.Context, in *DeleteConcurrentUsersRequest, opts ...grpc.CallOption) (*DeleteConcurrentUsersResponse, error) {
	out := new(DeleteConcurrentUsersResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DeleteConcurrentUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteNominativeUsers(ctx context.Context, in *DeleteNominativeUserRequest, opts ...grpc.CallOption) (*DeleteNominativeUserResponse, error) {
	out := new(DeleteNominativeUserResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DeleteNominativeUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetTotalSharedAmount(ctx context.Context, in *GetTotalSharedAmountRequest, opts ...grpc.CallOption) (*GetTotalSharedAmountResponse, error) {
	out := new(GetTotalSharedAmountResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetTotalSharedAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GroupComplianceProduct(ctx context.Context, in *GroupComplianceProductRequest, opts ...grpc.CallOption) (*GroupComplianceProductResponse, error) {
	out := new(GroupComplianceProductResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GroupComplianceProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductListByEditor(ctx context.Context, in *GetProductListByEditorRequest, opts ...grpc.CallOption) (*GetProductListByEditorResponse, error) {
	out := new(GetProductListByEditorResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetProductListByEditor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetConcurrentUsersHistroy(ctx context.Context, in *GetConcurrentUsersHistroyRequest, opts ...grpc.CallOption) (*GetConcurrentUsersHistroyResponse, error) {
	out := new(GetConcurrentUsersHistroyResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetConcurrentUsersHistroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetUnderusageLicenceByEditorProduct(ctx context.Context, in *GetUnderusageByEditorRequest, opts ...grpc.CallOption) (*GetUnderusageByEditorResponse, error) {
	out := new(GetUnderusageByEditorResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetUnderusageLicenceByEditorProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error) {
	out := new(GetMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteSharedLicenses(ctx context.Context, in *DeleteSharedLicensesRequest, opts ...grpc.CallOption) (*DeleteSharedLicensesResponse, error) {
	out := new(DeleteSharedLicensesResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/DeleteSharedLicenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListNominativeUserFileUpload(ctx context.Context, in *ListNominativeUsersFileUploadRequest, opts ...grpc.CallOption) (*ListNominativeUsersFileUploadResponse, error) {
	out := new(ListNominativeUsersFileUploadResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ListNominativeUserFileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetEditorExpensesByScope(ctx context.Context, in *EditorExpensesByScopeRequest, opts ...grpc.CallOption) (*EditorExpensesByScopeResponse, error) {
	out := new(EditorExpensesByScopeResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetEditorExpensesByScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetEditorProductExpensesByScope(ctx context.Context, in *EditorProductsExpensesByScopeRequest, opts ...grpc.CallOption) (*EditorProductExpensesByScopeResponse, error) {
	out := new(EditorProductExpensesByScopeResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetEditorProductExpensesByScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductLocationType(ctx context.Context, in *GetDeploymentTypeRequest, opts ...grpc.CallOption) (*GetDeploymentTypeResponse, error) {
	out := new(GetDeploymentTypeResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/ProductLocationType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetMaintenanceBySwidtag(ctx context.Context, in *GetMaintenanceBySwidtagRequest, opts ...grpc.CallOption) (*GetMaintenanceBySwidtagResponse, error) {
	out := new(GetMaintenanceBySwidtagResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetMaintenanceBySwidtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetTrueUpLicences(ctx context.Context, in *GetTrueUpLicencesRequest, opts ...grpc.CallOption) (*GetTrueUpLicencesResponse, error) {
	out := new(GetTrueUpLicencesResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetTrueUpLicences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetWasteUpLicences(ctx context.Context, in *GetWasteUpLicencesRequest, opts ...grpc.CallOption) (*GetWasteUpLicencesResponse, error) {
	out := new(GetWasteUpLicencesResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetWasteUpLicences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductInformationBySwidTag(ctx context.Context, in *GetProductInformationBySwidTagRequest, opts ...grpc.CallOption) (*GetProductInformationBySwidTagResponse, error) {
	out := new(GetProductInformationBySwidTagResponse)
	err := c.cc.Invoke(ctx, "/optisam.products.v1.ProductService/GetProductInformationBySwidTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations should embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	DashboardOverview(context.Context, *DashboardOverviewRequest) (*DashboardOverviewResponse, error)
	ProductsPerEditor(context.Context, *ProductsPerEditorRequest) (*ProductsPerEditorResponse, error)
	GetRightsInfoByEditor(context.Context, *GetRightsInfoByEditorRequest) (*GetRightsInfoByEditorResponse, error)
	GetProductDetail(context.Context, *ProductRequest) (*ProductResponse, error)
	ProductsPercOpenClosedSource(context.Context, *ProductsPercOpenClosedSourceRequest) (*ProductsPercOpenClosedSourceResponse, error)
	GetProductOptions(context.Context, *ProductRequest) (*ProductOptionsResponse, error)
	ListProductAggregationView(context.Context, *ListProductAggregationViewRequest) (*ListProductAggregationViewResponse, error)
	AggregatedRightDetails(context.Context, *AggregatedRightDetailsRequest) (*AggregatedRightDetailsResponse, error)
	ListDeployedAndAcquiredEditors(context.Context, *ListDeployedAndAcquiredEditorsRequest) (*ListEditorsResponse, error)
	ListEditors(context.Context, *ListEditorsRequest) (*ListEditorsResponse, error)
	GetAvailableLicenses(context.Context, *GetAvailableLicensesRequest) (*GetAvailableLicensesResponse, error)
	ListEditorProducts(context.Context, *ListEditorProductsRequest) (*ListEditorProductsResponse, error)
	UpsertProduct(context.Context, *UpsertProductRequest) (*UpsertProductResponse, error)
	UpsertAcqRights(context.Context, *UpsertAcqRightsRequest) (*UpsertAcqRightsResponse, error)
	ProductsPerMetricType(context.Context, *ProductsPerMetricTypeRequest) (*ProductsPerMetricTypeResponse, error)
	ComplianceAlert(context.Context, *ComplianceAlertRequest) (*ComplianceAlertResponse, error)
	CounterfeitedProducts(context.Context, *CounterfeitedProductsRequest) (*CounterfeitedProductsResponse, error)
	GroupComplianceEditorCost(context.Context, *GroupComplianceEditorRequest) (*GroupComplianceEditorResponse, error)
	OverdeployedProducts(context.Context, *OverdeployedProductsRequest) (*OverdeployedProductsResponse, error)
	SoftwareExpenditureByScope(context.Context, *SoftwareExpenditureByScopeRequest) (*SoftwareExpenditureByScopeResponse, error)
	DashboardQualityProducts(context.Context, *DashboardQualityProductsRequest) (*DashboardQualityProductsResponse, error)
	ListAcqRights(context.Context, *ListAcqRightsRequest) (*ListAcqRightsResponse, error)
	ListAggregatedAcqRights(context.Context, *ListAggregatedAcqRightsRequest) (*ListAggregatedAcqRightsResponse, error)
	GetAllEditorsCatalog(context.Context, *GetAllEditorsCatalogRequest) (*GetAllEditorsCatalogResponse, error)
	CreateAggregation(context.Context, *Aggregation) (*AggregationResponse, error)
	CreateAggregatedRights(context.Context, *AggregatedRightsRequest) (*AggregatedRightsResponse, error)
	UpdateAggregatedRights(context.Context, *AggregatedRightsRequest) (*AggregatedRightsResponse, error)
	DeleteAggregatedRights(context.Context, *DeleteAggregatedRightsRequest) (*DeleteAggregatedRightsResponse, error)
	DownloadAggregatedRightsFile(context.Context, *DownloadAggregatedRightsFileRequest) (*DownloadAggregatedRightsFileResponse, error)
	ListAggregationEditors(context.Context, *ListAggregationEditorsRequest) (*ListAggregationEditorsResponse, error)
	ListAggregationProducts(context.Context, *ListAggregationProductsRequest) (*ListAggregationProductsResponse, error)
	ListAggregations(context.Context, *ListAggregationsRequest) (*ListAggregationsResponse, error)
	UpdateAggregation(context.Context, *Aggregation) (*AggregationResponse, error)
	DeleteAggregation(context.Context, *DeleteAggregationRequest) (*AggregationResponse, error)
	OverviewProductQuality(context.Context, *OverviewProductQualityRequest) (*OverviewProductQualityResponse, error)
	ProductMaintenancePerc(context.Context, *ProductMaintenancePercRequest) (*ProductMaintenancePercResponse, error)
	ProductNoMaintenanceDetails(context.Context, *ProductNoMaintenanceDetailsRequest) (*ProductNoMaintenanceDetailsResponse, error)
	DropProductData(context.Context, *DropProductDataRequest) (*DropProductDataResponse, error)
	DropAggregationData(context.Context, *DropAggregationDataRequest) (*DropAggregationDataResponse, error)
	CreateAcqRight(context.Context, *AcqRightRequest) (*AcqRightResponse, error)
	CreateDashboardUpdateJob(context.Context, *CreateDashboardUpdateJobRequest) (*CreateDashboardUpdateJobResponse, error)
	UpsertAllocatedMetricEquipment(context.Context, *UpsertAllocateMetricEquipementRequest) (*UpsertAllocateMetricEquipementResponse, error)
	DeleteAllocatedMetricEquipment(context.Context, *DropAllocateMetricEquipementRequest) (*UpsertAllocateMetricEquipementResponse, error)
	GetBanner(context.Context, *GetBannerRequest) (*GetBannerResponse, error)
	UpdateAcqRight(context.Context, *AcqRightRequest) (*AcqRightResponse, error)
	UpdateAcqrightsSharedLicenses(context.Context, *UpdateSharedLicensesRequest) (*UpdateSharedLicensesResponse, error)
	UpdateAggrightsSharedLicenses(context.Context, *UpdateAggrightsSharedLicensesRequest) (*UpdateSharedLicensesResponse, error)
	DeleteAcqRight(context.Context, *DeleteAcqRightRequest) (*DeleteAcqRightResponse, error)
	DownloadAcqRightFile(context.Context, *DownloadAcqRightFileRequest) (*DownloadAcqRightFileResponse, error)
	GetEquipmentsByProduct(context.Context, *GetEquipmentsByProductRequest) (*GetEquipmentsByProductResponse, error)
	GetAggregationAcqrightsExpandedView(context.Context, *GetAggregationAcqrightsExpandedViewRequest) (*GetAggregationAcqrightsExpandedViewResponse, error)
	GetAggregationById(context.Context, *GetAggregationByIdRequest) (*GetAggregationByIdResponse, error)
	GetAggregationProductsExpandedView(context.Context, *GetAggregationProductsExpandedViewRequest) (*GetAggregationProductsExpandedViewResponse, error)
	GetApplicationsByProduct(context.Context, *GetApplicationsByProductRequest) (*GetApplicationsByProductResponse, error)
	GetProductCountByApp(context.Context, *GetProductCountByAppRequest) (*GetProductCountByAppResponse, error)
	//rpc UpsertNominativeUser(UpserNominativeUserRequest)returns (UpserNominativeUserResponse) {
	//option (google.api.http) = {
	//post : "/api/v1/product/nominative/users"
	//body : "*"
	//};
	//}
	UpsertProductConcurrentUser(context.Context, *ProductConcurrentUserRequest) (*ProductConcurrentUserResponse, error)
	ListNominativeUser(context.Context, *ListNominativeUsersRequest) (*ListNominativeUsersResponse, error)
	NominativeUserExport(context.Context, *NominativeUsersExportRequest) (*ListNominativeUsersExportResponse, error)
	ConcurrentUserExport(context.Context, *ListConcurrentUsersExportRequest) (*ListConcurrentUsersResponse, error)
	ListConcurrentUsers(context.Context, *ListConcurrentUsersRequest) (*ListConcurrentUsersResponse, error)
	DeleteConcurrentUsers(context.Context, *DeleteConcurrentUsersRequest) (*DeleteConcurrentUsersResponse, error)
	DeleteNominativeUsers(context.Context, *DeleteNominativeUserRequest) (*DeleteNominativeUserResponse, error)
	GetTotalSharedAmount(context.Context, *GetTotalSharedAmountRequest) (*GetTotalSharedAmountResponse, error)
	GroupComplianceProduct(context.Context, *GroupComplianceProductRequest) (*GroupComplianceProductResponse, error)
	GetProductListByEditor(context.Context, *GetProductListByEditorRequest) (*GetProductListByEditorResponse, error)
	GetConcurrentUsersHistroy(context.Context, *GetConcurrentUsersHistroyRequest) (*GetConcurrentUsersHistroyResponse, error)
	GetUnderusageLicenceByEditorProduct(context.Context, *GetUnderusageByEditorRequest) (*GetUnderusageByEditorResponse, error)
	GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error)
	DeleteSharedLicenses(context.Context, *DeleteSharedLicensesRequest) (*DeleteSharedLicensesResponse, error)
	ListNominativeUserFileUpload(context.Context, *ListNominativeUsersFileUploadRequest) (*ListNominativeUsersFileUploadResponse, error)
	GetEditorExpensesByScope(context.Context, *EditorExpensesByScopeRequest) (*EditorExpensesByScopeResponse, error)
	GetEditorProductExpensesByScope(context.Context, *EditorProductsExpensesByScopeRequest) (*EditorProductExpensesByScopeResponse, error)
	ProductLocationType(context.Context, *GetDeploymentTypeRequest) (*GetDeploymentTypeResponse, error)
	GetMaintenanceBySwidtag(context.Context, *GetMaintenanceBySwidtagRequest) (*GetMaintenanceBySwidtagResponse, error)
	GetTrueUpLicences(context.Context, *GetTrueUpLicencesRequest) (*GetTrueUpLicencesResponse, error)
	GetWasteUpLicences(context.Context, *GetWasteUpLicencesRequest) (*GetWasteUpLicencesResponse, error)
	GetProductInformationBySwidTag(context.Context, *GetProductInformationBySwidTagRequest) (*GetProductInformationBySwidTagResponse, error)
}

// UnimplementedProductServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedProductServiceServer) DashboardOverview(context.Context, *DashboardOverviewRequest) (*DashboardOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardOverview not implemented")
}
func (UnimplementedProductServiceServer) ProductsPerEditor(context.Context, *ProductsPerEditorRequest) (*ProductsPerEditorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductsPerEditor not implemented")
}
func (UnimplementedProductServiceServer) GetRightsInfoByEditor(context.Context, *GetRightsInfoByEditorRequest) (*GetRightsInfoByEditorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRightsInfoByEditor not implemented")
}
func (UnimplementedProductServiceServer) GetProductDetail(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetail not implemented")
}
func (UnimplementedProductServiceServer) ProductsPercOpenClosedSource(context.Context, *ProductsPercOpenClosedSourceRequest) (*ProductsPercOpenClosedSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductsPercOpenClosedSource not implemented")
}
func (UnimplementedProductServiceServer) GetProductOptions(context.Context, *ProductRequest) (*ProductOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductOptions not implemented")
}
func (UnimplementedProductServiceServer) ListProductAggregationView(context.Context, *ListProductAggregationViewRequest) (*ListProductAggregationViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductAggregationView not implemented")
}
func (UnimplementedProductServiceServer) AggregatedRightDetails(context.Context, *AggregatedRightDetailsRequest) (*AggregatedRightDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregatedRightDetails not implemented")
}
func (UnimplementedProductServiceServer) ListDeployedAndAcquiredEditors(context.Context, *ListDeployedAndAcquiredEditorsRequest) (*ListEditorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployedAndAcquiredEditors not implemented")
}
func (UnimplementedProductServiceServer) ListEditors(context.Context, *ListEditorsRequest) (*ListEditorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEditors not implemented")
}
func (UnimplementedProductServiceServer) GetAvailableLicenses(context.Context, *GetAvailableLicensesRequest) (*GetAvailableLicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableLicenses not implemented")
}
func (UnimplementedProductServiceServer) ListEditorProducts(context.Context, *ListEditorProductsRequest) (*ListEditorProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEditorProducts not implemented")
}
func (UnimplementedProductServiceServer) UpsertProduct(context.Context, *UpsertProductRequest) (*UpsertProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertProduct not implemented")
}
func (UnimplementedProductServiceServer) UpsertAcqRights(context.Context, *UpsertAcqRightsRequest) (*UpsertAcqRightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAcqRights not implemented")
}
func (UnimplementedProductServiceServer) ProductsPerMetricType(context.Context, *ProductsPerMetricTypeRequest) (*ProductsPerMetricTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductsPerMetricType not implemented")
}
func (UnimplementedProductServiceServer) ComplianceAlert(context.Context, *ComplianceAlertRequest) (*ComplianceAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComplianceAlert not implemented")
}
func (UnimplementedProductServiceServer) CounterfeitedProducts(context.Context, *CounterfeitedProductsRequest) (*CounterfeitedProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CounterfeitedProducts not implemented")
}
func (UnimplementedProductServiceServer) GroupComplianceEditorCost(context.Context, *GroupComplianceEditorRequest) (*GroupComplianceEditorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupComplianceEditorCost not implemented")
}
func (UnimplementedProductServiceServer) OverdeployedProducts(context.Context, *OverdeployedProductsRequest) (*OverdeployedProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverdeployedProducts not implemented")
}
func (UnimplementedProductServiceServer) SoftwareExpenditureByScope(context.Context, *SoftwareExpenditureByScopeRequest) (*SoftwareExpenditureByScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftwareExpenditureByScope not implemented")
}
func (UnimplementedProductServiceServer) DashboardQualityProducts(context.Context, *DashboardQualityProductsRequest) (*DashboardQualityProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardQualityProducts not implemented")
}
func (UnimplementedProductServiceServer) ListAcqRights(context.Context, *ListAcqRightsRequest) (*ListAcqRightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAcqRights not implemented")
}
func (UnimplementedProductServiceServer) ListAggregatedAcqRights(context.Context, *ListAggregatedAcqRightsRequest) (*ListAggregatedAcqRightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAggregatedAcqRights not implemented")
}
func (UnimplementedProductServiceServer) GetAllEditorsCatalog(context.Context, *GetAllEditorsCatalogRequest) (*GetAllEditorsCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEditorsCatalog not implemented")
}
func (UnimplementedProductServiceServer) CreateAggregation(context.Context, *Aggregation) (*AggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAggregation not implemented")
}
func (UnimplementedProductServiceServer) CreateAggregatedRights(context.Context, *AggregatedRightsRequest) (*AggregatedRightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAggregatedRights not implemented")
}
func (UnimplementedProductServiceServer) UpdateAggregatedRights(context.Context, *AggregatedRightsRequest) (*AggregatedRightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAggregatedRights not implemented")
}
func (UnimplementedProductServiceServer) DeleteAggregatedRights(context.Context, *DeleteAggregatedRightsRequest) (*DeleteAggregatedRightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAggregatedRights not implemented")
}
func (UnimplementedProductServiceServer) DownloadAggregatedRightsFile(context.Context, *DownloadAggregatedRightsFileRequest) (*DownloadAggregatedRightsFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAggregatedRightsFile not implemented")
}
func (UnimplementedProductServiceServer) ListAggregationEditors(context.Context, *ListAggregationEditorsRequest) (*ListAggregationEditorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAggregationEditors not implemented")
}
func (UnimplementedProductServiceServer) ListAggregationProducts(context.Context, *ListAggregationProductsRequest) (*ListAggregationProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAggregationProducts not implemented")
}
func (UnimplementedProductServiceServer) ListAggregations(context.Context, *ListAggregationsRequest) (*ListAggregationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAggregations not implemented")
}
func (UnimplementedProductServiceServer) UpdateAggregation(context.Context, *Aggregation) (*AggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAggregation not implemented")
}
func (UnimplementedProductServiceServer) DeleteAggregation(context.Context, *DeleteAggregationRequest) (*AggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAggregation not implemented")
}
func (UnimplementedProductServiceServer) OverviewProductQuality(context.Context, *OverviewProductQualityRequest) (*OverviewProductQualityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverviewProductQuality not implemented")
}
func (UnimplementedProductServiceServer) ProductMaintenancePerc(context.Context, *ProductMaintenancePercRequest) (*ProductMaintenancePercResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductMaintenancePerc not implemented")
}
func (UnimplementedProductServiceServer) ProductNoMaintenanceDetails(context.Context, *ProductNoMaintenanceDetailsRequest) (*ProductNoMaintenanceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductNoMaintenanceDetails not implemented")
}
func (UnimplementedProductServiceServer) DropProductData(context.Context, *DropProductDataRequest) (*DropProductDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropProductData not implemented")
}
func (UnimplementedProductServiceServer) DropAggregationData(context.Context, *DropAggregationDataRequest) (*DropAggregationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropAggregationData not implemented")
}
func (UnimplementedProductServiceServer) CreateAcqRight(context.Context, *AcqRightRequest) (*AcqRightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAcqRight not implemented")
}
func (UnimplementedProductServiceServer) CreateDashboardUpdateJob(context.Context, *CreateDashboardUpdateJobRequest) (*CreateDashboardUpdateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDashboardUpdateJob not implemented")
}
func (UnimplementedProductServiceServer) UpsertAllocatedMetricEquipment(context.Context, *UpsertAllocateMetricEquipementRequest) (*UpsertAllocateMetricEquipementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAllocatedMetricEquipment not implemented")
}
func (UnimplementedProductServiceServer) DeleteAllocatedMetricEquipment(context.Context, *DropAllocateMetricEquipementRequest) (*UpsertAllocateMetricEquipementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllocatedMetricEquipment not implemented")
}
func (UnimplementedProductServiceServer) GetBanner(context.Context, *GetBannerRequest) (*GetBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanner not implemented")
}
func (UnimplementedProductServiceServer) UpdateAcqRight(context.Context, *AcqRightRequest) (*AcqRightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAcqRight not implemented")
}
func (UnimplementedProductServiceServer) UpdateAcqrightsSharedLicenses(context.Context, *UpdateSharedLicensesRequest) (*UpdateSharedLicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAcqrightsSharedLicenses not implemented")
}
func (UnimplementedProductServiceServer) UpdateAggrightsSharedLicenses(context.Context, *UpdateAggrightsSharedLicensesRequest) (*UpdateSharedLicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAggrightsSharedLicenses not implemented")
}
func (UnimplementedProductServiceServer) DeleteAcqRight(context.Context, *DeleteAcqRightRequest) (*DeleteAcqRightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAcqRight not implemented")
}
func (UnimplementedProductServiceServer) DownloadAcqRightFile(context.Context, *DownloadAcqRightFileRequest) (*DownloadAcqRightFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAcqRightFile not implemented")
}
func (UnimplementedProductServiceServer) GetEquipmentsByProduct(context.Context, *GetEquipmentsByProductRequest) (*GetEquipmentsByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipmentsByProduct not implemented")
}
func (UnimplementedProductServiceServer) GetAggregationAcqrightsExpandedView(context.Context, *GetAggregationAcqrightsExpandedViewRequest) (*GetAggregationAcqrightsExpandedViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregationAcqrightsExpandedView not implemented")
}
func (UnimplementedProductServiceServer) GetAggregationById(context.Context, *GetAggregationByIdRequest) (*GetAggregationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregationById not implemented")
}
func (UnimplementedProductServiceServer) GetAggregationProductsExpandedView(context.Context, *GetAggregationProductsExpandedViewRequest) (*GetAggregationProductsExpandedViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregationProductsExpandedView not implemented")
}
func (UnimplementedProductServiceServer) GetApplicationsByProduct(context.Context, *GetApplicationsByProductRequest) (*GetApplicationsByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationsByProduct not implemented")
}
func (UnimplementedProductServiceServer) GetProductCountByApp(context.Context, *GetProductCountByAppRequest) (*GetProductCountByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCountByApp not implemented")
}
func (UnimplementedProductServiceServer) UpsertProductConcurrentUser(context.Context, *ProductConcurrentUserRequest) (*ProductConcurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertProductConcurrentUser not implemented")
}
func (UnimplementedProductServiceServer) ListNominativeUser(context.Context, *ListNominativeUsersRequest) (*ListNominativeUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNominativeUser not implemented")
}
func (UnimplementedProductServiceServer) NominativeUserExport(context.Context, *NominativeUsersExportRequest) (*ListNominativeUsersExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NominativeUserExport not implemented")
}
func (UnimplementedProductServiceServer) ConcurrentUserExport(context.Context, *ListConcurrentUsersExportRequest) (*ListConcurrentUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConcurrentUserExport not implemented")
}
func (UnimplementedProductServiceServer) ListConcurrentUsers(context.Context, *ListConcurrentUsersRequest) (*ListConcurrentUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConcurrentUsers not implemented")
}
func (UnimplementedProductServiceServer) DeleteConcurrentUsers(context.Context, *DeleteConcurrentUsersRequest) (*DeleteConcurrentUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConcurrentUsers not implemented")
}
func (UnimplementedProductServiceServer) DeleteNominativeUsers(context.Context, *DeleteNominativeUserRequest) (*DeleteNominativeUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNominativeUsers not implemented")
}
func (UnimplementedProductServiceServer) GetTotalSharedAmount(context.Context, *GetTotalSharedAmountRequest) (*GetTotalSharedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalSharedAmount not implemented")
}
func (UnimplementedProductServiceServer) GroupComplianceProduct(context.Context, *GroupComplianceProductRequest) (*GroupComplianceProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupComplianceProduct not implemented")
}
func (UnimplementedProductServiceServer) GetProductListByEditor(context.Context, *GetProductListByEditorRequest) (*GetProductListByEditorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductListByEditor not implemented")
}
func (UnimplementedProductServiceServer) GetConcurrentUsersHistroy(context.Context, *GetConcurrentUsersHistroyRequest) (*GetConcurrentUsersHistroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConcurrentUsersHistroy not implemented")
}
func (UnimplementedProductServiceServer) GetUnderusageLicenceByEditorProduct(context.Context, *GetUnderusageByEditorRequest) (*GetUnderusageByEditorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnderusageLicenceByEditorProduct not implemented")
}
func (UnimplementedProductServiceServer) GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (UnimplementedProductServiceServer) DeleteSharedLicenses(context.Context, *DeleteSharedLicensesRequest) (*DeleteSharedLicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSharedLicenses not implemented")
}
func (UnimplementedProductServiceServer) ListNominativeUserFileUpload(context.Context, *ListNominativeUsersFileUploadRequest) (*ListNominativeUsersFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNominativeUserFileUpload not implemented")
}
func (UnimplementedProductServiceServer) GetEditorExpensesByScope(context.Context, *EditorExpensesByScopeRequest) (*EditorExpensesByScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEditorExpensesByScope not implemented")
}
func (UnimplementedProductServiceServer) GetEditorProductExpensesByScope(context.Context, *EditorProductsExpensesByScopeRequest) (*EditorProductExpensesByScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEditorProductExpensesByScope not implemented")
}
func (UnimplementedProductServiceServer) ProductLocationType(context.Context, *GetDeploymentTypeRequest) (*GetDeploymentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductLocationType not implemented")
}
func (UnimplementedProductServiceServer) GetMaintenanceBySwidtag(context.Context, *GetMaintenanceBySwidtagRequest) (*GetMaintenanceBySwidtagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaintenanceBySwidtag not implemented")
}
func (UnimplementedProductServiceServer) GetTrueUpLicences(context.Context, *GetTrueUpLicencesRequest) (*GetTrueUpLicencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrueUpLicences not implemented")
}
func (UnimplementedProductServiceServer) GetWasteUpLicences(context.Context, *GetWasteUpLicencesRequest) (*GetWasteUpLicencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWasteUpLicences not implemented")
}
func (UnimplementedProductServiceServer) GetProductInformationBySwidTag(context.Context, *GetProductInformationBySwidTagRequest) (*GetProductInformationBySwidTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductInformationBySwidTag not implemented")
}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DashboardOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DashboardOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DashboardOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DashboardOverview(ctx, req.(*DashboardOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductsPerEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsPerEditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductsPerEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ProductsPerEditor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductsPerEditor(ctx, req.(*ProductsPerEditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetRightsInfoByEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRightsInfoByEditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetRightsInfoByEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetRightsInfoByEditor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetRightsInfoByEditor(ctx, req.(*GetRightsInfoByEditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetProductDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductDetail(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductsPercOpenClosedSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsPercOpenClosedSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductsPercOpenClosedSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ProductsPercOpenClosedSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductsPercOpenClosedSource(ctx, req.(*ProductsPercOpenClosedSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetProductOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductOptions(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListProductAggregationView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductAggregationViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListProductAggregationView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListProductAggregationView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListProductAggregationView(ctx, req.(*ListProductAggregationViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_AggregatedRightDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatedRightDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AggregatedRightDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/AggregatedRightDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AggregatedRightDetails(ctx, req.(*AggregatedRightDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListDeployedAndAcquiredEditors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeployedAndAcquiredEditorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListDeployedAndAcquiredEditors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListDeployedAndAcquiredEditors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListDeployedAndAcquiredEditors(ctx, req.(*ListDeployedAndAcquiredEditorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListEditors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEditorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListEditors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListEditors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListEditors(ctx, req.(*ListEditorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAvailableLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAvailableLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetAvailableLicenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAvailableLicenses(ctx, req.(*GetAvailableLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListEditorProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEditorProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListEditorProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListEditorProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListEditorProducts(ctx, req.(*ListEditorProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpsertProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpsertProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/UpsertProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpsertProduct(ctx, req.(*UpsertProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpsertAcqRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAcqRightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpsertAcqRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/UpsertAcqRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpsertAcqRights(ctx, req.(*UpsertAcqRightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductsPerMetricType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsPerMetricTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductsPerMetricType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ProductsPerMetricType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductsPerMetricType(ctx, req.(*ProductsPerMetricTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ComplianceAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ComplianceAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ComplianceAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ComplianceAlert(ctx, req.(*ComplianceAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CounterfeitedProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterfeitedProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CounterfeitedProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/CounterfeitedProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CounterfeitedProducts(ctx, req.(*CounterfeitedProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GroupComplianceEditorCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupComplianceEditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GroupComplianceEditorCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GroupComplianceEditorCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GroupComplianceEditorCost(ctx, req.(*GroupComplianceEditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_OverdeployedProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverdeployedProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).OverdeployedProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/OverdeployedProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).OverdeployedProducts(ctx, req.(*OverdeployedProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SoftwareExpenditureByScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftwareExpenditureByScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SoftwareExpenditureByScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/SoftwareExpenditureByScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SoftwareExpenditureByScope(ctx, req.(*SoftwareExpenditureByScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DashboardQualityProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardQualityProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DashboardQualityProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DashboardQualityProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DashboardQualityProducts(ctx, req.(*DashboardQualityProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListAcqRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAcqRightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListAcqRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListAcqRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListAcqRights(ctx, req.(*ListAcqRightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListAggregatedAcqRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAggregatedAcqRightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListAggregatedAcqRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListAggregatedAcqRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListAggregatedAcqRights(ctx, req.(*ListAggregatedAcqRightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllEditorsCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEditorsCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllEditorsCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetAllEditorsCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllEditorsCatalog(ctx, req.(*GetAllEditorsCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Aggregation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/CreateAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateAggregation(ctx, req.(*Aggregation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateAggregatedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatedRightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateAggregatedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/CreateAggregatedRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateAggregatedRights(ctx, req.(*AggregatedRightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateAggregatedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatedRightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateAggregatedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/UpdateAggregatedRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateAggregatedRights(ctx, req.(*AggregatedRightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAggregatedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAggregatedRightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAggregatedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DeleteAggregatedRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAggregatedRights(ctx, req.(*DeleteAggregatedRightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DownloadAggregatedRightsFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadAggregatedRightsFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DownloadAggregatedRightsFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DownloadAggregatedRightsFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DownloadAggregatedRightsFile(ctx, req.(*DownloadAggregatedRightsFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListAggregationEditors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAggregationEditorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListAggregationEditors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListAggregationEditors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListAggregationEditors(ctx, req.(*ListAggregationEditorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListAggregationProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAggregationProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListAggregationProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListAggregationProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListAggregationProducts(ctx, req.(*ListAggregationProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListAggregations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAggregationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListAggregations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListAggregations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListAggregations(ctx, req.(*ListAggregationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Aggregation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/UpdateAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateAggregation(ctx, req.(*Aggregation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DeleteAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAggregation(ctx, req.(*DeleteAggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_OverviewProductQuality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverviewProductQualityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).OverviewProductQuality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/OverviewProductQuality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).OverviewProductQuality(ctx, req.(*OverviewProductQualityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductMaintenancePerc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductMaintenancePercRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductMaintenancePerc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ProductMaintenancePerc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductMaintenancePerc(ctx, req.(*ProductMaintenancePercRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductNoMaintenanceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductNoMaintenanceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductNoMaintenanceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ProductNoMaintenanceDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductNoMaintenanceDetails(ctx, req.(*ProductNoMaintenanceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DropProductData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropProductDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DropProductData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DropProductData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DropProductData(ctx, req.(*DropProductDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DropAggregationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropAggregationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DropAggregationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DropAggregationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DropAggregationData(ctx, req.(*DropAggregationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateAcqRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcqRightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateAcqRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/CreateAcqRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateAcqRight(ctx, req.(*AcqRightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateDashboardUpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDashboardUpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateDashboardUpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/CreateDashboardUpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateDashboardUpdateJob(ctx, req.(*CreateDashboardUpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpsertAllocatedMetricEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAllocateMetricEquipementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpsertAllocatedMetricEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/UpsertAllocatedMetricEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpsertAllocatedMetricEquipment(ctx, req.(*UpsertAllocateMetricEquipementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAllocatedMetricEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropAllocateMetricEquipementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAllocatedMetricEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DeleteAllocatedMetricEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAllocatedMetricEquipment(ctx, req.(*DropAllocateMetricEquipementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetBanner(ctx, req.(*GetBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateAcqRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcqRightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateAcqRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/UpdateAcqRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateAcqRight(ctx, req.(*AcqRightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateAcqrightsSharedLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSharedLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateAcqrightsSharedLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/UpdateAcqrightsSharedLicenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateAcqrightsSharedLicenses(ctx, req.(*UpdateSharedLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateAggrightsSharedLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAggrightsSharedLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateAggrightsSharedLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/UpdateAggrightsSharedLicenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateAggrightsSharedLicenses(ctx, req.(*UpdateAggrightsSharedLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAcqRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAcqRightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAcqRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DeleteAcqRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAcqRight(ctx, req.(*DeleteAcqRightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DownloadAcqRightFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadAcqRightFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DownloadAcqRightFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DownloadAcqRightFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DownloadAcqRightFile(ctx, req.(*DownloadAcqRightFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetEquipmentsByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentsByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetEquipmentsByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetEquipmentsByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetEquipmentsByProduct(ctx, req.(*GetEquipmentsByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAggregationAcqrightsExpandedView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregationAcqrightsExpandedViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAggregationAcqrightsExpandedView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetAggregationAcqrightsExpandedView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAggregationAcqrightsExpandedView(ctx, req.(*GetAggregationAcqrightsExpandedViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAggregationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAggregationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetAggregationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAggregationById(ctx, req.(*GetAggregationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAggregationProductsExpandedView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregationProductsExpandedViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAggregationProductsExpandedView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetAggregationProductsExpandedView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAggregationProductsExpandedView(ctx, req.(*GetAggregationProductsExpandedViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetApplicationsByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationsByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetApplicationsByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetApplicationsByProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetApplicationsByProduct(ctx, req.(*GetApplicationsByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductCountByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCountByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductCountByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetProductCountByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductCountByApp(ctx, req.(*GetProductCountByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpsertProductConcurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductConcurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpsertProductConcurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/UpsertProductConcurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpsertProductConcurrentUser(ctx, req.(*ProductConcurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListNominativeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNominativeUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListNominativeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListNominativeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListNominativeUser(ctx, req.(*ListNominativeUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_NominativeUserExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NominativeUsersExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).NominativeUserExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/NominativeUserExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).NominativeUserExport(ctx, req.(*NominativeUsersExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ConcurrentUserExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConcurrentUsersExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ConcurrentUserExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ConcurrentUserExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ConcurrentUserExport(ctx, req.(*ListConcurrentUsersExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListConcurrentUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConcurrentUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListConcurrentUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListConcurrentUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListConcurrentUsers(ctx, req.(*ListConcurrentUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteConcurrentUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConcurrentUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteConcurrentUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DeleteConcurrentUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteConcurrentUsers(ctx, req.(*DeleteConcurrentUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteNominativeUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNominativeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteNominativeUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DeleteNominativeUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteNominativeUsers(ctx, req.(*DeleteNominativeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetTotalSharedAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalSharedAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetTotalSharedAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetTotalSharedAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetTotalSharedAmount(ctx, req.(*GetTotalSharedAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GroupComplianceProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupComplianceProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GroupComplianceProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GroupComplianceProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GroupComplianceProduct(ctx, req.(*GroupComplianceProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductListByEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductListByEditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductListByEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetProductListByEditor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductListByEditor(ctx, req.(*GetProductListByEditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetConcurrentUsersHistroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConcurrentUsersHistroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetConcurrentUsersHistroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetConcurrentUsersHistroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetConcurrentUsersHistroy(ctx, req.(*GetConcurrentUsersHistroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetUnderusageLicenceByEditorProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnderusageByEditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetUnderusageLicenceByEditorProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetUnderusageLicenceByEditorProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetUnderusageLicenceByEditorProduct(ctx, req.(*GetUnderusageByEditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetMetric(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteSharedLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSharedLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteSharedLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/DeleteSharedLicenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteSharedLicenses(ctx, req.(*DeleteSharedLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListNominativeUserFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNominativeUsersFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListNominativeUserFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ListNominativeUserFileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListNominativeUserFileUpload(ctx, req.(*ListNominativeUsersFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetEditorExpensesByScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditorExpensesByScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetEditorExpensesByScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetEditorExpensesByScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetEditorExpensesByScope(ctx, req.(*EditorExpensesByScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetEditorProductExpensesByScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditorProductsExpensesByScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetEditorProductExpensesByScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetEditorProductExpensesByScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetEditorProductExpensesByScope(ctx, req.(*EditorProductsExpensesByScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductLocationType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductLocationType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/ProductLocationType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductLocationType(ctx, req.(*GetDeploymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetMaintenanceBySwidtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaintenanceBySwidtagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetMaintenanceBySwidtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetMaintenanceBySwidtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetMaintenanceBySwidtag(ctx, req.(*GetMaintenanceBySwidtagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetTrueUpLicences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrueUpLicencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetTrueUpLicences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetTrueUpLicences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetTrueUpLicences(ctx, req.(*GetTrueUpLicencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetWasteUpLicences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWasteUpLicencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetWasteUpLicences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetWasteUpLicences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetWasteUpLicences(ctx, req.(*GetWasteUpLicencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductInformationBySwidTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductInformationBySwidTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductInformationBySwidTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.products.v1.ProductService/GetProductInformationBySwidTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductInformationBySwidTag(ctx, req.(*GetProductInformationBySwidTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "optisam.products.v1.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProducts",
			Handler:    _ProductService_ListProducts_Handler,
		},
		{
			MethodName: "DashboardOverview",
			Handler:    _ProductService_DashboardOverview_Handler,
		},
		{
			MethodName: "ProductsPerEditor",
			Handler:    _ProductService_ProductsPerEditor_Handler,
		},
		{
			MethodName: "GetRightsInfoByEditor",
			Handler:    _ProductService_GetRightsInfoByEditor_Handler,
		},
		{
			MethodName: "GetProductDetail",
			Handler:    _ProductService_GetProductDetail_Handler,
		},
		{
			MethodName: "ProductsPercOpenClosedSource",
			Handler:    _ProductService_ProductsPercOpenClosedSource_Handler,
		},
		{
			MethodName: "GetProductOptions",
			Handler:    _ProductService_GetProductOptions_Handler,
		},
		{
			MethodName: "ListProductAggregationView",
			Handler:    _ProductService_ListProductAggregationView_Handler,
		},
		{
			MethodName: "AggregatedRightDetails",
			Handler:    _ProductService_AggregatedRightDetails_Handler,
		},
		{
			MethodName: "ListDeployedAndAcquiredEditors",
			Handler:    _ProductService_ListDeployedAndAcquiredEditors_Handler,
		},
		{
			MethodName: "ListEditors",
			Handler:    _ProductService_ListEditors_Handler,
		},
		{
			MethodName: "GetAvailableLicenses",
			Handler:    _ProductService_GetAvailableLicenses_Handler,
		},
		{
			MethodName: "ListEditorProducts",
			Handler:    _ProductService_ListEditorProducts_Handler,
		},
		{
			MethodName: "UpsertProduct",
			Handler:    _ProductService_UpsertProduct_Handler,
		},
		{
			MethodName: "UpsertAcqRights",
			Handler:    _ProductService_UpsertAcqRights_Handler,
		},
		{
			MethodName: "ProductsPerMetricType",
			Handler:    _ProductService_ProductsPerMetricType_Handler,
		},
		{
			MethodName: "ComplianceAlert",
			Handler:    _ProductService_ComplianceAlert_Handler,
		},
		{
			MethodName: "CounterfeitedProducts",
			Handler:    _ProductService_CounterfeitedProducts_Handler,
		},
		{
			MethodName: "GroupComplianceEditorCost",
			Handler:    _ProductService_GroupComplianceEditorCost_Handler,
		},
		{
			MethodName: "OverdeployedProducts",
			Handler:    _ProductService_OverdeployedProducts_Handler,
		},
		{
			MethodName: "SoftwareExpenditureByScope",
			Handler:    _ProductService_SoftwareExpenditureByScope_Handler,
		},
		{
			MethodName: "DashboardQualityProducts",
			Handler:    _ProductService_DashboardQualityProducts_Handler,
		},
		{
			MethodName: "ListAcqRights",
			Handler:    _ProductService_ListAcqRights_Handler,
		},
		{
			MethodName: "ListAggregatedAcqRights",
			Handler:    _ProductService_ListAggregatedAcqRights_Handler,
		},
		{
			MethodName: "GetAllEditorsCatalog",
			Handler:    _ProductService_GetAllEditorsCatalog_Handler,
		},
		{
			MethodName: "CreateAggregation",
			Handler:    _ProductService_CreateAggregation_Handler,
		},
		{
			MethodName: "CreateAggregatedRights",
			Handler:    _ProductService_CreateAggregatedRights_Handler,
		},
		{
			MethodName: "UpdateAggregatedRights",
			Handler:    _ProductService_UpdateAggregatedRights_Handler,
		},
		{
			MethodName: "DeleteAggregatedRights",
			Handler:    _ProductService_DeleteAggregatedRights_Handler,
		},
		{
			MethodName: "DownloadAggregatedRightsFile",
			Handler:    _ProductService_DownloadAggregatedRightsFile_Handler,
		},
		{
			MethodName: "ListAggregationEditors",
			Handler:    _ProductService_ListAggregationEditors_Handler,
		},
		{
			MethodName: "ListAggregationProducts",
			Handler:    _ProductService_ListAggregationProducts_Handler,
		},
		{
			MethodName: "ListAggregations",
			Handler:    _ProductService_ListAggregations_Handler,
		},
		{
			MethodName: "UpdateAggregation",
			Handler:    _ProductService_UpdateAggregation_Handler,
		},
		{
			MethodName: "DeleteAggregation",
			Handler:    _ProductService_DeleteAggregation_Handler,
		},
		{
			MethodName: "OverviewProductQuality",
			Handler:    _ProductService_OverviewProductQuality_Handler,
		},
		{
			MethodName: "ProductMaintenancePerc",
			Handler:    _ProductService_ProductMaintenancePerc_Handler,
		},
		{
			MethodName: "ProductNoMaintenanceDetails",
			Handler:    _ProductService_ProductNoMaintenanceDetails_Handler,
		},
		{
			MethodName: "DropProductData",
			Handler:    _ProductService_DropProductData_Handler,
		},
		{
			MethodName: "DropAggregationData",
			Handler:    _ProductService_DropAggregationData_Handler,
		},
		{
			MethodName: "CreateAcqRight",
			Handler:    _ProductService_CreateAcqRight_Handler,
		},
		{
			MethodName: "CreateDashboardUpdateJob",
			Handler:    _ProductService_CreateDashboardUpdateJob_Handler,
		},
		{
			MethodName: "UpsertAllocatedMetricEquipment",
			Handler:    _ProductService_UpsertAllocatedMetricEquipment_Handler,
		},
		{
			MethodName: "DeleteAllocatedMetricEquipment",
			Handler:    _ProductService_DeleteAllocatedMetricEquipment_Handler,
		},
		{
			MethodName: "GetBanner",
			Handler:    _ProductService_GetBanner_Handler,
		},
		{
			MethodName: "UpdateAcqRight",
			Handler:    _ProductService_UpdateAcqRight_Handler,
		},
		{
			MethodName: "UpdateAcqrightsSharedLicenses",
			Handler:    _ProductService_UpdateAcqrightsSharedLicenses_Handler,
		},
		{
			MethodName: "UpdateAggrightsSharedLicenses",
			Handler:    _ProductService_UpdateAggrightsSharedLicenses_Handler,
		},
		{
			MethodName: "DeleteAcqRight",
			Handler:    _ProductService_DeleteAcqRight_Handler,
		},
		{
			MethodName: "DownloadAcqRightFile",
			Handler:    _ProductService_DownloadAcqRightFile_Handler,
		},
		{
			MethodName: "GetEquipmentsByProduct",
			Handler:    _ProductService_GetEquipmentsByProduct_Handler,
		},
		{
			MethodName: "GetAggregationAcqrightsExpandedView",
			Handler:    _ProductService_GetAggregationAcqrightsExpandedView_Handler,
		},
		{
			MethodName: "GetAggregationById",
			Handler:    _ProductService_GetAggregationById_Handler,
		},
		{
			MethodName: "GetAggregationProductsExpandedView",
			Handler:    _ProductService_GetAggregationProductsExpandedView_Handler,
		},
		{
			MethodName: "GetApplicationsByProduct",
			Handler:    _ProductService_GetApplicationsByProduct_Handler,
		},
		{
			MethodName: "GetProductCountByApp",
			Handler:    _ProductService_GetProductCountByApp_Handler,
		},
		{
			MethodName: "UpsertProductConcurrentUser",
			Handler:    _ProductService_UpsertProductConcurrentUser_Handler,
		},
		{
			MethodName: "ListNominativeUser",
			Handler:    _ProductService_ListNominativeUser_Handler,
		},
		{
			MethodName: "NominativeUserExport",
			Handler:    _ProductService_NominativeUserExport_Handler,
		},
		{
			MethodName: "ConcurrentUserExport",
			Handler:    _ProductService_ConcurrentUserExport_Handler,
		},
		{
			MethodName: "ListConcurrentUsers",
			Handler:    _ProductService_ListConcurrentUsers_Handler,
		},
		{
			MethodName: "DeleteConcurrentUsers",
			Handler:    _ProductService_DeleteConcurrentUsers_Handler,
		},
		{
			MethodName: "DeleteNominativeUsers",
			Handler:    _ProductService_DeleteNominativeUsers_Handler,
		},
		{
			MethodName: "GetTotalSharedAmount",
			Handler:    _ProductService_GetTotalSharedAmount_Handler,
		},
		{
			MethodName: "GroupComplianceProduct",
			Handler:    _ProductService_GroupComplianceProduct_Handler,
		},
		{
			MethodName: "GetProductListByEditor",
			Handler:    _ProductService_GetProductListByEditor_Handler,
		},
		{
			MethodName: "GetConcurrentUsersHistroy",
			Handler:    _ProductService_GetConcurrentUsersHistroy_Handler,
		},
		{
			MethodName: "GetUnderusageLicenceByEditorProduct",
			Handler:    _ProductService_GetUnderusageLicenceByEditorProduct_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _ProductService_GetMetric_Handler,
		},
		{
			MethodName: "DeleteSharedLicenses",
			Handler:    _ProductService_DeleteSharedLicenses_Handler,
		},
		{
			MethodName: "ListNominativeUserFileUpload",
			Handler:    _ProductService_ListNominativeUserFileUpload_Handler,
		},
		{
			MethodName: "GetEditorExpensesByScope",
			Handler:    _ProductService_GetEditorExpensesByScope_Handler,
		},
		{
			MethodName: "GetEditorProductExpensesByScope",
			Handler:    _ProductService_GetEditorProductExpensesByScope_Handler,
		},
		{
			MethodName: "ProductLocationType",
			Handler:    _ProductService_ProductLocationType_Handler,
		},
		{
			MethodName: "GetMaintenanceBySwidtag",
			Handler:    _ProductService_GetMaintenanceBySwidtag_Handler,
		},
		{
			MethodName: "GetTrueUpLicences",
			Handler:    _ProductService_GetTrueUpLicences_Handler,
		},
		{
			MethodName: "GetWasteUpLicences",
			Handler:    _ProductService_GetWasteUpLicences_Handler,
		},
		{
			MethodName: "GetProductInformationBySwidTag",
			Handler:    _ProductService_GetProductInformationBySwidTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
