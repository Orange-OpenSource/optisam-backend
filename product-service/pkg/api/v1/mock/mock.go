// Code generated by MockGen. DO NOT EDIT.
// Source: optisam-backend/product-service/pkg/api/v1 (interfaces: ProductServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	v1 "optisam-backend/product-service/pkg/api/v1"
	reflect "reflect"
)

// MockProductServiceClient is a mock of ProductServiceClient interface
type MockProductServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceClientMockRecorder
}

// MockProductServiceClientMockRecorder is the mock recorder for MockProductServiceClient
type MockProductServiceClientMockRecorder struct {
	mock *MockProductServiceClient
}

// NewMockProductServiceClient creates a new mock instance
func NewMockProductServiceClient(ctrl *gomock.Controller) *MockProductServiceClient {
	mock := &MockProductServiceClient{ctrl: ctrl}
	mock.recorder = &MockProductServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductServiceClient) EXPECT() *MockProductServiceClientMockRecorder {
	return m.recorder
}

// AggregatedRightDetails mocks base method
func (m *MockProductServiceClient) AggregatedRightDetails(arg0 context.Context, arg1 *v1.AggregatedRightDetailsRequest, arg2 ...grpc.CallOption) (*v1.AggregatedRightDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AggregatedRightDetails", varargs...)
	ret0, _ := ret[0].(*v1.AggregatedRightDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregatedRightDetails indicates an expected call of AggregatedRightDetails
func (mr *MockProductServiceClientMockRecorder) AggregatedRightDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatedRightDetails", reflect.TypeOf((*MockProductServiceClient)(nil).AggregatedRightDetails), varargs...)
}

// ComplianceAlert mocks base method
func (m *MockProductServiceClient) ComplianceAlert(arg0 context.Context, arg1 *v1.ComplianceAlertRequest, arg2 ...grpc.CallOption) (*v1.ComplianceAlertResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ComplianceAlert", varargs...)
	ret0, _ := ret[0].(*v1.ComplianceAlertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComplianceAlert indicates an expected call of ComplianceAlert
func (mr *MockProductServiceClientMockRecorder) ComplianceAlert(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplianceAlert", reflect.TypeOf((*MockProductServiceClient)(nil).ComplianceAlert), varargs...)
}

// ConcurrentUserExport mocks base method
func (m *MockProductServiceClient) ConcurrentUserExport(arg0 context.Context, arg1 *v1.ListConcurrentUsersExportRequest, arg2 ...grpc.CallOption) (*v1.ListConcurrentUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConcurrentUserExport", varargs...)
	ret0, _ := ret[0].(*v1.ListConcurrentUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConcurrentUserExport indicates an expected call of ConcurrentUserExport
func (mr *MockProductServiceClientMockRecorder) ConcurrentUserExport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConcurrentUserExport", reflect.TypeOf((*MockProductServiceClient)(nil).ConcurrentUserExport), varargs...)
}

// CounterfeitedProducts mocks base method
func (m *MockProductServiceClient) CounterfeitedProducts(arg0 context.Context, arg1 *v1.CounterfeitedProductsRequest, arg2 ...grpc.CallOption) (*v1.CounterfeitedProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CounterfeitedProducts", varargs...)
	ret0, _ := ret[0].(*v1.CounterfeitedProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CounterfeitedProducts indicates an expected call of CounterfeitedProducts
func (mr *MockProductServiceClientMockRecorder) CounterfeitedProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterfeitedProducts", reflect.TypeOf((*MockProductServiceClient)(nil).CounterfeitedProducts), varargs...)
}

// CreateAcqRight mocks base method
func (m *MockProductServiceClient) CreateAcqRight(arg0 context.Context, arg1 *v1.AcqRightRequest, arg2 ...grpc.CallOption) (*v1.AcqRightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAcqRight", varargs...)
	ret0, _ := ret[0].(*v1.AcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAcqRight indicates an expected call of CreateAcqRight
func (mr *MockProductServiceClientMockRecorder) CreateAcqRight(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcqRight", reflect.TypeOf((*MockProductServiceClient)(nil).CreateAcqRight), varargs...)
}

// CreateAggregatedRights mocks base method
func (m *MockProductServiceClient) CreateAggregatedRights(arg0 context.Context, arg1 *v1.AggregatedRightsRequest, arg2 ...grpc.CallOption) (*v1.AggregatedRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAggregatedRights", varargs...)
	ret0, _ := ret[0].(*v1.AggregatedRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAggregatedRights indicates an expected call of CreateAggregatedRights
func (mr *MockProductServiceClientMockRecorder) CreateAggregatedRights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAggregatedRights", reflect.TypeOf((*MockProductServiceClient)(nil).CreateAggregatedRights), varargs...)
}

// CreateAggregation mocks base method
func (m *MockProductServiceClient) CreateAggregation(arg0 context.Context, arg1 *v1.Aggregation, arg2 ...grpc.CallOption) (*v1.AggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAggregation", varargs...)
	ret0, _ := ret[0].(*v1.AggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAggregation indicates an expected call of CreateAggregation
func (mr *MockProductServiceClientMockRecorder) CreateAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).CreateAggregation), varargs...)
}

// CreateDashboardUpdateJob mocks base method
func (m *MockProductServiceClient) CreateDashboardUpdateJob(arg0 context.Context, arg1 *v1.CreateDashboardUpdateJobRequest, arg2 ...grpc.CallOption) (*v1.CreateDashboardUpdateJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDashboardUpdateJob", varargs...)
	ret0, _ := ret[0].(*v1.CreateDashboardUpdateJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboardUpdateJob indicates an expected call of CreateDashboardUpdateJob
func (mr *MockProductServiceClientMockRecorder) CreateDashboardUpdateJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboardUpdateJob", reflect.TypeOf((*MockProductServiceClient)(nil).CreateDashboardUpdateJob), varargs...)
}

// DashboardOverview mocks base method
func (m *MockProductServiceClient) DashboardOverview(arg0 context.Context, arg1 *v1.DashboardOverviewRequest, arg2 ...grpc.CallOption) (*v1.DashboardOverviewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DashboardOverview", varargs...)
	ret0, _ := ret[0].(*v1.DashboardOverviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardOverview indicates an expected call of DashboardOverview
func (mr *MockProductServiceClientMockRecorder) DashboardOverview(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardOverview", reflect.TypeOf((*MockProductServiceClient)(nil).DashboardOverview), varargs...)
}

// DashboardQualityProducts mocks base method
func (m *MockProductServiceClient) DashboardQualityProducts(arg0 context.Context, arg1 *v1.DashboardQualityProductsRequest, arg2 ...grpc.CallOption) (*v1.DashboardQualityProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DashboardQualityProducts", varargs...)
	ret0, _ := ret[0].(*v1.DashboardQualityProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardQualityProducts indicates an expected call of DashboardQualityProducts
func (mr *MockProductServiceClientMockRecorder) DashboardQualityProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardQualityProducts", reflect.TypeOf((*MockProductServiceClient)(nil).DashboardQualityProducts), varargs...)
}

// DeleteAcqRight mocks base method
func (m *MockProductServiceClient) DeleteAcqRight(arg0 context.Context, arg1 *v1.DeleteAcqRightRequest, arg2 ...grpc.CallOption) (*v1.DeleteAcqRightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAcqRight", varargs...)
	ret0, _ := ret[0].(*v1.DeleteAcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAcqRight indicates an expected call of DeleteAcqRight
func (mr *MockProductServiceClientMockRecorder) DeleteAcqRight(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcqRight", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteAcqRight), varargs...)
}

// DeleteAggregatedRights mocks base method
func (m *MockProductServiceClient) DeleteAggregatedRights(arg0 context.Context, arg1 *v1.DeleteAggregatedRightsRequest, arg2 ...grpc.CallOption) (*v1.DeleteAggregatedRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAggregatedRights", varargs...)
	ret0, _ := ret[0].(*v1.DeleteAggregatedRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAggregatedRights indicates an expected call of DeleteAggregatedRights
func (mr *MockProductServiceClientMockRecorder) DeleteAggregatedRights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAggregatedRights", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteAggregatedRights), varargs...)
}

// DeleteAggregation mocks base method
func (m *MockProductServiceClient) DeleteAggregation(arg0 context.Context, arg1 *v1.DeleteAggregationRequest, arg2 ...grpc.CallOption) (*v1.AggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAggregation", varargs...)
	ret0, _ := ret[0].(*v1.AggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAggregation indicates an expected call of DeleteAggregation
func (mr *MockProductServiceClientMockRecorder) DeleteAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteAggregation), varargs...)
}

// DeleteAllocatedMetricEquipment mocks base method
func (m *MockProductServiceClient) DeleteAllocatedMetricEquipment(arg0 context.Context, arg1 *v1.DropAllocateMetricEquipementRequest, arg2 ...grpc.CallOption) (*v1.UpsertAllocateMetricEquipementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllocatedMetricEquipment", varargs...)
	ret0, _ := ret[0].(*v1.UpsertAllocateMetricEquipementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllocatedMetricEquipment indicates an expected call of DeleteAllocatedMetricEquipment
func (mr *MockProductServiceClientMockRecorder) DeleteAllocatedMetricEquipment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllocatedMetricEquipment", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteAllocatedMetricEquipment), varargs...)
}

// DeleteConcurrentUsers mocks base method
func (m *MockProductServiceClient) DeleteConcurrentUsers(arg0 context.Context, arg1 *v1.DeleteConcurrentUsersRequest, arg2 ...grpc.CallOption) (*v1.DeleteConcurrentUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConcurrentUsers", varargs...)
	ret0, _ := ret[0].(*v1.DeleteConcurrentUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConcurrentUsers indicates an expected call of DeleteConcurrentUsers
func (mr *MockProductServiceClientMockRecorder) DeleteConcurrentUsers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConcurrentUsers", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteConcurrentUsers), varargs...)
}

// DeleteNominativeUsers mocks base method
func (m *MockProductServiceClient) DeleteNominativeUsers(arg0 context.Context, arg1 *v1.DeleteNominativeUserRequest, arg2 ...grpc.CallOption) (*v1.DeleteNominativeUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNominativeUsers", varargs...)
	ret0, _ := ret[0].(*v1.DeleteNominativeUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNominativeUsers indicates an expected call of DeleteNominativeUsers
func (mr *MockProductServiceClientMockRecorder) DeleteNominativeUsers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNominativeUsers", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteNominativeUsers), varargs...)
}

// DeleteSharedLicenses mocks base method
func (m *MockProductServiceClient) DeleteSharedLicenses(arg0 context.Context, arg1 *v1.DeleteSharedLicensesRequest, arg2 ...grpc.CallOption) (*v1.DeleteSharedLicensesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSharedLicenses", varargs...)
	ret0, _ := ret[0].(*v1.DeleteSharedLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSharedLicenses indicates an expected call of DeleteSharedLicenses
func (mr *MockProductServiceClientMockRecorder) DeleteSharedLicenses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSharedLicenses", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteSharedLicenses), varargs...)
}

// DownloadAcqRightFile mocks base method
func (m *MockProductServiceClient) DownloadAcqRightFile(arg0 context.Context, arg1 *v1.DownloadAcqRightFileRequest, arg2 ...grpc.CallOption) (*v1.DownloadAcqRightFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadAcqRightFile", varargs...)
	ret0, _ := ret[0].(*v1.DownloadAcqRightFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAcqRightFile indicates an expected call of DownloadAcqRightFile
func (mr *MockProductServiceClientMockRecorder) DownloadAcqRightFile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAcqRightFile", reflect.TypeOf((*MockProductServiceClient)(nil).DownloadAcqRightFile), varargs...)
}

// DownloadAggregatedRightsFile mocks base method
func (m *MockProductServiceClient) DownloadAggregatedRightsFile(arg0 context.Context, arg1 *v1.DownloadAggregatedRightsFileRequest, arg2 ...grpc.CallOption) (*v1.DownloadAggregatedRightsFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadAggregatedRightsFile", varargs...)
	ret0, _ := ret[0].(*v1.DownloadAggregatedRightsFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAggregatedRightsFile indicates an expected call of DownloadAggregatedRightsFile
func (mr *MockProductServiceClientMockRecorder) DownloadAggregatedRightsFile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAggregatedRightsFile", reflect.TypeOf((*MockProductServiceClient)(nil).DownloadAggregatedRightsFile), varargs...)
}

// DropAggregationData mocks base method
func (m *MockProductServiceClient) DropAggregationData(arg0 context.Context, arg1 *v1.DropAggregationDataRequest, arg2 ...grpc.CallOption) (*v1.DropAggregationDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropAggregationData", varargs...)
	ret0, _ := ret[0].(*v1.DropAggregationDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropAggregationData indicates an expected call of DropAggregationData
func (mr *MockProductServiceClientMockRecorder) DropAggregationData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAggregationData", reflect.TypeOf((*MockProductServiceClient)(nil).DropAggregationData), varargs...)
}

// DropProductData mocks base method
func (m *MockProductServiceClient) DropProductData(arg0 context.Context, arg1 *v1.DropProductDataRequest, arg2 ...grpc.CallOption) (*v1.DropProductDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropProductData", varargs...)
	ret0, _ := ret[0].(*v1.DropProductDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropProductData indicates an expected call of DropProductData
func (mr *MockProductServiceClientMockRecorder) DropProductData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropProductData", reflect.TypeOf((*MockProductServiceClient)(nil).DropProductData), varargs...)
}

// GetAggregationAcqrightsExpandedView mocks base method
func (m *MockProductServiceClient) GetAggregationAcqrightsExpandedView(arg0 context.Context, arg1 *v1.GetAggregationAcqrightsExpandedViewRequest, arg2 ...grpc.CallOption) (*v1.GetAggregationAcqrightsExpandedViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregationAcqrightsExpandedView", varargs...)
	ret0, _ := ret[0].(*v1.GetAggregationAcqrightsExpandedViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregationAcqrightsExpandedView indicates an expected call of GetAggregationAcqrightsExpandedView
func (mr *MockProductServiceClientMockRecorder) GetAggregationAcqrightsExpandedView(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregationAcqrightsExpandedView", reflect.TypeOf((*MockProductServiceClient)(nil).GetAggregationAcqrightsExpandedView), varargs...)
}

// GetAggregationProductsExpandedView mocks base method
func (m *MockProductServiceClient) GetAggregationProductsExpandedView(arg0 context.Context, arg1 *v1.GetAggregationProductsExpandedViewRequest, arg2 ...grpc.CallOption) (*v1.GetAggregationProductsExpandedViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregationProductsExpandedView", varargs...)
	ret0, _ := ret[0].(*v1.GetAggregationProductsExpandedViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregationProductsExpandedView indicates an expected call of GetAggregationProductsExpandedView
func (mr *MockProductServiceClientMockRecorder) GetAggregationProductsExpandedView(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregationProductsExpandedView", reflect.TypeOf((*MockProductServiceClient)(nil).GetAggregationProductsExpandedView), varargs...)
}

// GetAllEditorsCatalog mocks base method
func (m *MockProductServiceClient) GetAllEditorsCatalog(arg0 context.Context, arg1 *v1.GetAllEditorsCatalogRequest, arg2 ...grpc.CallOption) (*v1.GetAllEditorsCatalogResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllEditorsCatalog", varargs...)
	ret0, _ := ret[0].(*v1.GetAllEditorsCatalogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEditorsCatalog indicates an expected call of GetAllEditorsCatalog
func (mr *MockProductServiceClientMockRecorder) GetAllEditorsCatalog(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEditorsCatalog", reflect.TypeOf((*MockProductServiceClient)(nil).GetAllEditorsCatalog), varargs...)
}

// GetApplicationsByProduct mocks base method
func (m *MockProductServiceClient) GetApplicationsByProduct(arg0 context.Context, arg1 *v1.GetApplicationsByProductRequest, arg2 ...grpc.CallOption) (*v1.GetApplicationsByProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationsByProduct", varargs...)
	ret0, _ := ret[0].(*v1.GetApplicationsByProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsByProduct indicates an expected call of GetApplicationsByProduct
func (mr *MockProductServiceClientMockRecorder) GetApplicationsByProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsByProduct", reflect.TypeOf((*MockProductServiceClient)(nil).GetApplicationsByProduct), varargs...)
}

// GetAvailableLicenses mocks base method
func (m *MockProductServiceClient) GetAvailableLicenses(arg0 context.Context, arg1 *v1.GetAvailableLicensesRequest, arg2 ...grpc.CallOption) (*v1.GetAvailableLicensesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvailableLicenses", varargs...)
	ret0, _ := ret[0].(*v1.GetAvailableLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableLicenses indicates an expected call of GetAvailableLicenses
func (mr *MockProductServiceClientMockRecorder) GetAvailableLicenses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableLicenses", reflect.TypeOf((*MockProductServiceClient)(nil).GetAvailableLicenses), varargs...)
}

// GetBanner mocks base method
func (m *MockProductServiceClient) GetBanner(arg0 context.Context, arg1 *v1.GetBannerRequest, arg2 ...grpc.CallOption) (*v1.GetBannerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBanner", varargs...)
	ret0, _ := ret[0].(*v1.GetBannerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanner indicates an expected call of GetBanner
func (mr *MockProductServiceClientMockRecorder) GetBanner(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanner", reflect.TypeOf((*MockProductServiceClient)(nil).GetBanner), varargs...)
}

// GetConcurrentUsersHistroy mocks base method
func (m *MockProductServiceClient) GetConcurrentUsersHistroy(arg0 context.Context, arg1 *v1.GetConcurrentUsersHistroyRequest, arg2 ...grpc.CallOption) (*v1.GetConcurrentUsersHistroyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConcurrentUsersHistroy", varargs...)
	ret0, _ := ret[0].(*v1.GetConcurrentUsersHistroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConcurrentUsersHistroy indicates an expected call of GetConcurrentUsersHistroy
func (mr *MockProductServiceClientMockRecorder) GetConcurrentUsersHistroy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConcurrentUsersHistroy", reflect.TypeOf((*MockProductServiceClient)(nil).GetConcurrentUsersHistroy), varargs...)
}

// GetEditorExpensesByScope mocks base method
func (m *MockProductServiceClient) GetEditorExpensesByScope(arg0 context.Context, arg1 *v1.EditorExpensesByScopeRequest, arg2 ...grpc.CallOption) (*v1.EditorExpensesByScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEditorExpensesByScope", varargs...)
	ret0, _ := ret[0].(*v1.EditorExpensesByScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorExpensesByScope indicates an expected call of GetEditorExpensesByScope
func (mr *MockProductServiceClientMockRecorder) GetEditorExpensesByScope(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorExpensesByScope", reflect.TypeOf((*MockProductServiceClient)(nil).GetEditorExpensesByScope), varargs...)
}

// GetEquipmentsByProduct mocks base method
func (m *MockProductServiceClient) GetEquipmentsByProduct(arg0 context.Context, arg1 *v1.GetEquipmentsByProductRequest, arg2 ...grpc.CallOption) (*v1.GetEquipmentsByProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEquipmentsByProduct", varargs...)
	ret0, _ := ret[0].(*v1.GetEquipmentsByProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEquipmentsByProduct indicates an expected call of GetEquipmentsByProduct
func (mr *MockProductServiceClientMockRecorder) GetEquipmentsByProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEquipmentsByProduct", reflect.TypeOf((*MockProductServiceClient)(nil).GetEquipmentsByProduct), varargs...)
}

// GetMetric mocks base method
func (m *MockProductServiceClient) GetMetric(arg0 context.Context, arg1 *v1.GetMetricRequest, arg2 ...grpc.CallOption) (*v1.GetMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetric", varargs...)
	ret0, _ := ret[0].(*v1.GetMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric
func (mr *MockProductServiceClientMockRecorder) GetMetric(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockProductServiceClient)(nil).GetMetric), varargs...)
}

// GetProductCountByApp mocks base method
func (m *MockProductServiceClient) GetProductCountByApp(arg0 context.Context, arg1 *v1.GetProductCountByAppRequest, arg2 ...grpc.CallOption) (*v1.GetProductCountByAppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductCountByApp", varargs...)
	ret0, _ := ret[0].(*v1.GetProductCountByAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCountByApp indicates an expected call of GetProductCountByApp
func (mr *MockProductServiceClientMockRecorder) GetProductCountByApp(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCountByApp", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductCountByApp), varargs...)
}

// GetProductDetail mocks base method
func (m *MockProductServiceClient) GetProductDetail(arg0 context.Context, arg1 *v1.ProductRequest, arg2 ...grpc.CallOption) (*v1.ProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductDetail", varargs...)
	ret0, _ := ret[0].(*v1.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetail indicates an expected call of GetProductDetail
func (mr *MockProductServiceClientMockRecorder) GetProductDetail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetail", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductDetail), varargs...)
}

// GetProductListByEditor mocks base method
func (m *MockProductServiceClient) GetProductListByEditor(arg0 context.Context, arg1 *v1.GetProductListByEditorRequest, arg2 ...grpc.CallOption) (*v1.GetProductListByEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductListByEditor", varargs...)
	ret0, _ := ret[0].(*v1.GetProductListByEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductListByEditor indicates an expected call of GetProductListByEditor
func (mr *MockProductServiceClientMockRecorder) GetProductListByEditor(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductListByEditor", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductListByEditor), varargs...)
}

// GetProductOptions mocks base method
func (m *MockProductServiceClient) GetProductOptions(arg0 context.Context, arg1 *v1.ProductRequest, arg2 ...grpc.CallOption) (*v1.ProductOptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductOptions", varargs...)
	ret0, _ := ret[0].(*v1.ProductOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductOptions indicates an expected call of GetProductOptions
func (mr *MockProductServiceClientMockRecorder) GetProductOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductOptions", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductOptions), varargs...)
}

// GetRightsInfoByEditor mocks base method
func (m *MockProductServiceClient) GetRightsInfoByEditor(arg0 context.Context, arg1 *v1.GetRightsInfoByEditorRequest, arg2 ...grpc.CallOption) (*v1.GetRightsInfoByEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRightsInfoByEditor", varargs...)
	ret0, _ := ret[0].(*v1.GetRightsInfoByEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRightsInfoByEditor indicates an expected call of GetRightsInfoByEditor
func (mr *MockProductServiceClientMockRecorder) GetRightsInfoByEditor(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRightsInfoByEditor", reflect.TypeOf((*MockProductServiceClient)(nil).GetRightsInfoByEditor), varargs...)
}

// GetTotalSharedAmount mocks base method
func (m *MockProductServiceClient) GetTotalSharedAmount(arg0 context.Context, arg1 *v1.GetTotalSharedAmountRequest, arg2 ...grpc.CallOption) (*v1.GetTotalSharedAmountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTotalSharedAmount", varargs...)
	ret0, _ := ret[0].(*v1.GetTotalSharedAmountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSharedAmount indicates an expected call of GetTotalSharedAmount
func (mr *MockProductServiceClientMockRecorder) GetTotalSharedAmount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSharedAmount", reflect.TypeOf((*MockProductServiceClient)(nil).GetTotalSharedAmount), varargs...)
}

// GetUnderusageLicenceByEditorProduct mocks base method
func (m *MockProductServiceClient) GetUnderusageLicenceByEditorProduct(arg0 context.Context, arg1 *v1.GetUnderusageByEditorRequest, arg2 ...grpc.CallOption) (*v1.GetUnderusageByEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUnderusageLicenceByEditorProduct", varargs...)
	ret0, _ := ret[0].(*v1.GetUnderusageByEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnderusageLicenceByEditorProduct indicates an expected call of GetUnderusageLicenceByEditorProduct
func (mr *MockProductServiceClientMockRecorder) GetUnderusageLicenceByEditorProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnderusageLicenceByEditorProduct", reflect.TypeOf((*MockProductServiceClient)(nil).GetUnderusageLicenceByEditorProduct), varargs...)
}

// GroupComplianceEditorCost mocks base method
func (m *MockProductServiceClient) GroupComplianceEditorCost(arg0 context.Context, arg1 *v1.GroupComplianceEditorRequest, arg2 ...grpc.CallOption) (*v1.GroupComplianceEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupComplianceEditorCost", varargs...)
	ret0, _ := ret[0].(*v1.GroupComplianceEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupComplianceEditorCost indicates an expected call of GroupComplianceEditorCost
func (mr *MockProductServiceClientMockRecorder) GroupComplianceEditorCost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupComplianceEditorCost", reflect.TypeOf((*MockProductServiceClient)(nil).GroupComplianceEditorCost), varargs...)
}

// GroupComplianceProduct mocks base method
func (m *MockProductServiceClient) GroupComplianceProduct(arg0 context.Context, arg1 *v1.GroupComplianceProductRequest, arg2 ...grpc.CallOption) (*v1.GroupComplianceProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupComplianceProduct", varargs...)
	ret0, _ := ret[0].(*v1.GroupComplianceProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupComplianceProduct indicates an expected call of GroupComplianceProduct
func (mr *MockProductServiceClientMockRecorder) GroupComplianceProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupComplianceProduct", reflect.TypeOf((*MockProductServiceClient)(nil).GroupComplianceProduct), varargs...)
}

// ListAcqRights mocks base method
func (m *MockProductServiceClient) ListAcqRights(arg0 context.Context, arg1 *v1.ListAcqRightsRequest, arg2 ...grpc.CallOption) (*v1.ListAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRights", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRights indicates an expected call of ListAcqRights
func (mr *MockProductServiceClientMockRecorder) ListAcqRights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRights", reflect.TypeOf((*MockProductServiceClient)(nil).ListAcqRights), varargs...)
}

// ListAggregatedAcqRights mocks base method
func (m *MockProductServiceClient) ListAggregatedAcqRights(arg0 context.Context, arg1 *v1.ListAggregatedAcqRightsRequest, arg2 ...grpc.CallOption) (*v1.ListAggregatedAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregatedAcqRights", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregatedAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregatedAcqRights indicates an expected call of ListAggregatedAcqRights
func (mr *MockProductServiceClientMockRecorder) ListAggregatedAcqRights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedAcqRights", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregatedAcqRights), varargs...)
}

// ListAggregationEditors mocks base method
func (m *MockProductServiceClient) ListAggregationEditors(arg0 context.Context, arg1 *v1.ListAggregationEditorsRequest, arg2 ...grpc.CallOption) (*v1.ListAggregationEditorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregationEditors", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregationEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregationEditors indicates an expected call of ListAggregationEditors
func (mr *MockProductServiceClientMockRecorder) ListAggregationEditors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregationEditors", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregationEditors), varargs...)
}

// ListAggregationProducts mocks base method
func (m *MockProductServiceClient) ListAggregationProducts(arg0 context.Context, arg1 *v1.ListAggregationProductsRequest, arg2 ...grpc.CallOption) (*v1.ListAggregationProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregationProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregationProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregationProducts indicates an expected call of ListAggregationProducts
func (mr *MockProductServiceClientMockRecorder) ListAggregationProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregationProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregationProducts), varargs...)
}

// ListAggregations mocks base method
func (m *MockProductServiceClient) ListAggregations(arg0 context.Context, arg1 *v1.ListAggregationsRequest, arg2 ...grpc.CallOption) (*v1.ListAggregationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregations", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregations indicates an expected call of ListAggregations
func (mr *MockProductServiceClientMockRecorder) ListAggregations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregations", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregations), varargs...)
}

// ListConcurrentUsers mocks base method
func (m *MockProductServiceClient) ListConcurrentUsers(arg0 context.Context, arg1 *v1.ListConcurrentUsersRequest, arg2 ...grpc.CallOption) (*v1.ListConcurrentUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConcurrentUsers", varargs...)
	ret0, _ := ret[0].(*v1.ListConcurrentUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConcurrentUsers indicates an expected call of ListConcurrentUsers
func (mr *MockProductServiceClientMockRecorder) ListConcurrentUsers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConcurrentUsers", reflect.TypeOf((*MockProductServiceClient)(nil).ListConcurrentUsers), varargs...)
}

// ListDeployedAndAcquiredEditors mocks base method
func (m *MockProductServiceClient) ListDeployedAndAcquiredEditors(arg0 context.Context, arg1 *v1.ListDeployedAndAcquiredEditorsRequest, arg2 ...grpc.CallOption) (*v1.ListEditorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeployedAndAcquiredEditors", varargs...)
	ret0, _ := ret[0].(*v1.ListEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployedAndAcquiredEditors indicates an expected call of ListDeployedAndAcquiredEditors
func (mr *MockProductServiceClientMockRecorder) ListDeployedAndAcquiredEditors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployedAndAcquiredEditors", reflect.TypeOf((*MockProductServiceClient)(nil).ListDeployedAndAcquiredEditors), varargs...)
}

// ListEditorProducts mocks base method
func (m *MockProductServiceClient) ListEditorProducts(arg0 context.Context, arg1 *v1.ListEditorProductsRequest, arg2 ...grpc.CallOption) (*v1.ListEditorProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEditorProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListEditorProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditorProducts indicates an expected call of ListEditorProducts
func (mr *MockProductServiceClientMockRecorder) ListEditorProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditorProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListEditorProducts), varargs...)
}

// ListEditors mocks base method
func (m *MockProductServiceClient) ListEditors(arg0 context.Context, arg1 *v1.ListEditorsRequest, arg2 ...grpc.CallOption) (*v1.ListEditorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEditors", varargs...)
	ret0, _ := ret[0].(*v1.ListEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditors indicates an expected call of ListEditors
func (mr *MockProductServiceClientMockRecorder) ListEditors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditors", reflect.TypeOf((*MockProductServiceClient)(nil).ListEditors), varargs...)
}

// ListNominativeUser mocks base method
func (m *MockProductServiceClient) ListNominativeUser(arg0 context.Context, arg1 *v1.ListNominativeUsersRequest, arg2 ...grpc.CallOption) (*v1.ListNominativeUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNominativeUser", varargs...)
	ret0, _ := ret[0].(*v1.ListNominativeUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNominativeUser indicates an expected call of ListNominativeUser
func (mr *MockProductServiceClientMockRecorder) ListNominativeUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNominativeUser", reflect.TypeOf((*MockProductServiceClient)(nil).ListNominativeUser), varargs...)
}

// ListNominativeUserFileUpload mocks base method
func (m *MockProductServiceClient) ListNominativeUserFileUpload(arg0 context.Context, arg1 *v1.ListNominativeUsersFileUploadRequest, arg2 ...grpc.CallOption) (*v1.ListNominativeUsersFileUploadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNominativeUserFileUpload", varargs...)
	ret0, _ := ret[0].(*v1.ListNominativeUsersFileUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNominativeUserFileUpload indicates an expected call of ListNominativeUserFileUpload
func (mr *MockProductServiceClientMockRecorder) ListNominativeUserFileUpload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNominativeUserFileUpload", reflect.TypeOf((*MockProductServiceClient)(nil).ListNominativeUserFileUpload), varargs...)
}

// ListProductAggregationView mocks base method
func (m *MockProductServiceClient) ListProductAggregationView(arg0 context.Context, arg1 *v1.ListProductAggregationViewRequest, arg2 ...grpc.CallOption) (*v1.ListProductAggregationViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProductAggregationView", varargs...)
	ret0, _ := ret[0].(*v1.ListProductAggregationViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductAggregationView indicates an expected call of ListProductAggregationView
func (mr *MockProductServiceClientMockRecorder) ListProductAggregationView(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductAggregationView", reflect.TypeOf((*MockProductServiceClient)(nil).ListProductAggregationView), varargs...)
}

// ListProducts mocks base method
func (m *MockProductServiceClient) ListProducts(arg0 context.Context, arg1 *v1.ListProductsRequest, arg2 ...grpc.CallOption) (*v1.ListProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts
func (mr *MockProductServiceClientMockRecorder) ListProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListProducts), varargs...)
}

// NominativeUserExport mocks base method
func (m *MockProductServiceClient) NominativeUserExport(arg0 context.Context, arg1 *v1.NominativeUsersExportRequest, arg2 ...grpc.CallOption) (*v1.ListNominativeUsersExportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NominativeUserExport", varargs...)
	ret0, _ := ret[0].(*v1.ListNominativeUsersExportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NominativeUserExport indicates an expected call of NominativeUserExport
func (mr *MockProductServiceClientMockRecorder) NominativeUserExport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NominativeUserExport", reflect.TypeOf((*MockProductServiceClient)(nil).NominativeUserExport), varargs...)
}

// OverdeployedProducts mocks base method
func (m *MockProductServiceClient) OverdeployedProducts(arg0 context.Context, arg1 *v1.OverdeployedProductsRequest, arg2 ...grpc.CallOption) (*v1.OverdeployedProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OverdeployedProducts", varargs...)
	ret0, _ := ret[0].(*v1.OverdeployedProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverdeployedProducts indicates an expected call of OverdeployedProducts
func (mr *MockProductServiceClientMockRecorder) OverdeployedProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverdeployedProducts", reflect.TypeOf((*MockProductServiceClient)(nil).OverdeployedProducts), varargs...)
}

// OverviewProductQuality mocks base method
func (m *MockProductServiceClient) OverviewProductQuality(arg0 context.Context, arg1 *v1.OverviewProductQualityRequest, arg2 ...grpc.CallOption) (*v1.OverviewProductQualityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OverviewProductQuality", varargs...)
	ret0, _ := ret[0].(*v1.OverviewProductQualityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverviewProductQuality indicates an expected call of OverviewProductQuality
func (mr *MockProductServiceClientMockRecorder) OverviewProductQuality(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverviewProductQuality", reflect.TypeOf((*MockProductServiceClient)(nil).OverviewProductQuality), varargs...)
}

// ProductsPerEditor mocks base method
func (m *MockProductServiceClient) ProductsPerEditor(arg0 context.Context, arg1 *v1.ProductsPerEditorRequest, arg2 ...grpc.CallOption) (*v1.ProductsPerEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductsPerEditor", varargs...)
	ret0, _ := ret[0].(*v1.ProductsPerEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPerEditor indicates an expected call of ProductsPerEditor
func (mr *MockProductServiceClientMockRecorder) ProductsPerEditor(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPerEditor", reflect.TypeOf((*MockProductServiceClient)(nil).ProductsPerEditor), varargs...)
}

// ProductsPerMetricType mocks base method
func (m *MockProductServiceClient) ProductsPerMetricType(arg0 context.Context, arg1 *v1.ProductsPerMetricTypeRequest, arg2 ...grpc.CallOption) (*v1.ProductsPerMetricTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductsPerMetricType", varargs...)
	ret0, _ := ret[0].(*v1.ProductsPerMetricTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPerMetricType indicates an expected call of ProductsPerMetricType
func (mr *MockProductServiceClientMockRecorder) ProductsPerMetricType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPerMetricType", reflect.TypeOf((*MockProductServiceClient)(nil).ProductsPerMetricType), varargs...)
}

// SoftwareExpenditureByScope mocks base method
func (m *MockProductServiceClient) SoftwareExpenditureByScope(arg0 context.Context, arg1 *v1.SoftwareExpenditureByScopeRequest, arg2 ...grpc.CallOption) (*v1.SoftwareExpenditureByScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SoftwareExpenditureByScope", varargs...)
	ret0, _ := ret[0].(*v1.SoftwareExpenditureByScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwareExpenditureByScope indicates an expected call of SoftwareExpenditureByScope
func (mr *MockProductServiceClientMockRecorder) SoftwareExpenditureByScope(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwareExpenditureByScope", reflect.TypeOf((*MockProductServiceClient)(nil).SoftwareExpenditureByScope), varargs...)
}

// UpdateAcqRight mocks base method
func (m *MockProductServiceClient) UpdateAcqRight(arg0 context.Context, arg1 *v1.AcqRightRequest, arg2 ...grpc.CallOption) (*v1.AcqRightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAcqRight", varargs...)
	ret0, _ := ret[0].(*v1.AcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcqRight indicates an expected call of UpdateAcqRight
func (mr *MockProductServiceClientMockRecorder) UpdateAcqRight(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcqRight", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAcqRight), varargs...)
}

// UpdateAcqrightsSharedLicenses mocks base method
func (m *MockProductServiceClient) UpdateAcqrightsSharedLicenses(arg0 context.Context, arg1 *v1.UpdateSharedLicensesRequest, arg2 ...grpc.CallOption) (*v1.UpdateSharedLicensesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAcqrightsSharedLicenses", varargs...)
	ret0, _ := ret[0].(*v1.UpdateSharedLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcqrightsSharedLicenses indicates an expected call of UpdateAcqrightsSharedLicenses
func (mr *MockProductServiceClientMockRecorder) UpdateAcqrightsSharedLicenses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcqrightsSharedLicenses", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAcqrightsSharedLicenses), varargs...)
}

// UpdateAggregatedRights mocks base method
func (m *MockProductServiceClient) UpdateAggregatedRights(arg0 context.Context, arg1 *v1.AggregatedRightsRequest, arg2 ...grpc.CallOption) (*v1.AggregatedRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAggregatedRights", varargs...)
	ret0, _ := ret[0].(*v1.AggregatedRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAggregatedRights indicates an expected call of UpdateAggregatedRights
func (mr *MockProductServiceClientMockRecorder) UpdateAggregatedRights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAggregatedRights", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAggregatedRights), varargs...)
}

// UpdateAggregation mocks base method
func (m *MockProductServiceClient) UpdateAggregation(arg0 context.Context, arg1 *v1.Aggregation, arg2 ...grpc.CallOption) (*v1.AggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAggregation", varargs...)
	ret0, _ := ret[0].(*v1.AggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAggregation indicates an expected call of UpdateAggregation
func (mr *MockProductServiceClientMockRecorder) UpdateAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAggregation), varargs...)
}

// UpdateAggrightsSharedLicenses mocks base method
func (m *MockProductServiceClient) UpdateAggrightsSharedLicenses(arg0 context.Context, arg1 *v1.UpdateAggrightsSharedLicensesRequest, arg2 ...grpc.CallOption) (*v1.UpdateSharedLicensesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAggrightsSharedLicenses", varargs...)
	ret0, _ := ret[0].(*v1.UpdateSharedLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAggrightsSharedLicenses indicates an expected call of UpdateAggrightsSharedLicenses
func (mr *MockProductServiceClientMockRecorder) UpdateAggrightsSharedLicenses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAggrightsSharedLicenses", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAggrightsSharedLicenses), varargs...)
}

// UpsertAcqRights mocks base method
func (m *MockProductServiceClient) UpsertAcqRights(arg0 context.Context, arg1 *v1.UpsertAcqRightsRequest, arg2 ...grpc.CallOption) (*v1.UpsertAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAcqRights", varargs...)
	ret0, _ := ret[0].(*v1.UpsertAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAcqRights indicates an expected call of UpsertAcqRights
func (mr *MockProductServiceClientMockRecorder) UpsertAcqRights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAcqRights", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertAcqRights), varargs...)
}

// UpsertAllocatedMetricEquipment mocks base method
func (m *MockProductServiceClient) UpsertAllocatedMetricEquipment(arg0 context.Context, arg1 *v1.UpsertAllocateMetricEquipementRequest, arg2 ...grpc.CallOption) (*v1.UpsertAllocateMetricEquipementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAllocatedMetricEquipment", varargs...)
	ret0, _ := ret[0].(*v1.UpsertAllocateMetricEquipementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAllocatedMetricEquipment indicates an expected call of UpsertAllocatedMetricEquipment
func (mr *MockProductServiceClientMockRecorder) UpsertAllocatedMetricEquipment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAllocatedMetricEquipment", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertAllocatedMetricEquipment), varargs...)
}

// UpsertNominativeUser mocks base method
func (m *MockProductServiceClient) UpsertNominativeUser(arg0 context.Context, arg1 *v1.UpserNominativeUserRequest, arg2 ...grpc.CallOption) (*v1.UpserNominativeUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertNominativeUser", varargs...)
	ret0, _ := ret[0].(*v1.UpserNominativeUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertNominativeUser indicates an expected call of UpsertNominativeUser
func (mr *MockProductServiceClientMockRecorder) UpsertNominativeUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNominativeUser", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertNominativeUser), varargs...)
}

// UpsertProduct mocks base method
func (m *MockProductServiceClient) UpsertProduct(arg0 context.Context, arg1 *v1.UpsertProductRequest, arg2 ...grpc.CallOption) (*v1.UpsertProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertProduct", varargs...)
	ret0, _ := ret[0].(*v1.UpsertProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProduct indicates an expected call of UpsertProduct
func (mr *MockProductServiceClientMockRecorder) UpsertProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProduct", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertProduct), varargs...)
}

// UpsertProductConcurrentUser mocks base method
func (m *MockProductServiceClient) UpsertProductConcurrentUser(arg0 context.Context, arg1 *v1.ProductConcurrentUserRequest, arg2 ...grpc.CallOption) (*v1.ProductConcurrentUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertProductConcurrentUser", varargs...)
	ret0, _ := ret[0].(*v1.ProductConcurrentUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProductConcurrentUser indicates an expected call of UpsertProductConcurrentUser
func (mr *MockProductServiceClientMockRecorder) UpsertProductConcurrentUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProductConcurrentUser", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertProductConcurrentUser), varargs...)
}
