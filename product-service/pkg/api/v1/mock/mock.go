// Code generated by MockGen. DO NOT EDIT.
// Source: optisam-backend/product-service/pkg/api/v1 (interfaces: ProductServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	v1 "optisam-backend/product-service/pkg/api/v1"
	reflect "reflect"
)

// MockProductServiceClient is a mock of ProductServiceClient interface
type MockProductServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceClientMockRecorder
}

// MockProductServiceClientMockRecorder is the mock recorder for MockProductServiceClient
type MockProductServiceClientMockRecorder struct {
	mock *MockProductServiceClient
}

// NewMockProductServiceClient creates a new mock instance
func NewMockProductServiceClient(ctrl *gomock.Controller) *MockProductServiceClient {
	mock := &MockProductServiceClient{ctrl: ctrl}
	mock.recorder = &MockProductServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductServiceClient) EXPECT() *MockProductServiceClientMockRecorder {
	return m.recorder
}

// ComplianceAlert mocks base method
func (m *MockProductServiceClient) ComplianceAlert(arg0 context.Context, arg1 *v1.ComplianceAlertRequest, arg2 ...grpc.CallOption) (*v1.ComplianceAlertResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ComplianceAlert", varargs...)
	ret0, _ := ret[0].(*v1.ComplianceAlertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComplianceAlert indicates an expected call of ComplianceAlert
func (mr *MockProductServiceClientMockRecorder) ComplianceAlert(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplianceAlert", reflect.TypeOf((*MockProductServiceClient)(nil).ComplianceAlert), varargs...)
}

// CounterfeitedProducts mocks base method
func (m *MockProductServiceClient) CounterfeitedProducts(arg0 context.Context, arg1 *v1.CounterfeitedProductsRequest, arg2 ...grpc.CallOption) (*v1.CounterfeitedProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CounterfeitedProducts", varargs...)
	ret0, _ := ret[0].(*v1.CounterfeitedProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CounterfeitedProducts indicates an expected call of CounterfeitedProducts
func (mr *MockProductServiceClientMockRecorder) CounterfeitedProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterfeitedProducts", reflect.TypeOf((*MockProductServiceClient)(nil).CounterfeitedProducts), varargs...)
}

// CreateAcqRight mocks base method
func (m *MockProductServiceClient) CreateAcqRight(arg0 context.Context, arg1 *v1.AcqRightRequest, arg2 ...grpc.CallOption) (*v1.AcqRightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAcqRight", varargs...)
	ret0, _ := ret[0].(*v1.AcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAcqRight indicates an expected call of CreateAcqRight
func (mr *MockProductServiceClientMockRecorder) CreateAcqRight(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcqRight", reflect.TypeOf((*MockProductServiceClient)(nil).CreateAcqRight), varargs...)
}

// CreateAggregation mocks base method
func (m *MockProductServiceClient) CreateAggregation(arg0 context.Context, arg1 *v1.AggregatedRights, arg2 ...grpc.CallOption) (*v1.AggregatedRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAggregation", varargs...)
	ret0, _ := ret[0].(*v1.AggregatedRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAggregation indicates an expected call of CreateAggregation
func (mr *MockProductServiceClientMockRecorder) CreateAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).CreateAggregation), varargs...)
}

// CreateDashboardUpdateJob mocks base method
func (m *MockProductServiceClient) CreateDashboardUpdateJob(arg0 context.Context, arg1 *v1.CreateDashboardUpdateJobRequest, arg2 ...grpc.CallOption) (*v1.CreateDashboardUpdateJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDashboardUpdateJob", varargs...)
	ret0, _ := ret[0].(*v1.CreateDashboardUpdateJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboardUpdateJob indicates an expected call of CreateDashboardUpdateJob
func (mr *MockProductServiceClientMockRecorder) CreateDashboardUpdateJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboardUpdateJob", reflect.TypeOf((*MockProductServiceClient)(nil).CreateDashboardUpdateJob), varargs...)
}

// DashboardOverview mocks base method
func (m *MockProductServiceClient) DashboardOverview(arg0 context.Context, arg1 *v1.DashboardOverviewRequest, arg2 ...grpc.CallOption) (*v1.DashboardOverviewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DashboardOverview", varargs...)
	ret0, _ := ret[0].(*v1.DashboardOverviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardOverview indicates an expected call of DashboardOverview
func (mr *MockProductServiceClientMockRecorder) DashboardOverview(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardOverview", reflect.TypeOf((*MockProductServiceClient)(nil).DashboardOverview), varargs...)
}

// DashboardQualityProducts mocks base method
func (m *MockProductServiceClient) DashboardQualityProducts(arg0 context.Context, arg1 *v1.DashboardQualityProductsRequest, arg2 ...grpc.CallOption) (*v1.DashboardQualityProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DashboardQualityProducts", varargs...)
	ret0, _ := ret[0].(*v1.DashboardQualityProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardQualityProducts indicates an expected call of DashboardQualityProducts
func (mr *MockProductServiceClientMockRecorder) DashboardQualityProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardQualityProducts", reflect.TypeOf((*MockProductServiceClient)(nil).DashboardQualityProducts), varargs...)
}

// DeleteAcqRight mocks base method
func (m *MockProductServiceClient) DeleteAcqRight(arg0 context.Context, arg1 *v1.DeleteAcqRightRequest, arg2 ...grpc.CallOption) (*v1.DeleteAcqRightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAcqRight", varargs...)
	ret0, _ := ret[0].(*v1.DeleteAcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAcqRight indicates an expected call of DeleteAcqRight
func (mr *MockProductServiceClientMockRecorder) DeleteAcqRight(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcqRight", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteAcqRight), varargs...)
}

// DeleteProductAggregation mocks base method
func (m *MockProductServiceClient) DeleteProductAggregation(arg0 context.Context, arg1 *v1.DeleteProductAggregationRequest, arg2 ...grpc.CallOption) (*v1.DeleteProductAggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProductAggregation", varargs...)
	ret0, _ := ret[0].(*v1.DeleteProductAggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductAggregation indicates an expected call of DeleteProductAggregation
func (mr *MockProductServiceClientMockRecorder) DeleteProductAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteProductAggregation), varargs...)
}

// DropProductData mocks base method
func (m *MockProductServiceClient) DropProductData(arg0 context.Context, arg1 *v1.DropProductDataRequest, arg2 ...grpc.CallOption) (*v1.DropProductDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropProductData", varargs...)
	ret0, _ := ret[0].(*v1.DropProductDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropProductData indicates an expected call of DropProductData
func (mr *MockProductServiceClientMockRecorder) DropProductData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropProductData", reflect.TypeOf((*MockProductServiceClient)(nil).DropProductData), varargs...)
}

// GetAggregationAcqrightsExpandedView mocks base method
func (m *MockProductServiceClient) GetAggregationAcqrightsExpandedView(arg0 context.Context, arg1 *v1.GetAggregationAcqrightsExpandedViewRequest, arg2 ...grpc.CallOption) (*v1.GetAggregationAcqrightsExpandedViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregationAcqrightsExpandedView", varargs...)
	ret0, _ := ret[0].(*v1.GetAggregationAcqrightsExpandedViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregationAcqrightsExpandedView indicates an expected call of GetAggregationAcqrightsExpandedView
func (mr *MockProductServiceClientMockRecorder) GetAggregationAcqrightsExpandedView(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregationAcqrightsExpandedView", reflect.TypeOf((*MockProductServiceClient)(nil).GetAggregationAcqrightsExpandedView), varargs...)
}

// GetAggregationProductsExpandedView mocks base method
func (m *MockProductServiceClient) GetAggregationProductsExpandedView(arg0 context.Context, arg1 *v1.GetAggregationProductsExpandedViewRequest, arg2 ...grpc.CallOption) (*v1.GetAggregationProductsExpandedViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregationProductsExpandedView", varargs...)
	ret0, _ := ret[0].(*v1.GetAggregationProductsExpandedViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregationProductsExpandedView indicates an expected call of GetAggregationProductsExpandedView
func (mr *MockProductServiceClientMockRecorder) GetAggregationProductsExpandedView(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregationProductsExpandedView", reflect.TypeOf((*MockProductServiceClient)(nil).GetAggregationProductsExpandedView), varargs...)
}

// GetBanner mocks base method
func (m *MockProductServiceClient) GetBanner(arg0 context.Context, arg1 *v1.GetBannerRequest, arg2 ...grpc.CallOption) (*v1.GetBannerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBanner", varargs...)
	ret0, _ := ret[0].(*v1.GetBannerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanner indicates an expected call of GetBanner
func (mr *MockProductServiceClientMockRecorder) GetBanner(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanner", reflect.TypeOf((*MockProductServiceClient)(nil).GetBanner), varargs...)
}

// GetEquipmentsByProduct mocks base method
func (m *MockProductServiceClient) GetEquipmentsByProduct(arg0 context.Context, arg1 *v1.GetEquipmentsByProductRequest, arg2 ...grpc.CallOption) (*v1.GetEquipmentsByProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEquipmentsByProduct", varargs...)
	ret0, _ := ret[0].(*v1.GetEquipmentsByProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEquipmentsByProduct indicates an expected call of GetEquipmentsByProduct
func (mr *MockProductServiceClientMockRecorder) GetEquipmentsByProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEquipmentsByProduct", reflect.TypeOf((*MockProductServiceClient)(nil).GetEquipmentsByProduct), varargs...)
}

// GetProductDetail mocks base method
func (m *MockProductServiceClient) GetProductDetail(arg0 context.Context, arg1 *v1.ProductRequest, arg2 ...grpc.CallOption) (*v1.ProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductDetail", varargs...)
	ret0, _ := ret[0].(*v1.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetail indicates an expected call of GetProductDetail
func (mr *MockProductServiceClientMockRecorder) GetProductDetail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetail", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductDetail), varargs...)
}

// GetProductOptions mocks base method
func (m *MockProductServiceClient) GetProductOptions(arg0 context.Context, arg1 *v1.ProductRequest, arg2 ...grpc.CallOption) (*v1.ProductOptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductOptions", varargs...)
	ret0, _ := ret[0].(*v1.ProductOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductOptions indicates an expected call of GetProductOptions
func (mr *MockProductServiceClientMockRecorder) GetProductOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductOptions", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductOptions), varargs...)
}

// ListAcqRights mocks base method
func (m *MockProductServiceClient) ListAcqRights(arg0 context.Context, arg1 *v1.ListAcqRightsRequest, arg2 ...grpc.CallOption) (*v1.ListAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRights", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRights indicates an expected call of ListAcqRights
func (mr *MockProductServiceClientMockRecorder) ListAcqRights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRights", reflect.TypeOf((*MockProductServiceClient)(nil).ListAcqRights), varargs...)
}

// ListAcqRightsAggregationRecords mocks base method
func (m *MockProductServiceClient) ListAcqRightsAggregationRecords(arg0 context.Context, arg1 *v1.ListAcqRightsAggregationRecordsRequest, arg2 ...grpc.CallOption) (*v1.ListAcqRightsAggregationRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRightsAggregationRecords", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsAggregationRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRightsAggregationRecords indicates an expected call of ListAcqRightsAggregationRecords
func (mr *MockProductServiceClientMockRecorder) ListAcqRightsAggregationRecords(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRightsAggregationRecords", reflect.TypeOf((*MockProductServiceClient)(nil).ListAcqRightsAggregationRecords), varargs...)
}

// ListAggregatedAcqRights mocks base method
func (m *MockProductServiceClient) ListAggregatedAcqRights(arg0 context.Context, arg1 *v1.ListAggregatedAcqRightsRequest, arg2 ...grpc.CallOption) (*v1.ListAggregatedAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregatedAcqRights", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregatedAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregatedAcqRights indicates an expected call of ListAggregatedAcqRights
func (mr *MockProductServiceClientMockRecorder) ListAggregatedAcqRights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedAcqRights", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregatedAcqRights), varargs...)
}

// ListAggregatedRightsEditors mocks base method
func (m *MockProductServiceClient) ListAggregatedRightsEditors(arg0 context.Context, arg1 *v1.ListAggregatedRightsEditorsRequest, arg2 ...grpc.CallOption) (*v1.ListAggregatedRightsEditorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregatedRightsEditors", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregatedRightsEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregatedRightsEditors indicates an expected call of ListAggregatedRightsEditors
func (mr *MockProductServiceClientMockRecorder) ListAggregatedRightsEditors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedRightsEditors", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregatedRightsEditors), varargs...)
}

// ListAggregatedRightsProducts mocks base method
func (m *MockProductServiceClient) ListAggregatedRightsProducts(arg0 context.Context, arg1 *v1.ListAggregatedRightsProductsRequest, arg2 ...grpc.CallOption) (*v1.ListAggregatedRightsProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregatedRightsProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregatedRightsProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregatedRightsProducts indicates an expected call of ListAggregatedRightsProducts
func (mr *MockProductServiceClientMockRecorder) ListAggregatedRightsProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedRightsProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregatedRightsProducts), varargs...)
}

// ListAggregations mocks base method
func (m *MockProductServiceClient) ListAggregations(arg0 context.Context, arg1 *v1.ListAggregationsRequest, arg2 ...grpc.CallOption) (*v1.ListAggregationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregations", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregations indicates an expected call of ListAggregations
func (mr *MockProductServiceClientMockRecorder) ListAggregations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregations", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregations), varargs...)
}

// ListEditorProducts mocks base method
func (m *MockProductServiceClient) ListEditorProducts(arg0 context.Context, arg1 *v1.ListEditorProductsRequest, arg2 ...grpc.CallOption) (*v1.ListEditorProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEditorProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListEditorProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditorProducts indicates an expected call of ListEditorProducts
func (mr *MockProductServiceClientMockRecorder) ListEditorProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditorProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListEditorProducts), varargs...)
}

// ListEditors mocks base method
func (m *MockProductServiceClient) ListEditors(arg0 context.Context, arg1 *v1.ListEditorsRequest, arg2 ...grpc.CallOption) (*v1.ListEditorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEditors", varargs...)
	ret0, _ := ret[0].(*v1.ListEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditors indicates an expected call of ListEditors
func (mr *MockProductServiceClientMockRecorder) ListEditors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditors", reflect.TypeOf((*MockProductServiceClient)(nil).ListEditors), varargs...)
}

// ListProductAggregationView mocks base method
func (m *MockProductServiceClient) ListProductAggregationView(arg0 context.Context, arg1 *v1.ListProductAggregationViewRequest, arg2 ...grpc.CallOption) (*v1.ListProductAggregationViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProductAggregationView", varargs...)
	ret0, _ := ret[0].(*v1.ListProductAggregationViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductAggregationView indicates an expected call of ListProductAggregationView
func (mr *MockProductServiceClientMockRecorder) ListProductAggregationView(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductAggregationView", reflect.TypeOf((*MockProductServiceClient)(nil).ListProductAggregationView), varargs...)
}

// ListProducts mocks base method
func (m *MockProductServiceClient) ListProducts(arg0 context.Context, arg1 *v1.ListProductsRequest, arg2 ...grpc.CallOption) (*v1.ListProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts
func (mr *MockProductServiceClientMockRecorder) ListProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListProducts), varargs...)
}

// OverdeployedProducts mocks base method
func (m *MockProductServiceClient) OverdeployedProducts(arg0 context.Context, arg1 *v1.OverdeployedProductsRequest, arg2 ...grpc.CallOption) (*v1.OverdeployedProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OverdeployedProducts", varargs...)
	ret0, _ := ret[0].(*v1.OverdeployedProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverdeployedProducts indicates an expected call of OverdeployedProducts
func (mr *MockProductServiceClientMockRecorder) OverdeployedProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverdeployedProducts", reflect.TypeOf((*MockProductServiceClient)(nil).OverdeployedProducts), varargs...)
}

// OverviewProductQuality mocks base method
func (m *MockProductServiceClient) OverviewProductQuality(arg0 context.Context, arg1 *v1.OverviewProductQualityRequest, arg2 ...grpc.CallOption) (*v1.OverviewProductQualityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OverviewProductQuality", varargs...)
	ret0, _ := ret[0].(*v1.OverviewProductQualityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverviewProductQuality indicates an expected call of OverviewProductQuality
func (mr *MockProductServiceClientMockRecorder) OverviewProductQuality(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverviewProductQuality", reflect.TypeOf((*MockProductServiceClient)(nil).OverviewProductQuality), varargs...)
}

// ProductAggregationProductViewDetails mocks base method
func (m *MockProductServiceClient) ProductAggregationProductViewDetails(arg0 context.Context, arg1 *v1.ProductAggregationProductViewDetailsRequest, arg2 ...grpc.CallOption) (*v1.ProductAggregationProductViewDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductAggregationProductViewDetails", varargs...)
	ret0, _ := ret[0].(*v1.ProductAggregationProductViewDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductAggregationProductViewDetails indicates an expected call of ProductAggregationProductViewDetails
func (mr *MockProductServiceClientMockRecorder) ProductAggregationProductViewDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductAggregationProductViewDetails", reflect.TypeOf((*MockProductServiceClient)(nil).ProductAggregationProductViewDetails), varargs...)
}

// ProductAggregationProductViewOptions mocks base method
func (m *MockProductServiceClient) ProductAggregationProductViewOptions(arg0 context.Context, arg1 *v1.ProductAggregationProductViewOptionsRequest, arg2 ...grpc.CallOption) (*v1.ProductAggregationProductViewOptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductAggregationProductViewOptions", varargs...)
	ret0, _ := ret[0].(*v1.ProductAggregationProductViewOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductAggregationProductViewOptions indicates an expected call of ProductAggregationProductViewOptions
func (mr *MockProductServiceClientMockRecorder) ProductAggregationProductViewOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductAggregationProductViewOptions", reflect.TypeOf((*MockProductServiceClient)(nil).ProductAggregationProductViewOptions), varargs...)
}

// ProductsPerEditor mocks base method
func (m *MockProductServiceClient) ProductsPerEditor(arg0 context.Context, arg1 *v1.ProductsPerEditorRequest, arg2 ...grpc.CallOption) (*v1.ProductsPerEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductsPerEditor", varargs...)
	ret0, _ := ret[0].(*v1.ProductsPerEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPerEditor indicates an expected call of ProductsPerEditor
func (mr *MockProductServiceClientMockRecorder) ProductsPerEditor(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPerEditor", reflect.TypeOf((*MockProductServiceClient)(nil).ProductsPerEditor), varargs...)
}

// ProductsPerMetricType mocks base method
func (m *MockProductServiceClient) ProductsPerMetricType(arg0 context.Context, arg1 *v1.ProductsPerMetricTypeRequest, arg2 ...grpc.CallOption) (*v1.ProductsPerMetricTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductsPerMetricType", varargs...)
	ret0, _ := ret[0].(*v1.ProductsPerMetricTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPerMetricType indicates an expected call of ProductsPerMetricType
func (mr *MockProductServiceClientMockRecorder) ProductsPerMetricType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPerMetricType", reflect.TypeOf((*MockProductServiceClient)(nil).ProductsPerMetricType), varargs...)
}

// UpdateAcqRight mocks base method
func (m *MockProductServiceClient) UpdateAcqRight(arg0 context.Context, arg1 *v1.AcqRightRequest, arg2 ...grpc.CallOption) (*v1.AcqRightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAcqRight", varargs...)
	ret0, _ := ret[0].(*v1.AcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcqRight indicates an expected call of UpdateAcqRight
func (mr *MockProductServiceClientMockRecorder) UpdateAcqRight(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcqRight", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAcqRight), varargs...)
}

// UpdateAggregation mocks base method
func (m *MockProductServiceClient) UpdateAggregation(arg0 context.Context, arg1 *v1.AggregatedRights, arg2 ...grpc.CallOption) (*v1.AggregatedRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAggregation", varargs...)
	ret0, _ := ret[0].(*v1.AggregatedRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAggregation indicates an expected call of UpdateAggregation
func (mr *MockProductServiceClientMockRecorder) UpdateAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAggregation), varargs...)
}

// UpsertAcqRights mocks base method
func (m *MockProductServiceClient) UpsertAcqRights(arg0 context.Context, arg1 *v1.UpsertAcqRightsRequest, arg2 ...grpc.CallOption) (*v1.UpsertAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAcqRights", varargs...)
	ret0, _ := ret[0].(*v1.UpsertAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAcqRights indicates an expected call of UpsertAcqRights
func (mr *MockProductServiceClientMockRecorder) UpsertAcqRights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAcqRights", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertAcqRights), varargs...)
}

// UpsertProduct mocks base method
func (m *MockProductServiceClient) UpsertProduct(arg0 context.Context, arg1 *v1.UpsertProductRequest, arg2 ...grpc.CallOption) (*v1.UpsertProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertProduct", varargs...)
	ret0, _ := ret[0].(*v1.UpsertProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProduct indicates an expected call of UpsertProduct
func (mr *MockProductServiceClientMockRecorder) UpsertProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProduct", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertProduct), varargs...)
}
