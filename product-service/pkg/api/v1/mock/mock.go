// Copyright (C) 2019 Orange
// 
// This software is distributed under the terms and conditions of the 'Apache License 2.0'
// license which can be found in the file 'License.txt' in this package distribution 
// or at 'http://www.apache.org/licenses/LICENSE-2.0'. 

// Code generated by MockGen. DO NOT EDIT.
// Source: optisam-backend/product-service/pkg/api/v1 (interfaces: ProductServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	v1 "optisam-backend/product-service/pkg/api/v1"
	reflect "reflect"
)

// MockProductServiceClient is a mock of ProductServiceClient interface
type MockProductServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceClientMockRecorder
}

// MockProductServiceClientMockRecorder is the mock recorder for MockProductServiceClient
type MockProductServiceClientMockRecorder struct {
	mock *MockProductServiceClient
}

// NewMockProductServiceClient creates a new mock instance
func NewMockProductServiceClient(ctrl *gomock.Controller) *MockProductServiceClient {
	mock := &MockProductServiceClient{ctrl: ctrl}
	mock.recorder = &MockProductServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductServiceClient) EXPECT() *MockProductServiceClientMockRecorder {
	return m.recorder
}

// ComplianceAlert mocks base method
func (m *MockProductServiceClient) ComplianceAlert(arg0 context.Context, arg1 *v1.ComplianceAlertRequest, arg2 ...grpc.CallOption) (*v1.ComplianceAlertResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ComplianceAlert", varargs...)
	ret0, _ := ret[0].(*v1.ComplianceAlertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComplianceAlert indicates an expected call of ComplianceAlert
func (mr *MockProductServiceClientMockRecorder) ComplianceAlert(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplianceAlert", reflect.TypeOf((*MockProductServiceClient)(nil).ComplianceAlert), varargs...)
}

// CounterfeitedProducts mocks base method
func (m *MockProductServiceClient) CounterfeitedProducts(arg0 context.Context, arg1 *v1.CounterfeitedProductsRequest, arg2 ...grpc.CallOption) (*v1.CounterfeitedProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CounterfeitedProducts", varargs...)
	ret0, _ := ret[0].(*v1.CounterfeitedProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CounterfeitedProducts indicates an expected call of CounterfeitedProducts
func (mr *MockProductServiceClientMockRecorder) CounterfeitedProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterfeitedProducts", reflect.TypeOf((*MockProductServiceClient)(nil).CounterfeitedProducts), varargs...)
}

// CreateProductAggregation mocks base method
func (m *MockProductServiceClient) CreateProductAggregation(arg0 context.Context, arg1 *v1.ProductAggregationMessage, arg2 ...grpc.CallOption) (*v1.ProductAggregationMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProductAggregation", varargs...)
	ret0, _ := ret[0].(*v1.ProductAggregationMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductAggregation indicates an expected call of CreateProductAggregation
func (mr *MockProductServiceClientMockRecorder) CreateProductAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).CreateProductAggregation), varargs...)
}

// DashboardOverview mocks base method
func (m *MockProductServiceClient) DashboardOverview(arg0 context.Context, arg1 *v1.DashboardOverviewRequest, arg2 ...grpc.CallOption) (*v1.DashboardOverviewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DashboardOverview", varargs...)
	ret0, _ := ret[0].(*v1.DashboardOverviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardOverview indicates an expected call of DashboardOverview
func (mr *MockProductServiceClientMockRecorder) DashboardOverview(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardOverview", reflect.TypeOf((*MockProductServiceClient)(nil).DashboardOverview), varargs...)
}

// DashboardQualityProducts mocks base method
func (m *MockProductServiceClient) DashboardQualityProducts(arg0 context.Context, arg1 *v1.DashboardQualityProductsRequest, arg2 ...grpc.CallOption) (*v1.DashboardQualityProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DashboardQualityProducts", varargs...)
	ret0, _ := ret[0].(*v1.DashboardQualityProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardQualityProducts indicates an expected call of DashboardQualityProducts
func (mr *MockProductServiceClientMockRecorder) DashboardQualityProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardQualityProducts", reflect.TypeOf((*MockProductServiceClient)(nil).DashboardQualityProducts), varargs...)
}

// DeleteProductAggregation mocks base method
func (m *MockProductServiceClient) DeleteProductAggregation(arg0 context.Context, arg1 *v1.DeleteProductAggregationRequest, arg2 ...grpc.CallOption) (*v1.DeleteProductAggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProductAggregation", varargs...)
	ret0, _ := ret[0].(*v1.DeleteProductAggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductAggregation indicates an expected call of DeleteProductAggregation
func (mr *MockProductServiceClientMockRecorder) DeleteProductAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteProductAggregation), varargs...)
}

// DropProductData mocks base method
func (m *MockProductServiceClient) DropProductData(arg0 context.Context, arg1 *v1.DropProductDataRequest, arg2 ...grpc.CallOption) (*v1.DropProductDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropProductData", varargs...)
	ret0, _ := ret[0].(*v1.DropProductDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropProductData indicates an expected call of DropProductData
func (mr *MockProductServiceClientMockRecorder) DropProductData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropProductData", reflect.TypeOf((*MockProductServiceClient)(nil).DropProductData), varargs...)
}

// GetProductDetail mocks base method
func (m *MockProductServiceClient) GetProductDetail(arg0 context.Context, arg1 *v1.ProductRequest, arg2 ...grpc.CallOption) (*v1.ProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductDetail", varargs...)
	ret0, _ := ret[0].(*v1.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetail indicates an expected call of GetProductDetail
func (mr *MockProductServiceClientMockRecorder) GetProductDetail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetail", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductDetail), varargs...)
}

// GetProductOptions mocks base method
func (m *MockProductServiceClient) GetProductOptions(arg0 context.Context, arg1 *v1.ProductRequest, arg2 ...grpc.CallOption) (*v1.ProductOptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductOptions", varargs...)
	ret0, _ := ret[0].(*v1.ProductOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductOptions indicates an expected call of GetProductOptions
func (mr *MockProductServiceClientMockRecorder) GetProductOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductOptions", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductOptions), varargs...)
}

// ListAcqRights mocks base method
func (m *MockProductServiceClient) ListAcqRights(arg0 context.Context, arg1 *v1.ListAcqRightsRequest, arg2 ...grpc.CallOption) (*v1.ListAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRights", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRights indicates an expected call of ListAcqRights
func (mr *MockProductServiceClientMockRecorder) ListAcqRights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRights", reflect.TypeOf((*MockProductServiceClient)(nil).ListAcqRights), varargs...)
}

// ListAcqRightsAggregation mocks base method
func (m *MockProductServiceClient) ListAcqRightsAggregation(arg0 context.Context, arg1 *v1.ListAcqRightsAggregationRequest, arg2 ...grpc.CallOption) (*v1.ListAcqRightsAggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRightsAggregation", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsAggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRightsAggregation indicates an expected call of ListAcqRightsAggregation
func (mr *MockProductServiceClientMockRecorder) ListAcqRightsAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRightsAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).ListAcqRightsAggregation), varargs...)
}

// ListAcqRightsAggregationRecords mocks base method
func (m *MockProductServiceClient) ListAcqRightsAggregationRecords(arg0 context.Context, arg1 *v1.ListAcqRightsAggregationRecordsRequest, arg2 ...grpc.CallOption) (*v1.ListAcqRightsAggregationRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRightsAggregationRecords", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsAggregationRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRightsAggregationRecords indicates an expected call of ListAcqRightsAggregationRecords
func (mr *MockProductServiceClientMockRecorder) ListAcqRightsAggregationRecords(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRightsAggregationRecords", reflect.TypeOf((*MockProductServiceClient)(nil).ListAcqRightsAggregationRecords), varargs...)
}

// ListAcqRightsEditors mocks base method
func (m *MockProductServiceClient) ListAcqRightsEditors(arg0 context.Context, arg1 *v1.ListAcqRightsEditorsRequest, arg2 ...grpc.CallOption) (*v1.ListAcqRightsEditorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRightsEditors", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRightsEditors indicates an expected call of ListAcqRightsEditors
func (mr *MockProductServiceClientMockRecorder) ListAcqRightsEditors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRightsEditors", reflect.TypeOf((*MockProductServiceClient)(nil).ListAcqRightsEditors), varargs...)
}

// ListAcqRightsMetrics mocks base method
func (m *MockProductServiceClient) ListAcqRightsMetrics(arg0 context.Context, arg1 *v1.ListAcqRightsMetricsRequest, arg2 ...grpc.CallOption) (*v1.ListAcqRightsMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRightsMetrics", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRightsMetrics indicates an expected call of ListAcqRightsMetrics
func (mr *MockProductServiceClientMockRecorder) ListAcqRightsMetrics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRightsMetrics", reflect.TypeOf((*MockProductServiceClient)(nil).ListAcqRightsMetrics), varargs...)
}

// ListAcqRightsProducts mocks base method
func (m *MockProductServiceClient) ListAcqRightsProducts(arg0 context.Context, arg1 *v1.ListAcqRightsProductsRequest, arg2 ...grpc.CallOption) (*v1.ListAcqRightsProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRightsProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRightsProducts indicates an expected call of ListAcqRightsProducts
func (mr *MockProductServiceClientMockRecorder) ListAcqRightsProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRightsProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListAcqRightsProducts), varargs...)
}

// ListEditorProducts mocks base method
func (m *MockProductServiceClient) ListEditorProducts(arg0 context.Context, arg1 *v1.ListEditorProductsRequest, arg2 ...grpc.CallOption) (*v1.ListEditorProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEditorProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListEditorProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditorProducts indicates an expected call of ListEditorProducts
func (mr *MockProductServiceClientMockRecorder) ListEditorProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditorProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListEditorProducts), varargs...)
}

// ListEditors mocks base method
func (m *MockProductServiceClient) ListEditors(arg0 context.Context, arg1 *v1.ListEditorsRequest, arg2 ...grpc.CallOption) (*v1.ListEditorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEditors", varargs...)
	ret0, _ := ret[0].(*v1.ListEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditors indicates an expected call of ListEditors
func (mr *MockProductServiceClientMockRecorder) ListEditors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditors", reflect.TypeOf((*MockProductServiceClient)(nil).ListEditors), varargs...)
}

// ListProductAggregation mocks base method
func (m *MockProductServiceClient) ListProductAggregation(arg0 context.Context, arg1 *v1.ListProductAggregationRequest, arg2 ...grpc.CallOption) (*v1.ListProductAggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProductAggregation", varargs...)
	ret0, _ := ret[0].(*v1.ListProductAggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductAggregation indicates an expected call of ListProductAggregation
func (mr *MockProductServiceClientMockRecorder) ListProductAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).ListProductAggregation), varargs...)
}

// ListProductAggregationProductView mocks base method
func (m *MockProductServiceClient) ListProductAggregationProductView(arg0 context.Context, arg1 *v1.ListProductAggregationProductViewRequest, arg2 ...grpc.CallOption) (*v1.ListProductAggregationProductViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProductAggregationProductView", varargs...)
	ret0, _ := ret[0].(*v1.ListProductAggregationProductViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductAggregationProductView indicates an expected call of ListProductAggregationProductView
func (mr *MockProductServiceClientMockRecorder) ListProductAggregationProductView(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductAggregationProductView", reflect.TypeOf((*MockProductServiceClient)(nil).ListProductAggregationProductView), varargs...)
}

// ListProductAggregationView mocks base method
func (m *MockProductServiceClient) ListProductAggregationView(arg0 context.Context, arg1 *v1.ListProductAggregationViewRequest, arg2 ...grpc.CallOption) (*v1.ListProductAggregationViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProductAggregationView", varargs...)
	ret0, _ := ret[0].(*v1.ListProductAggregationViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductAggregationView indicates an expected call of ListProductAggregationView
func (mr *MockProductServiceClientMockRecorder) ListProductAggregationView(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductAggregationView", reflect.TypeOf((*MockProductServiceClient)(nil).ListProductAggregationView), varargs...)
}

// ListProducts mocks base method
func (m *MockProductServiceClient) ListProducts(arg0 context.Context, arg1 *v1.ListProductsRequest, arg2 ...grpc.CallOption) (*v1.ListProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts
func (mr *MockProductServiceClientMockRecorder) ListProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListProducts), varargs...)
}

// OverdeployedProducts mocks base method
func (m *MockProductServiceClient) OverdeployedProducts(arg0 context.Context, arg1 *v1.OverdeployedProductsRequest, arg2 ...grpc.CallOption) (*v1.OverdeployedProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OverdeployedProducts", varargs...)
	ret0, _ := ret[0].(*v1.OverdeployedProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverdeployedProducts indicates an expected call of OverdeployedProducts
func (mr *MockProductServiceClientMockRecorder) OverdeployedProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverdeployedProducts", reflect.TypeOf((*MockProductServiceClient)(nil).OverdeployedProducts), varargs...)
}

// OverviewProductQuality mocks base method
func (m *MockProductServiceClient) OverviewProductQuality(arg0 context.Context, arg1 *v1.OverviewProductQualityRequest, arg2 ...grpc.CallOption) (*v1.OverviewProductQualityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OverviewProductQuality", varargs...)
	ret0, _ := ret[0].(*v1.OverviewProductQualityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverviewProductQuality indicates an expected call of OverviewProductQuality
func (mr *MockProductServiceClientMockRecorder) OverviewProductQuality(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverviewProductQuality", reflect.TypeOf((*MockProductServiceClient)(nil).OverviewProductQuality), varargs...)
}

// ProductAggregationProductViewDetails mocks base method
func (m *MockProductServiceClient) ProductAggregationProductViewDetails(arg0 context.Context, arg1 *v1.ProductAggregationProductViewDetailsRequest, arg2 ...grpc.CallOption) (*v1.ProductAggregationProductViewDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductAggregationProductViewDetails", varargs...)
	ret0, _ := ret[0].(*v1.ProductAggregationProductViewDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductAggregationProductViewDetails indicates an expected call of ProductAggregationProductViewDetails
func (mr *MockProductServiceClientMockRecorder) ProductAggregationProductViewDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductAggregationProductViewDetails", reflect.TypeOf((*MockProductServiceClient)(nil).ProductAggregationProductViewDetails), varargs...)
}

// ProductAggregationProductViewOptions mocks base method
func (m *MockProductServiceClient) ProductAggregationProductViewOptions(arg0 context.Context, arg1 *v1.ProductAggregationProductViewOptionsRequest, arg2 ...grpc.CallOption) (*v1.ProductAggregationProductViewOptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductAggregationProductViewOptions", varargs...)
	ret0, _ := ret[0].(*v1.ProductAggregationProductViewOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductAggregationProductViewOptions indicates an expected call of ProductAggregationProductViewOptions
func (mr *MockProductServiceClientMockRecorder) ProductAggregationProductViewOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductAggregationProductViewOptions", reflect.TypeOf((*MockProductServiceClient)(nil).ProductAggregationProductViewOptions), varargs...)
}

// ProductsPerEditor mocks base method
func (m *MockProductServiceClient) ProductsPerEditor(arg0 context.Context, arg1 *v1.ProductsPerEditorRequest, arg2 ...grpc.CallOption) (*v1.ProductsPerEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductsPerEditor", varargs...)
	ret0, _ := ret[0].(*v1.ProductsPerEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPerEditor indicates an expected call of ProductsPerEditor
func (mr *MockProductServiceClientMockRecorder) ProductsPerEditor(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPerEditor", reflect.TypeOf((*MockProductServiceClient)(nil).ProductsPerEditor), varargs...)
}

// ProductsPerMetricType mocks base method
func (m *MockProductServiceClient) ProductsPerMetricType(arg0 context.Context, arg1 *v1.ProductsPerMetricTypeRequest, arg2 ...grpc.CallOption) (*v1.ProductsPerMetricTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductsPerMetricType", varargs...)
	ret0, _ := ret[0].(*v1.ProductsPerMetricTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPerMetricType indicates an expected call of ProductsPerMetricType
func (mr *MockProductServiceClientMockRecorder) ProductsPerMetricType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPerMetricType", reflect.TypeOf((*MockProductServiceClient)(nil).ProductsPerMetricType), varargs...)
}

// UpdateProductAggregation mocks base method
func (m *MockProductServiceClient) UpdateProductAggregation(arg0 context.Context, arg1 *v1.ProductAggregationMessage, arg2 ...grpc.CallOption) (*v1.ProductAggregationMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProductAggregation", varargs...)
	ret0, _ := ret[0].(*v1.ProductAggregationMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductAggregation indicates an expected call of UpdateProductAggregation
func (mr *MockProductServiceClientMockRecorder) UpdateProductAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateProductAggregation), varargs...)
}

// UpsertAcqRights mocks base method
func (m *MockProductServiceClient) UpsertAcqRights(arg0 context.Context, arg1 *v1.UpsertAcqRightsRequest, arg2 ...grpc.CallOption) (*v1.UpsertAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAcqRights", varargs...)
	ret0, _ := ret[0].(*v1.UpsertAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAcqRights indicates an expected call of UpsertAcqRights
func (mr *MockProductServiceClientMockRecorder) UpsertAcqRights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAcqRights", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertAcqRights), varargs...)
}

// UpsertProduct mocks base method
func (m *MockProductServiceClient) UpsertProduct(arg0 context.Context, arg1 *v1.UpsertProductRequest, arg2 ...grpc.CallOption) (*v1.UpsertProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertProduct", varargs...)
	ret0, _ := ret[0].(*v1.UpsertProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProduct indicates an expected call of UpsertProduct
func (mr *MockProductServiceClientMockRecorder) UpsertProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProduct", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertProduct), varargs...)
}
