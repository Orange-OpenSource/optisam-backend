// Copyright (C) 2019 Orange
// 
// This software is distributed under the terms and conditions of the 'Apache License 2.0'
// license which can be found in the file 'License.txt' in this package distribution 
// or at 'http://www.apache.org/licenses/LICENSE-2.0'. 

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _product_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on OverviewProductQualityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OverviewProductQualityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_OverviewProductQualityRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return OverviewProductQualityRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// OverviewProductQualityRequestValidationError is the validation error
// returned by OverviewProductQualityRequest.Validate if the designated
// constraints aren't met.
type OverviewProductQualityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverviewProductQualityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverviewProductQualityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverviewProductQualityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverviewProductQualityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverviewProductQualityRequestValidationError) ErrorName() string {
	return "OverviewProductQualityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OverviewProductQualityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverviewProductQualityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverviewProductQualityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverviewProductQualityRequestValidationError{}

var _OverviewProductQualityRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on OverviewProductQualityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OverviewProductQualityResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NotAcquiredProducts

	// no validation rules for NotDeployedProducts

	// no validation rules for NotAcquiredProductsPercentage

	// no validation rules for NotDeployedProductsPercentage

	return nil
}

// OverviewProductQualityResponseValidationError is the validation error
// returned by OverviewProductQualityResponse.Validate if the designated
// constraints aren't met.
type OverviewProductQualityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverviewProductQualityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverviewProductQualityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverviewProductQualityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverviewProductQualityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverviewProductQualityResponseValidationError) ErrorName() string {
	return "OverviewProductQualityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OverviewProductQualityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverviewProductQualityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverviewProductQualityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverviewProductQualityResponseValidationError{}

// Validate checks the field values on ProductsPerEditorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsPerEditorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ProductsPerEditorRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ProductsPerEditorRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ProductsPerEditorRequestValidationError is the validation error returned by
// ProductsPerEditorRequest.Validate if the designated constraints aren't met.
type ProductsPerEditorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsPerEditorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsPerEditorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsPerEditorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsPerEditorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsPerEditorRequestValidationError) ErrorName() string {
	return "ProductsPerEditorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsPerEditorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsPerEditorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsPerEditorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsPerEditorRequestValidationError{}

var _ProductsPerEditorRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductsPerEditorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsPerEditorResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEditorsProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ProductsPerEditorResponseValidationError{
					field:  fmt.Sprintf("EditorsProducts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductsPerEditorResponseValidationError is the validation error returned by
// ProductsPerEditorResponse.Validate if the designated constraints aren't met.
type ProductsPerEditorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsPerEditorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsPerEditorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsPerEditorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsPerEditorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsPerEditorResponseValidationError) ErrorName() string {
	return "ProductsPerEditorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsPerEditorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsPerEditorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsPerEditorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsPerEditorResponseValidationError{}

// Validate checks the field values on EditorProducts with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EditorProducts) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Editor

	// no validation rules for NumProducts

	return nil
}

// EditorProductsValidationError is the validation error returned by
// EditorProducts.Validate if the designated constraints aren't met.
type EditorProductsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorProductsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorProductsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorProductsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorProductsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorProductsValidationError) ErrorName() string { return "EditorProductsValidationError" }

// Error satisfies the builtin error interface
func (e EditorProductsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditorProducts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorProductsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorProductsValidationError{}

// Validate checks the field values on
// ProductAggregationProductViewOptionsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewOptionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if len(m.GetScopes()) != 1 {
		return ProductAggregationProductViewOptionsRequestValidationError{
			field:  "Scopes",
			reason: "value must contain exactly 1 item(s)",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ProductAggregationProductViewOptionsRequest_Scopes_Pattern.MatchString(item) {
			return ProductAggregationProductViewOptionsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ProductAggregationProductViewOptionsRequestValidationError is the validation
// error returned by ProductAggregationProductViewOptionsRequest.Validate if
// the designated constraints aren't met.
type ProductAggregationProductViewOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewOptionsRequestValidationError) ErrorName() string {
	return "ProductAggregationProductViewOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewOptionsRequestValidationError{}

var _ProductAggregationProductViewOptionsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on
// ProductAggregationProductViewOptionsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewOptionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumOfOptions

	for idx, item := range m.GetOptioninfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ProductAggregationProductViewOptionsResponseValidationError{
					field:  fmt.Sprintf("Optioninfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductAggregationProductViewOptionsResponseValidationError is the
// validation error returned by
// ProductAggregationProductViewOptionsResponse.Validate if the designated
// constraints aren't met.
type ProductAggregationProductViewOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewOptionsResponseValidationError) ErrorName() string {
	return "ProductAggregationProductViewOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewOptionsResponseValidationError{}

// Validate checks the field values on
// ProductAggregationProductViewDetailsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if len(m.GetScopes()) != 1 {
		return ProductAggregationProductViewDetailsRequestValidationError{
			field:  "Scopes",
			reason: "value must contain exactly 1 item(s)",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ProductAggregationProductViewDetailsRequest_Scopes_Pattern.MatchString(item) {
			return ProductAggregationProductViewDetailsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ProductAggregationProductViewDetailsRequestValidationError is the validation
// error returned by ProductAggregationProductViewDetailsRequest.Validate if
// the designated constraints aren't met.
type ProductAggregationProductViewDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewDetailsRequestValidationError) ErrorName() string {
	return "ProductAggregationProductViewDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewDetailsRequestValidationError{}

var _ProductAggregationProductViewDetailsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on
// ProductAggregationProductViewDetailsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for ProductName

	// no validation rules for NumApplications

	// no validation rules for NumEquipments

	return nil
}

// ProductAggregationProductViewDetailsResponseValidationError is the
// validation error returned by
// ProductAggregationProductViewDetailsResponse.Validate if the designated
// constraints aren't met.
type ProductAggregationProductViewDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewDetailsResponseValidationError) ErrorName() string {
	return "ProductAggregationProductViewDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewDetailsResponseValidationError{}

// Validate checks the field values on ListProductAggregationViewRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListProductAggregationViewRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListProductAggregationViewRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if m.GetPageSize() < 10 {
		return ListProductAggregationViewRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 10",
		}
	}

	if _, ok := ListProductAggregationViewRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListProductAggregationViewRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListProductAggregationViewRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListProductAggregationViewRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetScopes()) != 1 {
		return ListProductAggregationViewRequestValidationError{
			field:  "Scopes",
			reason: "value must contain exactly 1 item(s)",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListProductAggregationViewRequest_Scopes_Pattern.MatchString(item) {
			return ListProductAggregationViewRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListProductAggregationViewRequestValidationError is the validation error
// returned by ListProductAggregationViewRequest.Validate if the designated
// constraints aren't met.
type ListProductAggregationViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationViewRequestValidationError) ErrorName() string {
	return "ListProductAggregationViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationViewRequestValidationError{}

var _ListProductAggregationViewRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on
// ProductAggregationProductViewSearchParams with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "ProductName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProductAggregationProductViewSearchParamsValidationError is the validation
// error returned by ProductAggregationProductViewSearchParams.Validate if the
// designated constraints aren't met.
type ProductAggregationProductViewSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewSearchParamsValidationError) ErrorName() string {
	return "ProductAggregationProductViewSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewSearchParamsValidationError{}

// Validate checks the field values on ListProductAggregationViewResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListProductAggregationViewResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAggregations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListProductAggregationViewResponseValidationError{
					field:  fmt.Sprintf("Aggregations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductAggregationViewResponseValidationError is the validation error
// returned by ListProductAggregationViewResponse.Validate if the designated
// constraints aren't met.
type ListProductAggregationViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationViewResponseValidationError) ErrorName() string {
	return "ListProductAggregationViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationViewResponseValidationError{}

// Validate checks the field values on ProductAggregationView with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAggregationView) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for NumApplications

	// no validation rules for NumEquipments

	// no validation rules for TotalCost

	return nil
}

// ProductAggregationViewValidationError is the validation error returned by
// ProductAggregationView.Validate if the designated constraints aren't met.
type ProductAggregationViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationViewValidationError) ErrorName() string {
	return "ProductAggregationViewValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationViewValidationError{}

// Validate checks the field values on ListProductAggregationProductViewRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListProductAggregationProductViewRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if len(m.GetScopes()) != 1 {
		return ListProductAggregationProductViewRequestValidationError{
			field:  "Scopes",
			reason: "value must contain exactly 1 item(s)",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListProductAggregationProductViewRequest_Scopes_Pattern.MatchString(item) {
			return ListProductAggregationProductViewRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListProductAggregationProductViewRequestValidationError is the validation
// error returned by ListProductAggregationProductViewRequest.Validate if the
// designated constraints aren't met.
type ListProductAggregationProductViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationProductViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationProductViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationProductViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationProductViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationProductViewRequestValidationError) ErrorName() string {
	return "ListProductAggregationProductViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationProductViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationProductViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationProductViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationProductViewRequestValidationError{}

var _ListProductAggregationProductViewRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on
// ListProductAggregationProductViewResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListProductAggregationProductViewResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListProductAggregationProductViewResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductAggregationProductViewResponseValidationError is the validation
// error returned by ListProductAggregationProductViewResponse.Validate if the
// designated constraints aren't met.
type ListProductAggregationProductViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationProductViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationProductViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationProductViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationProductViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationProductViewResponseValidationError) ErrorName() string {
	return "ListProductAggregationProductViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationProductViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationProductViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationProductViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationProductViewResponseValidationError{}

// Validate checks the field values on ListEditorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListEditorsRequest_Scopes_Pattern.MatchString(item) {
			return ListEditorsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListEditorsRequestValidationError is the validation error returned by
// ListEditorsRequest.Validate if the designated constraints aren't met.
type ListEditorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorsRequestValidationError) ErrorName() string {
	return "ListEditorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorsRequestValidationError{}

var _ListEditorsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListEditorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListEditorsResponseValidationError is the validation error returned by
// ListEditorsResponse.Validate if the designated constraints aren't met.
type ListEditorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorsResponseValidationError) ErrorName() string {
	return "ListEditorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorsResponseValidationError{}

// Validate checks the field values on ListEditorProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Editor

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListEditorProductsRequest_Scopes_Pattern.MatchString(item) {
			return ListEditorProductsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListEditorProductsRequestValidationError is the validation error returned by
// ListEditorProductsRequest.Validate if the designated constraints aren't met.
type ListEditorProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorProductsRequestValidationError) ErrorName() string {
	return "ListEditorProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorProductsRequestValidationError{}

var _ListEditorProductsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListEditorProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListEditorProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEditorProductsResponseValidationError is the validation error returned
// by ListEditorProductsResponse.Validate if the designated constraints aren't met.
type ListEditorProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorProductsResponseValidationError) ErrorName() string {
	return "ListEditorProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorProductsResponseValidationError{}

// Validate checks the field values on Editor with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Editor) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// EditorValidationError is the validation error returned by Editor.Validate if
// the designated constraints aren't met.
type EditorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorValidationError) ErrorName() string { return "EditorValidationError" }

// Error satisfies the builtin error interface
func (e EditorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Product) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Category

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for TotalCost

	// no validation rules for NumOfApplications

	// no validation rules for NumofEquipments

	return nil
}

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on ListProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductsResponseValidationError is the validation error returned by
// ListProductsResponse.Validate if the designated constraints aren't met.
type ListProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsResponseValidationError) ErrorName() string {
	return "ListProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsResponseValidationError{}

// Validate checks the field values on ListProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListProductsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if m.GetPageSize() < 10 {
		return ListProductsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 10",
		}
	}

	if _, ok := _ListProductsRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return ListProductsRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [name swidtag version edition category editor totalCost numOfApplications numofEquipments]",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListProductsRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListProductsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetScopes()) != 1 {
		return ListProductsRequestValidationError{
			field:  "Scopes",
			reason: "value must contain exactly 1 item(s)",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListProductsRequest_Scopes_Pattern.MatchString(item) {
			return ListProductsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListProductsRequestValidationError is the validation error returned by
// ListProductsRequest.Validate if the designated constraints aren't met.
type ListProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsRequestValidationError) ErrorName() string {
	return "ListProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsRequestValidationError{}

var _ListProductsRequest_SortBy_InLookup = map[string]struct{}{
	"name":              {},
	"swidtag":           {},
	"version":           {},
	"edition":           {},
	"category":          {},
	"editor":            {},
	"totalCost":         {},
	"numOfApplications": {},
	"numofEquipments":   {},
}

var _ListProductsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetApplicationId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "ApplicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEquipmentId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "EquipmentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProductSearchParamsValidationError is the validation error returned by
// ProductSearchParams.Validate if the designated constraints aren't met.
type ProductSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductSearchParamsValidationError) ErrorName() string {
	return "ProductSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ProductSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductSearchParamsValidationError{}

// Validate checks the field values on ProductRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	if len(m.GetScopes()) != 1 {
		return ProductRequestValidationError{
			field:  "Scopes",
			reason: "value must contain exactly 1 item(s)",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ProductRequest_Scopes_Pattern.MatchString(item) {
			return ProductRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ProductRequestValidationError is the validation error returned by
// ProductRequest.Validate if the designated constraints aren't met.
type ProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductRequestValidationError) ErrorName() string { return "ProductRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductRequestValidationError{}

var _ProductRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Editor

	// no validation rules for Edition

	// no validation rules for Release

	return nil
}

// ProductResponseValidationError is the validation error returned by
// ProductResponse.Validate if the designated constraints aren't met.
type ProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductResponseValidationError) ErrorName() string { return "ProductResponseValidationError" }

// Error satisfies the builtin error interface
func (e ProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductResponseValidationError{}

// Validate checks the field values on ProductOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductOptionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumOfOptions

	for idx, item := range m.GetOptioninfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ProductOptionsResponseValidationError{
					field:  fmt.Sprintf("Optioninfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductOptionsResponseValidationError is the validation error returned by
// ProductOptionsResponse.Validate if the designated constraints aren't met.
type ProductOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductOptionsResponseValidationError) ErrorName() string {
	return "ProductOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductOptionsResponseValidationError{}

// Validate checks the field values on OptionInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OptionInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for Version

	return nil
}

// OptionInfoValidationError is the validation error returned by
// OptionInfo.Validate if the designated constraints aren't met.
type OptionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OptionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OptionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OptionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OptionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OptionInfoValidationError) ErrorName() string { return "OptionInfoValidationError" }

// Error satisfies the builtin error interface
func (e OptionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOptionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OptionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OptionInfoValidationError{}

// Validate checks the field values on StringFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilteringOrder

	// no validation rules for Filteringkey

	// no validation rules for FilterType

	return nil
}

// StringFilterValidationError is the validation error returned by
// StringFilter.Validate if the designated constraints aren't met.
type StringFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFilterValidationError) ErrorName() string { return "StringFilterValidationError" }

// Error satisfies the builtin error interface
func (e StringFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFilterValidationError{}

// Validate checks the field values on UpsertProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Category

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for Version

	// no validation rules for OptionOf

	if !_UpsertProductRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return UpsertProductRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if v, ok := interface{}(m.GetApplications()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpsertProductRequestValidationError{
				field:  "Applications",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEquipments()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpsertProductRequestValidationError{
				field:  "Equipments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpsertProductRequestValidationError is the validation error returned by
// UpsertProductRequest.Validate if the designated constraints aren't met.
type UpsertProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestValidationError) ErrorName() string {
	return "UpsertProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestValidationError{}

var _UpsertProductRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on UpsertProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertProductResponseValidationError is the validation error returned by
// UpsertProductResponse.Validate if the designated constraints aren't met.
type UpsertProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductResponseValidationError) ErrorName() string {
	return "UpsertProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductResponseValidationError{}

// Validate checks the field values on ComplianceAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ComplianceAlertRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ComplianceAlertRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ComplianceAlertRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ComplianceAlertRequestValidationError is the validation error returned by
// ComplianceAlertRequest.Validate if the designated constraints aren't met.
type ComplianceAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComplianceAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComplianceAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComplianceAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComplianceAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComplianceAlertRequestValidationError) ErrorName() string {
	return "ComplianceAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ComplianceAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComplianceAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComplianceAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComplianceAlertRequestValidationError{}

var _ComplianceAlertRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ComplianceAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ComplianceAlertResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CounterfeitingPercentage

	// no validation rules for OverdeploymentPercentage

	return nil
}

// ComplianceAlertResponseValidationError is the validation error returned by
// ComplianceAlertResponse.Validate if the designated constraints aren't met.
type ComplianceAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComplianceAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComplianceAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComplianceAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComplianceAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComplianceAlertResponseValidationError) ErrorName() string {
	return "ComplianceAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ComplianceAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComplianceAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComplianceAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComplianceAlertResponseValidationError{}

// Validate checks the field values on OverdeployedProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OverdeployedProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_OverdeployedProductsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return OverdeployedProductsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Editor

	return nil
}

// OverdeployedProductsRequestValidationError is the validation error returned
// by OverdeployedProductsRequest.Validate if the designated constraints
// aren't met.
type OverdeployedProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverdeployedProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverdeployedProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverdeployedProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverdeployedProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverdeployedProductsRequestValidationError) ErrorName() string {
	return "OverdeployedProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OverdeployedProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverdeployedProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverdeployedProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverdeployedProductsRequestValidationError{}

var _OverdeployedProductsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on OverdeployedProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OverdeployedProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProductsLicenses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return OverdeployedProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsLicenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProductsCosts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return OverdeployedProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsCosts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OverdeployedProductsResponseValidationError is the validation error returned
// by OverdeployedProductsResponse.Validate if the designated constraints
// aren't met.
type OverdeployedProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverdeployedProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverdeployedProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverdeployedProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverdeployedProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverdeployedProductsResponseValidationError) ErrorName() string {
	return "OverdeployedProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OverdeployedProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverdeployedProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverdeployedProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverdeployedProductsResponseValidationError{}

// Validate checks the field values on DashboardQualityProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DashboardQualityProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DashboardQualityProductsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DashboardQualityProductsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DashboardQualityProductsRequestValidationError is the validation error
// returned by DashboardQualityProductsRequest.Validate if the designated
// constraints aren't met.
type DashboardQualityProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardQualityProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardQualityProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardQualityProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardQualityProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardQualityProductsRequestValidationError) ErrorName() string {
	return "DashboardQualityProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardQualityProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardQualityProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardQualityProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardQualityProductsRequestValidationError{}

var _DashboardQualityProductsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DashboardQualityProductsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DashboardQualityProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProductsNotDeployed() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DashboardQualityProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsNotDeployed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProductsNotAcquired() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DashboardQualityProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsNotAcquired[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DashboardQualityProductsResponseValidationError is the validation error
// returned by DashboardQualityProductsResponse.Validate if the designated
// constraints aren't met.
type DashboardQualityProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardQualityProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardQualityProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardQualityProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardQualityProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardQualityProductsResponseValidationError) ErrorName() string {
	return "DashboardQualityProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardQualityProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardQualityProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardQualityProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardQualityProductsResponseValidationError{}

// Validate checks the field values on DashboardQualityProducts with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DashboardQualityProducts) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for ProductName

	return nil
}

// DashboardQualityProductsValidationError is the validation error returned by
// DashboardQualityProducts.Validate if the designated constraints aren't met.
type DashboardQualityProductsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardQualityProductsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardQualityProductsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardQualityProductsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardQualityProductsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardQualityProductsValidationError) ErrorName() string {
	return "DashboardQualityProductsValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardQualityProductsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardQualityProducts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardQualityProductsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardQualityProductsValidationError{}

// Validate checks the field values on ProductsLicenses with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductsLicenses) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for ProductName

	// no validation rules for NumLicensesAcquired

	// no validation rules for NumLicensesComputed

	// no validation rules for Delta

	return nil
}

// ProductsLicensesValidationError is the validation error returned by
// ProductsLicenses.Validate if the designated constraints aren't met.
type ProductsLicensesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsLicensesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsLicensesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsLicensesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsLicensesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsLicensesValidationError) ErrorName() string { return "ProductsLicensesValidationError" }

// Error satisfies the builtin error interface
func (e ProductsLicensesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsLicenses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsLicensesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsLicensesValidationError{}

// Validate checks the field values on ProductsCosts with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductsCosts) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for ProductName

	// no validation rules for LicensesAcquiredCost

	// no validation rules for LicensesComputedCost

	// no validation rules for DeltaCost

	return nil
}

// ProductsCostsValidationError is the validation error returned by
// ProductsCosts.Validate if the designated constraints aren't met.
type ProductsCostsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsCostsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsCostsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsCostsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsCostsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsCostsValidationError) ErrorName() string { return "ProductsCostsValidationError" }

// Error satisfies the builtin error interface
func (e ProductsCostsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsCosts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsCostsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsCostsValidationError{}

// Validate checks the field values on FinancialOverdeployedProducts with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FinancialOverdeployedProducts) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// FinancialOverdeployedProductsValidationError is the validation error
// returned by FinancialOverdeployedProducts.Validate if the designated
// constraints aren't met.
type FinancialOverdeployedProductsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinancialOverdeployedProductsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinancialOverdeployedProductsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinancialOverdeployedProductsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinancialOverdeployedProductsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinancialOverdeployedProductsValidationError) ErrorName() string {
	return "FinancialOverdeployedProductsValidationError"
}

// Error satisfies the builtin error interface
func (e FinancialOverdeployedProductsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinancialOverdeployedProducts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinancialOverdeployedProductsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinancialOverdeployedProductsValidationError{}

// Validate checks the field values on ProductsPerMetricTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsPerMetricTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ProductsPerMetricTypeRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ProductsPerMetricTypeRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ProductsPerMetricTypeRequestValidationError is the validation error returned
// by ProductsPerMetricTypeRequest.Validate if the designated constraints
// aren't met.
type ProductsPerMetricTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsPerMetricTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsPerMetricTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsPerMetricTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsPerMetricTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsPerMetricTypeRequestValidationError) ErrorName() string {
	return "ProductsPerMetricTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsPerMetricTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsPerMetricTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsPerMetricTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsPerMetricTypeRequestValidationError{}

var _ProductsPerMetricTypeRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on CounterfeitedProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CounterfeitedProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CounterfeitedProductsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return CounterfeitedProductsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Editor

	return nil
}

// CounterfeitedProductsRequestValidationError is the validation error returned
// by CounterfeitedProductsRequest.Validate if the designated constraints
// aren't met.
type CounterfeitedProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CounterfeitedProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CounterfeitedProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CounterfeitedProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CounterfeitedProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CounterfeitedProductsRequestValidationError) ErrorName() string {
	return "CounterfeitedProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CounterfeitedProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCounterfeitedProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CounterfeitedProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CounterfeitedProductsRequestValidationError{}

var _CounterfeitedProductsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on CounterfeitedProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CounterfeitedProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProductsLicenses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return CounterfeitedProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsLicenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProductsCosts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return CounterfeitedProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsCosts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CounterfeitedProductsResponseValidationError is the validation error
// returned by CounterfeitedProductsResponse.Validate if the designated
// constraints aren't met.
type CounterfeitedProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CounterfeitedProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CounterfeitedProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CounterfeitedProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CounterfeitedProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CounterfeitedProductsResponseValidationError) ErrorName() string {
	return "CounterfeitedProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CounterfeitedProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCounterfeitedProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CounterfeitedProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CounterfeitedProductsResponseValidationError{}

// Validate checks the field values on ProductsPerMetricTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsPerMetricTypeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetricsProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ProductsPerMetricTypeResponseValidationError{
					field:  fmt.Sprintf("MetricsProducts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductsPerMetricTypeResponseValidationError is the validation error
// returned by ProductsPerMetricTypeResponse.Validate if the designated
// constraints aren't met.
type ProductsPerMetricTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsPerMetricTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsPerMetricTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsPerMetricTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsPerMetricTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsPerMetricTypeResponseValidationError) ErrorName() string {
	return "ProductsPerMetricTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsPerMetricTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsPerMetricTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsPerMetricTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsPerMetricTypeResponseValidationError{}

// Validate checks the field values on MetricProducts with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MetricProducts) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetricName

	// no validation rules for NumProducts

	return nil
}

// MetricProductsValidationError is the validation error returned by
// MetricProducts.Validate if the designated constraints aren't met.
type MetricProductsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricProductsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricProductsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricProductsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricProductsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricProductsValidationError) ErrorName() string { return "MetricProductsValidationError" }

// Error satisfies the builtin error interface
func (e MetricProductsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricProducts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricProductsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricProductsValidationError{}

// Validate checks the field values on DashboardOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DashboardOverviewRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DashboardOverviewRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DashboardOverviewRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DashboardOverviewRequestValidationError is the validation error returned by
// DashboardOverviewRequest.Validate if the designated constraints aren't met.
type DashboardOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardOverviewRequestValidationError) ErrorName() string {
	return "DashboardOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardOverviewRequestValidationError{}

var _DashboardOverviewRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DashboardOverviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DashboardOverviewResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalLicenseCost

	// no validation rules for TotalMaintenanceCost

	// no validation rules for NumEditors

	// no validation rules for NumProducts

	return nil
}

// DashboardOverviewResponseValidationError is the validation error returned by
// DashboardOverviewResponse.Validate if the designated constraints aren't met.
type DashboardOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardOverviewResponseValidationError) ErrorName() string {
	return "DashboardOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardOverviewResponseValidationError{}

// Validate checks the field values on UpsertAcqRightsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertAcqRightsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetSku()) < 1 {
		return UpsertAcqRightsRequestValidationError{
			field:  "Sku",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSwidtag()) < 1 {
		return UpsertAcqRightsRequestValidationError{
			field:  "Swidtag",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for ProductName

	// no validation rules for ProductEditor

	// no validation rules for MetricType

	// no validation rules for NumLicensesAcquired

	// no validation rules for AvgUnitPrice

	// no validation rules for AvgMaintenanceUnitPrice

	// no validation rules for TotalPurchaseCost

	// no validation rules for TotalMaintenanceCost

	// no validation rules for TotalCost

	// no validation rules for Entity

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		return UpsertAcqRightsRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for StartOfMaintenance

	// no validation rules for EndOfMaintenance

	// no validation rules for NumLicencesMaintainance

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		return UpsertAcqRightsRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// UpsertAcqRightsRequestValidationError is the validation error returned by
// UpsertAcqRightsRequest.Validate if the designated constraints aren't met.
type UpsertAcqRightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAcqRightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAcqRightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAcqRightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAcqRightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAcqRightsRequestValidationError) ErrorName() string {
	return "UpsertAcqRightsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAcqRightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAcqRightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAcqRightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAcqRightsRequestValidationError{}

// Validate checks the field values on UpsertAcqRightsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertAcqRightsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertAcqRightsResponseValidationError is the validation error returned by
// UpsertAcqRightsResponse.Validate if the designated constraints aren't met.
type UpsertAcqRightsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAcqRightsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAcqRightsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAcqRightsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAcqRightsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAcqRightsResponseValidationError) ErrorName() string {
	return "UpsertAcqRightsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAcqRightsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAcqRightsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAcqRightsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAcqRightsResponseValidationError{}

// Validate checks the field values on ListAcqRightsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListAcqRightsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val >= 100 {
		return ListAcqRightsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 100)",
		}
	}

	if _, ok := ListAcqRightsRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListAcqRightsRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for SortOrder

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetScopes()) != 1 {
		return ListAcqRightsRequestValidationError{
			field:  "Scopes",
			reason: "value must contain exactly 1 item(s)",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListAcqRightsRequest_Scopes_Pattern.MatchString(item) {
			return ListAcqRightsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListAcqRightsRequestValidationError is the validation error returned by
// ListAcqRightsRequest.Validate if the designated constraints aren't met.
type ListAcqRightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsRequestValidationError) ErrorName() string {
	return "ListAcqRightsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsRequestValidationError{}

var _ListAcqRightsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on AcqRightsSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcqRightsSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSKU()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "SKU",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "ProductName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMetric()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AcqRightsSearchParamsValidationError is the validation error returned by
// AcqRightsSearchParams.Validate if the designated constraints aren't met.
type AcqRightsSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcqRightsSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcqRightsSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcqRightsSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcqRightsSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcqRightsSearchParamsValidationError) ErrorName() string {
	return "AcqRightsSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AcqRightsSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcqRightsSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcqRightsSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcqRightsSearchParamsValidationError{}

// Validate checks the field values on ListAcqRightsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAcquiredRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsResponseValidationError{
					field:  fmt.Sprintf("AcquiredRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsResponseValidationError is the validation error returned by
// ListAcqRightsResponse.Validate if the designated constraints aren't met.
type ListAcqRightsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsResponseValidationError) ErrorName() string {
	return "ListAcqRightsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsResponseValidationError{}

// Validate checks the field values on AcqRights with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AcqRights) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Entity

	// no validation rules for SKU

	// no validation rules for SwidTag

	// no validation rules for ProductName

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for AcquiredLicensesNumber

	// no validation rules for AvgLicenesUnitPrice

	// no validation rules for AvgMaintenanceUnitPrice

	// no validation rules for TotalPurchaseCost

	// no validation rules for TotalMaintenanceCost

	// no validation rules for TotalCost

	if v, ok := interface{}(m.GetStartOfMaintenance()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsValidationError{
				field:  "StartOfMaintenance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndOfMaintenance()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsValidationError{
				field:  "EndOfMaintenance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LicensesUnderMaintenance

	// no validation rules for LicensesUnderMaintenanceNumber

	// no validation rules for Version

	return nil
}

// AcqRightsValidationError is the validation error returned by
// AcqRights.Validate if the designated constraints aren't met.
type AcqRightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcqRightsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcqRightsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcqRightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcqRightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcqRightsValidationError) ErrorName() string { return "AcqRightsValidationError" }

// Error satisfies the builtin error interface
func (e AcqRightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcqRights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcqRightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcqRightsValidationError{}

// Validate checks the field values on ListAcqRightsAggregationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListAcqRightsAggregationRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if m.GetPageSize() < 10 {
		return ListAcqRightsAggregationRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 10",
		}
	}

	if _, ok := ListAcqRightsAggregationRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListAcqRightsAggregationRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for SortOrder

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetScopes()) != 1 {
		return ListAcqRightsAggregationRequestValidationError{
			field:  "Scopes",
			reason: "value must contain exactly 1 item(s)",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListAcqRightsAggregationRequest_Scopes_Pattern.MatchString(item) {
			return ListAcqRightsAggregationRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListAcqRightsAggregationRequestValidationError is the validation error
// returned by ListAcqRightsAggregationRequest.Validate if the designated
// constraints aren't met.
type ListAcqRightsAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationRequestValidationError) ErrorName() string {
	return "ListAcqRightsAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationRequestValidationError{}

var _ListAcqRightsAggregationRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAcqRightsAggregationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListAcqRightsAggregationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAggregations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsAggregationResponseValidationError{
					field:  fmt.Sprintf("Aggregations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsAggregationResponseValidationError is the validation error
// returned by ListAcqRightsAggregationResponse.Validate if the designated
// constraints aren't met.
type ListAcqRightsAggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationResponseValidationError) ErrorName() string {
	return "ListAcqRightsAggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationResponseValidationError{}

// Validate checks the field values on AcqRightsAggregation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcqRightsAggregation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Scope

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for TotalCost

	return nil
}

// AcqRightsAggregationValidationError is the validation error returned by
// AcqRightsAggregation.Validate if the designated constraints aren't met.
type AcqRightsAggregationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcqRightsAggregationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcqRightsAggregationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcqRightsAggregationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcqRightsAggregationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcqRightsAggregationValidationError) ErrorName() string {
	return "AcqRightsAggregationValidationError"
}

// Error satisfies the builtin error interface
func (e AcqRightsAggregationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcqRightsAggregation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcqRightsAggregationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcqRightsAggregationValidationError{}

// Validate checks the field values on ListAcqRightsAggregationSearchParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListAcqRightsAggregationSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSKU()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "SKU",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMetric()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListAcqRightsAggregationSearchParamsValidationError is the validation error
// returned by ListAcqRightsAggregationSearchParams.Validate if the designated
// constraints aren't met.
type ListAcqRightsAggregationSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationSearchParamsValidationError) ErrorName() string {
	return "ListAcqRightsAggregationSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationSearchParamsValidationError{}

// Validate checks the field values on ListAcqRightsAggregationRecordsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListAcqRightsAggregationRecordsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AggregationId

	if len(m.GetScopes()) != 1 {
		return ListAcqRightsAggregationRecordsRequestValidationError{
			field:  "Scopes",
			reason: "value must contain exactly 1 item(s)",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListAcqRightsAggregationRecordsRequest_Scopes_Pattern.MatchString(item) {
			return ListAcqRightsAggregationRecordsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListAcqRightsAggregationRecordsRequestValidationError is the validation
// error returned by ListAcqRightsAggregationRecordsRequest.Validate if the
// designated constraints aren't met.
type ListAcqRightsAggregationRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationRecordsRequestValidationError) ErrorName() string {
	return "ListAcqRightsAggregationRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationRecordsRequestValidationError{}

var _ListAcqRightsAggregationRecordsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAcqRightsAggregationRecordsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListAcqRightsAggregationRecordsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAcquiredRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsAggregationRecordsResponseValidationError{
					field:  fmt.Sprintf("AcquiredRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsAggregationRecordsResponseValidationError is the validation
// error returned by ListAcqRightsAggregationRecordsResponse.Validate if the
// designated constraints aren't met.
type ListAcqRightsAggregationRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationRecordsResponseValidationError) ErrorName() string {
	return "ListAcqRightsAggregationRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationRecordsResponseValidationError{}

// Validate checks the field values on DeleteProductAggregationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProductAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Scope

	return nil
}

// DeleteProductAggregationRequestValidationError is the validation error
// returned by DeleteProductAggregationRequest.Validate if the designated
// constraints aren't met.
type DeleteProductAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductAggregationRequestValidationError) ErrorName() string {
	return "DeleteProductAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductAggregationRequestValidationError{}

// Validate checks the field values on DeleteProductAggregationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DeleteProductAggregationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteProductAggregationResponseValidationError is the validation error
// returned by DeleteProductAggregationResponse.Validate if the designated
// constraints aren't met.
type DeleteProductAggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductAggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductAggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductAggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductAggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductAggregationResponseValidationError) ErrorName() string {
	return "DeleteProductAggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductAggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductAggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductAggregationResponseValidationError{}

// Validate checks the field values on ListProductAggregationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductAggregationResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAggregations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListProductAggregationResponseValidationError{
					field:  fmt.Sprintf("Aggregations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductAggregationResponseValidationError is the validation error
// returned by ListProductAggregationResponse.Validate if the designated
// constraints aren't met.
type ListProductAggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationResponseValidationError) ErrorName() string {
	return "ListProductAggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationResponseValidationError{}

// Validate checks the field values on ListProductAggregationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetScopes()) != 1 {
		return ListProductAggregationRequestValidationError{
			field:  "Scopes",
			reason: "value must contain exactly 1 item(s)",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListProductAggregationRequest_Scopes_Pattern.MatchString(item) {
			return ListProductAggregationRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListProductAggregationRequestValidationError is the validation error
// returned by ListProductAggregationRequest.Validate if the designated
// constraints aren't met.
type ListProductAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationRequestValidationError) ErrorName() string {
	return "ListProductAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationRequestValidationError{}

var _ListProductAggregationRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductAggregationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAggregationMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for Scope

	return nil
}

// ProductAggregationMessageValidationError is the validation error returned by
// ProductAggregationMessage.Validate if the designated constraints aren't met.
type ProductAggregationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationMessageValidationError) ErrorName() string {
	return "ProductAggregationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationMessageValidationError{}

// Validate checks the field values on ProductAggregation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAggregation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for Scope

	return nil
}

// ProductAggregationValidationError is the validation error returned by
// ProductAggregation.Validate if the designated constraints aren't met.
type ProductAggregationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationValidationError) ErrorName() string {
	return "ProductAggregationValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationValidationError{}

// Validate checks the field values on ListAcqRightsEditorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsEditorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListAcqRightsEditorsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListAcqRightsEditorsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ListAcqRightsEditorsRequestValidationError is the validation error returned
// by ListAcqRightsEditorsRequest.Validate if the designated constraints
// aren't met.
type ListAcqRightsEditorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsEditorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsEditorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsEditorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsEditorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsEditorsRequestValidationError) ErrorName() string {
	return "ListAcqRightsEditorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsEditorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsEditorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsEditorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsEditorsRequestValidationError{}

var _ListAcqRightsEditorsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAcqRightsEditorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsEditorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListAcqRightsEditorsResponseValidationError is the validation error returned
// by ListAcqRightsEditorsResponse.Validate if the designated constraints
// aren't met.
type ListAcqRightsEditorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsEditorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsEditorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsEditorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsEditorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsEditorsResponseValidationError) ErrorName() string {
	return "ListAcqRightsEditorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsEditorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsEditorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsEditorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsEditorsResponseValidationError{}

// Validate checks the field values on ListAcqRightsMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsMetricsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListAcqRightsMetricsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListAcqRightsMetricsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ListAcqRightsMetricsRequestValidationError is the validation error returned
// by ListAcqRightsMetricsRequest.Validate if the designated constraints
// aren't met.
type ListAcqRightsMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsMetricsRequestValidationError) ErrorName() string {
	return "ListAcqRightsMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsMetricsRequestValidationError{}

var _ListAcqRightsMetricsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAcqRightsMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsMetricsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListAcqRightsMetricsResponseValidationError is the validation error returned
// by ListAcqRightsMetricsResponse.Validate if the designated constraints
// aren't met.
type ListAcqRightsMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsMetricsResponseValidationError) ErrorName() string {
	return "ListAcqRightsMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsMetricsResponseValidationError{}

// Validate checks the field values on ListAcqRightsProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListAcqRightsProductsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListAcqRightsProductsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Editor

	// no validation rules for Metric

	return nil
}

// ListAcqRightsProductsRequestValidationError is the validation error returned
// by ListAcqRightsProductsRequest.Validate if the designated constraints
// aren't met.
type ListAcqRightsProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsProductsRequestValidationError) ErrorName() string {
	return "ListAcqRightsProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsProductsRequestValidationError{}

var _ListAcqRightsProductsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAcqRightsProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAcqrightsProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsProductsResponseValidationError{
					field:  fmt.Sprintf("AcqrightsProducts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsProductsResponseValidationError is the validation error
// returned by ListAcqRightsProductsResponse.Validate if the designated
// constraints aren't met.
type ListAcqRightsProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsProductsResponseValidationError) ErrorName() string {
	return "ListAcqRightsProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsProductsResponseValidationError{}

// Validate checks the field values on DropProductDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropProductDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DropProductDataRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DropProductDataRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DropProductDataRequestValidationError is the validation error returned by
// DropProductDataRequest.Validate if the designated constraints aren't met.
type DropProductDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropProductDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropProductDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropProductDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropProductDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropProductDataRequestValidationError) ErrorName() string {
	return "DropProductDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropProductDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropProductDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropProductDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropProductDataRequestValidationError{}

var _DropProductDataRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DropProductDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropProductDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DropProductDataResponseValidationError is the validation error returned by
// DropProductDataResponse.Validate if the designated constraints aren't met.
type DropProductDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropProductDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropProductDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropProductDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropProductDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropProductDataResponseValidationError) ErrorName() string {
	return "DropProductDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropProductDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropProductDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropProductDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropProductDataResponseValidationError{}

// Validate checks the field values on UpsertProductRequestApplication with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductRequestApplication) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpsertProductRequestApplication_Operation_InLookup[m.GetOperation()]; !ok {
		return UpsertProductRequestApplicationValidationError{
			field:  "Operation",
			reason: "value must be in list [add delete]",
		}
	}

	return nil
}

// UpsertProductRequestApplicationValidationError is the validation error
// returned by UpsertProductRequestApplication.Validate if the designated
// constraints aren't met.
type UpsertProductRequestApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestApplicationValidationError) ErrorName() string {
	return "UpsertProductRequestApplicationValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequestApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestApplicationValidationError{}

var _UpsertProductRequestApplication_Operation_InLookup = map[string]struct{}{
	"add":    {},
	"delete": {},
}

// Validate checks the field values on UpsertProductRequestEquipment with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductRequestEquipment) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpsertProductRequestEquipment_Operation_InLookup[m.GetOperation()]; !ok {
		return UpsertProductRequestEquipmentValidationError{
			field:  "Operation",
			reason: "value must be in list [add delete]",
		}
	}

	for idx, item := range m.GetEquipmentusers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return UpsertProductRequestEquipmentValidationError{
					field:  fmt.Sprintf("Equipmentusers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpsertProductRequestEquipmentValidationError is the validation error
// returned by UpsertProductRequestEquipment.Validate if the designated
// constraints aren't met.
type UpsertProductRequestEquipmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestEquipmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestEquipmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestEquipmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestEquipmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestEquipmentValidationError) ErrorName() string {
	return "UpsertProductRequestEquipmentValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestEquipmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequestEquipment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestEquipmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestEquipmentValidationError{}

var _UpsertProductRequestEquipment_Operation_InLookup = map[string]struct{}{
	"add":    {},
	"delete": {},
}

// Validate checks the field values on
// UpsertProductRequestEquipmentEquipmentuser with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpsertProductRequestEquipmentEquipmentuser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EquipmentId

	// no validation rules for NumUser

	return nil
}

// UpsertProductRequestEquipmentEquipmentuserValidationError is the validation
// error returned by UpsertProductRequestEquipmentEquipmentuser.Validate if
// the designated constraints aren't met.
type UpsertProductRequestEquipmentEquipmentuserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) ErrorName() string {
	return "UpsertProductRequestEquipmentEquipmentuserValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequestEquipmentEquipmentuser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestEquipmentEquipmentuserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestEquipmentEquipmentuserValidationError{}

// Validate checks the field values on
// ListAcqRightsProductsResponse_AcqRightsProducts with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListAcqRightsProductsResponse_AcqRightsProducts) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Swidtag

	// no validation rules for ProductName

	return nil
}

// ListAcqRightsProductsResponse_AcqRightsProductsValidationError is the
// validation error returned by
// ListAcqRightsProductsResponse_AcqRightsProducts.Validate if the designated
// constraints aren't met.
type ListAcqRightsProductsResponse_AcqRightsProductsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) ErrorName() string {
	return "ListAcqRightsProductsResponse_AcqRightsProductsValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsProductsResponse_AcqRightsProducts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsProductsResponse_AcqRightsProductsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsProductsResponse_AcqRightsProductsValidationError{}
