// Copyright (C) 2019 Orange
// 
// This software is distributed under the terms and conditions of the 'Apache License 2.0'
// license which can be found in the file 'License.txt' in this package distribution 
// or at 'http://www.apache.org/licenses/LICENSE-2.0'. 

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _product_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on
// ProductAggregationProductViewOptionsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewOptionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	return nil
}

// ProductAggregationProductViewOptionsRequestValidationError is the validation
// error returned by ProductAggregationProductViewOptionsRequest.Validate if
// the designated constraints aren't met.
type ProductAggregationProductViewOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewOptionsRequestValidationError) ErrorName() string {
	return "ProductAggregationProductViewOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewOptionsRequestValidationError{}

// Validate checks the field values on
// ProductAggregationProductViewOptionsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewOptionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumOfOptions

	for idx, item := range m.GetOptioninfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductAggregationProductViewOptionsResponseValidationError{
					field:  fmt.Sprintf("Optioninfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductAggregationProductViewOptionsResponseValidationError is the
// validation error returned by
// ProductAggregationProductViewOptionsResponse.Validate if the designated
// constraints aren't met.
type ProductAggregationProductViewOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewOptionsResponseValidationError) ErrorName() string {
	return "ProductAggregationProductViewOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewOptionsResponseValidationError{}

// Validate checks the field values on
// ProductAggregationProductViewDetailsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	return nil
}

// ProductAggregationProductViewDetailsRequestValidationError is the validation
// error returned by ProductAggregationProductViewDetailsRequest.Validate if
// the designated constraints aren't met.
type ProductAggregationProductViewDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewDetailsRequestValidationError) ErrorName() string {
	return "ProductAggregationProductViewDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewDetailsRequestValidationError{}

// Validate checks the field values on
// ProductAggregationProductViewDetailsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for ProductName

	// no validation rules for NumApplications

	// no validation rules for NumEquipments

	return nil
}

// ProductAggregationProductViewDetailsResponseValidationError is the
// validation error returned by
// ProductAggregationProductViewDetailsResponse.Validate if the designated
// constraints aren't met.
type ProductAggregationProductViewDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewDetailsResponseValidationError) ErrorName() string {
	return "ProductAggregationProductViewDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewDetailsResponseValidationError{}

// Validate checks the field values on ListProductAggregationViewRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListProductAggregationViewRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListProductAggregationViewRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if m.GetPageSize() < 10 {
		return ListProductAggregationViewRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 10",
		}
	}

	if _, ok := ListProductAggregationViewRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListProductAggregationViewRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListProductAggregationViewRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProductAggregationViewRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListProductAggregationViewRequestValidationError is the validation error
// returned by ListProductAggregationViewRequest.Validate if the designated
// constraints aren't met.
type ListProductAggregationViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationViewRequestValidationError) ErrorName() string {
	return "ListProductAggregationViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationViewRequestValidationError{}

// Validate checks the field values on
// ProductAggregationProductViewSearchParams with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "ProductName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProductAggregationProductViewSearchParamsValidationError is the validation
// error returned by ProductAggregationProductViewSearchParams.Validate if the
// designated constraints aren't met.
type ProductAggregationProductViewSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewSearchParamsValidationError) ErrorName() string {
	return "ProductAggregationProductViewSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewSearchParamsValidationError{}

// Validate checks the field values on ListProductAggregationViewResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListProductAggregationViewResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAggregations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductAggregationViewResponseValidationError{
					field:  fmt.Sprintf("Aggregations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductAggregationViewResponseValidationError is the validation error
// returned by ListProductAggregationViewResponse.Validate if the designated
// constraints aren't met.
type ListProductAggregationViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationViewResponseValidationError) ErrorName() string {
	return "ListProductAggregationViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationViewResponseValidationError{}

// Validate checks the field values on ProductAggregation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAggregation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for NumApplications

	// no validation rules for NumEquipments

	// no validation rules for TotalCost

	return nil
}

// ProductAggregationValidationError is the validation error returned by
// ProductAggregation.Validate if the designated constraints aren't met.
type ProductAggregationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationValidationError) ErrorName() string {
	return "ProductAggregationValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationValidationError{}

// Validate checks the field values on ListProductAggregationProductViewRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListProductAggregationProductViewRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	return nil
}

// ListProductAggregationProductViewRequestValidationError is the validation
// error returned by ListProductAggregationProductViewRequest.Validate if the
// designated constraints aren't met.
type ListProductAggregationProductViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationProductViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationProductViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationProductViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationProductViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationProductViewRequestValidationError) ErrorName() string {
	return "ListProductAggregationProductViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationProductViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationProductViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationProductViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationProductViewRequestValidationError{}

// Validate checks the field values on
// ListProductAggregationProductViewResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListProductAggregationProductViewResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductAggregationProductViewResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductAggregationProductViewResponseValidationError is the validation
// error returned by ListProductAggregationProductViewResponse.Validate if the
// designated constraints aren't met.
type ListProductAggregationProductViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationProductViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationProductViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationProductViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationProductViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationProductViewResponseValidationError) ErrorName() string {
	return "ListProductAggregationProductViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationProductViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationProductViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationProductViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationProductViewResponseValidationError{}

// Validate checks the field values on ListEditorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListEditorsRequestValidationError is the validation error returned by
// ListEditorsRequest.Validate if the designated constraints aren't met.
type ListEditorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorsRequestValidationError) ErrorName() string {
	return "ListEditorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorsRequestValidationError{}

// Validate checks the field values on ListEditorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListEditorsResponseValidationError is the validation error returned by
// ListEditorsResponse.Validate if the designated constraints aren't met.
type ListEditorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorsResponseValidationError) ErrorName() string {
	return "ListEditorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorsResponseValidationError{}

// Validate checks the field values on ListEditorProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Editor

	return nil
}

// ListEditorProductsRequestValidationError is the validation error returned by
// ListEditorProductsRequest.Validate if the designated constraints aren't met.
type ListEditorProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorProductsRequestValidationError) ErrorName() string {
	return "ListEditorProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorProductsRequestValidationError{}

// Validate checks the field values on ListEditorProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEditorProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEditorProductsResponseValidationError is the validation error returned
// by ListEditorProductsResponse.Validate if the designated constraints aren't met.
type ListEditorProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorProductsResponseValidationError) ErrorName() string {
	return "ListEditorProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorProductsResponseValidationError{}

// Validate checks the field values on Editor with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Editor) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// EditorValidationError is the validation error returned by Editor.Validate if
// the designated constraints aren't met.
type EditorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorValidationError) ErrorName() string { return "EditorValidationError" }

// Error satisfies the builtin error interface
func (e EditorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Product) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Category

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for TotalCost

	// no validation rules for NumOfApplications

	// no validation rules for NumofEquipments

	return nil
}

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on ListProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductsResponseValidationError is the validation error returned by
// ListProductsResponse.Validate if the designated constraints aren't met.
type ListProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsResponseValidationError) ErrorName() string {
	return "ListProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsResponseValidationError{}

// Validate checks the field values on ListProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListProductsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if m.GetPageSize() < 10 {
		return ListProductsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 10",
		}
	}

	if _, ok := _ListProductsRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return ListProductsRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [name swidtag version edition editor totalCost numOfApplications numofEquipments]",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListProductsRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProductsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListProductsRequestValidationError is the validation error returned by
// ListProductsRequest.Validate if the designated constraints aren't met.
type ListProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsRequestValidationError) ErrorName() string {
	return "ListProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsRequestValidationError{}

var _ListProductsRequest_SortBy_InLookup = map[string]struct{}{
	"name":              {},
	"swidtag":           {},
	"version":           {},
	"edition":           {},
	"editor":            {},
	"totalCost":         {},
	"numOfApplications": {},
	"numofEquipments":   {},
}

// Validate checks the field values on ProductSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetApplicationId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "ApplicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEquipmentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "EquipmentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProductSearchParamsValidationError is the validation error returned by
// ProductSearchParams.Validate if the designated constraints aren't met.
type ProductSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductSearchParamsValidationError) ErrorName() string {
	return "ProductSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ProductSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductSearchParamsValidationError{}

// Validate checks the field values on ProductRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	return nil
}

// ProductRequestValidationError is the validation error returned by
// ProductRequest.Validate if the designated constraints aren't met.
type ProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductRequestValidationError) ErrorName() string { return "ProductRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductRequestValidationError{}

// Validate checks the field values on ProductResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Editor

	// no validation rules for Edition

	// no validation rules for Release

	return nil
}

// ProductResponseValidationError is the validation error returned by
// ProductResponse.Validate if the designated constraints aren't met.
type ProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductResponseValidationError) ErrorName() string { return "ProductResponseValidationError" }

// Error satisfies the builtin error interface
func (e ProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductResponseValidationError{}

// Validate checks the field values on ProductOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductOptionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumOfOptions

	for idx, item := range m.GetOptioninfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductOptionsResponseValidationError{
					field:  fmt.Sprintf("Optioninfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductOptionsResponseValidationError is the validation error returned by
// ProductOptionsResponse.Validate if the designated constraints aren't met.
type ProductOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductOptionsResponseValidationError) ErrorName() string {
	return "ProductOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductOptionsResponseValidationError{}

// Validate checks the field values on OptionInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OptionInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for Version

	return nil
}

// OptionInfoValidationError is the validation error returned by
// OptionInfo.Validate if the designated constraints aren't met.
type OptionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OptionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OptionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OptionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OptionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OptionInfoValidationError) ErrorName() string { return "OptionInfoValidationError" }

// Error satisfies the builtin error interface
func (e OptionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOptionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OptionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OptionInfoValidationError{}

// Validate checks the field values on StringFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilteringOrder

	// no validation rules for Filteringkey

	// no validation rules for FilterType

	return nil
}

// StringFilterValidationError is the validation error returned by
// StringFilter.Validate if the designated constraints aren't met.
type StringFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFilterValidationError) ErrorName() string { return "StringFilterValidationError" }

// Error satisfies the builtin error interface
func (e StringFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFilterValidationError{}

// Validate checks the field values on UpsertProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Category

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for Version

	// no validation rules for OptionOf

	if l := utf8.RuneCountInString(m.GetScope()); l < 1 || l > 10 {
		return UpsertProductRequestValidationError{
			field:  "Scope",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetApplications()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertProductRequestValidationError{
				field:  "Applications",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEquipments()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertProductRequestValidationError{
				field:  "Equipments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpsertProductRequestValidationError is the validation error returned by
// UpsertProductRequest.Validate if the designated constraints aren't met.
type UpsertProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestValidationError) ErrorName() string {
	return "UpsertProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestValidationError{}

// Validate checks the field values on UpsertProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertProductResponseValidationError is the validation error returned by
// UpsertProductResponse.Validate if the designated constraints aren't met.
type UpsertProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductResponseValidationError) ErrorName() string {
	return "UpsertProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductResponseValidationError{}

// Validate checks the field values on UpsertAggregationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AggregationId

	// no validation rules for AggregationName

	// no validation rules for ActionType

	return nil
}

// UpsertAggregationRequestValidationError is the validation error returned by
// UpsertAggregationRequest.Validate if the designated constraints aren't met.
type UpsertAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAggregationRequestValidationError) ErrorName() string {
	return "UpsertAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAggregationRequestValidationError{}

// Validate checks the field values on UpsertAggregationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertAggregationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertAggregationResponseValidationError is the validation error returned by
// UpsertAggregationResponse.Validate if the designated constraints aren't met.
type UpsertAggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAggregationResponseValidationError) ErrorName() string {
	return "UpsertAggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAggregationResponseValidationError{}

// Validate checks the field values on UpsertProductRequestApplication with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductRequestApplication) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpsertProductRequestApplication_Operation_InLookup[m.GetOperation()]; !ok {
		return UpsertProductRequestApplicationValidationError{
			field:  "Operation",
			reason: "value must be in list [add delete]",
		}
	}

	return nil
}

// UpsertProductRequestApplicationValidationError is the validation error
// returned by UpsertProductRequestApplication.Validate if the designated
// constraints aren't met.
type UpsertProductRequestApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestApplicationValidationError) ErrorName() string {
	return "UpsertProductRequestApplicationValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequestApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestApplicationValidationError{}

var _UpsertProductRequestApplication_Operation_InLookup = map[string]struct{}{
	"add":    {},
	"delete": {},
}

// Validate checks the field values on UpsertProductRequestEquipment with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductRequestEquipment) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpsertProductRequestEquipment_Operation_InLookup[m.GetOperation()]; !ok {
		return UpsertProductRequestEquipmentValidationError{
			field:  "Operation",
			reason: "value must be in list [add delete]",
		}
	}

	for idx, item := range m.GetEquipmentusers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertProductRequestEquipmentValidationError{
					field:  fmt.Sprintf("Equipmentusers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpsertProductRequestEquipmentValidationError is the validation error
// returned by UpsertProductRequestEquipment.Validate if the designated
// constraints aren't met.
type UpsertProductRequestEquipmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestEquipmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestEquipmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestEquipmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestEquipmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestEquipmentValidationError) ErrorName() string {
	return "UpsertProductRequestEquipmentValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestEquipmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequestEquipment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestEquipmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestEquipmentValidationError{}

var _UpsertProductRequestEquipment_Operation_InLookup = map[string]struct{}{
	"add":    {},
	"delete": {},
}

// Validate checks the field values on
// UpsertProductRequestEquipmentEquipmentuser with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpsertProductRequestEquipmentEquipmentuser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EquipmentId

	// no validation rules for NumUser

	return nil
}

// UpsertProductRequestEquipmentEquipmentuserValidationError is the validation
// error returned by UpsertProductRequestEquipmentEquipmentuser.Validate if
// the designated constraints aren't met.
type UpsertProductRequestEquipmentEquipmentuserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) ErrorName() string {
	return "UpsertProductRequestEquipmentEquipmentuserValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequestEquipmentEquipmentuser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestEquipmentEquipmentuserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestEquipmentEquipmentuserValidationError{}
