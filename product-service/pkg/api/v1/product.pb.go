// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: product.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SortOrder int32

const (
	SortOrder_asc  SortOrder = 0
	SortOrder_desc SortOrder = 1
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "asc",
		1: "desc",
	}
	SortOrder_value = map[string]int32{
		"asc":  0,
		"desc": 1,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{0}
}

type DataTypes int32

const (
	DataTypes_UNKNOWN DataTypes = 0
	DataTypes_STRING  DataTypes = 1
	DataTypes_INT     DataTypes = 2
	DataTypes_FLOAT   DataTypes = 3
)

// Enum value maps for DataTypes.
var (
	DataTypes_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "INT",
		3: "FLOAT",
	}
	DataTypes_value = map[string]int32{
		"UNKNOWN": 0,
		"STRING":  1,
		"INT":     2,
		"FLOAT":   3,
	}
)

func (x DataTypes) Enum() *DataTypes {
	p := new(DataTypes)
	*p = x
	return p
}

func (x DataTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[1].Descriptor()
}

func (DataTypes) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[1]
}

func (x DataTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTypes.Descriptor instead.
func (DataTypes) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{1}
}

type ListProductAggregationViewRequest_SortBy int32

const (
	ListProductAggregationViewRequest_aggregation_name    ListProductAggregationViewRequest_SortBy = 0
	ListProductAggregationViewRequest_product_editor      ListProductAggregationViewRequest_SortBy = 1
	ListProductAggregationViewRequest_num_of_applications ListProductAggregationViewRequest_SortBy = 2
	ListProductAggregationViewRequest_num_of_equipments   ListProductAggregationViewRequest_SortBy = 3
	ListProductAggregationViewRequest_cost                ListProductAggregationViewRequest_SortBy = 4
)

// Enum value maps for ListProductAggregationViewRequest_SortBy.
var (
	ListProductAggregationViewRequest_SortBy_name = map[int32]string{
		0: "aggregation_name",
		1: "product_editor",
		2: "num_of_applications",
		3: "num_of_equipments",
		4: "cost",
	}
	ListProductAggregationViewRequest_SortBy_value = map[string]int32{
		"aggregation_name":    0,
		"product_editor":      1,
		"num_of_applications": 2,
		"num_of_equipments":   3,
		"cost":                4,
	}
)

func (x ListProductAggregationViewRequest_SortBy) Enum() *ListProductAggregationViewRequest_SortBy {
	p := new(ListProductAggregationViewRequest_SortBy)
	*p = x
	return p
}

func (x ListProductAggregationViewRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListProductAggregationViewRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[2].Descriptor()
}

func (ListProductAggregationViewRequest_SortBy) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[2]
}

func (x ListProductAggregationViewRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListProductAggregationViewRequest_SortBy.Descriptor instead.
func (ListProductAggregationViewRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{37, 0}
}

type ListAcqRightsRequest_SortBy int32

const (
	ListAcqRightsRequest_SKU                               ListAcqRightsRequest_SortBy = 0
	ListAcqRightsRequest_SWID_TAG                          ListAcqRightsRequest_SortBy = 1
	ListAcqRightsRequest_PRODUCT_NAME                      ListAcqRightsRequest_SortBy = 2
	ListAcqRightsRequest_EDITOR                            ListAcqRightsRequest_SortBy = 3
	ListAcqRightsRequest_METRIC                            ListAcqRightsRequest_SortBy = 4
	ListAcqRightsRequest_ACQUIRED_LICENSES_NUMBER          ListAcqRightsRequest_SortBy = 5
	ListAcqRightsRequest_AVG_LICENSE_UNIT_PRICE            ListAcqRightsRequest_SortBy = 6
	ListAcqRightsRequest_AVG_MAINTENANCE_UNIT_PRICE        ListAcqRightsRequest_SortBy = 7
	ListAcqRightsRequest_TOTAL_PURCHASE_COST               ListAcqRightsRequest_SortBy = 8
	ListAcqRightsRequest_TOTAL_MAINTENANCE_COST            ListAcqRightsRequest_SortBy = 9
	ListAcqRightsRequest_TOTAL_COST                        ListAcqRightsRequest_SortBy = 10
	ListAcqRightsRequest_START_OF_MAINTENANCE              ListAcqRightsRequest_SortBy = 11
	ListAcqRightsRequest_END_OF_MAINTENANCE                ListAcqRightsRequest_SortBy = 12
	ListAcqRightsRequest_LICENSES_UNDER_MAINTENANCE_NUMBER ListAcqRightsRequest_SortBy = 13
)

// Enum value maps for ListAcqRightsRequest_SortBy.
var (
	ListAcqRightsRequest_SortBy_name = map[int32]string{
		0:  "SKU",
		1:  "SWID_TAG",
		2:  "PRODUCT_NAME",
		3:  "EDITOR",
		4:  "METRIC",
		5:  "ACQUIRED_LICENSES_NUMBER",
		6:  "AVG_LICENSE_UNIT_PRICE",
		7:  "AVG_MAINTENANCE_UNIT_PRICE",
		8:  "TOTAL_PURCHASE_COST",
		9:  "TOTAL_MAINTENANCE_COST",
		10: "TOTAL_COST",
		11: "START_OF_MAINTENANCE",
		12: "END_OF_MAINTENANCE",
		13: "LICENSES_UNDER_MAINTENANCE_NUMBER",
	}
	ListAcqRightsRequest_SortBy_value = map[string]int32{
		"SKU":                               0,
		"SWID_TAG":                          1,
		"PRODUCT_NAME":                      2,
		"EDITOR":                            3,
		"METRIC":                            4,
		"ACQUIRED_LICENSES_NUMBER":          5,
		"AVG_LICENSE_UNIT_PRICE":            6,
		"AVG_MAINTENANCE_UNIT_PRICE":        7,
		"TOTAL_PURCHASE_COST":               8,
		"TOTAL_MAINTENANCE_COST":            9,
		"TOTAL_COST":                        10,
		"START_OF_MAINTENANCE":              11,
		"END_OF_MAINTENANCE":                12,
		"LICENSES_UNDER_MAINTENANCE_NUMBER": 13,
	}
)

func (x ListAcqRightsRequest_SortBy) Enum() *ListAcqRightsRequest_SortBy {
	p := new(ListAcqRightsRequest_SortBy)
	*p = x
	return p
}

func (x ListAcqRightsRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListAcqRightsRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[3].Descriptor()
}

func (ListAcqRightsRequest_SortBy) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[3]
}

func (x ListAcqRightsRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListAcqRightsRequest_SortBy.Descriptor instead.
func (ListAcqRightsRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{78, 0}
}

type ListAggregatedAcqRightsRequest_SortBy int32

const (
	ListAggregatedAcqRightsRequest_SKU                        ListAggregatedAcqRightsRequest_SortBy = 0
	ListAggregatedAcqRightsRequest_EDITOR                     ListAggregatedAcqRightsRequest_SortBy = 1
	ListAggregatedAcqRightsRequest_TOTAL_COST                 ListAggregatedAcqRightsRequest_SortBy = 2
	ListAggregatedAcqRightsRequest_METRIC                     ListAggregatedAcqRightsRequest_SortBy = 3
	ListAggregatedAcqRightsRequest_AGG_NAME                   ListAggregatedAcqRightsRequest_SortBy = 4
	ListAggregatedAcqRightsRequest_NUM_OF_SWIDTAGS            ListAggregatedAcqRightsRequest_SortBy = 5
	ListAggregatedAcqRightsRequest_ACQUIRED_LICENSES          ListAggregatedAcqRightsRequest_SortBy = 6
	ListAggregatedAcqRightsRequest_MAINTENANCE_LICENCES       ListAggregatedAcqRightsRequest_SortBy = 7
	ListAggregatedAcqRightsRequest_MAINTENANCE_START          ListAggregatedAcqRightsRequest_SortBy = 8
	ListAggregatedAcqRightsRequest_MAINTENANCE_END            ListAggregatedAcqRightsRequest_SortBy = 9
	ListAggregatedAcqRightsRequest_UNIT_PRICE                 ListAggregatedAcqRightsRequest_SortBy = 10
	ListAggregatedAcqRightsRequest_MAINTENANCE_PRICE          ListAggregatedAcqRightsRequest_SortBy = 11
	ListAggregatedAcqRightsRequest_TOTAL_PURCHASED_COST       ListAggregatedAcqRightsRequest_SortBy = 12
	ListAggregatedAcqRightsRequest_TOTAL_MAINTENANCE_COST     ListAggregatedAcqRightsRequest_SortBy = 13
	ListAggregatedAcqRightsRequest_LICENSES_UNDER_MAINTENANCE ListAggregatedAcqRightsRequest_SortBy = 14
)

// Enum value maps for ListAggregatedAcqRightsRequest_SortBy.
var (
	ListAggregatedAcqRightsRequest_SortBy_name = map[int32]string{
		0:  "SKU",
		1:  "EDITOR",
		2:  "TOTAL_COST",
		3:  "METRIC",
		4:  "AGG_NAME",
		5:  "NUM_OF_SWIDTAGS",
		6:  "ACQUIRED_LICENSES",
		7:  "MAINTENANCE_LICENCES",
		8:  "MAINTENANCE_START",
		9:  "MAINTENANCE_END",
		10: "UNIT_PRICE",
		11: "MAINTENANCE_PRICE",
		12: "TOTAL_PURCHASED_COST",
		13: "TOTAL_MAINTENANCE_COST",
		14: "LICENSES_UNDER_MAINTENANCE",
	}
	ListAggregatedAcqRightsRequest_SortBy_value = map[string]int32{
		"SKU":                        0,
		"EDITOR":                     1,
		"TOTAL_COST":                 2,
		"METRIC":                     3,
		"AGG_NAME":                   4,
		"NUM_OF_SWIDTAGS":            5,
		"ACQUIRED_LICENSES":          6,
		"MAINTENANCE_LICENCES":       7,
		"MAINTENANCE_START":          8,
		"MAINTENANCE_END":            9,
		"UNIT_PRICE":                 10,
		"MAINTENANCE_PRICE":          11,
		"TOTAL_PURCHASED_COST":       12,
		"TOTAL_MAINTENANCE_COST":     13,
		"LICENSES_UNDER_MAINTENANCE": 14,
	}
)

func (x ListAggregatedAcqRightsRequest_SortBy) Enum() *ListAggregatedAcqRightsRequest_SortBy {
	p := new(ListAggregatedAcqRightsRequest_SortBy)
	*p = x
	return p
}

func (x ListAggregatedAcqRightsRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListAggregatedAcqRightsRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[4].Descriptor()
}

func (ListAggregatedAcqRightsRequest_SortBy) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[4]
}

func (x ListAggregatedAcqRightsRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListAggregatedAcqRightsRequest_SortBy.Descriptor instead.
func (ListAggregatedAcqRightsRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{82, 0}
}

type ListAggregationsRequest_SortBy int32

const (
	ListAggregationsRequest_aggregation_name ListAggregationsRequest_SortBy = 0
	ListAggregationsRequest_product_editor   ListAggregationsRequest_SortBy = 1
)

// Enum value maps for ListAggregationsRequest_SortBy.
var (
	ListAggregationsRequest_SortBy_name = map[int32]string{
		0: "aggregation_name",
		1: "product_editor",
	}
	ListAggregationsRequest_SortBy_value = map[string]int32{
		"aggregation_name": 0,
		"product_editor":   1,
	}
)

func (x ListAggregationsRequest_SortBy) Enum() *ListAggregationsRequest_SortBy {
	p := new(ListAggregationsRequest_SortBy)
	*p = x
	return p
}

func (x ListAggregationsRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListAggregationsRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[5].Descriptor()
}

func (ListAggregationsRequest_SortBy) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[5]
}

func (x ListAggregationsRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListAggregationsRequest_SortBy.Descriptor instead.
func (ListAggregationsRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{89, 0}
}

type DropProductDataRequestDeletionTypes int32

const (
	DropProductDataRequest_ACQRIGHTS DropProductDataRequestDeletionTypes = 0
	DropProductDataRequest_FULL      DropProductDataRequestDeletionTypes = 1
	DropProductDataRequest_PARK      DropProductDataRequestDeletionTypes = 2
)

// Enum value maps for DropProductDataRequestDeletionTypes.
var (
	DropProductDataRequestDeletionTypes_name = map[int32]string{
		0: "ACQRIGHTS",
		1: "FULL",
		2: "PARK",
	}
	DropProductDataRequestDeletionTypes_value = map[string]int32{
		"ACQRIGHTS": 0,
		"FULL":      1,
		"PARK":      2,
	}
)

func (x DropProductDataRequestDeletionTypes) Enum() *DropProductDataRequestDeletionTypes {
	p := new(DropProductDataRequestDeletionTypes)
	*p = x
	return p
}

func (x DropProductDataRequestDeletionTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DropProductDataRequestDeletionTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[6].Descriptor()
}

func (DropProductDataRequestDeletionTypes) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[6]
}

func (x DropProductDataRequestDeletionTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DropProductDataRequestDeletionTypes.Descriptor instead.
func (DropProductDataRequestDeletionTypes) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{99, 0}
}

type GetAggregationAcqrightsExpandedViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope           string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	AggregationName string `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	Metric          string `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *GetAggregationAcqrightsExpandedViewRequest) Reset() {
	*x = GetAggregationAcqrightsExpandedViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationAcqrightsExpandedViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationAcqrightsExpandedViewRequest) ProtoMessage() {}

func (x *GetAggregationAcqrightsExpandedViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationAcqrightsExpandedViewRequest.ProtoReflect.Descriptor instead.
func (*GetAggregationAcqrightsExpandedViewRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{0}
}

func (x *GetAggregationAcqrightsExpandedViewRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetAggregationAcqrightsExpandedViewRequest) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *GetAggregationAcqrightsExpandedViewRequest) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

type GetAggregationAcqrightsExpandedViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32        `protobuf:"varint,1,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	AcqRights    []*AcqRights `protobuf:"bytes,2,rep,name=acqRights,proto3" json:"acqRights,omitempty"`
}

func (x *GetAggregationAcqrightsExpandedViewResponse) Reset() {
	*x = GetAggregationAcqrightsExpandedViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationAcqrightsExpandedViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationAcqrightsExpandedViewResponse) ProtoMessage() {}

func (x *GetAggregationAcqrightsExpandedViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationAcqrightsExpandedViewResponse.ProtoReflect.Descriptor instead.
func (*GetAggregationAcqrightsExpandedViewResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{1}
}

func (x *GetAggregationAcqrightsExpandedViewResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetAggregationAcqrightsExpandedViewResponse) GetAcqRights() []*AcqRights {
	if x != nil {
		return x.AcqRights
	}
	return nil
}

type GetAggregationProductsExpandedViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope           string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	AggregationName string `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
}

func (x *GetAggregationProductsExpandedViewRequest) Reset() {
	*x = GetAggregationProductsExpandedViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationProductsExpandedViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationProductsExpandedViewRequest) ProtoMessage() {}

func (x *GetAggregationProductsExpandedViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationProductsExpandedViewRequest.ProtoReflect.Descriptor instead.
func (*GetAggregationProductsExpandedViewRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{2}
}

func (x *GetAggregationProductsExpandedViewRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetAggregationProductsExpandedViewRequest) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

type GetAggregationProductsExpandedViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32            `protobuf:"varint,1,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	Products     []*ProductExpand `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *GetAggregationProductsExpandedViewResponse) Reset() {
	*x = GetAggregationProductsExpandedViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationProductsExpandedViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationProductsExpandedViewResponse) ProtoMessage() {}

func (x *GetAggregationProductsExpandedViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationProductsExpandedViewResponse.ProtoReflect.Descriptor instead.
func (*GetAggregationProductsExpandedViewResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{3}
}

func (x *GetAggregationProductsExpandedViewResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetAggregationProductsExpandedViewResponse) GetProducts() []*ProductExpand {
	if x != nil {
		return x.Products
	}
	return nil
}

type ProductAggregationProductViewOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ProductAggregationProductViewOptionsRequest) Reset() {
	*x = ProductAggregationProductViewOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregationProductViewOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregationProductViewOptionsRequest) ProtoMessage() {}

func (x *ProductAggregationProductViewOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregationProductViewOptionsRequest.ProtoReflect.Descriptor instead.
func (*ProductAggregationProductViewOptionsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{4}
}

func (x *ProductAggregationProductViewOptionsRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProductAggregationProductViewOptionsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ProductAggregationProductViewOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOfOptions int32         `protobuf:"varint,1,opt,name=numOfOptions,proto3" json:"numOfOptions,omitempty"`
	Optioninfo   []*OptionInfo `protobuf:"bytes,2,rep,name=optioninfo,proto3" json:"optioninfo,omitempty"`
}

func (x *ProductAggregationProductViewOptionsResponse) Reset() {
	*x = ProductAggregationProductViewOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregationProductViewOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregationProductViewOptionsResponse) ProtoMessage() {}

func (x *ProductAggregationProductViewOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregationProductViewOptionsResponse.ProtoReflect.Descriptor instead.
func (*ProductAggregationProductViewOptionsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{5}
}

func (x *ProductAggregationProductViewOptionsResponse) GetNumOfOptions() int32 {
	if x != nil {
		return x.NumOfOptions
	}
	return 0
}

func (x *ProductAggregationProductViewOptionsResponse) GetOptioninfo() []*OptionInfo {
	if x != nil {
		return x.Optioninfo
	}
	return nil
}

type GetEquipmentsByProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	SwidTag string `protobuf:"bytes,2,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
}

func (x *GetEquipmentsByProductRequest) Reset() {
	*x = GetEquipmentsByProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquipmentsByProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentsByProductRequest) ProtoMessage() {}

func (x *GetEquipmentsByProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentsByProductRequest.ProtoReflect.Descriptor instead.
func (*GetEquipmentsByProductRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{6}
}

func (x *GetEquipmentsByProductRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetEquipmentsByProductRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

type GetEquipmentsByProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentId []string `protobuf:"bytes,1,rep,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
}

func (x *GetEquipmentsByProductResponse) Reset() {
	*x = GetEquipmentsByProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquipmentsByProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentsByProductResponse) ProtoMessage() {}

func (x *GetEquipmentsByProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentsByProductResponse.ProtoReflect.Descriptor instead.
func (*GetEquipmentsByProductResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{7}
}

func (x *GetEquipmentsByProductResponse) GetEquipmentId() []string {
	if x != nil {
		return x.EquipmentId
	}
	return nil
}

type DeleteAcqRightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku   string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DeleteAcqRightRequest) Reset() {
	*x = DeleteAcqRightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAcqRightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAcqRightRequest) ProtoMessage() {}

func (x *DeleteAcqRightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAcqRightRequest.ProtoReflect.Descriptor instead.
func (*DeleteAcqRightRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteAcqRightRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *DeleteAcqRightRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DeleteAcqRightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteAcqRightResponse) Reset() {
	*x = DeleteAcqRightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAcqRightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAcqRightResponse) ProtoMessage() {}

func (x *DeleteAcqRightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAcqRightResponse.ProtoReflect.Descriptor instead.
func (*DeleteAcqRightResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteAcqRightResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DownloadAcqRightFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku   string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DownloadAcqRightFileRequest) Reset() {
	*x = DownloadAcqRightFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAcqRightFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAcqRightFileRequest) ProtoMessage() {}

func (x *DownloadAcqRightFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAcqRightFileRequest.ProtoReflect.Descriptor instead.
func (*DownloadAcqRightFileRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadAcqRightFileRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *DownloadAcqRightFileRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DownloadAcqRightFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileData []byte `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
}

func (x *DownloadAcqRightFileResponse) Reset() {
	*x = DownloadAcqRightFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAcqRightFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAcqRightFileResponse) ProtoMessage() {}

func (x *DownloadAcqRightFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAcqRightFileResponse.ProtoReflect.Descriptor instead.
func (*DownloadAcqRightFileResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{11}
}

func (x *DownloadAcqRightFileResponse) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

type DeleteAggregatedRightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku   string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DeleteAggregatedRightsRequest) Reset() {
	*x = DeleteAggregatedRightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAggregatedRightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAggregatedRightsRequest) ProtoMessage() {}

func (x *DeleteAggregatedRightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAggregatedRightsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAggregatedRightsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteAggregatedRightsRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *DeleteAggregatedRightsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DeleteAggregatedRightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteAggregatedRightsResponse) Reset() {
	*x = DeleteAggregatedRightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAggregatedRightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAggregatedRightsResponse) ProtoMessage() {}

func (x *DeleteAggregatedRightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAggregatedRightsResponse.ProtoReflect.Descriptor instead.
func (*DeleteAggregatedRightsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteAggregatedRightsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DownloadAggregatedRightsFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku   string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DownloadAggregatedRightsFileRequest) Reset() {
	*x = DownloadAggregatedRightsFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAggregatedRightsFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAggregatedRightsFileRequest) ProtoMessage() {}

func (x *DownloadAggregatedRightsFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAggregatedRightsFileRequest.ProtoReflect.Descriptor instead.
func (*DownloadAggregatedRightsFileRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{14}
}

func (x *DownloadAggregatedRightsFileRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *DownloadAggregatedRightsFileRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DownloadAggregatedRightsFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileData []byte `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
}

func (x *DownloadAggregatedRightsFileResponse) Reset() {
	*x = DownloadAggregatedRightsFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAggregatedRightsFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAggregatedRightsFileResponse) ProtoMessage() {}

func (x *DownloadAggregatedRightsFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAggregatedRightsFileResponse.ProtoReflect.Descriptor instead.
func (*DownloadAggregatedRightsFileResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{15}
}

func (x *DownloadAggregatedRightsFileResponse) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

type CreateDashboardUpdateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *CreateDashboardUpdateJobRequest) Reset() {
	*x = CreateDashboardUpdateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDashboardUpdateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDashboardUpdateJobRequest) ProtoMessage() {}

func (x *CreateDashboardUpdateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDashboardUpdateJobRequest.ProtoReflect.Descriptor instead.
func (*CreateDashboardUpdateJobRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{16}
}

func (x *CreateDashboardUpdateJobRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type CreateDashboardUpdateJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CreateDashboardUpdateJobResponse) Reset() {
	*x = CreateDashboardUpdateJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDashboardUpdateJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDashboardUpdateJobResponse) ProtoMessage() {}

func (x *CreateDashboardUpdateJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDashboardUpdateJobResponse.ProtoReflect.Descriptor instead.
func (*CreateDashboardUpdateJobResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{17}
}

func (x *CreateDashboardUpdateJobResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetBannerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeZone string `protobuf:"bytes,1,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	Scope    string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetBannerRequest) Reset() {
	*x = GetBannerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBannerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBannerRequest) ProtoMessage() {}

func (x *GetBannerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBannerRequest.ProtoReflect.Descriptor instead.
func (*GetBannerRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{18}
}

func (x *GetBannerRequest) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *GetBannerRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetBannerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt    string `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	NextUpdateAt string `protobuf:"bytes,2,opt,name=next_update_at,json=nextUpdateAt,proto3" json:"next_update_at,omitempty"`
}

func (x *GetBannerResponse) Reset() {
	*x = GetBannerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBannerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBannerResponse) ProtoMessage() {}

func (x *GetBannerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBannerResponse.ProtoReflect.Descriptor instead.
func (*GetBannerResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{19}
}

func (x *GetBannerResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *GetBannerResponse) GetNextUpdateAt() string {
	if x != nil {
		return x.NextUpdateAt
	}
	return ""
}

type AcqRightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku                       string  `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	ProductName               string  `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Version                   string  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	ProductEditor             string  `protobuf:"bytes,4,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	MetricName                string  `protobuf:"bytes,5,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	NumLicensesAcquired       int32   `protobuf:"varint,6,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
	AvgUnitPrice              float64 `protobuf:"fixed64,7,opt,name=avg_unit_price,json=avgUnitPrice,proto3" json:"avg_unit_price,omitempty"`
	StartOfMaintenance        string  `protobuf:"bytes,8,opt,name=start_of_maintenance,json=startOfMaintenance,proto3" json:"start_of_maintenance,omitempty"`
	EndOfMaintenance          string  `protobuf:"bytes,9,opt,name=end_of_maintenance,json=endOfMaintenance,proto3" json:"end_of_maintenance,omitempty"`
	NumLicencesMaintainance   int32   `protobuf:"varint,10,opt,name=num_licences_maintainance,json=numLicencesMaintainance,proto3" json:"num_licences_maintainance,omitempty"`
	AvgMaintenanceUnitPrice   float64 `protobuf:"fixed64,11,opt,name=avg_maintenance_unit_price,json=avgMaintenanceUnitPrice,proto3" json:"avg_maintenance_unit_price,omitempty"`
	LastPurchasedOrder        string  `protobuf:"bytes,12,opt,name=last_purchased_order,json=lastPurchasedOrder,proto3" json:"last_purchased_order,omitempty"`
	SupportNumber             string  `protobuf:"bytes,13,opt,name=support_number,json=supportNumber,proto3" json:"support_number,omitempty"`
	MaintenanceProvider       string  `protobuf:"bytes,14,opt,name=maintenance_provider,json=maintenanceProvider,proto3" json:"maintenance_provider,omitempty"`
	Scope                     string  `protobuf:"bytes,15,opt,name=scope,proto3" json:"scope,omitempty"`
	Comment                   string  `protobuf:"bytes,16,opt,name=comment,proto3" json:"comment,omitempty"`
	OrderingDate              string  `protobuf:"bytes,17,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	CorporateSourcingContract string  `protobuf:"bytes,18,opt,name=corporate_sourcing_contract,json=corporateSourcingContract,proto3" json:"corporate_sourcing_contract,omitempty"`
	SoftwareProvider          string  `protobuf:"bytes,19,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
	FileName                  string  `protobuf:"bytes,20,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileData                  []byte  `protobuf:"bytes,21,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
}

func (x *AcqRightRequest) Reset() {
	*x = AcqRightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcqRightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcqRightRequest) ProtoMessage() {}

func (x *AcqRightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcqRightRequest.ProtoReflect.Descriptor instead.
func (*AcqRightRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{20}
}

func (x *AcqRightRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *AcqRightRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *AcqRightRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AcqRightRequest) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *AcqRightRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *AcqRightRequest) GetNumLicensesAcquired() int32 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

func (x *AcqRightRequest) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *AcqRightRequest) GetStartOfMaintenance() string {
	if x != nil {
		return x.StartOfMaintenance
	}
	return ""
}

func (x *AcqRightRequest) GetEndOfMaintenance() string {
	if x != nil {
		return x.EndOfMaintenance
	}
	return ""
}

func (x *AcqRightRequest) GetNumLicencesMaintainance() int32 {
	if x != nil {
		return x.NumLicencesMaintainance
	}
	return 0
}

func (x *AcqRightRequest) GetAvgMaintenanceUnitPrice() float64 {
	if x != nil {
		return x.AvgMaintenanceUnitPrice
	}
	return 0
}

func (x *AcqRightRequest) GetLastPurchasedOrder() string {
	if x != nil {
		return x.LastPurchasedOrder
	}
	return ""
}

func (x *AcqRightRequest) GetSupportNumber() string {
	if x != nil {
		return x.SupportNumber
	}
	return ""
}

func (x *AcqRightRequest) GetMaintenanceProvider() string {
	if x != nil {
		return x.MaintenanceProvider
	}
	return ""
}

func (x *AcqRightRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AcqRightRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AcqRightRequest) GetOrderingDate() string {
	if x != nil {
		return x.OrderingDate
	}
	return ""
}

func (x *AcqRightRequest) GetCorporateSourcingContract() string {
	if x != nil {
		return x.CorporateSourcingContract
	}
	return ""
}

func (x *AcqRightRequest) GetSoftwareProvider() string {
	if x != nil {
		return x.SoftwareProvider
	}
	return ""
}

func (x *AcqRightRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AcqRightRequest) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

type AcqRightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AcqRightResponse) Reset() {
	*x = AcqRightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcqRightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcqRightResponse) ProtoMessage() {}

func (x *AcqRightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcqRightResponse.ProtoReflect.Descriptor instead.
func (*AcqRightResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{21}
}

func (x *AcqRightResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AggregationName string   `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	ProductEditor   string   `protobuf:"bytes,3,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	ProductNames    []string `protobuf:"bytes,4,rep,name=product_names,json=productNames,proto3" json:"product_names,omitempty"`
	Swidtags        []string `protobuf:"bytes,5,rep,name=swidtags,proto3" json:"swidtags,omitempty"`
	Scope           string   `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{22}
}

func (x *Aggregation) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Aggregation) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *Aggregation) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *Aggregation) GetProductNames() []string {
	if x != nil {
		return x.ProductNames
	}
	return nil
}

func (x *Aggregation) GetSwidtags() []string {
	if x != nil {
		return x.Swidtags
	}
	return nil
}

func (x *Aggregation) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type AggregationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AggregationResponse) Reset() {
	*x = AggregationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationResponse) ProtoMessage() {}

func (x *AggregationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationResponse.ProtoReflect.Descriptor instead.
func (*AggregationResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{23}
}

func (x *AggregationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AggregatedRightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku                       string  `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	AggregationID             int32   `protobuf:"varint,2,opt,name=aggregationID,proto3" json:"aggregationID,omitempty"`
	MetricName                string  `protobuf:"bytes,3,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	NumLicensesAcquired       int32   `protobuf:"varint,4,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
	AvgUnitPrice              float64 `protobuf:"fixed64,5,opt,name=avg_unit_price,json=avgUnitPrice,proto3" json:"avg_unit_price,omitempty"`
	StartOfMaintenance        string  `protobuf:"bytes,6,opt,name=start_of_maintenance,json=startOfMaintenance,proto3" json:"start_of_maintenance,omitempty"`
	EndOfMaintenance          string  `protobuf:"bytes,7,opt,name=end_of_maintenance,json=endOfMaintenance,proto3" json:"end_of_maintenance,omitempty"`
	LastPurchasedOrder        string  `protobuf:"bytes,8,opt,name=last_purchased_order,json=lastPurchasedOrder,proto3" json:"last_purchased_order,omitempty"`
	SupportNumber             string  `protobuf:"bytes,9,opt,name=support_number,json=supportNumber,proto3" json:"support_number,omitempty"`
	MaintenanceProvider       string  `protobuf:"bytes,10,opt,name=maintenance_provider,json=maintenanceProvider,proto3" json:"maintenance_provider,omitempty"`
	NumLicencesMaintenance    int32   `protobuf:"varint,11,opt,name=num_licences_maintenance,json=numLicencesMaintenance,proto3" json:"num_licences_maintenance,omitempty"`
	AvgMaintenanceUnitPrice   float64 `protobuf:"fixed64,12,opt,name=avg_maintenance_unit_price,json=avgMaintenanceUnitPrice,proto3" json:"avg_maintenance_unit_price,omitempty"`
	Scope                     string  `protobuf:"bytes,13,opt,name=scope,proto3" json:"scope,omitempty"`
	Comment                   string  `protobuf:"bytes,14,opt,name=comment,proto3" json:"comment,omitempty"`
	OrderingDate              string  `protobuf:"bytes,15,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	CorporateSourcingContract string  `protobuf:"bytes,16,opt,name=corporate_sourcing_contract,json=corporateSourcingContract,proto3" json:"corporate_sourcing_contract,omitempty"`
	SoftwareProvider          string  `protobuf:"bytes,17,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
	FileName                  string  `protobuf:"bytes,18,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileData                  []byte  `protobuf:"bytes,19,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
}

func (x *AggregatedRightsRequest) Reset() {
	*x = AggregatedRightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedRightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedRightsRequest) ProtoMessage() {}

func (x *AggregatedRightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedRightsRequest.ProtoReflect.Descriptor instead.
func (*AggregatedRightsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{24}
}

func (x *AggregatedRightsRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *AggregatedRightsRequest) GetAggregationID() int32 {
	if x != nil {
		return x.AggregationID
	}
	return 0
}

func (x *AggregatedRightsRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *AggregatedRightsRequest) GetNumLicensesAcquired() int32 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

func (x *AggregatedRightsRequest) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *AggregatedRightsRequest) GetStartOfMaintenance() string {
	if x != nil {
		return x.StartOfMaintenance
	}
	return ""
}

func (x *AggregatedRightsRequest) GetEndOfMaintenance() string {
	if x != nil {
		return x.EndOfMaintenance
	}
	return ""
}

func (x *AggregatedRightsRequest) GetLastPurchasedOrder() string {
	if x != nil {
		return x.LastPurchasedOrder
	}
	return ""
}

func (x *AggregatedRightsRequest) GetSupportNumber() string {
	if x != nil {
		return x.SupportNumber
	}
	return ""
}

func (x *AggregatedRightsRequest) GetMaintenanceProvider() string {
	if x != nil {
		return x.MaintenanceProvider
	}
	return ""
}

func (x *AggregatedRightsRequest) GetNumLicencesMaintenance() int32 {
	if x != nil {
		return x.NumLicencesMaintenance
	}
	return 0
}

func (x *AggregatedRightsRequest) GetAvgMaintenanceUnitPrice() float64 {
	if x != nil {
		return x.AvgMaintenanceUnitPrice
	}
	return 0
}

func (x *AggregatedRightsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AggregatedRightsRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AggregatedRightsRequest) GetOrderingDate() string {
	if x != nil {
		return x.OrderingDate
	}
	return ""
}

func (x *AggregatedRightsRequest) GetCorporateSourcingContract() string {
	if x != nil {
		return x.CorporateSourcingContract
	}
	return ""
}

func (x *AggregatedRightsRequest) GetSoftwareProvider() string {
	if x != nil {
		return x.SoftwareProvider
	}
	return ""
}

func (x *AggregatedRightsRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AggregatedRightsRequest) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

type AggregatedRightsView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                        int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AggregationName           string   `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	Sku                       string   `protobuf:"bytes,3,opt,name=sku,proto3" json:"sku,omitempty"`
	ProductEditor             string   `protobuf:"bytes,4,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	MetricName                string   `protobuf:"bytes,5,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	ProductNames              []string `protobuf:"bytes,6,rep,name=product_names,json=productNames,proto3" json:"product_names,omitempty"`
	Swidtags                  []string `protobuf:"bytes,7,rep,name=swidtags,proto3" json:"swidtags,omitempty"`
	NumLicensesAcquired       int32    `protobuf:"varint,8,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
	AvgUnitPrice              float64  `protobuf:"fixed64,9,opt,name=avg_unit_price,json=avgUnitPrice,proto3" json:"avg_unit_price,omitempty"`
	StartOfMaintenance        string   `protobuf:"bytes,10,opt,name=start_of_maintenance,json=startOfMaintenance,proto3" json:"start_of_maintenance,omitempty"`
	EndOfMaintenance          string   `protobuf:"bytes,11,opt,name=end_of_maintenance,json=endOfMaintenance,proto3" json:"end_of_maintenance,omitempty"`
	NumLicencesMaintenance    int32    `protobuf:"varint,12,opt,name=num_licences_maintenance,json=numLicencesMaintenance,proto3" json:"num_licences_maintenance,omitempty"`
	AvgMaintenanceUnitPrice   float64  `protobuf:"fixed64,13,opt,name=avg_maintenance_unit_price,json=avgMaintenanceUnitPrice,proto3" json:"avg_maintenance_unit_price,omitempty"`
	Scope                     string   `protobuf:"bytes,14,opt,name=scope,proto3" json:"scope,omitempty"`
	Comment                   string   `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
	IsIndividualRightExists   bool     `protobuf:"varint,16,opt,name=is_individual_right_exists,json=isIndividualRightExists,proto3" json:"is_individual_right_exists,omitempty"`
	TotalPurchaseCost         float64  `protobuf:"fixed64,17,opt,name=total_purchase_cost,json=totalPurchaseCost,proto3" json:"total_purchase_cost,omitempty"`
	TotalCost                 float64  `protobuf:"fixed64,18,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	TotalMaintenanceCost      float64  `protobuf:"fixed64,19,opt,name=total_maintenance_cost,json=totalMaintenanceCost,proto3" json:"total_maintenance_cost,omitempty"`
	LicenceUnderMaintenance   string   `protobuf:"bytes,20,opt,name=licence_under_maintenance,json=licenceUnderMaintenance,proto3" json:"licence_under_maintenance,omitempty"`
	OrderingDate              string   `protobuf:"bytes,21,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	CorporateSourcingContract string   `protobuf:"bytes,22,opt,name=corporate_sourcing_contract,json=corporateSourcingContract,proto3" json:"corporate_sourcing_contract,omitempty"`
	SoftwareProvider          string   `protobuf:"bytes,23,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
	LastPurchasedOrder        string   `protobuf:"bytes,24,opt,name=last_purchased_order,json=lastPurchasedOrder,proto3" json:"last_purchased_order,omitempty"`
	SupportNumber             string   `protobuf:"bytes,25,opt,name=support_number,json=supportNumber,proto3" json:"support_number,omitempty"`
	MaintenanceProvider       string   `protobuf:"bytes,26,opt,name=maintenance_provider,json=maintenanceProvider,proto3" json:"maintenance_provider,omitempty"`
	FileName                  string   `protobuf:"bytes,27,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *AggregatedRightsView) Reset() {
	*x = AggregatedRightsView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedRightsView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedRightsView) ProtoMessage() {}

func (x *AggregatedRightsView) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedRightsView.ProtoReflect.Descriptor instead.
func (*AggregatedRightsView) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{25}
}

func (x *AggregatedRightsView) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AggregatedRightsView) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *AggregatedRightsView) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *AggregatedRightsView) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *AggregatedRightsView) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *AggregatedRightsView) GetProductNames() []string {
	if x != nil {
		return x.ProductNames
	}
	return nil
}

func (x *AggregatedRightsView) GetSwidtags() []string {
	if x != nil {
		return x.Swidtags
	}
	return nil
}

func (x *AggregatedRightsView) GetNumLicensesAcquired() int32 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

func (x *AggregatedRightsView) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *AggregatedRightsView) GetStartOfMaintenance() string {
	if x != nil {
		return x.StartOfMaintenance
	}
	return ""
}

func (x *AggregatedRightsView) GetEndOfMaintenance() string {
	if x != nil {
		return x.EndOfMaintenance
	}
	return ""
}

func (x *AggregatedRightsView) GetNumLicencesMaintenance() int32 {
	if x != nil {
		return x.NumLicencesMaintenance
	}
	return 0
}

func (x *AggregatedRightsView) GetAvgMaintenanceUnitPrice() float64 {
	if x != nil {
		return x.AvgMaintenanceUnitPrice
	}
	return 0
}

func (x *AggregatedRightsView) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AggregatedRightsView) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AggregatedRightsView) GetIsIndividualRightExists() bool {
	if x != nil {
		return x.IsIndividualRightExists
	}
	return false
}

func (x *AggregatedRightsView) GetTotalPurchaseCost() float64 {
	if x != nil {
		return x.TotalPurchaseCost
	}
	return 0
}

func (x *AggregatedRightsView) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *AggregatedRightsView) GetTotalMaintenanceCost() float64 {
	if x != nil {
		return x.TotalMaintenanceCost
	}
	return 0
}

func (x *AggregatedRightsView) GetLicenceUnderMaintenance() string {
	if x != nil {
		return x.LicenceUnderMaintenance
	}
	return ""
}

func (x *AggregatedRightsView) GetOrderingDate() string {
	if x != nil {
		return x.OrderingDate
	}
	return ""
}

func (x *AggregatedRightsView) GetCorporateSourcingContract() string {
	if x != nil {
		return x.CorporateSourcingContract
	}
	return ""
}

func (x *AggregatedRightsView) GetSoftwareProvider() string {
	if x != nil {
		return x.SoftwareProvider
	}
	return ""
}

func (x *AggregatedRightsView) GetLastPurchasedOrder() string {
	if x != nil {
		return x.LastPurchasedOrder
	}
	return ""
}

func (x *AggregatedRightsView) GetSupportNumber() string {
	if x != nil {
		return x.SupportNumber
	}
	return ""
}

func (x *AggregatedRightsView) GetMaintenanceProvider() string {
	if x != nil {
		return x.MaintenanceProvider
	}
	return ""
}

func (x *AggregatedRightsView) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type AggregatedRightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AggregatedRightsResponse) Reset() {
	*x = AggregatedRightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedRightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedRightsResponse) ProtoMessage() {}

func (x *AggregatedRightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedRightsResponse.ProtoReflect.Descriptor instead.
func (*AggregatedRightsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{26}
}

func (x *AggregatedRightsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type OverviewProductQualityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *OverviewProductQualityRequest) Reset() {
	*x = OverviewProductQualityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewProductQualityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewProductQualityRequest) ProtoMessage() {}

func (x *OverviewProductQualityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewProductQualityRequest.ProtoReflect.Descriptor instead.
func (*OverviewProductQualityRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{27}
}

func (x *OverviewProductQualityRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type OverviewProductQualityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotAcquiredProducts           int32   `protobuf:"varint,1,opt,name=not_acquired_products,json=notAcquiredProducts,proto3" json:"not_acquired_products,omitempty"`
	NotDeployedProducts           int32   `protobuf:"varint,2,opt,name=not_deployed_products,json=notDeployedProducts,proto3" json:"not_deployed_products,omitempty"`
	NotAcquiredProductsPercentage float64 `protobuf:"fixed64,3,opt,name=not_acquired_products_percentage,json=notAcquiredProductsPercentage,proto3" json:"not_acquired_products_percentage,omitempty"`
	NotDeployedProductsPercentage float64 `protobuf:"fixed64,4,opt,name=not_deployed_products_percentage,json=notDeployedProductsPercentage,proto3" json:"not_deployed_products_percentage,omitempty"`
}

func (x *OverviewProductQualityResponse) Reset() {
	*x = OverviewProductQualityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewProductQualityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewProductQualityResponse) ProtoMessage() {}

func (x *OverviewProductQualityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewProductQualityResponse.ProtoReflect.Descriptor instead.
func (*OverviewProductQualityResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{28}
}

func (x *OverviewProductQualityResponse) GetNotAcquiredProducts() int32 {
	if x != nil {
		return x.NotAcquiredProducts
	}
	return 0
}

func (x *OverviewProductQualityResponse) GetNotDeployedProducts() int32 {
	if x != nil {
		return x.NotDeployedProducts
	}
	return 0
}

func (x *OverviewProductQualityResponse) GetNotAcquiredProductsPercentage() float64 {
	if x != nil {
		return x.NotAcquiredProductsPercentage
	}
	return 0
}

func (x *OverviewProductQualityResponse) GetNotDeployedProductsPercentage() float64 {
	if x != nil {
		return x.NotDeployedProductsPercentage
	}
	return 0
}

type ProductsPerEditorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ProductsPerEditorRequest) Reset() {
	*x = ProductsPerEditorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsPerEditorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsPerEditorRequest) ProtoMessage() {}

func (x *ProductsPerEditorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsPerEditorRequest.ProtoReflect.Descriptor instead.
func (*ProductsPerEditorRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{29}
}

func (x *ProductsPerEditorRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ProductsPerEditorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditorsProducts []*EditorProducts `protobuf:"bytes,1,rep,name=editors_products,json=editorsProducts,proto3" json:"editors_products,omitempty"`
}

func (x *ProductsPerEditorResponse) Reset() {
	*x = ProductsPerEditorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsPerEditorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsPerEditorResponse) ProtoMessage() {}

func (x *ProductsPerEditorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsPerEditorResponse.ProtoReflect.Descriptor instead.
func (*ProductsPerEditorResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{30}
}

func (x *ProductsPerEditorResponse) GetEditorsProducts() []*EditorProducts {
	if x != nil {
		return x.EditorsProducts
	}
	return nil
}

type GetRightsInfoByEditorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor string `protobuf:"bytes,1,opt,name=editor,proto3" json:"editor,omitempty"`
	Scope  string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetRightsInfoByEditorRequest) Reset() {
	*x = GetRightsInfoByEditorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRightsInfoByEditorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRightsInfoByEditorRequest) ProtoMessage() {}

func (x *GetRightsInfoByEditorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRightsInfoByEditorRequest.ProtoReflect.Descriptor instead.
func (*GetRightsInfoByEditorRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{31}
}

func (x *GetRightsInfoByEditorRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *GetRightsInfoByEditorRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetRightsInfoByEditorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditorRights []*RightsInfoByEditor `protobuf:"bytes,1,rep,name=editor_rights,json=editorRights,proto3" json:"editor_rights,omitempty"`
}

func (x *GetRightsInfoByEditorResponse) Reset() {
	*x = GetRightsInfoByEditorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRightsInfoByEditorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRightsInfoByEditorResponse) ProtoMessage() {}

func (x *GetRightsInfoByEditorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRightsInfoByEditorResponse.ProtoReflect.Descriptor instead.
func (*GetRightsInfoByEditorResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{32}
}

func (x *GetRightsInfoByEditorResponse) GetEditorRights() []*RightsInfoByEditor {
	if x != nil {
		return x.EditorRights
	}
	return nil
}

type RightsInfoByEditor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku                 string  `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Swidtag             string  `protobuf:"bytes,2,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	AggregationName     string  `protobuf:"bytes,3,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	MetricName          string  `protobuf:"bytes,4,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	AvgUnitPrice        float64 `protobuf:"fixed64,5,opt,name=avg_unit_price,json=avgUnitPrice,proto3" json:"avg_unit_price,omitempty"`
	NumLicensesAcquired int32   `protobuf:"varint,6,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
}

func (x *RightsInfoByEditor) Reset() {
	*x = RightsInfoByEditor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RightsInfoByEditor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightsInfoByEditor) ProtoMessage() {}

func (x *RightsInfoByEditor) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightsInfoByEditor.ProtoReflect.Descriptor instead.
func (*RightsInfoByEditor) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{33}
}

func (x *RightsInfoByEditor) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *RightsInfoByEditor) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *RightsInfoByEditor) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *RightsInfoByEditor) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *RightsInfoByEditor) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *RightsInfoByEditor) GetNumLicensesAcquired() int32 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

type EditorProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor      string `protobuf:"bytes,1,opt,name=editor,proto3" json:"editor,omitempty"`
	NumProducts int32  `protobuf:"varint,2,opt,name=num_products,json=numProducts,proto3" json:"num_products,omitempty"`
}

func (x *EditorProducts) Reset() {
	*x = EditorProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditorProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorProducts) ProtoMessage() {}

func (x *EditorProducts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorProducts.ProtoReflect.Descriptor instead.
func (*EditorProducts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{34}
}

func (x *EditorProducts) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *EditorProducts) GetNumProducts() int32 {
	if x != nil {
		return x.NumProducts
	}
	return 0
}

type AggregatedRightDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *AggregatedRightDetailsRequest) Reset() {
	*x = AggregatedRightDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedRightDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedRightDetailsRequest) ProtoMessage() {}

func (x *AggregatedRightDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedRightDetailsRequest.ProtoReflect.Descriptor instead.
func (*AggregatedRightDetailsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{35}
}

func (x *AggregatedRightDetailsRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AggregatedRightDetailsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type AggregatedRightDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editor          string   `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductNames    []string `protobuf:"bytes,4,rep,name=product_names,json=productNames,proto3" json:"product_names,omitempty"`
	NumApplications int32    `protobuf:"varint,5,opt,name=num_applications,json=numApplications,proto3" json:"num_applications,omitempty"`
	NumEquipments   int32    `protobuf:"varint,6,opt,name=num_equipments,json=numEquipments,proto3" json:"num_equipments,omitempty"`
	Products        []string `protobuf:"bytes,7,rep,name=products,proto3" json:"products,omitempty"`
	Versions        []string `protobuf:"bytes,8,rep,name=versions,proto3" json:"versions,omitempty"`
	DefinedMetrics  []string `protobuf:"bytes,9,rep,name=defined_metrics,json=definedMetrics,proto3" json:"defined_metrics,omitempty"`
}

func (x *AggregatedRightDetailsResponse) Reset() {
	*x = AggregatedRightDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedRightDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedRightDetailsResponse) ProtoMessage() {}

func (x *AggregatedRightDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedRightDetailsResponse.ProtoReflect.Descriptor instead.
func (*AggregatedRightDetailsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{36}
}

func (x *AggregatedRightDetailsResponse) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AggregatedRightDetailsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AggregatedRightDetailsResponse) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *AggregatedRightDetailsResponse) GetProductNames() []string {
	if x != nil {
		return x.ProductNames
	}
	return nil
}

func (x *AggregatedRightDetailsResponse) GetNumApplications() int32 {
	if x != nil {
		return x.NumApplications
	}
	return 0
}

func (x *AggregatedRightDetailsResponse) GetNumEquipments() int32 {
	if x != nil {
		return x.NumEquipments
	}
	return 0
}

func (x *AggregatedRightDetailsResponse) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *AggregatedRightDetailsResponse) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *AggregatedRightDetailsResponse) GetDefinedMetrics() []string {
	if x != nil {
		return x.DefinedMetrics
	}
	return nil
}

type ListProductAggregationViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32                                      `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32                                      `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       ListProductAggregationViewRequest_SortBy   `protobuf:"varint,3,opt,name=sort_by,json=sortBy,proto3,enum=optisam.products.v1.ListProductAggregationViewRequest_SortBy" json:"sort_by,omitempty"`
	SortOrder    SortOrder                                  `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams *ProductAggregationProductViewSearchParams `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes       []string                                   `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListProductAggregationViewRequest) Reset() {
	*x = ListProductAggregationViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductAggregationViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductAggregationViewRequest) ProtoMessage() {}

func (x *ListProductAggregationViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductAggregationViewRequest.ProtoReflect.Descriptor instead.
func (*ListProductAggregationViewRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{37}
}

func (x *ListProductAggregationViewRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListProductAggregationViewRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProductAggregationViewRequest) GetSortBy() ListProductAggregationViewRequest_SortBy {
	if x != nil {
		return x.SortBy
	}
	return ListProductAggregationViewRequest_aggregation_name
}

func (x *ListProductAggregationViewRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListProductAggregationViewRequest) GetSearchParams() *ProductAggregationProductViewSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListProductAggregationViewRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ProductAggregationProductViewSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag     *StringFilter `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name        *StringFilter `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editor      *StringFilter `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductName *StringFilter `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
}

func (x *ProductAggregationProductViewSearchParams) Reset() {
	*x = ProductAggregationProductViewSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregationProductViewSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregationProductViewSearchParams) ProtoMessage() {}

func (x *ProductAggregationProductViewSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregationProductViewSearchParams.ProtoReflect.Descriptor instead.
func (*ProductAggregationProductViewSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{38}
}

func (x *ProductAggregationProductViewSearchParams) GetSwidTag() *StringFilter {
	if x != nil {
		return x.SwidTag
	}
	return nil
}

func (x *ProductAggregationProductViewSearchParams) GetName() *StringFilter {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProductAggregationProductViewSearchParams) GetEditor() *StringFilter {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *ProductAggregationProductViewSearchParams) GetProductName() *StringFilter {
	if x != nil {
		return x.ProductName
	}
	return nil
}

type ListProductAggregationViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32                     `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Aggregations []*ProductAggregationView `protobuf:"bytes,2,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
}

func (x *ListProductAggregationViewResponse) Reset() {
	*x = ListProductAggregationViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductAggregationViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductAggregationViewResponse) ProtoMessage() {}

func (x *ListProductAggregationViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductAggregationViewResponse.ProtoReflect.Descriptor instead.
func (*ListProductAggregationViewResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{39}
}

func (x *ListProductAggregationViewResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListProductAggregationViewResponse) GetAggregations() []*ProductAggregationView {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

type ProductAggregationView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                      int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AggregationName         string   `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	Editor                  string   `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	NumApplications         int32    `protobuf:"varint,4,opt,name=num_applications,json=numApplications,proto3" json:"num_applications,omitempty"`
	NumEquipments           int32    `protobuf:"varint,5,opt,name=num_equipments,json=numEquipments,proto3" json:"num_equipments,omitempty"`
	TotalCost               float64  `protobuf:"fixed64,6,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	Swidtags                []string `protobuf:"bytes,7,rep,name=swidtags,proto3" json:"swidtags,omitempty"`
	IndividualProductExists bool     `protobuf:"varint,8,opt,name=individual_product_exists,json=individualProductExists,proto3" json:"individual_product_exists,omitempty"`
}

func (x *ProductAggregationView) Reset() {
	*x = ProductAggregationView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregationView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregationView) ProtoMessage() {}

func (x *ProductAggregationView) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregationView.ProtoReflect.Descriptor instead.
func (*ProductAggregationView) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{40}
}

func (x *ProductAggregationView) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProductAggregationView) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *ProductAggregationView) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductAggregationView) GetNumApplications() int32 {
	if x != nil {
		return x.NumApplications
	}
	return 0
}

func (x *ProductAggregationView) GetNumEquipments() int32 {
	if x != nil {
		return x.NumEquipments
	}
	return 0
}

func (x *ProductAggregationView) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *ProductAggregationView) GetSwidtags() []string {
	if x != nil {
		return x.Swidtags
	}
	return nil
}

func (x *ProductAggregationView) GetIndividualProductExists() bool {
	if x != nil {
		return x.IndividualProductExists
	}
	return false
}

type ProductAggRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag         string  `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Edition         string  `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`
	Editor          string  `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	Version         string  `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	NumApplications int32   `protobuf:"varint,6,opt,name=num_applications,json=numApplications,proto3" json:"num_applications,omitempty"`
	NumEquipments   int32   `protobuf:"varint,7,opt,name=num_equipments,json=numEquipments,proto3" json:"num_equipments,omitempty"`
	TotalCost       float64 `protobuf:"fixed64,8,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	AggregationName string  `protobuf:"bytes,9,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
}

func (x *ProductAggRecord) Reset() {
	*x = ProductAggRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggRecord) ProtoMessage() {}

func (x *ProductAggRecord) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggRecord.ProtoReflect.Descriptor instead.
func (*ProductAggRecord) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{41}
}

func (x *ProductAggRecord) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductAggRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAggRecord) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *ProductAggRecord) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductAggRecord) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProductAggRecord) GetNumApplications() int32 {
	if x != nil {
		return x.NumApplications
	}
	return 0
}

func (x *ProductAggRecord) GetNumEquipments() int32 {
	if x != nil {
		return x.NumEquipments
	}
	return 0
}

func (x *ProductAggRecord) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *ProductAggRecord) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

type ListDeployedAndAcquiredEditorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListDeployedAndAcquiredEditorsRequest) Reset() {
	*x = ListDeployedAndAcquiredEditorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeployedAndAcquiredEditorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeployedAndAcquiredEditorsRequest) ProtoMessage() {}

func (x *ListDeployedAndAcquiredEditorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeployedAndAcquiredEditorsRequest.ProtoReflect.Descriptor instead.
func (*ListDeployedAndAcquiredEditorsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{42}
}

func (x *ListDeployedAndAcquiredEditorsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListEditorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListEditorsRequest) Reset() {
	*x = ListEditorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEditorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEditorsRequest) ProtoMessage() {}

func (x *ListEditorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEditorsRequest.ProtoReflect.Descriptor instead.
func (*ListEditorsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{43}
}

func (x *ListEditorsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListEditorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editors []string `protobuf:"bytes,1,rep,name=editors,proto3" json:"editors,omitempty"`
}

func (x *ListEditorsResponse) Reset() {
	*x = ListEditorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEditorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEditorsResponse) ProtoMessage() {}

func (x *ListEditorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEditorsResponse.ProtoReflect.Descriptor instead.
func (*ListEditorsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{44}
}

func (x *ListEditorsResponse) GetEditors() []string {
	if x != nil {
		return x.Editors
	}
	return nil
}

type ListEditorProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor string   `protobuf:"bytes,1,opt,name=editor,proto3" json:"editor,omitempty"`
	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListEditorProductsRequest) Reset() {
	*x = ListEditorProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEditorProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEditorProductsRequest) ProtoMessage() {}

func (x *ListEditorProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEditorProductsRequest.ProtoReflect.Descriptor instead.
func (*ListEditorProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{45}
}

func (x *ListEditorProductsRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ListEditorProductsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListEditorProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *ListEditorProductsResponse) Reset() {
	*x = ListEditorProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEditorProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEditorProductsResponse) ProtoMessage() {}

func (x *ListEditorProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEditorProductsResponse.ProtoReflect.Descriptor instead.
func (*ListEditorProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{46}
}

func (x *ListEditorProductsResponse) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type Editor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Editor) Reset() {
	*x = Editor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Editor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Editor) ProtoMessage() {}

func (x *Editor) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Editor.ProtoReflect.Descriptor instead.
func (*Editor) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{47}
}

func (x *Editor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag           string  `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version           string  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Category          string  `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Edition           string  `protobuf:"bytes,5,opt,name=edition,proto3" json:"edition,omitempty"`
	Editor            string  `protobuf:"bytes,6,opt,name=editor,proto3" json:"editor,omitempty"`
	TotalCost         float64 `protobuf:"fixed64,7,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	NumOfApplications int32   `protobuf:"varint,8,opt,name=numOfApplications,proto3" json:"numOfApplications,omitempty"`
	NumofEquipments   int32   `protobuf:"varint,9,opt,name=numofEquipments,proto3" json:"numofEquipments,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{48}
}

func (x *Product) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Product) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Product) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *Product) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *Product) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *Product) GetNumOfApplications() int32 {
	if x != nil {
		return x.NumOfApplications
	}
	return 0
}

func (x *Product) GetNumofEquipments() int32 {
	if x != nil {
		return x.NumofEquipments
	}
	return 0
}

type ListProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32      `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Products     []*Product `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *ListProductsResponse) Reset() {
	*x = ListProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductsResponse) ProtoMessage() {}

func (x *ListProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductsResponse.ProtoReflect.Descriptor instead.
func (*ListProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{49}
}

func (x *ListProductsResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListProductsResponse) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type ListProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32                `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       string               `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder    SortOrder            `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams *ProductSearchParams `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes       []string             `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListProductsRequest) Reset() {
	*x = ListProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductsRequest) ProtoMessage() {}

func (x *ListProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductsRequest.ProtoReflect.Descriptor instead.
func (*ListProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{50}
}

func (x *ListProductsRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListProductsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProductsRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListProductsRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListProductsRequest) GetSearchParams() *ProductSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListProductsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ProductSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag       *StringFilter `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name          *StringFilter `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editor        *StringFilter `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	ApplicationId *StringFilter `protobuf:"bytes,4,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	InstanceId    *StringFilter `protobuf:"bytes,5,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	EquipmentId   *StringFilter `protobuf:"bytes,6,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
}

func (x *ProductSearchParams) Reset() {
	*x = ProductSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSearchParams) ProtoMessage() {}

func (x *ProductSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSearchParams.ProtoReflect.Descriptor instead.
func (*ProductSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{51}
}

func (x *ProductSearchParams) GetSwidTag() *StringFilter {
	if x != nil {
		return x.SwidTag
	}
	return nil
}

func (x *ProductSearchParams) GetName() *StringFilter {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProductSearchParams) GetEditor() *StringFilter {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *ProductSearchParams) GetApplicationId() *StringFilter {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

func (x *ProductSearchParams) GetInstanceId() *StringFilter {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *ProductSearchParams) GetEquipmentId() *StringFilter {
	if x != nil {
		return x.EquipmentId
	}
	return nil
}

type ProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag string `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ProductRequest) Reset() {
	*x = ProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRequest) ProtoMessage() {}

func (x *ProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRequest.ProtoReflect.Descriptor instead.
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{52}
}

func (x *ProductRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag         string   `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	ProductName     string   `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Editor          string   `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	Version         string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	NumApplications int32    `protobuf:"varint,5,opt,name=num_applications,json=numApplications,proto3" json:"num_applications,omitempty"`
	NumEquipments   int32    `protobuf:"varint,6,opt,name=num_equipments,json=numEquipments,proto3" json:"num_equipments,omitempty"`
	DefinedMetrics  []string `protobuf:"bytes,7,rep,name=defined_metrics,json=definedMetrics,proto3" json:"defined_metrics,omitempty"`
}

func (x *ProductResponse) Reset() {
	*x = ProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductResponse) ProtoMessage() {}

func (x *ProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductResponse.ProtoReflect.Descriptor instead.
func (*ProductResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{53}
}

func (x *ProductResponse) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductResponse) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductResponse) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProductResponse) GetNumApplications() int32 {
	if x != nil {
		return x.NumApplications
	}
	return 0
}

func (x *ProductResponse) GetNumEquipments() int32 {
	if x != nil {
		return x.NumEquipments
	}
	return 0
}

func (x *ProductResponse) GetDefinedMetrics() []string {
	if x != nil {
		return x.DefinedMetrics
	}
	return nil
}

type ProductOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOfOptions int32         `protobuf:"varint,1,opt,name=numOfOptions,proto3" json:"numOfOptions,omitempty"`
	Optioninfo   []*OptionInfo `protobuf:"bytes,2,rep,name=optioninfo,proto3" json:"optioninfo,omitempty"`
}

func (x *ProductOptionsResponse) Reset() {
	*x = ProductOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductOptionsResponse) ProtoMessage() {}

func (x *ProductOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductOptionsResponse.ProtoReflect.Descriptor instead.
func (*ProductOptionsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{54}
}

func (x *ProductOptionsResponse) GetNumOfOptions() int32 {
	if x != nil {
		return x.NumOfOptions
	}
	return 0
}

func (x *ProductOptionsResponse) GetOptioninfo() []*OptionInfo {
	if x != nil {
		return x.Optioninfo
	}
	return nil
}

type OptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag string `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Edition string `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`
	Editor  string `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *OptionInfo) Reset() {
	*x = OptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionInfo) ProtoMessage() {}

func (x *OptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionInfo.ProtoReflect.Descriptor instead.
func (*OptionInfo) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{55}
}

func (x *OptionInfo) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *OptionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OptionInfo) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *OptionInfo) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *OptionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ProductExpand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag         string  `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Edition         string  `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`
	Editor          string  `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	Version         string  `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	NumApplications int32   `protobuf:"varint,6,opt,name=num_applications,json=numApplications,proto3" json:"num_applications,omitempty"`
	NumEquipments   int32   `protobuf:"varint,7,opt,name=num_equipments,json=numEquipments,proto3" json:"num_equipments,omitempty"`
	TotalCost       float64 `protobuf:"fixed64,8,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
}

func (x *ProductExpand) Reset() {
	*x = ProductExpand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductExpand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductExpand) ProtoMessage() {}

func (x *ProductExpand) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductExpand.ProtoReflect.Descriptor instead.
func (*ProductExpand) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{56}
}

func (x *ProductExpand) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductExpand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductExpand) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *ProductExpand) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductExpand) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProductExpand) GetNumApplications() int32 {
	if x != nil {
		return x.NumApplications
	}
	return 0
}

func (x *ProductExpand) GetNumEquipments() int32 {
	if x != nil {
		return x.NumEquipments
	}
	return 0
}

func (x *ProductExpand) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

type StringFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilteringOrder       int32    `protobuf:"varint,1,opt,name=filteringOrder,proto3" json:"filteringOrder,omitempty"`
	Filteringkey         string   `protobuf:"bytes,2,opt,name=filteringkey,proto3" json:"filteringkey,omitempty"`
	FilterType           bool     `protobuf:"varint,3,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`
	FilteringkeyMultiple []string `protobuf:"bytes,4,rep,name=filteringkey_multiple,json=filteringkeyMultiple,proto3" json:"filteringkey_multiple,omitempty"`
}

func (x *StringFilter) Reset() {
	*x = StringFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFilter) ProtoMessage() {}

func (x *StringFilter) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFilter.ProtoReflect.Descriptor instead.
func (*StringFilter) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{57}
}

func (x *StringFilter) GetFilteringOrder() int32 {
	if x != nil {
		return x.FilteringOrder
	}
	return 0
}

func (x *StringFilter) GetFilteringkey() string {
	if x != nil {
		return x.Filteringkey
	}
	return ""
}

func (x *StringFilter) GetFilterType() bool {
	if x != nil {
		return x.FilterType
	}
	return false
}

func (x *StringFilter) GetFilteringkeyMultiple() []string {
	if x != nil {
		return x.FilteringkeyMultiple
	}
	return nil
}

type UpsertProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag  string `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Edition  string `protobuf:"bytes,4,opt,name=edition,proto3" json:"edition,omitempty"`
	Editor   string `protobuf:"bytes,5,opt,name=editor,proto3" json:"editor,omitempty"`
	Version  string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	OptionOf string `protobuf:"bytes,7,opt,name=optionOf,proto3" json:"optionOf,omitempty"`
	// SCOPE BASED CHANGES
	Scope        string                           `protobuf:"bytes,8,opt,name=scope,proto3" json:"scope,omitempty"`
	Applications *UpsertProductRequestApplication `protobuf:"bytes,9,opt,name=applications,proto3" json:"applications,omitempty"`
	Equipments   *UpsertProductRequestEquipment   `protobuf:"bytes,10,opt,name=equipments,proto3" json:"equipments,omitempty"`
}

func (x *UpsertProductRequest) Reset() {
	*x = UpsertProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProductRequest) ProtoMessage() {}

func (x *UpsertProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProductRequest.ProtoReflect.Descriptor instead.
func (*UpsertProductRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{58}
}

func (x *UpsertProductRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *UpsertProductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertProductRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UpsertProductRequest) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *UpsertProductRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *UpsertProductRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpsertProductRequest) GetOptionOf() string {
	if x != nil {
		return x.OptionOf
	}
	return ""
}

func (x *UpsertProductRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpsertProductRequest) GetApplications() *UpsertProductRequestApplication {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *UpsertProductRequest) GetEquipments() *UpsertProductRequestEquipment {
	if x != nil {
		return x.Equipments
	}
	return nil
}

type UpsertProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpsertProductResponse) Reset() {
	*x = UpsertProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProductResponse) ProtoMessage() {}

func (x *UpsertProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProductResponse.ProtoReflect.Descriptor instead.
func (*UpsertProductResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{59}
}

func (x *UpsertProductResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ComplianceAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ComplianceAlertRequest) Reset() {
	*x = ComplianceAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceAlertRequest) ProtoMessage() {}

func (x *ComplianceAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceAlertRequest.ProtoReflect.Descriptor instead.
func (*ComplianceAlertRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{60}
}

func (x *ComplianceAlertRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ComplianceAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CounterfeitingPercentage float64 `protobuf:"fixed64,1,opt,name=counterfeiting_percentage,json=counterfeitingPercentage,proto3" json:"counterfeiting_percentage,omitempty"`
	OverdeploymentPercentage float64 `protobuf:"fixed64,2,opt,name=overdeployment_percentage,json=overdeploymentPercentage,proto3" json:"overdeployment_percentage,omitempty"`
}

func (x *ComplianceAlertResponse) Reset() {
	*x = ComplianceAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceAlertResponse) ProtoMessage() {}

func (x *ComplianceAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceAlertResponse.ProtoReflect.Descriptor instead.
func (*ComplianceAlertResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{61}
}

func (x *ComplianceAlertResponse) GetCounterfeitingPercentage() float64 {
	if x != nil {
		return x.CounterfeitingPercentage
	}
	return 0
}

func (x *ComplianceAlertResponse) GetOverdeploymentPercentage() float64 {
	if x != nil {
		return x.OverdeploymentPercentage
	}
	return 0
}

type OverdeployedProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Editor string `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
}

func (x *OverdeployedProductsRequest) Reset() {
	*x = OverdeployedProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverdeployedProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverdeployedProductsRequest) ProtoMessage() {}

func (x *OverdeployedProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverdeployedProductsRequest.ProtoReflect.Descriptor instead.
func (*OverdeployedProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{62}
}

func (x *OverdeployedProductsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *OverdeployedProductsRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

type OverdeployedProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductsLicenses []*ProductsLicenses `protobuf:"bytes,1,rep,name=products_licenses,json=productsLicenses,proto3" json:"products_licenses,omitempty"`
	ProductsCosts    []*ProductsCosts    `protobuf:"bytes,2,rep,name=products_costs,json=productsCosts,proto3" json:"products_costs,omitempty"`
}

func (x *OverdeployedProductsResponse) Reset() {
	*x = OverdeployedProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverdeployedProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverdeployedProductsResponse) ProtoMessage() {}

func (x *OverdeployedProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverdeployedProductsResponse.ProtoReflect.Descriptor instead.
func (*OverdeployedProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{63}
}

func (x *OverdeployedProductsResponse) GetProductsLicenses() []*ProductsLicenses {
	if x != nil {
		return x.ProductsLicenses
	}
	return nil
}

func (x *OverdeployedProductsResponse) GetProductsCosts() []*ProductsCosts {
	if x != nil {
		return x.ProductsCosts
	}
	return nil
}

type DashboardQualityProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DashboardQualityProductsRequest) Reset() {
	*x = DashboardQualityProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardQualityProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardQualityProductsRequest) ProtoMessage() {}

func (x *DashboardQualityProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardQualityProductsRequest.ProtoReflect.Descriptor instead.
func (*DashboardQualityProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{64}
}

func (x *DashboardQualityProductsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DashboardQualityProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductsNotDeployed []*DashboardQualityProducts `protobuf:"bytes,1,rep,name=products_not_deployed,json=productsNotDeployed,proto3" json:"products_not_deployed,omitempty"`
	ProductsNotAcquired []*DashboardQualityProducts `protobuf:"bytes,2,rep,name=products_not_acquired,json=productsNotAcquired,proto3" json:"products_not_acquired,omitempty"`
}

func (x *DashboardQualityProductsResponse) Reset() {
	*x = DashboardQualityProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardQualityProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardQualityProductsResponse) ProtoMessage() {}

func (x *DashboardQualityProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardQualityProductsResponse.ProtoReflect.Descriptor instead.
func (*DashboardQualityProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{65}
}

func (x *DashboardQualityProductsResponse) GetProductsNotDeployed() []*DashboardQualityProducts {
	if x != nil {
		return x.ProductsNotDeployed
	}
	return nil
}

func (x *DashboardQualityProductsResponse) GetProductsNotAcquired() []*DashboardQualityProducts {
	if x != nil {
		return x.ProductsNotAcquired
	}
	return nil
}

type DashboardQualityProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag     string `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	ProductName string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Editor      string `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	Version     string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DashboardQualityProducts) Reset() {
	*x = DashboardQualityProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardQualityProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardQualityProducts) ProtoMessage() {}

func (x *DashboardQualityProducts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardQualityProducts.ProtoReflect.Descriptor instead.
func (*DashboardQualityProducts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{66}
}

func (x *DashboardQualityProducts) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *DashboardQualityProducts) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *DashboardQualityProducts) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *DashboardQualityProducts) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ProductsLicenses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag             string `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	ProductName         string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	AggregationName     string `protobuf:"bytes,3,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	NumLicensesAcquired int64  `protobuf:"varint,4,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
	NumLicensesComputed int64  `protobuf:"varint,5,opt,name=num_licenses_computed,json=numLicensesComputed,proto3" json:"num_licenses_computed,omitempty"`
	Delta               int64  `protobuf:"varint,6,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *ProductsLicenses) Reset() {
	*x = ProductsLicenses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsLicenses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsLicenses) ProtoMessage() {}

func (x *ProductsLicenses) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsLicenses.ProtoReflect.Descriptor instead.
func (*ProductsLicenses) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{67}
}

func (x *ProductsLicenses) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductsLicenses) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductsLicenses) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *ProductsLicenses) GetNumLicensesAcquired() int64 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

func (x *ProductsLicenses) GetNumLicensesComputed() int64 {
	if x != nil {
		return x.NumLicensesComputed
	}
	return 0
}

func (x *ProductsLicenses) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type ProductsCosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag              string  `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	ProductName          string  `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	AggregationName      string  `protobuf:"bytes,3,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	LicensesAcquiredCost float64 `protobuf:"fixed64,4,opt,name=licenses_acquired_cost,json=licensesAcquiredCost,proto3" json:"licenses_acquired_cost,omitempty"`
	LicensesComputedCost float64 `protobuf:"fixed64,5,opt,name=licenses_computed_cost,json=licensesComputedCost,proto3" json:"licenses_computed_cost,omitempty"`
	DeltaCost            float64 `protobuf:"fixed64,6,opt,name=delta_cost,json=deltaCost,proto3" json:"delta_cost,omitempty"`
}

func (x *ProductsCosts) Reset() {
	*x = ProductsCosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsCosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsCosts) ProtoMessage() {}

func (x *ProductsCosts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsCosts.ProtoReflect.Descriptor instead.
func (*ProductsCosts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{68}
}

func (x *ProductsCosts) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductsCosts) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductsCosts) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *ProductsCosts) GetLicensesAcquiredCost() float64 {
	if x != nil {
		return x.LicensesAcquiredCost
	}
	return 0
}

func (x *ProductsCosts) GetLicensesComputedCost() float64 {
	if x != nil {
		return x.LicensesComputedCost
	}
	return 0
}

func (x *ProductsCosts) GetDeltaCost() float64 {
	if x != nil {
		return x.DeltaCost
	}
	return 0
}

type ProductsPerMetricTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ProductsPerMetricTypeRequest) Reset() {
	*x = ProductsPerMetricTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsPerMetricTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsPerMetricTypeRequest) ProtoMessage() {}

func (x *ProductsPerMetricTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsPerMetricTypeRequest.ProtoReflect.Descriptor instead.
func (*ProductsPerMetricTypeRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{69}
}

func (x *ProductsPerMetricTypeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type CounterfeitedProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Editor string `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
}

func (x *CounterfeitedProductsRequest) Reset() {
	*x = CounterfeitedProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterfeitedProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterfeitedProductsRequest) ProtoMessage() {}

func (x *CounterfeitedProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterfeitedProductsRequest.ProtoReflect.Descriptor instead.
func (*CounterfeitedProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{70}
}

func (x *CounterfeitedProductsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *CounterfeitedProductsRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

type CounterfeitedProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductsLicenses []*ProductsLicenses `protobuf:"bytes,1,rep,name=products_licenses,json=productsLicenses,proto3" json:"products_licenses,omitempty"`
	ProductsCosts    []*ProductsCosts    `protobuf:"bytes,2,rep,name=products_costs,json=productsCosts,proto3" json:"products_costs,omitempty"`
}

func (x *CounterfeitedProductsResponse) Reset() {
	*x = CounterfeitedProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterfeitedProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterfeitedProductsResponse) ProtoMessage() {}

func (x *CounterfeitedProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterfeitedProductsResponse.ProtoReflect.Descriptor instead.
func (*CounterfeitedProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{71}
}

func (x *CounterfeitedProductsResponse) GetProductsLicenses() []*ProductsLicenses {
	if x != nil {
		return x.ProductsLicenses
	}
	return nil
}

func (x *CounterfeitedProductsResponse) GetProductsCosts() []*ProductsCosts {
	if x != nil {
		return x.ProductsCosts
	}
	return nil
}

type ProductsPerMetricTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsProducts []*MetricProducts `protobuf:"bytes,1,rep,name=metrics_products,json=metricsProducts,proto3" json:"metrics_products,omitempty"`
}

func (x *ProductsPerMetricTypeResponse) Reset() {
	*x = ProductsPerMetricTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsPerMetricTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsPerMetricTypeResponse) ProtoMessage() {}

func (x *ProductsPerMetricTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsPerMetricTypeResponse.ProtoReflect.Descriptor instead.
func (*ProductsPerMetricTypeResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{72}
}

func (x *ProductsPerMetricTypeResponse) GetMetricsProducts() []*MetricProducts {
	if x != nil {
		return x.MetricsProducts
	}
	return nil
}

type MetricProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName  string `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	NumProducts int32  `protobuf:"varint,2,opt,name=num_products,json=numProducts,proto3" json:"num_products,omitempty"`
}

func (x *MetricProducts) Reset() {
	*x = MetricProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricProducts) ProtoMessage() {}

func (x *MetricProducts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricProducts.ProtoReflect.Descriptor instead.
func (*MetricProducts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{73}
}

func (x *MetricProducts) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *MetricProducts) GetNumProducts() int32 {
	if x != nil {
		return x.NumProducts
	}
	return 0
}

type DashboardOverviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DashboardOverviewRequest) Reset() {
	*x = DashboardOverviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardOverviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardOverviewRequest) ProtoMessage() {}

func (x *DashboardOverviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardOverviewRequest.ProtoReflect.Descriptor instead.
func (*DashboardOverviewRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{74}
}

func (x *DashboardOverviewRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DashboardOverviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalLicenseCost          float64 `protobuf:"fixed64,1,opt,name=total_license_cost,json=totalLicenseCost,proto3" json:"total_license_cost,omitempty"`
	TotalMaintenanceCost      float64 `protobuf:"fixed64,2,opt,name=total_maintenance_cost,json=totalMaintenanceCost,proto3" json:"total_maintenance_cost,omitempty"`
	NumEditors                int32   `protobuf:"varint,3,opt,name=num_editors,json=numEditors,proto3" json:"num_editors,omitempty"`
	NumProducts               int32   `protobuf:"varint,4,opt,name=num_products,json=numProducts,proto3" json:"num_products,omitempty"`
	TotalCounterfeitingAmount float64 `protobuf:"fixed64,5,opt,name=total_counterfeiting_amount,json=totalCounterfeitingAmount,proto3" json:"total_counterfeiting_amount,omitempty"`
	TotalUnderusageAmount     float64 `protobuf:"fixed64,6,opt,name=total_underusage_amount,json=totalUnderusageAmount,proto3" json:"total_underusage_amount,omitempty"`
}

func (x *DashboardOverviewResponse) Reset() {
	*x = DashboardOverviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardOverviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardOverviewResponse) ProtoMessage() {}

func (x *DashboardOverviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardOverviewResponse.ProtoReflect.Descriptor instead.
func (*DashboardOverviewResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{75}
}

func (x *DashboardOverviewResponse) GetTotalLicenseCost() float64 {
	if x != nil {
		return x.TotalLicenseCost
	}
	return 0
}

func (x *DashboardOverviewResponse) GetTotalMaintenanceCost() float64 {
	if x != nil {
		return x.TotalMaintenanceCost
	}
	return 0
}

func (x *DashboardOverviewResponse) GetNumEditors() int32 {
	if x != nil {
		return x.NumEditors
	}
	return 0
}

func (x *DashboardOverviewResponse) GetNumProducts() int32 {
	if x != nil {
		return x.NumProducts
	}
	return 0
}

func (x *DashboardOverviewResponse) GetTotalCounterfeitingAmount() float64 {
	if x != nil {
		return x.TotalCounterfeitingAmount
	}
	return 0
}

func (x *DashboardOverviewResponse) GetTotalUnderusageAmount() float64 {
	if x != nil {
		return x.TotalUnderusageAmount
	}
	return 0
}

type UpsertAcqRightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku                       string  `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Swidtag                   string  `protobuf:"bytes,2,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	ProductName               string  `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductEditor             string  `protobuf:"bytes,4,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	MetricType                string  `protobuf:"bytes,5,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	NumLicensesAcquired       int32   `protobuf:"varint,6,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
	AvgUnitPrice              float64 `protobuf:"fixed64,7,opt,name=avg_unit_price,json=avgUnitPrice,proto3" json:"avg_unit_price,omitempty"`
	AvgMaintenanceUnitPrice   float64 `protobuf:"fixed64,8,opt,name=avg_maintenance_unit_price,json=avgMaintenanceUnitPrice,proto3" json:"avg_maintenance_unit_price,omitempty"`
	TotalPurchaseCost         float64 `protobuf:"fixed64,9,opt,name=total_purchase_cost,json=totalPurchaseCost,proto3" json:"total_purchase_cost,omitempty"`
	TotalMaintenanceCost      float64 `protobuf:"fixed64,10,opt,name=total_maintenance_cost,json=totalMaintenanceCost,proto3" json:"total_maintenance_cost,omitempty"`
	TotalCost                 float64 `protobuf:"fixed64,11,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	Scope                     string  `protobuf:"bytes,12,opt,name=scope,proto3" json:"scope,omitempty"`
	StartOfMaintenance        string  `protobuf:"bytes,13,opt,name=start_of_maintenance,json=startOfMaintenance,proto3" json:"start_of_maintenance,omitempty"`
	EndOfMaintenance          string  `protobuf:"bytes,14,opt,name=end_of_maintenance,json=endOfMaintenance,proto3" json:"end_of_maintenance,omitempty"`
	NumLicencesMaintainance   int32   `protobuf:"varint,15,opt,name=num_licences_maintainance,json=numLicencesMaintainance,proto3" json:"num_licences_maintainance,omitempty"`
	Version                   string  `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
	CorporateSourcingContract string  `protobuf:"bytes,17,opt,name=corporate_sourcing_contract,json=corporateSourcingContract,proto3" json:"corporate_sourcing_contract,omitempty"`
	OrderingDate              string  `protobuf:"bytes,18,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	SoftwareProvider          string  `protobuf:"bytes,19,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
	MaintenanceProvider       string  `protobuf:"bytes,20,opt,name=maintenance_provider,json=maintenanceProvider,proto3" json:"maintenance_provider,omitempty"`
	LastPurchasedOrder        string  `protobuf:"bytes,21,opt,name=last_purchased_order,json=lastPurchasedOrder,proto3" json:"last_purchased_order,omitempty"`
	SupportNumber             string  `protobuf:"bytes,22,opt,name=support_number,json=supportNumber,proto3" json:"support_number,omitempty"`
}

func (x *UpsertAcqRightsRequest) Reset() {
	*x = UpsertAcqRightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAcqRightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAcqRightsRequest) ProtoMessage() {}

func (x *UpsertAcqRightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAcqRightsRequest.ProtoReflect.Descriptor instead.
func (*UpsertAcqRightsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{76}
}

func (x *UpsertAcqRightsRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetNumLicensesAcquired() int32 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetAvgMaintenanceUnitPrice() float64 {
	if x != nil {
		return x.AvgMaintenanceUnitPrice
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetTotalPurchaseCost() float64 {
	if x != nil {
		return x.TotalPurchaseCost
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetTotalMaintenanceCost() float64 {
	if x != nil {
		return x.TotalMaintenanceCost
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetStartOfMaintenance() string {
	if x != nil {
		return x.StartOfMaintenance
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetEndOfMaintenance() string {
	if x != nil {
		return x.EndOfMaintenance
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetNumLicencesMaintainance() int32 {
	if x != nil {
		return x.NumLicencesMaintainance
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetCorporateSourcingContract() string {
	if x != nil {
		return x.CorporateSourcingContract
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetOrderingDate() string {
	if x != nil {
		return x.OrderingDate
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetSoftwareProvider() string {
	if x != nil {
		return x.SoftwareProvider
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetMaintenanceProvider() string {
	if x != nil {
		return x.MaintenanceProvider
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetLastPurchasedOrder() string {
	if x != nil {
		return x.LastPurchasedOrder
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetSupportNumber() string {
	if x != nil {
		return x.SupportNumber
	}
	return ""
}

type UpsertAcqRightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpsertAcqRightsResponse) Reset() {
	*x = UpsertAcqRightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAcqRightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAcqRightsResponse) ProtoMessage() {}

func (x *UpsertAcqRightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAcqRightsResponse.ProtoReflect.Descriptor instead.
func (*UpsertAcqRightsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{77}
}

func (x *UpsertAcqRightsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListAcqRightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32                       `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32                       `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       ListAcqRightsRequest_SortBy `protobuf:"varint,3,opt,name=sort_by,json=sortBy,proto3,enum=optisam.products.v1.ListAcqRightsRequest_SortBy" json:"sort_by,omitempty"`
	SortOrder    SortOrder                   `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"` //[(validate.rules).enum.defined_only = true];
	SearchParams *AcqRightsSearchParams      `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes       []string                    `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListAcqRightsRequest) Reset() {
	*x = ListAcqRightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsRequest) ProtoMessage() {}

func (x *ListAcqRightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsRequest.ProtoReflect.Descriptor instead.
func (*ListAcqRightsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{78}
}

func (x *ListAcqRightsRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListAcqRightsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAcqRightsRequest) GetSortBy() ListAcqRightsRequest_SortBy {
	if x != nil {
		return x.SortBy
	}
	return ListAcqRightsRequest_SKU
}

func (x *ListAcqRightsRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListAcqRightsRequest) GetSearchParams() *AcqRightsSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListAcqRightsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type AcqRightsSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag          *StringFilter `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	SKU              *StringFilter `protobuf:"bytes,2,opt,name=SKU,proto3" json:"SKU,omitempty"`
	Editor           *StringFilter `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductName      *StringFilter `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	Metric           *StringFilter `protobuf:"bytes,5,opt,name=metric,proto3" json:"metric,omitempty"`
	SoftwareProvider *StringFilter `protobuf:"bytes,6,opt,name=softwareProvider,proto3" json:"softwareProvider,omitempty"`
	OrderingDate     *StringFilter `protobuf:"bytes,7,opt,name=orderingDate,proto3" json:"orderingDate,omitempty"` //
}

func (x *AcqRightsSearchParams) Reset() {
	*x = AcqRightsSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcqRightsSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcqRightsSearchParams) ProtoMessage() {}

func (x *AcqRightsSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcqRightsSearchParams.ProtoReflect.Descriptor instead.
func (*AcqRightsSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{79}
}

func (x *AcqRightsSearchParams) GetSwidTag() *StringFilter {
	if x != nil {
		return x.SwidTag
	}
	return nil
}

func (x *AcqRightsSearchParams) GetSKU() *StringFilter {
	if x != nil {
		return x.SKU
	}
	return nil
}

func (x *AcqRightsSearchParams) GetEditor() *StringFilter {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *AcqRightsSearchParams) GetProductName() *StringFilter {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *AcqRightsSearchParams) GetMetric() *StringFilter {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *AcqRightsSearchParams) GetSoftwareProvider() *StringFilter {
	if x != nil {
		return x.SoftwareProvider
	}
	return nil
}

func (x *AcqRightsSearchParams) GetOrderingDate() *StringFilter {
	if x != nil {
		return x.OrderingDate
	}
	return nil
}

type ListAcqRightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords   int32        `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	AcquiredRights []*AcqRights `protobuf:"bytes,2,rep,name=acquired_rights,json=acquiredRights,proto3" json:"acquired_rights,omitempty"`
}

func (x *ListAcqRightsResponse) Reset() {
	*x = ListAcqRightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsResponse) ProtoMessage() {}

func (x *ListAcqRightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsResponse.ProtoReflect.Descriptor instead.
func (*ListAcqRightsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{80}
}

func (x *ListAcqRightsResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListAcqRightsResponse) GetAcquiredRights() []*AcqRights {
	if x != nil {
		return x.AcquiredRights
	}
	return nil
}

type AcqRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SKU                            string               `protobuf:"bytes,1,opt,name=SKU,proto3" json:"SKU,omitempty"`
	SwidTag                        string               `protobuf:"bytes,2,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	ProductName                    string               `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Editor                         string               `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	Metric                         string               `protobuf:"bytes,5,opt,name=metric,proto3" json:"metric,omitempty"`
	AcquiredLicensesNumber         int32                `protobuf:"varint,6,opt,name=acquired_licenses_number,json=acquiredLicensesNumber,proto3" json:"acquired_licenses_number,omitempty"`
	AvgLicenesUnitPrice            float64              `protobuf:"fixed64,7,opt,name=avg_licenes_unit_price,json=avgLicenesUnitPrice,proto3" json:"avg_licenes_unit_price,omitempty"`
	AvgMaintenanceUnitPrice        float64              `protobuf:"fixed64,8,opt,name=avg_maintenance_unit_price,json=avgMaintenanceUnitPrice,proto3" json:"avg_maintenance_unit_price,omitempty"`
	TotalPurchaseCost              float64              `protobuf:"fixed64,9,opt,name=total_purchase_cost,json=totalPurchaseCost,proto3" json:"total_purchase_cost,omitempty"`
	TotalMaintenanceCost           float64              `protobuf:"fixed64,10,opt,name=total_maintenance_cost,json=totalMaintenanceCost,proto3" json:"total_maintenance_cost,omitempty"`
	TotalCost                      float64              `protobuf:"fixed64,11,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	StartOfMaintenance             *timestamp.Timestamp `protobuf:"bytes,12,opt,name=start_of_maintenance,json=startOfMaintenance,proto3" json:"start_of_maintenance,omitempty"`
	EndOfMaintenance               *timestamp.Timestamp `protobuf:"bytes,13,opt,name=end_of_maintenance,json=endOfMaintenance,proto3" json:"end_of_maintenance,omitempty"`
	LicensesUnderMaintenance       string               `protobuf:"bytes,14,opt,name=licenses_under_maintenance,json=licensesUnderMaintenance,proto3" json:"licenses_under_maintenance,omitempty"`
	LicensesUnderMaintenanceNumber int32                `protobuf:"varint,15,opt,name=licenses_under_maintenance_number,json=licensesUnderMaintenanceNumber,proto3" json:"licenses_under_maintenance_number,omitempty"`
	Version                        string               `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
	Comment                        string               `protobuf:"bytes,17,opt,name=comment,proto3" json:"comment,omitempty"`
	OrderingDate                   *timestamp.Timestamp `protobuf:"bytes,18,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	CorporateSourcingContract      string               `protobuf:"bytes,19,opt,name=corporate_sourcing_contract,json=corporateSourcingContract,proto3" json:"corporate_sourcing_contract,omitempty"`
	SoftwareProvider               string               `protobuf:"bytes,20,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
	LastPurchasedOrder             string               `protobuf:"bytes,21,opt,name=last_purchased_order,json=lastPurchasedOrder,proto3" json:"last_purchased_order,omitempty"`
	SupportNumber                  string               `protobuf:"bytes,22,opt,name=support_number,json=supportNumber,proto3" json:"support_number,omitempty"`
	MaintenanceProvider            string               `protobuf:"bytes,23,opt,name=maintenance_provider,json=maintenanceProvider,proto3" json:"maintenance_provider,omitempty"`
	FileName                       string               `protobuf:"bytes,24,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *AcqRights) Reset() {
	*x = AcqRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcqRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcqRights) ProtoMessage() {}

func (x *AcqRights) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcqRights.ProtoReflect.Descriptor instead.
func (*AcqRights) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{81}
}

func (x *AcqRights) GetSKU() string {
	if x != nil {
		return x.SKU
	}
	return ""
}

func (x *AcqRights) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *AcqRights) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *AcqRights) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *AcqRights) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *AcqRights) GetAcquiredLicensesNumber() int32 {
	if x != nil {
		return x.AcquiredLicensesNumber
	}
	return 0
}

func (x *AcqRights) GetAvgLicenesUnitPrice() float64 {
	if x != nil {
		return x.AvgLicenesUnitPrice
	}
	return 0
}

func (x *AcqRights) GetAvgMaintenanceUnitPrice() float64 {
	if x != nil {
		return x.AvgMaintenanceUnitPrice
	}
	return 0
}

func (x *AcqRights) GetTotalPurchaseCost() float64 {
	if x != nil {
		return x.TotalPurchaseCost
	}
	return 0
}

func (x *AcqRights) GetTotalMaintenanceCost() float64 {
	if x != nil {
		return x.TotalMaintenanceCost
	}
	return 0
}

func (x *AcqRights) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *AcqRights) GetStartOfMaintenance() *timestamp.Timestamp {
	if x != nil {
		return x.StartOfMaintenance
	}
	return nil
}

func (x *AcqRights) GetEndOfMaintenance() *timestamp.Timestamp {
	if x != nil {
		return x.EndOfMaintenance
	}
	return nil
}

func (x *AcqRights) GetLicensesUnderMaintenance() string {
	if x != nil {
		return x.LicensesUnderMaintenance
	}
	return ""
}

func (x *AcqRights) GetLicensesUnderMaintenanceNumber() int32 {
	if x != nil {
		return x.LicensesUnderMaintenanceNumber
	}
	return 0
}

func (x *AcqRights) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AcqRights) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AcqRights) GetOrderingDate() *timestamp.Timestamp {
	if x != nil {
		return x.OrderingDate
	}
	return nil
}

func (x *AcqRights) GetCorporateSourcingContract() string {
	if x != nil {
		return x.CorporateSourcingContract
	}
	return ""
}

func (x *AcqRights) GetSoftwareProvider() string {
	if x != nil {
		return x.SoftwareProvider
	}
	return ""
}

func (x *AcqRights) GetLastPurchasedOrder() string {
	if x != nil {
		return x.LastPurchasedOrder
	}
	return ""
}

func (x *AcqRights) GetSupportNumber() string {
	if x != nil {
		return x.SupportNumber
	}
	return ""
}

func (x *AcqRights) GetMaintenanceProvider() string {
	if x != nil {
		return x.MaintenanceProvider
	}
	return ""
}

func (x *AcqRights) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type ListAggregatedAcqRightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32                                 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32                                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       ListAggregatedAcqRightsRequest_SortBy `protobuf:"varint,3,opt,name=sort_by,json=sortBy,proto3,enum=optisam.products.v1.ListAggregatedAcqRightsRequest_SortBy" json:"sort_by,omitempty"`
	SortOrder    SortOrder                             `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams *ListAcqRightsAggregationSearchParams `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scope        string                                `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListAggregatedAcqRightsRequest) Reset() {
	*x = ListAggregatedAcqRightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregatedAcqRightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregatedAcqRightsRequest) ProtoMessage() {}

func (x *ListAggregatedAcqRightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregatedAcqRightsRequest.ProtoReflect.Descriptor instead.
func (*ListAggregatedAcqRightsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{82}
}

func (x *ListAggregatedAcqRightsRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListAggregatedAcqRightsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAggregatedAcqRightsRequest) GetSortBy() ListAggregatedAcqRightsRequest_SortBy {
	if x != nil {
		return x.SortBy
	}
	return ListAggregatedAcqRightsRequest_SKU
}

func (x *ListAggregatedAcqRightsRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListAggregatedAcqRightsRequest) GetSearchParams() *ListAcqRightsAggregationSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListAggregatedAcqRightsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListAggregatedAcqRightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32                   `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Aggregations []*AggregatedRightsView `protobuf:"bytes,2,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
}

func (x *ListAggregatedAcqRightsResponse) Reset() {
	*x = ListAggregatedAcqRightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregatedAcqRightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregatedAcqRightsResponse) ProtoMessage() {}

func (x *ListAggregatedAcqRightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregatedAcqRightsResponse.ProtoReflect.Descriptor instead.
func (*ListAggregatedAcqRightsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{83}
}

func (x *ListAggregatedAcqRightsResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListAggregatedAcqRightsResponse) GetAggregations() []*AggregatedRightsView {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

type AcqRightsAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Scope     string   `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	Editor    string   `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	Swidtags  []string `protobuf:"bytes,5,rep,name=swidtags,proto3" json:"swidtags,omitempty"`
	Skus      []string `protobuf:"bytes,6,rep,name=skus,proto3" json:"skus,omitempty"`
	Metric    string   `protobuf:"bytes,7,opt,name=metric,proto3" json:"metric,omitempty"`
	TotalCost float64  `protobuf:"fixed64,8,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
}

func (x *AcqRightsAggregation) Reset() {
	*x = AcqRightsAggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcqRightsAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcqRightsAggregation) ProtoMessage() {}

func (x *AcqRightsAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcqRightsAggregation.ProtoReflect.Descriptor instead.
func (*AcqRightsAggregation) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{84}
}

func (x *AcqRightsAggregation) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AcqRightsAggregation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AcqRightsAggregation) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AcqRightsAggregation) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *AcqRightsAggregation) GetSwidtags() []string {
	if x != nil {
		return x.Swidtags
	}
	return nil
}

func (x *AcqRightsAggregation) GetSkus() []string {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *AcqRightsAggregation) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *AcqRightsAggregation) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

type ListAcqRightsAggregationSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *StringFilter `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Editor           *StringFilter `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
	SKU              *StringFilter `protobuf:"bytes,3,opt,name=SKU,proto3" json:"SKU,omitempty"`
	Metric           *StringFilter `protobuf:"bytes,4,opt,name=metric,proto3" json:"metric,omitempty"`
	OrderingDate     *StringFilter `protobuf:"bytes,5,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	SoftwareProvider *StringFilter `protobuf:"bytes,6,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
}

func (x *ListAcqRightsAggregationSearchParams) Reset() {
	*x = ListAcqRightsAggregationSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsAggregationSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsAggregationSearchParams) ProtoMessage() {}

func (x *ListAcqRightsAggregationSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsAggregationSearchParams.ProtoReflect.Descriptor instead.
func (*ListAcqRightsAggregationSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{85}
}

func (x *ListAcqRightsAggregationSearchParams) GetName() *StringFilter {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListAcqRightsAggregationSearchParams) GetEditor() *StringFilter {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *ListAcqRightsAggregationSearchParams) GetSKU() *StringFilter {
	if x != nil {
		return x.SKU
	}
	return nil
}

func (x *ListAcqRightsAggregationSearchParams) GetMetric() *StringFilter {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *ListAcqRightsAggregationSearchParams) GetOrderingDate() *StringFilter {
	if x != nil {
		return x.OrderingDate
	}
	return nil
}

func (x *ListAcqRightsAggregationSearchParams) GetSoftwareProvider() *StringFilter {
	if x != nil {
		return x.SoftwareProvider
	}
	return nil
}

type ListAcqRightsAggregationRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationId int32    `protobuf:"varint,1,opt,name=aggregation_id,json=aggregationId,proto3" json:"aggregation_id,omitempty"`
	Scopes        []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListAcqRightsAggregationRecordsRequest) Reset() {
	*x = ListAcqRightsAggregationRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsAggregationRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsAggregationRecordsRequest) ProtoMessage() {}

func (x *ListAcqRightsAggregationRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsAggregationRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListAcqRightsAggregationRecordsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{86}
}

func (x *ListAcqRightsAggregationRecordsRequest) GetAggregationId() int32 {
	if x != nil {
		return x.AggregationId
	}
	return 0
}

func (x *ListAcqRightsAggregationRecordsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListAcqRightsAggregationRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcquiredRights []*AcqRights `protobuf:"bytes,1,rep,name=acquired_rights,json=acquiredRights,proto3" json:"acquired_rights,omitempty"`
}

func (x *ListAcqRightsAggregationRecordsResponse) Reset() {
	*x = ListAcqRightsAggregationRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsAggregationRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsAggregationRecordsResponse) ProtoMessage() {}

func (x *ListAcqRightsAggregationRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsAggregationRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListAcqRightsAggregationRecordsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{87}
}

func (x *ListAcqRightsAggregationRecordsResponse) GetAcquiredRights() []*AcqRights {
	if x != nil {
		return x.AcquiredRights
	}
	return nil
}

type DeleteAggregationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DeleteAggregationRequest) Reset() {
	*x = DeleteAggregationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAggregationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAggregationRequest) ProtoMessage() {}

func (x *DeleteAggregationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAggregationRequest.ProtoReflect.Descriptor instead.
func (*DeleteAggregationRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{88}
}

func (x *DeleteAggregationRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DeleteAggregationRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListAggregationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32                          `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32                          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       ListAggregationsRequest_SortBy `protobuf:"varint,3,opt,name=sort_by,json=sortBy,proto3,enum=optisam.products.v1.ListAggregationsRequest_SortBy" json:"sort_by,omitempty"`
	SortOrder    SortOrder                      `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams *ListAggregationsSearchParams  `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scope        string                         `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListAggregationsRequest) Reset() {
	*x = ListAggregationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationsRequest) ProtoMessage() {}

func (x *ListAggregationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationsRequest.ProtoReflect.Descriptor instead.
func (*ListAggregationsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{89}
}

func (x *ListAggregationsRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListAggregationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAggregationsRequest) GetSortBy() ListAggregationsRequest_SortBy {
	if x != nil {
		return x.SortBy
	}
	return ListAggregationsRequest_aggregation_name
}

func (x *ListAggregationsRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListAggregationsRequest) GetSearchParams() *ListAggregationsSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListAggregationsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListAggregationsSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationName *StringFilter `protobuf:"bytes,1,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	ProductEditor   *StringFilter `protobuf:"bytes,2,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
}

func (x *ListAggregationsSearchParams) Reset() {
	*x = ListAggregationsSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationsSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationsSearchParams) ProtoMessage() {}

func (x *ListAggregationsSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationsSearchParams.ProtoReflect.Descriptor instead.
func (*ListAggregationsSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{90}
}

func (x *ListAggregationsSearchParams) GetAggregationName() *StringFilter {
	if x != nil {
		return x.AggregationName
	}
	return nil
}

func (x *ListAggregationsSearchParams) GetProductEditor() *StringFilter {
	if x != nil {
		return x.ProductEditor
	}
	return nil
}

type ListAggregationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32          `protobuf:"varint,1,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	Aggregations []*Aggregation `protobuf:"bytes,2,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
}

func (x *ListAggregationsResponse) Reset() {
	*x = ListAggregationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationsResponse) ProtoMessage() {}

func (x *ListAggregationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationsResponse.ProtoReflect.Descriptor instead.
func (*ListAggregationsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{91}
}

func (x *ListAggregationsResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListAggregationsResponse) GetAggregations() []*Aggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

type ProductAggregationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editor   string   `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	Metric   string   `protobuf:"bytes,4,opt,name=metric,proto3" json:"metric,omitempty"`
	Scope    string   `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	Products []string `protobuf:"bytes,6,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *ProductAggregationMessage) Reset() {
	*x = ProductAggregationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregationMessage) ProtoMessage() {}

func (x *ProductAggregationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregationMessage.ProtoReflect.Descriptor instead.
func (*ProductAggregationMessage) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{92}
}

func (x *ProductAggregationMessage) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProductAggregationMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAggregationMessage) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductAggregationMessage) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *ProductAggregationMessage) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProductAggregationMessage) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

type ProductAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editor       string   `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductNames []string `protobuf:"bytes,4,rep,name=product_names,json=productNames,proto3" json:"product_names,omitempty"`
	Metric       string   `protobuf:"bytes,5,opt,name=metric,proto3" json:"metric,omitempty"`
	Scope        string   `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
	Products     []string `protobuf:"bytes,7,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *ProductAggregation) Reset() {
	*x = ProductAggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregation) ProtoMessage() {}

func (x *ProductAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregation.ProtoReflect.Descriptor instead.
func (*ProductAggregation) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{93}
}

func (x *ProductAggregation) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProductAggregation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAggregation) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductAggregation) GetProductNames() []string {
	if x != nil {
		return x.ProductNames
	}
	return nil
}

func (x *ProductAggregation) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *ProductAggregation) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProductAggregation) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

type ListAggregationEditorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListAggregationEditorsRequest) Reset() {
	*x = ListAggregationEditorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationEditorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationEditorsRequest) ProtoMessage() {}

func (x *ListAggregationEditorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationEditorsRequest.ProtoReflect.Descriptor instead.
func (*ListAggregationEditorsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{94}
}

func (x *ListAggregationEditorsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListAggregationEditorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor []string `protobuf:"bytes,1,rep,name=editor,proto3" json:"editor,omitempty"`
}

func (x *ListAggregationEditorsResponse) Reset() {
	*x = ListAggregationEditorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationEditorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationEditorsResponse) ProtoMessage() {}

func (x *ListAggregationEditorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationEditorsResponse.ProtoReflect.Descriptor instead.
func (*ListAggregationEditorsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{95}
}

func (x *ListAggregationEditorsResponse) GetEditor() []string {
	if x != nil {
		return x.Editor
	}
	return nil
}

type ListAggregationProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Editor string `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
	ID     int32  `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ListAggregationProductsRequest) Reset() {
	*x = ListAggregationProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationProductsRequest) ProtoMessage() {}

func (x *ListAggregationProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationProductsRequest.ProtoReflect.Descriptor instead.
func (*ListAggregationProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{96}
}

func (x *ListAggregationProductsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListAggregationProductsRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ListAggregationProductsRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ListAggregationProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggrightsProducts []*AggregationProducts `protobuf:"bytes,1,rep,name=aggrights_products,json=aggrightsProducts,proto3" json:"aggrights_products,omitempty"`
	SelectedProducts  []*AggregationProducts `protobuf:"bytes,2,rep,name=selected_products,json=selectedProducts,proto3" json:"selected_products,omitempty"`
}

func (x *ListAggregationProductsResponse) Reset() {
	*x = ListAggregationProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationProductsResponse) ProtoMessage() {}

func (x *ListAggregationProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationProductsResponse.ProtoReflect.Descriptor instead.
func (*ListAggregationProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{97}
}

func (x *ListAggregationProductsResponse) GetAggrightsProducts() []*AggregationProducts {
	if x != nil {
		return x.AggrightsProducts
	}
	return nil
}

func (x *ListAggregationProductsResponse) GetSelectedProducts() []*AggregationProducts {
	if x != nil {
		return x.SelectedProducts
	}
	return nil
}

type AggregationProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swidtag     string `protobuf:"bytes,1,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	ProductName string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Editor      string `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
}

func (x *AggregationProducts) Reset() {
	*x = AggregationProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationProducts) ProtoMessage() {}

func (x *AggregationProducts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationProducts.ProtoReflect.Descriptor instead.
func (*AggregationProducts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{98}
}

func (x *AggregationProducts) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *AggregationProducts) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *AggregationProducts) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

type DropProductDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope        string                              `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	DeletionType DropProductDataRequestDeletionTypes `protobuf:"varint,2,opt,name=deletion_type,json=deletionType,proto3,enum=optisam.products.v1.DropProductDataRequestDeletionTypes" json:"deletion_type,omitempty"`
}

func (x *DropProductDataRequest) Reset() {
	*x = DropProductDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropProductDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropProductDataRequest) ProtoMessage() {}

func (x *DropProductDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropProductDataRequest.ProtoReflect.Descriptor instead.
func (*DropProductDataRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{99}
}

func (x *DropProductDataRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *DropProductDataRequest) GetDeletionType() DropProductDataRequestDeletionTypes {
	if x != nil {
		return x.DeletionType
	}
	return DropProductDataRequest_ACQRIGHTS
}

type DropProductDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DropProductDataResponse) Reset() {
	*x = DropProductDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropProductDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropProductDataResponse) ProtoMessage() {}

func (x *DropProductDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropProductDataResponse.ProtoReflect.Descriptor instead.
func (*DropProductDataResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{100}
}

func (x *DropProductDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DropAggregationDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DropAggregationDataRequest) Reset() {
	*x = DropAggregationDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropAggregationDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropAggregationDataRequest) ProtoMessage() {}

func (x *DropAggregationDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropAggregationDataRequest.ProtoReflect.Descriptor instead.
func (*DropAggregationDataRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{101}
}

func (x *DropAggregationDataRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DropAggregationDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DropAggregationDataResponse) Reset() {
	*x = DropAggregationDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropAggregationDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropAggregationDataResponse) ProtoMessage() {}

func (x *DropAggregationDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropAggregationDataResponse.ProtoReflect.Descriptor instead.
func (*DropAggregationDataResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{102}
}

func (x *DropAggregationDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpsertProductRequestApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation     string   `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	ApplicationId []string `protobuf:"bytes,2,rep,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *UpsertProductRequestApplication) Reset() {
	*x = UpsertProductRequestApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProductRequestApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProductRequestApplication) ProtoMessage() {}

func (x *UpsertProductRequestApplication) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProductRequestApplication.ProtoReflect.Descriptor instead.
func (*UpsertProductRequestApplication) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{58, 0}
}

func (x *UpsertProductRequestApplication) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *UpsertProductRequestApplication) GetApplicationId() []string {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

type UpsertProductRequestEquipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation      string                                        `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Equipmentusers []*UpsertProductRequestEquipmentEquipmentuser `protobuf:"bytes,2,rep,name=equipmentusers,proto3" json:"equipmentusers,omitempty"`
}

func (x *UpsertProductRequestEquipment) Reset() {
	*x = UpsertProductRequestEquipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProductRequestEquipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProductRequestEquipment) ProtoMessage() {}

func (x *UpsertProductRequestEquipment) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProductRequestEquipment.ProtoReflect.Descriptor instead.
func (*UpsertProductRequestEquipment) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{58, 1}
}

func (x *UpsertProductRequestEquipment) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *UpsertProductRequestEquipment) GetEquipmentusers() []*UpsertProductRequestEquipmentEquipmentuser {
	if x != nil {
		return x.Equipmentusers
	}
	return nil
}

type UpsertProductRequestEquipmentEquipmentuser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentId string `protobuf:"bytes,1,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	NumUser     int32  `protobuf:"varint,2,opt,name=num_user,json=numUser,proto3" json:"num_user,omitempty"`
}

func (x *UpsertProductRequestEquipmentEquipmentuser) Reset() {
	*x = UpsertProductRequestEquipmentEquipmentuser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProductRequestEquipmentEquipmentuser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProductRequestEquipmentEquipmentuser) ProtoMessage() {}

func (x *UpsertProductRequestEquipmentEquipmentuser) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProductRequestEquipmentEquipmentuser.ProtoReflect.Descriptor instead.
func (*UpsertProductRequestEquipmentEquipmentuser) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{58, 1, 0}
}

func (x *UpsertProductRequestEquipmentEquipmentuser) GetEquipmentId() string {
	if x != nil {
		return x.EquipmentId
	}
	return ""
}

func (x *UpsertProductRequestEquipmentEquipmentuser) GetNumUser() int32 {
	if x != nil {
		return x.NumUser
	}
	return 0
}

var File_product_proto protoreflect.FileDescriptor

var file_product_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x2a, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x71,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32,
	0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x22, 0x90, 0x01, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x09, 0x61, 0x63, 0x71, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x10,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x91, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x22, 0x79, 0x0a, 0x2b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa,
	0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d,
	0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22,
	0x93, 0x01, 0x0a, 0x2c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62,
	0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x22, 0x43, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x6d, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52,
	0x03, 0x73, 0x6b, 0x75, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0x32, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x73, 0x0a, 0x1b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42,
	0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c,
	0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73, 0x6b,
	0x75, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x1e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x7b, 0x0a, 0x23, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e,
	0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x24, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42,
	0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c,
	0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x71, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xfa,
	0x42, 0x12, 0x72, 0x10, 0x52, 0x03, 0x43, 0x45, 0x54, 0x52, 0x03, 0x49, 0x53, 0x54, 0x52, 0x04,
	0x43, 0x45, 0x53, 0x54, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa,
	0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d,
	0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x22, 0xca, 0x08, 0x0a, 0x0f, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73,
	0x6b, 0x75, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x32,
	0x15, 0x5e, 0x5b, 0x5c, 0x73, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x28, 0x29,
	0x2e, 0x2b, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x5c,
	0x73, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x2d, 0x5d, 0x2b, 0x24, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x5c, 0x73, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x13, 0x6e, 0x75,
	0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09,
	0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x00, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x1a,
	0x61, 0x76, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x52, 0x17, 0x61, 0x76, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x13, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x1b, 0x63, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x19, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x34, 0x0a, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x10, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x2c, 0x0a, 0x10, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9f,
	0x02, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x5c, 0x73, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x29, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42, 0x1e, 0x92,
	0x01, 0x1b, 0x22, 0x19, 0x72, 0x17, 0x32, 0x15, 0x5e, 0x5b, 0x5c, 0x73, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x28, 0x29, 0x2e, 0x2b, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x73,
	0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x22, 0x2f, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0xbe, 0x07, 0x0a, 0x17, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72,
	0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e,
	0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00,
	0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa,
	0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0c, 0x61,
	0x76, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4f, 0x66,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x10, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x13, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x16, 0x6e,
	0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x1a, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09,
	0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x17, 0x61, 0x76, 0x67, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x1b, 0x63, 0x6f, 0x72,
	0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x19, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x34, 0x0a, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xec, 0x0a, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73, 0x6b,
	0x75, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14,
	0x32, 0x12, 0x5e, 0x5b, 0x5c, 0x73, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e,
	0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42,
	0x1e, 0x92, 0x01, 0x1b, 0x22, 0x19, 0x72, 0x17, 0x32, 0x15, 0x5e, 0x5b, 0x5c, 0x73, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x28, 0x29, 0x2e, 0x2b, 0x2d, 0x5d, 0x2b, 0x24, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x08, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x73, 0x77, 0x69, 0x64, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x13, 0x6e, 0x75, 0x6d,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f,
	0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28,
	0x00, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x1a, 0x61, 0x76, 0x67,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa,
	0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x17, 0x61,
	0x76, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73,
	0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09,
	0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x63,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x34, 0x0a, 0x18, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a, 0x1d, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c,
	0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x1e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f,
	0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x47,
	0x0a, 0x20, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x6e, 0x6f, 0x74, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x6e, 0x6f, 0x74, 0x5f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1d, 0x6e, 0x6f, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x22, 0x45, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10,
	0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b,
	0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x22, 0x6d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22,
	0xe6, 0x01, 0x0a, 0x12, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64,
	0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74,
	0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x4b, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x1d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62,
	0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x22, 0xb4, 0x02, 0x0a, 0x1e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xf4, 0x04, 0x0a, 0x21, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x2c, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32,
	0x0b, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a,
	0x05, 0x18, 0xc8, 0x01, 0x28, 0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x69, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x63, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x01, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b,
	0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x22, 0x6c, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x10, 0x04, 0x22,
	0xa0, 0x02, 0x0a, 0x29, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a,
	0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x4f, 0x0a,
	0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb4,
	0x02, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6e, 0x75, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77,
	0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69,
	0x64, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x52, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x41,
	0x6e, 0x64, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c,
	0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x92, 0x01,
	0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33,
	0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x65, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c,
	0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x45,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d,
	0x4f, 0x66, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x6f, 0x66,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x74, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x83, 0x04, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x2c, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f,
	0x32, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07,
	0x1a, 0x05, 0x18, 0xc8, 0x01, 0x28, 0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x69, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x67, 0xfa, 0x42, 0x64, 0x72, 0x62, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x11, 0x6e,
	0x75, 0x6d, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x15,
	0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x98, 0x03,
	0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54,
	0x61, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x77,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77,
	0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b,
	0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x22, 0xfb, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e,
	0x75, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x7d,
	0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x4f,
	0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0a,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x86, 0x01,
	0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64,
	0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75,
	0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x73, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x85, 0x06, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x66, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xfa,
	0x42, 0x0f, 0x72, 0x0d, 0x52, 0x03, 0x61, 0x64, 0x64, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x1a, 0xf7, 0x01, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xfa, 0x42, 0x0f, 0x72, 0x0d, 0x52, 0x03, 0x61, 0x64, 0x64,
	0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0e,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x4d,
	0x0a, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x22, 0x31, 0x0a,
	0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x43, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e,
	0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x19, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3b,
	0x0a, 0x19, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x1b, 0x4f,
	0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e,
	0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x22, 0xbd, 0x01,
	0x0a, 0x1c, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x4c, 0x0a,
	0x1f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x20,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x13,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64,
	0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22,
	0x83, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x73, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b,
	0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x22, 0x61, 0x0a, 0x1c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x65, 0x69, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x22, 0x6f, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x18, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c,
	0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x19, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xfd, 0x07, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x73,
	0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x61, 0x76, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x1a, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x61, 0x76, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65,
	0x6e, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x1b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x19, 0x63, 0x6f,
	0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x11,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10,
	0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x33, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x92, 0x06, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x2c, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32,
	0x0b, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a,
	0x05, 0x18, 0xc8, 0x01, 0x28, 0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x69, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e,
	0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4b, 0x55, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x57,
	0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44,
	0x49, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x53, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x56, 0x47, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a,
	0x41, 0x56, 0x47, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x43,
	0x4f, 0x53, 0x54, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10,
	0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10,
	0x0a, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x53, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0d, 0x22, 0xda, 0x03, 0x0a, 0x15, 0x41,
	0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61,
	0x67, 0x12, 0x33, 0x0a, 0x03, 0x53, 0x4b, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x03, 0x53, 0x4b, 0x55, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x10,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0e,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xe8,
	0x08, 0x0a, 0x09, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x53, 0x4b, 0x55, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x4b, 0x55, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x18,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x76, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x61,
	0x76, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x61, 0x76, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x65,
	0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x06, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x71, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c,
	0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32, 0x0b, 0x50,
	0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18,
	0xc8, 0x01, 0x28, 0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x70,
	0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x40,
	0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x5e, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xb6, 0x02, 0x0a,
	0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4b, 0x55, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x47, 0x47, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x46,
	0x5f, 0x53, 0x57, 0x49, 0x44, 0x54, 0x41, 0x47, 0x53, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x53,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11,
	0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x0b, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53,
	0x45, 0x44, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x0e, 0x22, 0x94, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x4d, 0x0a,
	0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0c,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcf, 0x01, 0x0a,
	0x14, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x77, 0x69, 0x64, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xa0,
	0x03, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x03, 0x53, 0x4b, 0x55,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x53, 0x4b, 0x55, 0x12, 0x39,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x46, 0x0a, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0x8b, 0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa,
	0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d,
	0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22,
	0x72, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c,
	0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0x88, 0x04, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x2c, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f,
	0x32, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07,
	0x1a, 0x05, 0x18, 0xc8, 0x01, 0x28, 0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x69, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x47,
	0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33,
	0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x06, 0x53, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x22, 0xb6,
	0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x4c, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xcf, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14,
	0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f,
	0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e,
	0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x22, 0xbf, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0x38, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x22, 0x7c, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72,
	0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x00, 0x52, 0x02, 0x49, 0x44, 0x22, 0xd1, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x61,
	0x67, 0x67, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x13, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x22, 0xe7, 0x01, 0x0a, 0x16, 0x44, 0x72, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a,
	0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x6d, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x42, 0x0c, 0xfa, 0x42, 0x09, 0x82, 0x01, 0x06, 0x18, 0x00, 0x18, 0x01, 0x18, 0x02, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x43, 0x51, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x52, 0x4b, 0x10,
	0x02, 0x22, 0x33, 0x0a, 0x17, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x1a, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0x37, 0x0a, 0x1b, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x1e, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54,
	0x10, 0x03, 0x32, 0x87, 0x37, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0xa6, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0xb2,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x7d, 0x2f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x7b, 0x73, 0x77,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x7b, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x7d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x69, 0x65, 0x77, 0x12, 0xb4, 0x01, 0x0a, 0x16, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x49, 0x44, 0x7d, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xb2, 0x01, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x41, 0x6e, 0x64,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x3a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x73,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01,
	0x0a, 0x0f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x63,
	0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x15, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x65, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0xb8, 0x01, 0x0a, 0x14, 0x4f, 0x76, 0x65,
	0x72, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0xbb, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x34, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0xb2, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63,
	0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa2, 0x01,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0xd5, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2c, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x58, 0x1a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x2b, 0x32,
	0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x12, 0xc8,
	0x01, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x38, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x7b,
	0x73, 0x6b, 0x75, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4e, 0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x26, 0x32, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x97, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0xb4, 0x01, 0x0a, 0x16,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x7d, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x89, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x34, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12,
	0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0xad, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x1a,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x3a,
	0x01, 0x2a, 0x5a, 0x23, 0x32, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x7b,
	0x73, 0x6b, 0x75, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x71,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x12, 0xa8, 0x01, 0x0a, 0x14,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x7b, 0x73, 0x6b, 0x75,
	0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xde,
	0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x71, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x71, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x12, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0xda, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12,
	0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x42, 0x2c, 0x5a, 0x2a,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_product_proto_rawDescOnce sync.Once
	file_product_proto_rawDescData = file_product_proto_rawDesc
)

func file_product_proto_rawDescGZIP() []byte {
	file_product_proto_rawDescOnce.Do(func() {
		file_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_product_proto_rawDescData)
	})
	return file_product_proto_rawDescData
}

var file_product_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_product_proto_msgTypes = make([]protoimpl.MessageInfo, 106)
var file_product_proto_goTypes = []interface{}{
	(SortOrder)(0), // 0: optisam.products.v1.SortOrder
	(DataTypes)(0), // 1: optisam.products.v1.DataTypes
	(ListProductAggregationViewRequest_SortBy)(0),        // 2: optisam.products.v1.ListProductAggregationViewRequest.SortBy
	(ListAcqRightsRequest_SortBy)(0),                     // 3: optisam.products.v1.ListAcqRightsRequest.SortBy
	(ListAggregatedAcqRightsRequest_SortBy)(0),           // 4: optisam.products.v1.ListAggregatedAcqRightsRequest.SortBy
	(ListAggregationsRequest_SortBy)(0),                  // 5: optisam.products.v1.ListAggregationsRequest.SortBy
	(DropProductDataRequestDeletionTypes)(0),             // 6: optisam.products.v1.DropProductDataRequest.deletion_types
	(*GetAggregationAcqrightsExpandedViewRequest)(nil),   // 7: optisam.products.v1.GetAggregationAcqrightsExpandedViewRequest
	(*GetAggregationAcqrightsExpandedViewResponse)(nil),  // 8: optisam.products.v1.GetAggregationAcqrightsExpandedViewResponse
	(*GetAggregationProductsExpandedViewRequest)(nil),    // 9: optisam.products.v1.GetAggregationProductsExpandedViewRequest
	(*GetAggregationProductsExpandedViewResponse)(nil),   // 10: optisam.products.v1.GetAggregationProductsExpandedViewResponse
	(*ProductAggregationProductViewOptionsRequest)(nil),  // 11: optisam.products.v1.ProductAggregationProductViewOptionsRequest
	(*ProductAggregationProductViewOptionsResponse)(nil), // 12: optisam.products.v1.ProductAggregationProductViewOptionsResponse
	(*GetEquipmentsByProductRequest)(nil),                // 13: optisam.products.v1.GetEquipmentsByProductRequest
	(*GetEquipmentsByProductResponse)(nil),               // 14: optisam.products.v1.GetEquipmentsByProductResponse
	(*DeleteAcqRightRequest)(nil),                        // 15: optisam.products.v1.DeleteAcqRightRequest
	(*DeleteAcqRightResponse)(nil),                       // 16: optisam.products.v1.DeleteAcqRightResponse
	(*DownloadAcqRightFileRequest)(nil),                  // 17: optisam.products.v1.DownloadAcqRightFileRequest
	(*DownloadAcqRightFileResponse)(nil),                 // 18: optisam.products.v1.DownloadAcqRightFileResponse
	(*DeleteAggregatedRightsRequest)(nil),                // 19: optisam.products.v1.DeleteAggregatedRightsRequest
	(*DeleteAggregatedRightsResponse)(nil),               // 20: optisam.products.v1.DeleteAggregatedRightsResponse
	(*DownloadAggregatedRightsFileRequest)(nil),          // 21: optisam.products.v1.DownloadAggregatedRightsFileRequest
	(*DownloadAggregatedRightsFileResponse)(nil),         // 22: optisam.products.v1.DownloadAggregatedRightsFileResponse
	(*CreateDashboardUpdateJobRequest)(nil),              // 23: optisam.products.v1.CreateDashboardUpdateJobRequest
	(*CreateDashboardUpdateJobResponse)(nil),             // 24: optisam.products.v1.CreateDashboardUpdateJobResponse
	(*GetBannerRequest)(nil),                             // 25: optisam.products.v1.GetBannerRequest
	(*GetBannerResponse)(nil),                            // 26: optisam.products.v1.GetBannerResponse
	(*AcqRightRequest)(nil),                              // 27: optisam.products.v1.AcqRightRequest
	(*AcqRightResponse)(nil),                             // 28: optisam.products.v1.AcqRightResponse
	(*Aggregation)(nil),                                  // 29: optisam.products.v1.Aggregation
	(*AggregationResponse)(nil),                          // 30: optisam.products.v1.AggregationResponse
	(*AggregatedRightsRequest)(nil),                      // 31: optisam.products.v1.AggregatedRightsRequest
	(*AggregatedRightsView)(nil),                         // 32: optisam.products.v1.AggregatedRightsView
	(*AggregatedRightsResponse)(nil),                     // 33: optisam.products.v1.AggregatedRightsResponse
	(*OverviewProductQualityRequest)(nil),                // 34: optisam.products.v1.OverviewProductQualityRequest
	(*OverviewProductQualityResponse)(nil),               // 35: optisam.products.v1.OverviewProductQualityResponse
	(*ProductsPerEditorRequest)(nil),                     // 36: optisam.products.v1.ProductsPerEditorRequest
	(*ProductsPerEditorResponse)(nil),                    // 37: optisam.products.v1.ProductsPerEditorResponse
	(*GetRightsInfoByEditorRequest)(nil),                 // 38: optisam.products.v1.GetRightsInfoByEditorRequest
	(*GetRightsInfoByEditorResponse)(nil),                // 39: optisam.products.v1.GetRightsInfoByEditorResponse
	(*RightsInfoByEditor)(nil),                           // 40: optisam.products.v1.RightsInfoByEditor
	(*EditorProducts)(nil),                               // 41: optisam.products.v1.EditorProducts
	(*AggregatedRightDetailsRequest)(nil),                // 42: optisam.products.v1.AggregatedRightDetailsRequest
	(*AggregatedRightDetailsResponse)(nil),               // 43: optisam.products.v1.AggregatedRightDetailsResponse
	(*ListProductAggregationViewRequest)(nil),            // 44: optisam.products.v1.ListProductAggregationViewRequest
	(*ProductAggregationProductViewSearchParams)(nil),    // 45: optisam.products.v1.ProductAggregationProductViewSearchParams
	(*ListProductAggregationViewResponse)(nil),           // 46: optisam.products.v1.ListProductAggregationViewResponse
	(*ProductAggregationView)(nil),                       // 47: optisam.products.v1.ProductAggregationView
	(*ProductAggRecord)(nil),                             // 48: optisam.products.v1.ProductAggRecord
	(*ListDeployedAndAcquiredEditorsRequest)(nil),        // 49: optisam.products.v1.ListDeployedAndAcquiredEditorsRequest
	(*ListEditorsRequest)(nil),                           // 50: optisam.products.v1.ListEditorsRequest
	(*ListEditorsResponse)(nil),                          // 51: optisam.products.v1.ListEditorsResponse
	(*ListEditorProductsRequest)(nil),                    // 52: optisam.products.v1.ListEditorProductsRequest
	(*ListEditorProductsResponse)(nil),                   // 53: optisam.products.v1.ListEditorProductsResponse
	(*Editor)(nil),                                       // 54: optisam.products.v1.Editor
	(*Product)(nil),                                      // 55: optisam.products.v1.Product
	(*ListProductsResponse)(nil),                         // 56: optisam.products.v1.ListProductsResponse
	(*ListProductsRequest)(nil),                          // 57: optisam.products.v1.ListProductsRequest
	(*ProductSearchParams)(nil),                          // 58: optisam.products.v1.ProductSearchParams
	(*ProductRequest)(nil),                               // 59: optisam.products.v1.ProductRequest
	(*ProductResponse)(nil),                              // 60: optisam.products.v1.ProductResponse
	(*ProductOptionsResponse)(nil),                       // 61: optisam.products.v1.ProductOptionsResponse
	(*OptionInfo)(nil),                                   // 62: optisam.products.v1.OptionInfo
	(*ProductExpand)(nil),                                // 63: optisam.products.v1.ProductExpand
	(*StringFilter)(nil),                                 // 64: optisam.products.v1.StringFilter
	(*UpsertProductRequest)(nil),                         // 65: optisam.products.v1.UpsertProductRequest
	(*UpsertProductResponse)(nil),                        // 66: optisam.products.v1.UpsertProductResponse
	(*ComplianceAlertRequest)(nil),                       // 67: optisam.products.v1.ComplianceAlertRequest
	(*ComplianceAlertResponse)(nil),                      // 68: optisam.products.v1.ComplianceAlertResponse
	(*OverdeployedProductsRequest)(nil),                  // 69: optisam.products.v1.OverdeployedProductsRequest
	(*OverdeployedProductsResponse)(nil),                 // 70: optisam.products.v1.OverdeployedProductsResponse
	(*DashboardQualityProductsRequest)(nil),              // 71: optisam.products.v1.DashboardQualityProductsRequest
	(*DashboardQualityProductsResponse)(nil),             // 72: optisam.products.v1.DashboardQualityProductsResponse
	(*DashboardQualityProducts)(nil),                     // 73: optisam.products.v1.DashboardQualityProducts
	(*ProductsLicenses)(nil),                             // 74: optisam.products.v1.ProductsLicenses
	(*ProductsCosts)(nil),                                // 75: optisam.products.v1.ProductsCosts
	(*ProductsPerMetricTypeRequest)(nil),                 // 76: optisam.products.v1.ProductsPerMetricTypeRequest
	(*CounterfeitedProductsRequest)(nil),                 // 77: optisam.products.v1.CounterfeitedProductsRequest
	(*CounterfeitedProductsResponse)(nil),                // 78: optisam.products.v1.CounterfeitedProductsResponse
	(*ProductsPerMetricTypeResponse)(nil),                // 79: optisam.products.v1.ProductsPerMetricTypeResponse
	(*MetricProducts)(nil),                               // 80: optisam.products.v1.MetricProducts
	(*DashboardOverviewRequest)(nil),                     // 81: optisam.products.v1.DashboardOverviewRequest
	(*DashboardOverviewResponse)(nil),                    // 82: optisam.products.v1.DashboardOverviewResponse
	(*UpsertAcqRightsRequest)(nil),                       // 83: optisam.products.v1.UpsertAcqRightsRequest
	(*UpsertAcqRightsResponse)(nil),                      // 84: optisam.products.v1.UpsertAcqRightsResponse
	(*ListAcqRightsRequest)(nil),                         // 85: optisam.products.v1.ListAcqRightsRequest
	(*AcqRightsSearchParams)(nil),                        // 86: optisam.products.v1.AcqRightsSearchParams
	(*ListAcqRightsResponse)(nil),                        // 87: optisam.products.v1.ListAcqRightsResponse
	(*AcqRights)(nil),                                    // 88: optisam.products.v1.AcqRights
	(*ListAggregatedAcqRightsRequest)(nil),               // 89: optisam.products.v1.ListAggregatedAcqRightsRequest
	(*ListAggregatedAcqRightsResponse)(nil),              // 90: optisam.products.v1.ListAggregatedAcqRightsResponse
	(*AcqRightsAggregation)(nil),                         // 91: optisam.products.v1.AcqRightsAggregation
	(*ListAcqRightsAggregationSearchParams)(nil),         // 92: optisam.products.v1.ListAcqRightsAggregationSearchParams
	(*ListAcqRightsAggregationRecordsRequest)(nil),       // 93: optisam.products.v1.ListAcqRightsAggregationRecordsRequest
	(*ListAcqRightsAggregationRecordsResponse)(nil),      // 94: optisam.products.v1.ListAcqRightsAggregationRecordsResponse
	(*DeleteAggregationRequest)(nil),                     // 95: optisam.products.v1.DeleteAggregationRequest
	(*ListAggregationsRequest)(nil),                      // 96: optisam.products.v1.ListAggregationsRequest
	(*ListAggregationsSearchParams)(nil),                 // 97: optisam.products.v1.ListAggregationsSearchParams
	(*ListAggregationsResponse)(nil),                     // 98: optisam.products.v1.ListAggregationsResponse
	(*ProductAggregationMessage)(nil),                    // 99: optisam.products.v1.ProductAggregationMessage
	(*ProductAggregation)(nil),                           // 100: optisam.products.v1.ProductAggregation
	(*ListAggregationEditorsRequest)(nil),                // 101: optisam.products.v1.ListAggregationEditorsRequest
	(*ListAggregationEditorsResponse)(nil),               // 102: optisam.products.v1.ListAggregationEditorsResponse
	(*ListAggregationProductsRequest)(nil),               // 103: optisam.products.v1.ListAggregationProductsRequest
	(*ListAggregationProductsResponse)(nil),              // 104: optisam.products.v1.ListAggregationProductsResponse
	(*AggregationProducts)(nil),                          // 105: optisam.products.v1.AggregationProducts
	(*DropProductDataRequest)(nil),                       // 106: optisam.products.v1.DropProductDataRequest
	(*DropProductDataResponse)(nil),                      // 107: optisam.products.v1.DropProductDataResponse
	(*DropAggregationDataRequest)(nil),                   // 108: optisam.products.v1.DropAggregationDataRequest
	(*DropAggregationDataResponse)(nil),                  // 109: optisam.products.v1.DropAggregationDataResponse
	(*UpsertProductRequestApplication)(nil),              // 110: optisam.products.v1.UpsertProductRequest.application
	(*UpsertProductRequestEquipment)(nil),                // 111: optisam.products.v1.UpsertProductRequest.equipment
	(*UpsertProductRequestEquipmentEquipmentuser)(nil),   // 112: optisam.products.v1.UpsertProductRequest.equipment.equipmentuser
	(*timestamp.Timestamp)(nil),                          // 113: google.protobuf.Timestamp
}
var file_product_proto_depIdxs = []int32{
	88,  // 0: optisam.products.v1.GetAggregationAcqrightsExpandedViewResponse.acqRights:type_name -> optisam.products.v1.AcqRights
	63,  // 1: optisam.products.v1.GetAggregationProductsExpandedViewResponse.products:type_name -> optisam.products.v1.ProductExpand
	62,  // 2: optisam.products.v1.ProductAggregationProductViewOptionsResponse.optioninfo:type_name -> optisam.products.v1.OptionInfo
	41,  // 3: optisam.products.v1.ProductsPerEditorResponse.editors_products:type_name -> optisam.products.v1.EditorProducts
	40,  // 4: optisam.products.v1.GetRightsInfoByEditorResponse.editor_rights:type_name -> optisam.products.v1.RightsInfoByEditor
	2,   // 5: optisam.products.v1.ListProductAggregationViewRequest.sort_by:type_name -> optisam.products.v1.ListProductAggregationViewRequest.SortBy
	0,   // 6: optisam.products.v1.ListProductAggregationViewRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	45,  // 7: optisam.products.v1.ListProductAggregationViewRequest.search_params:type_name -> optisam.products.v1.ProductAggregationProductViewSearchParams
	64,  // 8: optisam.products.v1.ProductAggregationProductViewSearchParams.swidTag:type_name -> optisam.products.v1.StringFilter
	64,  // 9: optisam.products.v1.ProductAggregationProductViewSearchParams.name:type_name -> optisam.products.v1.StringFilter
	64,  // 10: optisam.products.v1.ProductAggregationProductViewSearchParams.editor:type_name -> optisam.products.v1.StringFilter
	64,  // 11: optisam.products.v1.ProductAggregationProductViewSearchParams.product_name:type_name -> optisam.products.v1.StringFilter
	47,  // 12: optisam.products.v1.ListProductAggregationViewResponse.aggregations:type_name -> optisam.products.v1.ProductAggregationView
	55,  // 13: optisam.products.v1.ListEditorProductsResponse.products:type_name -> optisam.products.v1.Product
	55,  // 14: optisam.products.v1.ListProductsResponse.products:type_name -> optisam.products.v1.Product
	0,   // 15: optisam.products.v1.ListProductsRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	58,  // 16: optisam.products.v1.ListProductsRequest.search_params:type_name -> optisam.products.v1.ProductSearchParams
	64,  // 17: optisam.products.v1.ProductSearchParams.swidTag:type_name -> optisam.products.v1.StringFilter
	64,  // 18: optisam.products.v1.ProductSearchParams.name:type_name -> optisam.products.v1.StringFilter
	64,  // 19: optisam.products.v1.ProductSearchParams.editor:type_name -> optisam.products.v1.StringFilter
	64,  // 20: optisam.products.v1.ProductSearchParams.application_id:type_name -> optisam.products.v1.StringFilter
	64,  // 21: optisam.products.v1.ProductSearchParams.instance_id:type_name -> optisam.products.v1.StringFilter
	64,  // 22: optisam.products.v1.ProductSearchParams.equipment_id:type_name -> optisam.products.v1.StringFilter
	62,  // 23: optisam.products.v1.ProductOptionsResponse.optioninfo:type_name -> optisam.products.v1.OptionInfo
	110, // 24: optisam.products.v1.UpsertProductRequest.applications:type_name -> optisam.products.v1.UpsertProductRequest.application
	111, // 25: optisam.products.v1.UpsertProductRequest.equipments:type_name -> optisam.products.v1.UpsertProductRequest.equipment
	74,  // 26: optisam.products.v1.OverdeployedProductsResponse.products_licenses:type_name -> optisam.products.v1.ProductsLicenses
	75,  // 27: optisam.products.v1.OverdeployedProductsResponse.products_costs:type_name -> optisam.products.v1.ProductsCosts
	73,  // 28: optisam.products.v1.DashboardQualityProductsResponse.products_not_deployed:type_name -> optisam.products.v1.DashboardQualityProducts
	73,  // 29: optisam.products.v1.DashboardQualityProductsResponse.products_not_acquired:type_name -> optisam.products.v1.DashboardQualityProducts
	74,  // 30: optisam.products.v1.CounterfeitedProductsResponse.products_licenses:type_name -> optisam.products.v1.ProductsLicenses
	75,  // 31: optisam.products.v1.CounterfeitedProductsResponse.products_costs:type_name -> optisam.products.v1.ProductsCosts
	80,  // 32: optisam.products.v1.ProductsPerMetricTypeResponse.metrics_products:type_name -> optisam.products.v1.MetricProducts
	3,   // 33: optisam.products.v1.ListAcqRightsRequest.sort_by:type_name -> optisam.products.v1.ListAcqRightsRequest.SortBy
	0,   // 34: optisam.products.v1.ListAcqRightsRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	86,  // 35: optisam.products.v1.ListAcqRightsRequest.search_params:type_name -> optisam.products.v1.AcqRightsSearchParams
	64,  // 36: optisam.products.v1.AcqRightsSearchParams.swidTag:type_name -> optisam.products.v1.StringFilter
	64,  // 37: optisam.products.v1.AcqRightsSearchParams.SKU:type_name -> optisam.products.v1.StringFilter
	64,  // 38: optisam.products.v1.AcqRightsSearchParams.editor:type_name -> optisam.products.v1.StringFilter
	64,  // 39: optisam.products.v1.AcqRightsSearchParams.productName:type_name -> optisam.products.v1.StringFilter
	64,  // 40: optisam.products.v1.AcqRightsSearchParams.metric:type_name -> optisam.products.v1.StringFilter
	64,  // 41: optisam.products.v1.AcqRightsSearchParams.softwareProvider:type_name -> optisam.products.v1.StringFilter
	64,  // 42: optisam.products.v1.AcqRightsSearchParams.orderingDate:type_name -> optisam.products.v1.StringFilter
	88,  // 43: optisam.products.v1.ListAcqRightsResponse.acquired_rights:type_name -> optisam.products.v1.AcqRights
	113, // 44: optisam.products.v1.AcqRights.start_of_maintenance:type_name -> google.protobuf.Timestamp
	113, // 45: optisam.products.v1.AcqRights.end_of_maintenance:type_name -> google.protobuf.Timestamp
	113, // 46: optisam.products.v1.AcqRights.ordering_date:type_name -> google.protobuf.Timestamp
	4,   // 47: optisam.products.v1.ListAggregatedAcqRightsRequest.sort_by:type_name -> optisam.products.v1.ListAggregatedAcqRightsRequest.SortBy
	0,   // 48: optisam.products.v1.ListAggregatedAcqRightsRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	92,  // 49: optisam.products.v1.ListAggregatedAcqRightsRequest.search_params:type_name -> optisam.products.v1.ListAcqRightsAggregationSearchParams
	32,  // 50: optisam.products.v1.ListAggregatedAcqRightsResponse.aggregations:type_name -> optisam.products.v1.AggregatedRightsView
	64,  // 51: optisam.products.v1.ListAcqRightsAggregationSearchParams.name:type_name -> optisam.products.v1.StringFilter
	64,  // 52: optisam.products.v1.ListAcqRightsAggregationSearchParams.editor:type_name -> optisam.products.v1.StringFilter
	64,  // 53: optisam.products.v1.ListAcqRightsAggregationSearchParams.SKU:type_name -> optisam.products.v1.StringFilter
	64,  // 54: optisam.products.v1.ListAcqRightsAggregationSearchParams.metric:type_name -> optisam.products.v1.StringFilter
	64,  // 55: optisam.products.v1.ListAcqRightsAggregationSearchParams.ordering_date:type_name -> optisam.products.v1.StringFilter
	64,  // 56: optisam.products.v1.ListAcqRightsAggregationSearchParams.software_provider:type_name -> optisam.products.v1.StringFilter
	88,  // 57: optisam.products.v1.ListAcqRightsAggregationRecordsResponse.acquired_rights:type_name -> optisam.products.v1.AcqRights
	5,   // 58: optisam.products.v1.ListAggregationsRequest.sort_by:type_name -> optisam.products.v1.ListAggregationsRequest.SortBy
	0,   // 59: optisam.products.v1.ListAggregationsRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	97,  // 60: optisam.products.v1.ListAggregationsRequest.search_params:type_name -> optisam.products.v1.ListAggregationsSearchParams
	64,  // 61: optisam.products.v1.ListAggregationsSearchParams.aggregation_name:type_name -> optisam.products.v1.StringFilter
	64,  // 62: optisam.products.v1.ListAggregationsSearchParams.product_editor:type_name -> optisam.products.v1.StringFilter
	29,  // 63: optisam.products.v1.ListAggregationsResponse.aggregations:type_name -> optisam.products.v1.Aggregation
	105, // 64: optisam.products.v1.ListAggregationProductsResponse.aggrights_products:type_name -> optisam.products.v1.AggregationProducts
	105, // 65: optisam.products.v1.ListAggregationProductsResponse.selected_products:type_name -> optisam.products.v1.AggregationProducts
	6,   // 66: optisam.products.v1.DropProductDataRequest.deletion_type:type_name -> optisam.products.v1.DropProductDataRequest.deletion_types
	112, // 67: optisam.products.v1.UpsertProductRequest.equipment.equipmentusers:type_name -> optisam.products.v1.UpsertProductRequest.equipment.equipmentuser
	57,  // 68: optisam.products.v1.ProductService.ListProducts:input_type -> optisam.products.v1.ListProductsRequest
	81,  // 69: optisam.products.v1.ProductService.DashboardOverview:input_type -> optisam.products.v1.DashboardOverviewRequest
	36,  // 70: optisam.products.v1.ProductService.ProductsPerEditor:input_type -> optisam.products.v1.ProductsPerEditorRequest
	38,  // 71: optisam.products.v1.ProductService.GetRightsInfoByEditor:input_type -> optisam.products.v1.GetRightsInfoByEditorRequest
	59,  // 72: optisam.products.v1.ProductService.GetProductDetail:input_type -> optisam.products.v1.ProductRequest
	59,  // 73: optisam.products.v1.ProductService.GetProductOptions:input_type -> optisam.products.v1.ProductRequest
	44,  // 74: optisam.products.v1.ProductService.ListProductAggregationView:input_type -> optisam.products.v1.ListProductAggregationViewRequest
	42,  // 75: optisam.products.v1.ProductService.AggregatedRightDetails:input_type -> optisam.products.v1.AggregatedRightDetailsRequest
	49,  // 76: optisam.products.v1.ProductService.ListDeployedAndAcquiredEditors:input_type -> optisam.products.v1.ListDeployedAndAcquiredEditorsRequest
	50,  // 77: optisam.products.v1.ProductService.ListEditors:input_type -> optisam.products.v1.ListEditorsRequest
	52,  // 78: optisam.products.v1.ProductService.ListEditorProducts:input_type -> optisam.products.v1.ListEditorProductsRequest
	65,  // 79: optisam.products.v1.ProductService.UpsertProduct:input_type -> optisam.products.v1.UpsertProductRequest
	83,  // 80: optisam.products.v1.ProductService.UpsertAcqRights:input_type -> optisam.products.v1.UpsertAcqRightsRequest
	76,  // 81: optisam.products.v1.ProductService.ProductsPerMetricType:input_type -> optisam.products.v1.ProductsPerMetricTypeRequest
	67,  // 82: optisam.products.v1.ProductService.ComplianceAlert:input_type -> optisam.products.v1.ComplianceAlertRequest
	77,  // 83: optisam.products.v1.ProductService.CounterfeitedProducts:input_type -> optisam.products.v1.CounterfeitedProductsRequest
	69,  // 84: optisam.products.v1.ProductService.OverdeployedProducts:input_type -> optisam.products.v1.OverdeployedProductsRequest
	71,  // 85: optisam.products.v1.ProductService.DashboardQualityProducts:input_type -> optisam.products.v1.DashboardQualityProductsRequest
	85,  // 86: optisam.products.v1.ProductService.ListAcqRights:input_type -> optisam.products.v1.ListAcqRightsRequest
	89,  // 87: optisam.products.v1.ProductService.ListAggregatedAcqRights:input_type -> optisam.products.v1.ListAggregatedAcqRightsRequest
	29,  // 88: optisam.products.v1.ProductService.CreateAggregation:input_type -> optisam.products.v1.Aggregation
	31,  // 89: optisam.products.v1.ProductService.CreateAggregatedRights:input_type -> optisam.products.v1.AggregatedRightsRequest
	31,  // 90: optisam.products.v1.ProductService.UpdateAggregatedRights:input_type -> optisam.products.v1.AggregatedRightsRequest
	19,  // 91: optisam.products.v1.ProductService.DeleteAggregatedRights:input_type -> optisam.products.v1.DeleteAggregatedRightsRequest
	21,  // 92: optisam.products.v1.ProductService.DownloadAggregatedRightsFile:input_type -> optisam.products.v1.DownloadAggregatedRightsFileRequest
	101, // 93: optisam.products.v1.ProductService.ListAggregationEditors:input_type -> optisam.products.v1.ListAggregationEditorsRequest
	103, // 94: optisam.products.v1.ProductService.ListAggregationProducts:input_type -> optisam.products.v1.ListAggregationProductsRequest
	96,  // 95: optisam.products.v1.ProductService.ListAggregations:input_type -> optisam.products.v1.ListAggregationsRequest
	29,  // 96: optisam.products.v1.ProductService.UpdateAggregation:input_type -> optisam.products.v1.Aggregation
	95,  // 97: optisam.products.v1.ProductService.DeleteAggregation:input_type -> optisam.products.v1.DeleteAggregationRequest
	34,  // 98: optisam.products.v1.ProductService.OverviewProductQuality:input_type -> optisam.products.v1.OverviewProductQualityRequest
	106, // 99: optisam.products.v1.ProductService.DropProductData:input_type -> optisam.products.v1.DropProductDataRequest
	108, // 100: optisam.products.v1.ProductService.DropAggregationData:input_type -> optisam.products.v1.DropAggregationDataRequest
	27,  // 101: optisam.products.v1.ProductService.CreateAcqRight:input_type -> optisam.products.v1.AcqRightRequest
	23,  // 102: optisam.products.v1.ProductService.CreateDashboardUpdateJob:input_type -> optisam.products.v1.CreateDashboardUpdateJobRequest
	25,  // 103: optisam.products.v1.ProductService.GetBanner:input_type -> optisam.products.v1.GetBannerRequest
	27,  // 104: optisam.products.v1.ProductService.UpdateAcqRight:input_type -> optisam.products.v1.AcqRightRequest
	15,  // 105: optisam.products.v1.ProductService.DeleteAcqRight:input_type -> optisam.products.v1.DeleteAcqRightRequest
	17,  // 106: optisam.products.v1.ProductService.DownloadAcqRightFile:input_type -> optisam.products.v1.DownloadAcqRightFileRequest
	13,  // 107: optisam.products.v1.ProductService.GetEquipmentsByProduct:input_type -> optisam.products.v1.GetEquipmentsByProductRequest
	7,   // 108: optisam.products.v1.ProductService.GetAggregationAcqrightsExpandedView:input_type -> optisam.products.v1.GetAggregationAcqrightsExpandedViewRequest
	9,   // 109: optisam.products.v1.ProductService.GetAggregationProductsExpandedView:input_type -> optisam.products.v1.GetAggregationProductsExpandedViewRequest
	56,  // 110: optisam.products.v1.ProductService.ListProducts:output_type -> optisam.products.v1.ListProductsResponse
	82,  // 111: optisam.products.v1.ProductService.DashboardOverview:output_type -> optisam.products.v1.DashboardOverviewResponse
	37,  // 112: optisam.products.v1.ProductService.ProductsPerEditor:output_type -> optisam.products.v1.ProductsPerEditorResponse
	39,  // 113: optisam.products.v1.ProductService.GetRightsInfoByEditor:output_type -> optisam.products.v1.GetRightsInfoByEditorResponse
	60,  // 114: optisam.products.v1.ProductService.GetProductDetail:output_type -> optisam.products.v1.ProductResponse
	61,  // 115: optisam.products.v1.ProductService.GetProductOptions:output_type -> optisam.products.v1.ProductOptionsResponse
	46,  // 116: optisam.products.v1.ProductService.ListProductAggregationView:output_type -> optisam.products.v1.ListProductAggregationViewResponse
	43,  // 117: optisam.products.v1.ProductService.AggregatedRightDetails:output_type -> optisam.products.v1.AggregatedRightDetailsResponse
	51,  // 118: optisam.products.v1.ProductService.ListDeployedAndAcquiredEditors:output_type -> optisam.products.v1.ListEditorsResponse
	51,  // 119: optisam.products.v1.ProductService.ListEditors:output_type -> optisam.products.v1.ListEditorsResponse
	53,  // 120: optisam.products.v1.ProductService.ListEditorProducts:output_type -> optisam.products.v1.ListEditorProductsResponse
	66,  // 121: optisam.products.v1.ProductService.UpsertProduct:output_type -> optisam.products.v1.UpsertProductResponse
	84,  // 122: optisam.products.v1.ProductService.UpsertAcqRights:output_type -> optisam.products.v1.UpsertAcqRightsResponse
	79,  // 123: optisam.products.v1.ProductService.ProductsPerMetricType:output_type -> optisam.products.v1.ProductsPerMetricTypeResponse
	68,  // 124: optisam.products.v1.ProductService.ComplianceAlert:output_type -> optisam.products.v1.ComplianceAlertResponse
	78,  // 125: optisam.products.v1.ProductService.CounterfeitedProducts:output_type -> optisam.products.v1.CounterfeitedProductsResponse
	70,  // 126: optisam.products.v1.ProductService.OverdeployedProducts:output_type -> optisam.products.v1.OverdeployedProductsResponse
	72,  // 127: optisam.products.v1.ProductService.DashboardQualityProducts:output_type -> optisam.products.v1.DashboardQualityProductsResponse
	87,  // 128: optisam.products.v1.ProductService.ListAcqRights:output_type -> optisam.products.v1.ListAcqRightsResponse
	90,  // 129: optisam.products.v1.ProductService.ListAggregatedAcqRights:output_type -> optisam.products.v1.ListAggregatedAcqRightsResponse
	30,  // 130: optisam.products.v1.ProductService.CreateAggregation:output_type -> optisam.products.v1.AggregationResponse
	33,  // 131: optisam.products.v1.ProductService.CreateAggregatedRights:output_type -> optisam.products.v1.AggregatedRightsResponse
	33,  // 132: optisam.products.v1.ProductService.UpdateAggregatedRights:output_type -> optisam.products.v1.AggregatedRightsResponse
	20,  // 133: optisam.products.v1.ProductService.DeleteAggregatedRights:output_type -> optisam.products.v1.DeleteAggregatedRightsResponse
	22,  // 134: optisam.products.v1.ProductService.DownloadAggregatedRightsFile:output_type -> optisam.products.v1.DownloadAggregatedRightsFileResponse
	102, // 135: optisam.products.v1.ProductService.ListAggregationEditors:output_type -> optisam.products.v1.ListAggregationEditorsResponse
	104, // 136: optisam.products.v1.ProductService.ListAggregationProducts:output_type -> optisam.products.v1.ListAggregationProductsResponse
	98,  // 137: optisam.products.v1.ProductService.ListAggregations:output_type -> optisam.products.v1.ListAggregationsResponse
	30,  // 138: optisam.products.v1.ProductService.UpdateAggregation:output_type -> optisam.products.v1.AggregationResponse
	30,  // 139: optisam.products.v1.ProductService.DeleteAggregation:output_type -> optisam.products.v1.AggregationResponse
	35,  // 140: optisam.products.v1.ProductService.OverviewProductQuality:output_type -> optisam.products.v1.OverviewProductQualityResponse
	107, // 141: optisam.products.v1.ProductService.DropProductData:output_type -> optisam.products.v1.DropProductDataResponse
	109, // 142: optisam.products.v1.ProductService.DropAggregationData:output_type -> optisam.products.v1.DropAggregationDataResponse
	28,  // 143: optisam.products.v1.ProductService.CreateAcqRight:output_type -> optisam.products.v1.AcqRightResponse
	24,  // 144: optisam.products.v1.ProductService.CreateDashboardUpdateJob:output_type -> optisam.products.v1.CreateDashboardUpdateJobResponse
	26,  // 145: optisam.products.v1.ProductService.GetBanner:output_type -> optisam.products.v1.GetBannerResponse
	28,  // 146: optisam.products.v1.ProductService.UpdateAcqRight:output_type -> optisam.products.v1.AcqRightResponse
	16,  // 147: optisam.products.v1.ProductService.DeleteAcqRight:output_type -> optisam.products.v1.DeleteAcqRightResponse
	18,  // 148: optisam.products.v1.ProductService.DownloadAcqRightFile:output_type -> optisam.products.v1.DownloadAcqRightFileResponse
	14,  // 149: optisam.products.v1.ProductService.GetEquipmentsByProduct:output_type -> optisam.products.v1.GetEquipmentsByProductResponse
	8,   // 150: optisam.products.v1.ProductService.GetAggregationAcqrightsExpandedView:output_type -> optisam.products.v1.GetAggregationAcqrightsExpandedViewResponse
	10,  // 151: optisam.products.v1.ProductService.GetAggregationProductsExpandedView:output_type -> optisam.products.v1.GetAggregationProductsExpandedViewResponse
	110, // [110:152] is the sub-list for method output_type
	68,  // [68:110] is the sub-list for method input_type
	68,  // [68:68] is the sub-list for extension type_name
	68,  // [68:68] is the sub-list for extension extendee
	0,   // [0:68] is the sub-list for field type_name
}

func init() { file_product_proto_init() }
func file_product_proto_init() {
	if File_product_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationAcqrightsExpandedViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationAcqrightsExpandedViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationProductsExpandedViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationProductsExpandedViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregationProductViewOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregationProductViewOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquipmentsByProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquipmentsByProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAcqRightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAcqRightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAcqRightFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAcqRightFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAggregatedRightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAggregatedRightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAggregatedRightsFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAggregatedRightsFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDashboardUpdateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDashboardUpdateJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBannerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBannerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcqRightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcqRightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedRightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedRightsView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedRightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewProductQualityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewProductQualityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsPerEditorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsPerEditorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRightsInfoByEditorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRightsInfoByEditorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RightsInfoByEditor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditorProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedRightDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedRightDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductAggregationViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregationProductViewSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductAggregationViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregationView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeployedAndAcquiredEditorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEditorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEditorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEditorProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEditorProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Editor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductExpand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverdeployedProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverdeployedProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardQualityProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardQualityProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardQualityProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsLicenses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsCosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsPerMetricTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterfeitedProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterfeitedProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsPerMetricTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardOverviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardOverviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAcqRightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAcqRightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcqRightsSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcqRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregatedAcqRightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregatedAcqRightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcqRightsAggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsAggregationSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsAggregationRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsAggregationRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAggregationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationsSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationEditorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationEditorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropProductDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropProductDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropAggregationDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropAggregationDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProductRequestApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProductRequestEquipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProductRequestEquipmentEquipmentuser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_product_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   106,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_product_proto_goTypes,
		DependencyIndexes: file_product_proto_depIdxs,
		EnumInfos:         file_product_proto_enumTypes,
		MessageInfos:      file_product_proto_msgTypes,
	}.Build()
	File_product_proto = out.File
	file_product_proto_rawDesc = nil
	file_product_proto_goTypes = nil
	file_product_proto_depIdxs = nil
}
