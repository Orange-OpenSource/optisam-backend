syntax = "proto3";

option go_package = "optisam-backend/product-service/pkg/api/v1";

package optisam.products.v1;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";

service ProductService {


  rpc ListProducts(ListProductsRequest) returns (ListProductsResponse) {
    option (google.api.http) = {
      get : "/api/v1/products"
    };
  }

  rpc DashboardOverview(DashboardOverviewRequest) returns (DashboardOverviewResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/dashboard/overview"
    };
  }

  rpc ProductsPerEditor(ProductsPerEditorRequest) returns (ProductsPerEditorResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/dashboard/editors/products"
    };
  }

  rpc GetRightsInfoByEditor(GetRightsInfoByEditorRequest) returns (GetRightsInfoByEditorResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/simulation/{editor}/rights"
    };
  }

  rpc GetProductDetail(ProductRequest) returns (ProductResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/{swid_tag}"
    };
  }

  rpc GetProductOptions(ProductRequest) returns (ProductOptionsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/{swid_tag}/options"
    };
  }

  rpc ListProductAggregationView(ListProductAggregationViewRequest)
      returns (ListProductAggregationViewResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/aggregation/view"
    };
  }

  rpc AggregatedRightDetails(AggregatedRightDetailsRequest)returns (AggregatedRightDetailsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/aggregations/{ID}/details"
    };
  }

  rpc ListDeployedAndAcquiredEditors(ListDeployedAndAcquiredEditorsRequest) returns (ListEditorsResponse){
    option (google.api.http) = {
      get : "/api/v1/product/simulation/editors"
    };
  }

  rpc ListEditors(ListEditorsRequest) returns (ListEditorsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/editors"
    };
  }

    rpc ListEditorProducts(ListEditorProductsRequest) returns (ListEditorProductsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/editors/products"
    };
  }

  rpc UpsertProduct(UpsertProductRequest) returns (UpsertProductResponse) {
    option (google.api.http) = {
      post : "/api/v1/products"
      body : "*"
    };
  }

  rpc UpsertAcqRights(UpsertAcqRightsRequest) returns (UpsertAcqRightsResponse) {
    option (google.api.http) = {
      post : "/api/v1/product/acqrights"
      body : "*"
    };
  }

  rpc ProductsPerMetricType(ProductsPerMetricTypeRequest) returns (ProductsPerMetricTypeResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/dashboard/metrics/products"
    };
  }

  rpc ComplianceAlert(ComplianceAlertRequest) returns (ComplianceAlertResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/dashboard/alert/compliance"
    };
  }

  rpc CounterfeitedProducts(CounterfeitedProductsRequest) returns (CounterfeitedProductsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/dashboard/compliance/counterfeiting"
    };
  }

  rpc OverdeployedProducts(OverdeployedProductsRequest) returns (OverdeployedProductsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/dashboard/compliance/overdeployment"
    };
  }

  rpc DashboardQualityProducts(DashboardQualityProductsRequest) returns (DashboardQualityProductsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/dashboard/quality/products"
    };
  }

  rpc ListAcqRights(ListAcqRightsRequest) returns (ListAcqRightsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/acqrights"
    };
  }

  rpc ListAggregatedAcqRights(ListAggregatedAcqRightsRequest)returns (ListAggregatedAcqRightsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/aggregated_acqrights"
    };
  }

  // rpc ListAcqRightsAggregationRecords(ListAcqRightsAggregationRecordsRequest)
  //     returns (ListAcqRightsAggregationRecordsResponse) {
  //   option (google.api.http) = {
  //     get : "/api/v1/product/acqrights/aggregations/{aggregation_id}/records"
  //   };
  // }

  //  rpc ProductAggregationProductViewOptions(ProductAggregationProductViewOptionsRequest)
  //  returns (ProductAggregationProductViewOptionsResponse) {
  //     option (google.api.http) = {
  //     get : "/api/v1/product/aggregations/productview/{ID}/options"
  //   };
  // }

  rpc CreateAggregation(Aggregation)returns (AggregationResponse) {
    option (google.api.http) = {
      post : "/api/v1/product/aggregations"
      body : "*"
    };
  }

   rpc CreateAggregatedRights(AggregatedRightsRequest)returns (AggregatedRightsResponse) {
    option (google.api.http) = {
      post : "/api/v1/product/aggregatedrights"
      body : "*"
    };
  }

  rpc UpdateAggregatedRights(AggregatedRightsRequest)returns (AggregatedRightsResponse) {
    option (google.api.http) = {
      put : "/api/v1/product/aggregatedrights/{sku}"
      body : "*"
       additional_bindings{
        patch : "/api/v1/product/aggregatedrights/{sku}"
        body : "*"
      }
    };
  }

  rpc DeleteAggregatedRights(DeleteAggregatedRightsRequest)returns (DeleteAggregatedRightsResponse) {
    option (google.api.http) = {
      delete : "/api/v1/product/aggregatedrights/{sku}"
    };
  }

    rpc DownloadAggregatedRightsFile(DownloadAggregatedRightsFileRequest)returns (DownloadAggregatedRightsFileResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/aggregatedrights/{sku}/file"
    };
  }

  rpc ListAggregationEditors(ListAggregationEditorsRequest)returns (ListAggregationEditorsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/aggregations/editors"
    };
  }

  rpc ListAggregationProducts(ListAggregationProductsRequest)returns (ListAggregationProductsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/aggregations/products"
    };
  }
  
  rpc ListAggregations(ListAggregationsRequest)returns (ListAggregationsResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/aggregations"
    };
  }
  
  rpc UpdateAggregation(Aggregation)returns (AggregationResponse) {
    option (google.api.http) = {
      put : "/api/v1/product/aggregations/{ID}"
      body : "*"
      additional_bindings{
        patch : "/api/v1/product/aggregations/{ID}"
        body : "*"
      }
    };
  }

  rpc DeleteAggregation(DeleteAggregationRequest)returns (AggregationResponse) {
    option (google.api.http) = {
      delete : "/api/v1/product/aggregations/{ID}"
    };
  }

  rpc OverviewProductQuality(OverviewProductQualityRequest) returns (OverviewProductQualityResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/dashboard/product/quality"
    };
  }

  
  rpc DropProductData(DropProductDataRequest)returns (DropProductDataResponse) {
    option (google.api.http) = {
      delete : "/api/v1/product/{scope}"
    };
  }

  rpc DropAggregationData(DropAggregationDataRequest)returns (DropAggregationDataResponse) {
    option (google.api.http) = {
      delete : "/api/v1/product/aggregation/{scope}"
    };
  }

  rpc CreateAcqRight(AcqRightRequest) returns (AcqRightResponse) {
    option (google.api.http) = {
      post : "/api/v1/product/acqright"
      body : "*"
    };
  }

  rpc CreateDashboardUpdateJob(CreateDashboardUpdateJobRequest) returns (CreateDashboardUpdateJobResponse) {
  }

  rpc GetBanner(GetBannerRequest) returns (GetBannerResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/banner"
    };
  }

  rpc UpdateAcqRight(AcqRightRequest) returns (AcqRightResponse) {
    option (google.api.http) = {
      put : "/api/v1/product/acqright/{sku}"
      body : "*"
      additional_bindings{
        patch : "/api/v1/product/acqright/{sku}"
        body : "*"
      }
    };
  }

  rpc DeleteAcqRight(DeleteAcqRightRequest)returns (DeleteAcqRightResponse) {
    option (google.api.http) = {
      delete : "/api/v1/product/acqright/{sku}"
    };
  }

  rpc DownloadAcqRightFile(DownloadAcqRightFileRequest)returns (DownloadAcqRightFileResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/acqright/{sku}/file"
    };
  }

  rpc GetEquipmentsByProduct(GetEquipmentsByProductRequest)returns (GetEquipmentsByProductResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/equipments"
    };
  }

  rpc GetAggregationAcqrightsExpandedView(GetAggregationAcqrightsExpandedViewRequest)returns (GetAggregationAcqrightsExpandedViewResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/expand/aggregation_acqrights"
    };
  }

  rpc GetAggregationProductsExpandedView(GetAggregationProductsExpandedViewRequest)returns (GetAggregationProductsExpandedViewResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/expand/aggregation_products"
    };
  }
}



message GetAggregationAcqrightsExpandedViewRequest{
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
  string aggregation_name = 2 [(validate.rules).string.min_len = 1];
  string metric = 3;
}

message GetAggregationAcqrightsExpandedViewResponse{
  int32 total_records = 1;
  repeated AcqRights acqRights =2;
}

message GetAggregationProductsExpandedViewRequest { 
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
  string aggregation_name = 2 [(validate.rules).string.min_len = 1]; 
}

message GetAggregationProductsExpandedViewResponse {
  int32 total_records = 1;
  repeated ProductExpand products =2;
}

message ProductAggregationProductViewOptionsRequest { int32 ID = 1;
  repeated string scopes = 2 [(validate.rules).repeated  = {min_items: 1, max_items: 1},(validate.rules).repeated.items.string.pattern = "\\b[A-Z]{3}\\b"]; }

message ProductAggregationProductViewOptionsResponse {
  int32 numOfOptions = 1;
  repeated OptionInfo optioninfo = 2;
}

message GetEquipmentsByProductRequest {  
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
  string swidTag = 2;
}

message GetEquipmentsByProductResponse { 
  repeated string equipment_id = 1; 
}

message DeleteAcqRightRequest {
  string sku = 1 [(validate.rules).string.pattern = "^[a-zA-Z0-9_.]+$" ];
  string scope = 2 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message DeleteAcqRightResponse{
   bool success = 1; 
}

message DownloadAcqRightFileRequest {
  string sku = 1 [(validate.rules).string.pattern = "^[a-zA-Z0-9_.]+$" ];
  string scope = 2 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message DownloadAcqRightFileResponse {
  bytes file_data = 1;
}

message DeleteAggregatedRightsRequest{
  string sku = 1 [(validate.rules).string.pattern = "^[a-zA-Z0-9_.]+$" ];
  string scope = 2 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"]; 
}

message DeleteAggregatedRightsResponse{ bool success = 1; }

message DownloadAggregatedRightsFileRequest {
  string sku = 1 [(validate.rules).string.pattern = "^[a-zA-Z0-9_.]+$" ];
  string scope = 2 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message DownloadAggregatedRightsFileResponse {
  bytes file_data = 1;
}

message CreateDashboardUpdateJobRequest{
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message CreateDashboardUpdateJobResponse{
  bool success = 1;
}


message GetBannerRequest{
  string time_zone = 1 [(validate.rules).string = {in: ["CET", "IST", "CEST"]}];
  string scope = 2 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];

}

message GetBannerResponse{
  string updated_at = 1;
  string next_update_at = 2;
}

message AcqRightRequest {
  string sku = 1 [(validate.rules).string.pattern = "^[a-zA-Z0-9_.]+$" ];
  string product_name = 2 [(validate.rules).string.pattern = "^[\\sa-zA-Z0-9().+-]+$" ];
  string version = 3 [ (validate.rules).string.pattern = "^[\\sa-zA-Z0-9.-]+$" ];
  string product_editor = 4 [(validate.rules).string.pattern =  "^[\\sa-zA-Z0-9.-]+$"];
  string metric_name = 5 [(validate.rules).string.min_len = 1 ];
  int32 num_licenses_acquired = 6 [(validate.rules).int32 = { gte: 0}];
  double avg_unit_price = 7 [(validate.rules).double = { gte: 0}];
  string start_of_maintenance = 8 ;
  string end_of_maintenance = 9 ;
  int32 num_licences_maintainance = 10 [(validate.rules).int32 = { gte: 0}];
  double avg_maintenance_unit_price = 11 [(validate.rules).double = { gte: 0}];
  string last_purchased_order = 12 [(validate.rules).string.max_len = 16 ];
  string support_number = 13 [(validate.rules).string.max_len = 16 ];
  string maintenance_provider = 14 [(validate.rules).string.max_len = 16 ];
  string scope = 15 [(validate.rules).string.min_len = 1 ];
  string comment = 16 [(validate.rules).string.max_len = 100 ];
  string ordering_date = 17;
  string corporate_sourcing_contract = 18 [(validate.rules).string.max_len = 16 ];
  string software_provider = 19 [(validate.rules).string.max_len = 16 ];
  string file_name = 20;
  bytes file_data = 21;
}

message AcqRightResponse { 
  bool success = 1; 
}

message Aggregation {
  int32 ID = 1;
  string aggregation_name = 2;
  string product_editor = 3 [(validate.rules).string.pattern =  "^[\\sa-zA-Z0-9.-]+$"];
  repeated string product_names = 4 [(validate.rules).repeated  = {min_items: 1},(validate.rules).repeated.items.string.pattern = "^[\\sa-zA-Z0-9().+-]+$"];
  repeated string swidtags = 5 [(validate.rules).repeated  = {min_items: 1}];
  string scope = 6 [(validate.rules).string.min_len = 1 ];
}

message AggregationResponse { 
  bool success = 1; 
}

message AggregatedRightsRequest {
  string sku = 1 [(validate.rules).string.pattern = "^[a-zA-Z0-9_.]+$" ];
  int32 aggregationID = 2;
  string metric_name = 3 [(validate.rules).string.min_len = 1 ];
  int32 num_licenses_acquired = 4 [(validate.rules).int32 = { gte: 0}];
  double avg_unit_price = 5 [(validate.rules).double = { gte: 0}];
  string start_of_maintenance = 6 ; 
  string end_of_maintenance = 7 ;
  string last_purchased_order= 8 [(validate.rules).string.max_len = 16 ];
  string support_number= 9 [(validate.rules).string.max_len = 16 ];
  string maintenance_provider= 10 [(validate.rules).string.max_len = 16 ];
  int32 num_licences_maintenance = 11 [(validate.rules).int32 = { gte: 0}];
  double avg_maintenance_unit_price = 12 [(validate.rules).double = { gte: 0}];
  string scope = 13 [(validate.rules).string.min_len = 1 ];
  string comment = 14 [(validate.rules).string.max_len = 100 ];
  string ordering_date= 15;
  string corporate_sourcing_contract= 16 [(validate.rules).string.max_len = 16 ];
  string software_provider= 17 [(validate.rules).string.max_len = 16 ];
  string file_name = 18;
  bytes file_data = 19;
}

message AggregatedRightsView {
  int32 ID = 1;
  string aggregation_name = 2;
  string sku = 3 [(validate.rules).string.pattern = "^[a-zA-Z0-9_.]+$" ];
  string product_editor = 4 [(validate.rules).string.pattern =  "^[\\sa-zA-Z0-9.-]+$"];
  string metric_name = 5 [(validate.rules).string.min_len = 1 ];
  repeated string product_names = 6 [(validate.rules).repeated  = {min_items: 1},(validate.rules).repeated.items.string.pattern = "^[\\sa-zA-Z0-9().+-]+$"];
  repeated string swidtags = 7 [(validate.rules).repeated  = {min_items: 1}];
  int32 num_licenses_acquired = 8 [(validate.rules).int32 = { gte: 0}];
  double avg_unit_price = 9 [(validate.rules).double = { gte: 0}];
  string start_of_maintenance = 10 ;
  string end_of_maintenance = 11 ;
  int32 num_licences_maintenance = 12 [(validate.rules).int32 = { gte: 0}];
  double avg_maintenance_unit_price = 13 [(validate.rules).double = { gte: 0}];
  string scope = 14 [(validate.rules).string.min_len = 1 ];
  string comment = 15 [(validate.rules).string.max_len = 100 ];
  bool is_individual_right_exists = 16;
  double total_purchase_cost = 17 [(validate.rules).double = { gte: 0}];
  double total_cost = 18 [(validate.rules).double = { gte: 0}];
  double total_maintenance_cost = 19 [(validate.rules).double = { gte: 0}];
  string  licence_under_maintenance = 20;
  string ordering_date = 21;
  string corporate_sourcing_contract = 22;
  string software_provider = 23;
  string last_purchased_order = 24;
  string support_number = 25;
  string maintenance_provider = 26;
  string file_name = 27;
}

message AggregatedRightsResponse { 
  bool success = 1; 
}

message OverviewProductQualityRequest{
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message OverviewProductQualityResponse{
 int32 not_acquired_products = 1;
 int32 not_deployed_products  = 2;
 double not_acquired_products_percentage = 3;
 double not_deployed_products_percentage = 4;
}


message ProductsPerEditorRequest {
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message ProductsPerEditorResponse {
  repeated EditorProducts editors_products = 1;
}

message GetRightsInfoByEditorRequest {
  string editor = 1 [(validate.rules).string.min_len = 1 ];
  string scope = 2 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message GetRightsInfoByEditorResponse {
repeated RightsInfoByEditor editor_rights = 1;
}

message RightsInfoByEditor {
string sku = 1;
string swidtag = 2;
string aggregation_name = 3;
string metric_name = 4;
double avg_unit_price = 5;
int32 num_licenses_acquired = 6;
}

message EditorProducts {
  string editor = 1;
  int32 num_products = 2;
}

message AggregatedRightDetailsRequest { 
  int32 ID = 1;
  string scope = 2 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message AggregatedRightDetailsResponse {
  int32 ID = 1;
  string name = 2;
  string editor = 3;
  repeated string product_names = 4;
  int32 num_applications = 5;
  int32 num_equipments = 6;
  repeated string products = 7;
  repeated string versions = 8;
  repeated string defined_metrics = 9; 
}

message ListProductAggregationViewRequest {
  int32 page_num = 1 [
    (validate.rules).int32 = {gte : 1, lt : 1000},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Page number", minimum : 1, maximum : 1000}
  ];
  int32 page_size = 2 [
    (validate.rules).int32 = {gte : 10, lte : 200},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Items per page", minimum : 10, maximum : 200}
  ];
  enum SortBy {
    aggregation_name = 0;
    product_editor = 1;
    num_of_applications = 2;
    num_of_equipments = 3;
    cost = 4;
  }
  SortBy sort_by = 3 [ (validate.rules).enum.defined_only = true ];
  SortOrder sort_order = 4 [ (validate.rules).enum.defined_only = true ];
  ProductAggregationProductViewSearchParams search_params = 5;
  repeated string scopes = 6 [(validate.rules).repeated  = {min_items: 1, max_items: 1},(validate.rules).repeated.items.string.pattern = "\\b[A-Z]{3}\\b"];
}

message ProductAggregationProductViewSearchParams {
  StringFilter swidTag = 1;
  StringFilter name = 2;
  StringFilter editor = 3;
  StringFilter product_name = 4;
  /* map<string,string> search_map = 5 [(validate.rules).map.keys.string = {in:
   * ["name",
   * "swidtag","version","category","editor","metric","numCptLicences","numAcqLicences","totalCost","deltaNumber","deltaCost","numOfApplications","numofEquipments"]}];*/
}

message ListProductAggregationViewResponse {
  int32 totalRecords = 1;
  repeated ProductAggregationView aggregations = 2;
}

message ProductAggregationView {
  int32 ID = 1;
  string aggregation_name = 2;
  string editor = 3;
  int32 num_applications = 4;
  int32 num_equipments = 5;
  double total_cost = 6;
  repeated string swidtags = 7;
  bool individual_product_exists = 8;
}

message ProductAggRecord {
  string swidTag = 1;
  string Name = 2;
  string edition = 3;
  string editor = 4;
  string version = 5;
  int32 num_applications = 6;
  int32 num_equipments = 7;
  double totalCost = 8;
  string aggregation_name = 9;
}

message ListDeployedAndAcquiredEditorsRequest {
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message ListEditorsRequest { repeated string scopes = 1  [(validate.rules).repeated.items.string.pattern = "\\b[A-Z]{3}\\b"];}

message ListEditorsResponse { repeated string editors = 1; }

message ListEditorProductsRequest { 
  string editor = 1;
  repeated string scopes = 2 [(validate.rules).repeated.items.string.pattern = "\\b[A-Z]{3}\\b"];
}

message ListEditorProductsResponse { repeated Product products = 1; }

message Editor { string Name = 1; }

message Product {
  string swidTag = 1;
  string name = 2;
  string version = 3;
  string category = 4;
  string edition = 5;
  string editor = 6;
  double totalCost = 7;
  int32 numOfApplications = 8;
  int32 numofEquipments = 9;
}

message ListProductsResponse {
  int32 totalRecords = 1;
  repeated Product products = 2;
}

message ListProductsRequest {
  int32 page_num = 1 [
    (validate.rules).int32 = {gte : 1, lt : 1000},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Page number", minimum : 1, maximum : 1000}
  ];
  int32 page_size = 2 [
    (validate.rules).int32 = {gte : 10, lte : 200},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Items per page", minimum : 10, maximum : 200}
  ];
  string sort_by = 3 [ (validate.rules).string = {
    in : [
      "name",
      "swidtag",
      "version",
      "edition",
      "category",
      "editor",
      "totalCost",
      "numOfApplications",
      "numofEquipments"
    ]
  } ];
  SortOrder sort_order = 4 [ (validate.rules).enum.defined_only = true ];
  ProductSearchParams search_params = 5;
  repeated string scopes = 6 [(validate.rules).repeated  = {min_items: 1, max_items: 1},(validate.rules).repeated.items.string.pattern = "\\b[A-Z]{3}\\b"];
}

message ProductSearchParams {
  StringFilter swidTag = 1;
  StringFilter name = 2;
  StringFilter editor = 3;
  StringFilter application_id = 4;
  StringFilter instance_id = 5;
  StringFilter equipment_id = 6;
}

message ProductRequest { string swid_tag = 1;
  string scope = 2 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
 }

message ProductResponse {
  string swidTag = 1;
  string product_name = 2;
  string editor = 3;
  string version = 4;
  int32 num_applications = 5;
  int32 num_equipments = 6;
  repeated string defined_metrics = 7; 
}

message ProductOptionsResponse {
  int32 numOfOptions = 1;
  repeated OptionInfo optioninfo = 2;
}

message OptionInfo {
  string swidTag = 1;
  string Name = 2;
  string edition = 3;
  string editor = 4;
  string version = 5;
}

message ProductExpand {
  string swidTag = 1;
  string Name = 2;
  string edition = 3;
  string editor = 4;
  string version = 5;
  int32 num_applications = 6;
  int32 num_equipments = 7;
  double totalCost = 8;
}

message StringFilter {
  int32 filteringOrder = 1;
  string filteringkey = 2;
  bool filter_type = 3;
  repeated string filteringkey_multiple = 4;
}

enum SortOrder {
  asc = 0;
  desc = 1;
}

enum DataTypes {
  UNKNOWN = 0;
  STRING = 1;
  INT = 2;
  FLOAT = 3;
}

message UpsertProductRequest {
  string swidTag = 1;
  string name = 2;
  string category = 3;
  string edition = 4;
  string editor = 5;
  string version = 6;
  string optionOf = 7;
  // SCOPE BASED CHANGES
  string scope = 8 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
  application applications = 9;
  equipment equipments = 10;
  message application {
    string operation = 1
        [ (validate.rules).string = {in : [ "add", "delete" ]} ];
    repeated string application_id = 2;
  }
  message equipment {
    string operation = 1
        [ (validate.rules).string = {in : [ "add", "delete" ]} ];
    repeated equipmentuser equipmentusers = 2;
    message equipmentuser {
      string equipment_id = 1;
      int32 num_user = 2;
    }
  }
}

message UpsertProductResponse { bool success = 1; }

message ComplianceAlertRequest {
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message ComplianceAlertResponse {
  double counterfeiting_percentage = 1;
  double overdeployment_percentage = 2;
}

message OverdeployedProductsRequest {
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
  string editor = 2;
}

message OverdeployedProductsResponse {
  repeated ProductsLicenses products_licenses = 1;
  repeated ProductsCosts products_costs = 2; 
}

message DashboardQualityProductsRequest {
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message DashboardQualityProductsResponse {
  repeated DashboardQualityProducts products_not_deployed = 1;
  repeated DashboardQualityProducts products_not_acquired = 2;
}

message DashboardQualityProducts {
  string swid_tag = 1;
  string product_name = 2; 
  string editor = 3;
  string version = 4;
}

message ProductsLicenses {
  string swid_tag = 1;
  string product_name = 2;
  string aggregation_name = 3;
  int64 num_licenses_acquired = 4;
  int64 num_licenses_computed = 5;
  int64 delta = 6;

}

message ProductsCosts {
  string swid_tag = 1;
  string product_name = 2;
  string aggregation_name = 3;
  double licenses_acquired_cost = 4;
  double licenses_computed_cost = 5;
  double delta_cost = 6;
}

message ProductsPerMetricTypeRequest {
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message CounterfeitedProductsRequest {
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
  string editor = 2;
}

message CounterfeitedProductsResponse {
  repeated ProductsLicenses products_licenses = 1;
  repeated ProductsCosts products_costs = 2; 

}


message ProductsPerMetricTypeResponse {
  repeated MetricProducts metrics_products = 1;
}

message MetricProducts {
  string metric_name = 1;
  int32 num_products = 2;
}

message DashboardOverviewRequest {
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message DashboardOverviewResponse {
    double total_license_cost = 1;
    double total_maintenance_cost = 2;
    int32 num_editors = 3;
    int32 num_products = 4;
    double total_counterfeiting_amount = 5;
    double total_underusage_amount = 6;
}

message UpsertAcqRightsRequest {
  string sku = 1 [ (validate.rules).string.min_len = 1 ];
  string swidtag = 2 [ (validate.rules).string.min_len = 1 ];
  string product_name = 3;
  string product_editor = 4;
  string metric_type = 5;
  int32 num_licenses_acquired = 6;
  double avg_unit_price = 7;
  double avg_maintenance_unit_price = 8;
  double total_purchase_cost = 9;
  double total_maintenance_cost = 10;
  double total_cost = 11;
  string scope = 12 [ (validate.rules).string.min_len = 1 ];
  string start_of_maintenance = 13 ;
  string end_of_maintenance = 14 ;
  int32 num_licences_maintainance = 15;
  string version = 16 [ (validate.rules).string.min_len = 1 ];
  string corporate_sourcing_contract = 17 [(validate.rules).string.max_len = 16 ];
  string ordering_date = 18;
  string software_provider = 19 [(validate.rules).string.max_len = 16 ];
  string maintenance_provider = 20 [(validate.rules).string.max_len = 100 ];
  string last_purchased_order = 21 [(validate.rules).string.max_len = 16 ];
  string support_number = 22;
}



message UpsertAcqRightsResponse { bool success = 1; }

message ListAcqRightsRequest {
  int32 page_num = 1 [
    (validate.rules).int32 = {gte : 1, lt : 1000},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Page number", minimum : 1, maximum : 1000}
  ];
  int32 page_size = 2 [
    (validate.rules).int32 = {gte : 10, lte : 200},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Items per page", minimum : 10, maximum : 200}
  ];
  enum SortBy {
    SKU = 0;
    SWID_TAG = 1;
    PRODUCT_NAME = 2;
    EDITOR = 3;
    METRIC = 4;
    ACQUIRED_LICENSES_NUMBER = 5;
    AVG_LICENSE_UNIT_PRICE = 6;
    AVG_MAINTENANCE_UNIT_PRICE = 7;
    TOTAL_PURCHASE_COST = 8;
    TOTAL_MAINTENANCE_COST = 9;
    TOTAL_COST = 10;
    START_OF_MAINTENANCE = 11;
    END_OF_MAINTENANCE = 12;
    LICENSES_UNDER_MAINTENANCE_NUMBER = 13;
  }
  SortBy sort_by = 3 [ (validate.rules).enum.defined_only = true ];
  SortOrder sort_order = 4; //[(validate.rules).enum.defined_only = true];
  AcqRightsSearchParams search_params = 5;
  repeated string scopes = 6 [(validate.rules).repeated  = {min_items: 1, max_items: 1},(validate.rules).repeated.items.string.pattern = "\\b[A-Z]{3}\\b"];
}

message AcqRightsSearchParams {
  StringFilter swidTag = 1;
  StringFilter SKU = 2;
  StringFilter editor = 3;
  StringFilter productName = 4;
  StringFilter metric = 5;
  StringFilter softwareProvider = 6;
  StringFilter orderingDate = 7;//
}

message ListAcqRightsResponse {
  int32 totalRecords = 1;
  repeated AcqRights acquired_rights = 2;
}

message AcqRights {
  string SKU = 1;
  string swid_tag = 2;
  string product_name = 3;
  string editor = 4;
  string metric = 5;
  int32 acquired_licenses_number = 6;
  double avg_licenes_unit_price = 7;
  double avg_maintenance_unit_price = 8;
  double total_purchase_cost = 9;
  double total_maintenance_cost = 10;
  double total_cost = 11;
  google.protobuf.Timestamp start_of_maintenance = 12;
  google.protobuf.Timestamp end_of_maintenance = 13;
  string licenses_under_maintenance = 14;
  int32 licenses_under_maintenance_number = 15;
  string version = 16;
  string comment = 17;
  google.protobuf.Timestamp ordering_date = 18;
  string corporate_sourcing_contract = 19;
  string software_provider = 20;
  string last_purchased_order = 21;
  string support_number = 22;
  string maintenance_provider = 23;
  string file_name = 24;
}

message ListAggregatedAcqRightsRequest {
  int32 page_num = 1 [
    (validate.rules).int32 = {gte : 1, lt : 1000},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Page number", minimum : 1, maximum : 1000}
  ];
  int32 page_size = 2 [
    (validate.rules).int32 = {gte : 10, lte : 200},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Items per page", minimum : 10, maximum : 200}
  ];
  enum SortBy {
    SKU = 0;
    EDITOR = 1;
    TOTAL_COST = 2;
    METRIC = 3;
    AGG_NAME = 4;
    NUM_OF_SWIDTAGS =5;
    ACQUIRED_LICENSES = 6;
    MAINTENANCE_LICENCES = 7;
    MAINTENANCE_START =8;
    MAINTENANCE_END = 9;
    UNIT_PRICE = 10;
    MAINTENANCE_PRICE = 11;
    TOTAL_PURCHASED_COST = 12;
    TOTAL_MAINTENANCE_COST = 13;
    LICENSES_UNDER_MAINTENANCE = 14;
  }

  SortBy sort_by = 3 [ (validate.rules).enum.defined_only = true ];
  SortOrder sort_order = 4;
  ListAcqRightsAggregationSearchParams search_params = 5;
  string scope = 6 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
  
}

message ListAggregatedAcqRightsResponse {
  int32 totalRecords = 1;
  repeated AggregatedRightsView aggregations = 2;
}

message AcqRightsAggregation {
  int32 ID = 1;
  string name = 2;
  string scope = 3;
  string editor = 4;
  repeated string swidtags = 5;
  repeated string skus = 6;
  string metric = 7;
  double total_cost = 8;
}

message ListAcqRightsAggregationSearchParams {
  StringFilter name = 1;
  StringFilter editor = 2;
  StringFilter SKU = 3;
  StringFilter metric = 4;
  StringFilter ordering_date = 5;
  StringFilter software_provider = 6;
  /* map<string,string> search_map = 5 [(validate.rules).map.keys.string = {in:
   * ["name",
   * "swidtag","version","category","editor","metric","numCptLicences","numAcqLicences","totalCost","deltaNumber","deltaCost","numOfApplications","numofEquipments"]}];*/
}

message ListAcqRightsAggregationRecordsRequest { int32 aggregation_id = 1;
repeated string scopes = 2 [(validate.rules).repeated  = {min_items: 1, max_items: 1},(validate.rules).repeated.items.string.pattern = "\\b[A-Z]{3}\\b"];
 }

message ListAcqRightsAggregationRecordsResponse {
  repeated AcqRights acquired_rights = 1;
}

message DeleteAggregationRequest {
  int32 ID = 1 [(validate.rules).int32 = { gte: 0}];
  string scope = 2 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message ListAggregationsRequest {
  int32 page_num = 1 [
    (validate.rules).int32 = {gte : 1, lt : 1000},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Page number", minimum : 1, maximum : 1000}
  ];
  int32 page_size = 2 [
    (validate.rules).int32 = {gte : 10, lte : 200},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Items per page", minimum : 10, maximum : 200}
  ];
  enum SortBy {
    aggregation_name = 0;
    product_editor = 1;
  }
  SortBy sort_by = 3 [(validate.rules).enum.defined_only = true ];
  SortOrder sort_order = 4 [(validate.rules).enum.defined_only = true];
  ListAggregationsSearchParams search_params = 5;
  string scope = 6 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message ListAggregationsSearchParams {
  StringFilter aggregation_name = 1;
  StringFilter product_editor = 2;
}

message ListAggregationsResponse {
  int32 total_records = 1;
  repeated Aggregation aggregations = 2;
}

message ProductAggregationMessage {
  int32 ID = 1;
  string name = 2 [(validate.rules).string.pattern = "^[a-zA-Z0-9_-]+$"];
  string editor = 3;
  string metric = 4;
  string scope = 5 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
  repeated string products = 6;
}

message ProductAggregation {
  int32 ID = 1;
  string name = 2;
  string editor = 3;
  repeated string product_names = 4;
  string metric = 5;
  string scope = 6;
  repeated string products = 7;
}


message ListAggregationEditorsRequest { string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"]; }
message ListAggregationEditorsResponse { repeated string editor = 1; }

message ListAggregationProductsRequest { 
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
  string editor = 2;
  int32 ID = 4 [(validate.rules).int32 = { gte: 0}];
}

message ListAggregationProductsResponse {
  repeated AggregationProducts aggrights_products = 1;
  repeated AggregationProducts selected_products = 2;
}

message AggregationProducts {
  string swidtag = 1;
  string product_name = 2;
  string editor = 3;
}

message DropProductDataRequest {  
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
  enum deletion_types {
    ACQRIGHTS = 0;
    FULL = 1;
    PARK = 2;
  }
  deletion_types deletion_type = 2 [(validate.rules).enum = {in: [0,1,2]}];
}

message DropProductDataResponse { 
  bool success = 1; 
}

message DropAggregationDataRequest {  
  string scope = 1 [(validate.rules).string.pattern = "\\b[A-Z]{3}\\b"];
}

message DropAggregationDataResponse { 
  bool success = 1; 
}