// Code generated by MockGen. DO NOT EDIT.
// Source: ../../thirdparty/catalog-service/pkg/api/v1/catalog_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "gitlab.tech.orange/optisam/optisam-it/optisam-services/import-service/thirdparty/catalog-service/pkg/api/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockProductCatalogClient is a mock of ProductCatalogClient interface
type MockProductCatalogClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductCatalogClientMockRecorder
}

// MockProductCatalogClientMockRecorder is the mock recorder for MockProductCatalogClient
type MockProductCatalogClientMockRecorder struct {
	mock *MockProductCatalogClient
}

// NewMockProductCatalogClient creates a new mock instance
func NewMockProductCatalogClient(ctrl *gomock.Controller) *MockProductCatalogClient {
	mock := &MockProductCatalogClient{ctrl: ctrl}
	mock.recorder = &MockProductCatalogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductCatalogClient) EXPECT() *MockProductCatalogClientMockRecorder {
	return m.recorder
}

// InsertProduct mocks base method
func (m *MockProductCatalogClient) InsertProduct(ctx context.Context, in *v1.Product, opts ...grpc.CallOption) (*v1.Product, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertProduct", varargs...)
	ret0, _ := ret[0].(*v1.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProduct indicates an expected call of InsertProduct
func (mr *MockProductCatalogClientMockRecorder) InsertProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockProductCatalogClient)(nil).InsertProduct), varargs...)
}

// GetProduct mocks base method
func (m *MockProductCatalogClient) GetProduct(ctx context.Context, in *v1.GetProductRequest, opts ...grpc.CallOption) (*v1.Product, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProduct", varargs...)
	ret0, _ := ret[0].(*v1.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct
func (mr *MockProductCatalogClientMockRecorder) GetProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductCatalogClient)(nil).GetProduct), varargs...)
}

// CreateEditor mocks base method
func (m *MockProductCatalogClient) CreateEditor(ctx context.Context, in *v1.CreateEditorRequest, opts ...grpc.CallOption) (*v1.Editor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEditor", varargs...)
	ret0, _ := ret[0].(*v1.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEditor indicates an expected call of CreateEditor
func (mr *MockProductCatalogClientMockRecorder) CreateEditor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEditor", reflect.TypeOf((*MockProductCatalogClient)(nil).CreateEditor), varargs...)
}

// UpdateEditor mocks base method
func (m *MockProductCatalogClient) UpdateEditor(ctx context.Context, in *v1.Editor, opts ...grpc.CallOption) (*v1.Editor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEditor", varargs...)
	ret0, _ := ret[0].(*v1.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEditor indicates an expected call of UpdateEditor
func (mr *MockProductCatalogClientMockRecorder) UpdateEditor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEditor", reflect.TypeOf((*MockProductCatalogClient)(nil).UpdateEditor), varargs...)
}

// DeleteProduct mocks base method
func (m *MockProductCatalogClient) DeleteProduct(ctx context.Context, in *v1.GetProductRequest, opts ...grpc.CallOption) (*v1.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProduct", varargs...)
	ret0, _ := ret[0].(*v1.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct
func (mr *MockProductCatalogClientMockRecorder) DeleteProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductCatalogClient)(nil).DeleteProduct), varargs...)
}

// UpdateProduct mocks base method
func (m *MockProductCatalogClient) UpdateProduct(ctx context.Context, in *v1.Product, opts ...grpc.CallOption) (*v1.Product, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProduct", varargs...)
	ret0, _ := ret[0].(*v1.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct
func (mr *MockProductCatalogClientMockRecorder) UpdateProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductCatalogClient)(nil).UpdateProduct), varargs...)
}

// BulkFileUpload mocks base method
func (m *MockProductCatalogClient) BulkFileUpload(ctx context.Context, in *v1.UploadRecords, opts ...grpc.CallOption) (*v1.UploadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BulkFileUpload", varargs...)
	ret0, _ := ret[0].(*v1.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkFileUpload indicates an expected call of BulkFileUpload
func (mr *MockProductCatalogClientMockRecorder) BulkFileUpload(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkFileUpload", reflect.TypeOf((*MockProductCatalogClient)(nil).BulkFileUpload), varargs...)
}

// DeleteEditor mocks base method
func (m *MockProductCatalogClient) DeleteEditor(ctx context.Context, in *v1.GetEditorRequest, opts ...grpc.CallOption) (*v1.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEditor", varargs...)
	ret0, _ := ret[0].(*v1.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEditor indicates an expected call of DeleteEditor
func (mr *MockProductCatalogClientMockRecorder) DeleteEditor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEditor", reflect.TypeOf((*MockProductCatalogClient)(nil).DeleteEditor), varargs...)
}

// BulkFileUploadLogs mocks base method
func (m *MockProductCatalogClient) BulkFileUploadLogs(ctx context.Context, in *v1.UploadCatalogDataLogsRequest, opts ...grpc.CallOption) (*v1.UploadCatalogDataLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BulkFileUploadLogs", varargs...)
	ret0, _ := ret[0].(*v1.UploadCatalogDataLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkFileUploadLogs indicates an expected call of BulkFileUploadLogs
func (mr *MockProductCatalogClientMockRecorder) BulkFileUploadLogs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkFileUploadLogs", reflect.TypeOf((*MockProductCatalogClient)(nil).BulkFileUploadLogs), varargs...)
}

// MockProductCatalogServer is a mock of ProductCatalogServer interface
type MockProductCatalogServer struct {
	ctrl     *gomock.Controller
	recorder *MockProductCatalogServerMockRecorder
}

// MockProductCatalogServerMockRecorder is the mock recorder for MockProductCatalogServer
type MockProductCatalogServerMockRecorder struct {
	mock *MockProductCatalogServer
}

// NewMockProductCatalogServer creates a new mock instance
func NewMockProductCatalogServer(ctrl *gomock.Controller) *MockProductCatalogServer {
	mock := &MockProductCatalogServer{ctrl: ctrl}
	mock.recorder = &MockProductCatalogServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductCatalogServer) EXPECT() *MockProductCatalogServerMockRecorder {
	return m.recorder
}

// InsertProduct mocks base method
func (m *MockProductCatalogServer) InsertProduct(arg0 context.Context, arg1 *v1.Product) (*v1.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", arg0, arg1)
	ret0, _ := ret[0].(*v1.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProduct indicates an expected call of InsertProduct
func (mr *MockProductCatalogServerMockRecorder) InsertProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockProductCatalogServer)(nil).InsertProduct), arg0, arg1)
}

// GetProduct mocks base method
func (m *MockProductCatalogServer) GetProduct(arg0 context.Context, arg1 *v1.GetProductRequest) (*v1.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(*v1.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct
func (mr *MockProductCatalogServerMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductCatalogServer)(nil).GetProduct), arg0, arg1)
}

// CreateEditor mocks base method
func (m *MockProductCatalogServer) CreateEditor(arg0 context.Context, arg1 *v1.CreateEditorRequest) (*v1.Editor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEditor", arg0, arg1)
	ret0, _ := ret[0].(*v1.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEditor indicates an expected call of CreateEditor
func (mr *MockProductCatalogServerMockRecorder) CreateEditor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEditor", reflect.TypeOf((*MockProductCatalogServer)(nil).CreateEditor), arg0, arg1)
}

// UpdateEditor mocks base method
func (m *MockProductCatalogServer) UpdateEditor(arg0 context.Context, arg1 *v1.Editor) (*v1.Editor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEditor", arg0, arg1)
	ret0, _ := ret[0].(*v1.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEditor indicates an expected call of UpdateEditor
func (mr *MockProductCatalogServerMockRecorder) UpdateEditor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEditor", reflect.TypeOf((*MockProductCatalogServer)(nil).UpdateEditor), arg0, arg1)
}

// DeleteProduct mocks base method
func (m *MockProductCatalogServer) DeleteProduct(arg0 context.Context, arg1 *v1.GetProductRequest) (*v1.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct
func (mr *MockProductCatalogServerMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductCatalogServer)(nil).DeleteProduct), arg0, arg1)
}

// UpdateProduct mocks base method
func (m *MockProductCatalogServer) UpdateProduct(arg0 context.Context, arg1 *v1.Product) (*v1.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(*v1.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct
func (mr *MockProductCatalogServerMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductCatalogServer)(nil).UpdateProduct), arg0, arg1)
}

// BulkFileUpload mocks base method
func (m *MockProductCatalogServer) BulkFileUpload(arg0 context.Context, arg1 *v1.UploadRecords) (*v1.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkFileUpload", arg0, arg1)
	ret0, _ := ret[0].(*v1.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkFileUpload indicates an expected call of BulkFileUpload
func (mr *MockProductCatalogServerMockRecorder) BulkFileUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkFileUpload", reflect.TypeOf((*MockProductCatalogServer)(nil).BulkFileUpload), arg0, arg1)
}

// DeleteEditor mocks base method
func (m *MockProductCatalogServer) DeleteEditor(arg0 context.Context, arg1 *v1.GetEditorRequest) (*v1.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEditor", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEditor indicates an expected call of DeleteEditor
func (mr *MockProductCatalogServerMockRecorder) DeleteEditor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEditor", reflect.TypeOf((*MockProductCatalogServer)(nil).DeleteEditor), arg0, arg1)
}

// BulkFileUploadLogs mocks base method
func (m *MockProductCatalogServer) BulkFileUploadLogs(arg0 context.Context, arg1 *v1.UploadCatalogDataLogsRequest) (*v1.UploadCatalogDataLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkFileUploadLogs", arg0, arg1)
	ret0, _ := ret[0].(*v1.UploadCatalogDataLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkFileUploadLogs indicates an expected call of BulkFileUploadLogs
func (mr *MockProductCatalogServerMockRecorder) BulkFileUploadLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkFileUploadLogs", reflect.TypeOf((*MockProductCatalogServer)(nil).BulkFileUploadLogs), arg0, arg1)
}

// MockUnsafeProductCatalogServer is a mock of UnsafeProductCatalogServer interface
type MockUnsafeProductCatalogServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProductCatalogServerMockRecorder
}

// MockUnsafeProductCatalogServerMockRecorder is the mock recorder for MockUnsafeProductCatalogServer
type MockUnsafeProductCatalogServerMockRecorder struct {
	mock *MockUnsafeProductCatalogServer
}

// NewMockUnsafeProductCatalogServer creates a new mock instance
func NewMockUnsafeProductCatalogServer(ctrl *gomock.Controller) *MockUnsafeProductCatalogServer {
	mock := &MockUnsafeProductCatalogServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProductCatalogServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnsafeProductCatalogServer) EXPECT() *MockUnsafeProductCatalogServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProductCatalogServer mocks base method
func (m *MockUnsafeProductCatalogServer) mustEmbedUnimplementedProductCatalogServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductCatalogServer")
}

// mustEmbedUnimplementedProductCatalogServer indicates an expected call of mustEmbedUnimplementedProductCatalogServer
func (mr *MockUnsafeProductCatalogServerMockRecorder) mustEmbedUnimplementedProductCatalogServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductCatalogServer", reflect.TypeOf((*MockUnsafeProductCatalogServer)(nil).mustEmbedUnimplementedProductCatalogServer))
}
