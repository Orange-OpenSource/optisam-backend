// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SimulationServiceClient is the client API for SimulationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulationServiceClient interface {
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error)
	ListConfig(ctx context.Context, in *ListConfigRequest, opts ...grpc.CallOption) (*ListConfigResponse, error)
	GetConfigData(ctx context.Context, in *GetConfigDataRequest, opts ...grpc.CallOption) (*GetConfigDataResponse, error)
	SimulationByCost(ctx context.Context, in *SimulationByCostRequest, opts ...grpc.CallOption) (*SimulationByCostResponse, error)
	SimulationByMetric(ctx context.Context, in *SimulationByMetricRequest, opts ...grpc.CallOption) (*SimulationByMetricResponse, error)
	SimulationByHardware(ctx context.Context, in *SimulationByHardwareRequest, opts ...grpc.CallOption) (*SimulationByHardwareResponse, error)
}

type simulationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulationServiceClient(cc grpc.ClientConnInterface) SimulationServiceClient {
	return &simulationServiceClient{cc}
}

func (c *simulationServiceClient) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error) {
	out := new(DeleteConfigResponse)
	err := c.cc.Invoke(ctx, "/optisam.simulation.v1.SimulationService/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, "/optisam.simulation.v1.SimulationService/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error) {
	out := new(CreateConfigResponse)
	err := c.cc.Invoke(ctx, "/optisam.simulation.v1.SimulationService/CreateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) ListConfig(ctx context.Context, in *ListConfigRequest, opts ...grpc.CallOption) (*ListConfigResponse, error) {
	out := new(ListConfigResponse)
	err := c.cc.Invoke(ctx, "/optisam.simulation.v1.SimulationService/ListConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) GetConfigData(ctx context.Context, in *GetConfigDataRequest, opts ...grpc.CallOption) (*GetConfigDataResponse, error) {
	out := new(GetConfigDataResponse)
	err := c.cc.Invoke(ctx, "/optisam.simulation.v1.SimulationService/GetConfigData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) SimulationByCost(ctx context.Context, in *SimulationByCostRequest, opts ...grpc.CallOption) (*SimulationByCostResponse, error) {
	out := new(SimulationByCostResponse)
	err := c.cc.Invoke(ctx, "/optisam.simulation.v1.SimulationService/SimulationByCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) SimulationByMetric(ctx context.Context, in *SimulationByMetricRequest, opts ...grpc.CallOption) (*SimulationByMetricResponse, error) {
	out := new(SimulationByMetricResponse)
	err := c.cc.Invoke(ctx, "/optisam.simulation.v1.SimulationService/SimulationByMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) SimulationByHardware(ctx context.Context, in *SimulationByHardwareRequest, opts ...grpc.CallOption) (*SimulationByHardwareResponse, error) {
	out := new(SimulationByHardwareResponse)
	err := c.cc.Invoke(ctx, "/optisam.simulation.v1.SimulationService/SimulationByHardware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulationServiceServer is the server API for SimulationService service.
// All implementations should embed UnimplementedSimulationServiceServer
// for forward compatibility
type SimulationServiceServer interface {
	DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error)
	ListConfig(context.Context, *ListConfigRequest) (*ListConfigResponse, error)
	GetConfigData(context.Context, *GetConfigDataRequest) (*GetConfigDataResponse, error)
	SimulationByCost(context.Context, *SimulationByCostRequest) (*SimulationByCostResponse, error)
	SimulationByMetric(context.Context, *SimulationByMetricRequest) (*SimulationByMetricResponse, error)
	SimulationByHardware(context.Context, *SimulationByHardwareRequest) (*SimulationByHardwareResponse, error)
}

// UnimplementedSimulationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSimulationServiceServer struct {
}

func (UnimplementedSimulationServiceServer) DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedSimulationServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedSimulationServiceServer) CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedSimulationServiceServer) ListConfig(context.Context, *ListConfigRequest) (*ListConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfig not implemented")
}
func (UnimplementedSimulationServiceServer) GetConfigData(context.Context, *GetConfigDataRequest) (*GetConfigDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigData not implemented")
}
func (UnimplementedSimulationServiceServer) SimulationByCost(context.Context, *SimulationByCostRequest) (*SimulationByCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulationByCost not implemented")
}
func (UnimplementedSimulationServiceServer) SimulationByMetric(context.Context, *SimulationByMetricRequest) (*SimulationByMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulationByMetric not implemented")
}
func (UnimplementedSimulationServiceServer) SimulationByHardware(context.Context, *SimulationByHardwareRequest) (*SimulationByHardwareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulationByHardware not implemented")
}

// UnsafeSimulationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulationServiceServer will
// result in compilation errors.
type UnsafeSimulationServiceServer interface {
	mustEmbedUnimplementedSimulationServiceServer()
}

func RegisterSimulationServiceServer(s grpc.ServiceRegistrar, srv SimulationServiceServer) {
	s.RegisterService(&_SimulationService_serviceDesc, srv)
}

func _SimulationService_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.simulation.v1.SimulationService/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).DeleteConfig(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.simulation.v1.SimulationService/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.simulation.v1.SimulationService/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).CreateConfig(ctx, req.(*CreateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_ListConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).ListConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.simulation.v1.SimulationService/ListConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).ListConfig(ctx, req.(*ListConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_GetConfigData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).GetConfigData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.simulation.v1.SimulationService/GetConfigData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).GetConfigData(ctx, req.(*GetConfigDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_SimulationByCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationByCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).SimulationByCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.simulation.v1.SimulationService/SimulationByCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).SimulationByCost(ctx, req.(*SimulationByCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_SimulationByMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationByMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).SimulationByMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.simulation.v1.SimulationService/SimulationByMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).SimulationByMetric(ctx, req.(*SimulationByMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_SimulationByHardware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationByHardwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).SimulationByHardware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.simulation.v1.SimulationService/SimulationByHardware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).SimulationByHardware(ctx, req.(*SimulationByHardwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimulationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "optisam.simulation.v1.SimulationService",
	HandlerType: (*SimulationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteConfig",
			Handler:    _SimulationService_DeleteConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _SimulationService_UpdateConfig_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _SimulationService_CreateConfig_Handler,
		},
		{
			MethodName: "ListConfig",
			Handler:    _SimulationService_ListConfig_Handler,
		},
		{
			MethodName: "GetConfigData",
			Handler:    _SimulationService_GetConfigData_Handler,
		},
		{
			MethodName: "SimulationByCost",
			Handler:    _SimulationService_SimulationByCost_Handler,
		},
		{
			MethodName: "SimulationByMetric",
			Handler:    _SimulationService_SimulationByMetric_Handler,
		},
		{
			MethodName: "SimulationByHardware",
			Handler:    _SimulationService_SimulationByHardware_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simulation.proto",
}
