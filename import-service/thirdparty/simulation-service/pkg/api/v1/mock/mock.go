// Code generated by MockGen. DO NOT EDIT.
// Source: ../../thirdparty/simulation-service/pkg/api/v1/simulation_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "gitlab.tech.orange/optisam/optisam-it/optisam-services/import-service/thirdparty/simulation-service/pkg/api/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSimulationServiceClient is a mock of SimulationServiceClient interface
type MockSimulationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSimulationServiceClientMockRecorder
}

// MockSimulationServiceClientMockRecorder is the mock recorder for MockSimulationServiceClient
type MockSimulationServiceClientMockRecorder struct {
	mock *MockSimulationServiceClient
}

// NewMockSimulationServiceClient creates a new mock instance
func NewMockSimulationServiceClient(ctrl *gomock.Controller) *MockSimulationServiceClient {
	mock := &MockSimulationServiceClient{ctrl: ctrl}
	mock.recorder = &MockSimulationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSimulationServiceClient) EXPECT() *MockSimulationServiceClientMockRecorder {
	return m.recorder
}

// DeleteConfig mocks base method
func (m *MockSimulationServiceClient) DeleteConfig(ctx context.Context, in *v1.DeleteConfigRequest, opts ...grpc.CallOption) (*v1.DeleteConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfig", varargs...)
	ret0, _ := ret[0].(*v1.DeleteConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfig indicates an expected call of DeleteConfig
func (mr *MockSimulationServiceClientMockRecorder) DeleteConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockSimulationServiceClient)(nil).DeleteConfig), varargs...)
}

// UpdateConfig mocks base method
func (m *MockSimulationServiceClient) UpdateConfig(ctx context.Context, in *v1.UpdateConfigRequest, opts ...grpc.CallOption) (*v1.UpdateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfig", varargs...)
	ret0, _ := ret[0].(*v1.UpdateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig
func (mr *MockSimulationServiceClientMockRecorder) UpdateConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockSimulationServiceClient)(nil).UpdateConfig), varargs...)
}

// CreateConfig mocks base method
func (m *MockSimulationServiceClient) CreateConfig(ctx context.Context, in *v1.CreateConfigRequest, opts ...grpc.CallOption) (*v1.CreateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfig", varargs...)
	ret0, _ := ret[0].(*v1.CreateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfig indicates an expected call of CreateConfig
func (mr *MockSimulationServiceClientMockRecorder) CreateConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockSimulationServiceClient)(nil).CreateConfig), varargs...)
}

// ListConfig mocks base method
func (m *MockSimulationServiceClient) ListConfig(ctx context.Context, in *v1.ListConfigRequest, opts ...grpc.CallOption) (*v1.ListConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfig", varargs...)
	ret0, _ := ret[0].(*v1.ListConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfig indicates an expected call of ListConfig
func (mr *MockSimulationServiceClientMockRecorder) ListConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfig", reflect.TypeOf((*MockSimulationServiceClient)(nil).ListConfig), varargs...)
}

// GetConfigData mocks base method
func (m *MockSimulationServiceClient) GetConfigData(ctx context.Context, in *v1.GetConfigDataRequest, opts ...grpc.CallOption) (*v1.GetConfigDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigData", varargs...)
	ret0, _ := ret[0].(*v1.GetConfigDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigData indicates an expected call of GetConfigData
func (mr *MockSimulationServiceClientMockRecorder) GetConfigData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigData", reflect.TypeOf((*MockSimulationServiceClient)(nil).GetConfigData), varargs...)
}

// SimulationByCost mocks base method
func (m *MockSimulationServiceClient) SimulationByCost(ctx context.Context, in *v1.SimulationByCostRequest, opts ...grpc.CallOption) (*v1.SimulationByCostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SimulationByCost", varargs...)
	ret0, _ := ret[0].(*v1.SimulationByCostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimulationByCost indicates an expected call of SimulationByCost
func (mr *MockSimulationServiceClientMockRecorder) SimulationByCost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulationByCost", reflect.TypeOf((*MockSimulationServiceClient)(nil).SimulationByCost), varargs...)
}

// SimulationByMetric mocks base method
func (m *MockSimulationServiceClient) SimulationByMetric(ctx context.Context, in *v1.SimulationByMetricRequest, opts ...grpc.CallOption) (*v1.SimulationByMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SimulationByMetric", varargs...)
	ret0, _ := ret[0].(*v1.SimulationByMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimulationByMetric indicates an expected call of SimulationByMetric
func (mr *MockSimulationServiceClientMockRecorder) SimulationByMetric(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulationByMetric", reflect.TypeOf((*MockSimulationServiceClient)(nil).SimulationByMetric), varargs...)
}

// SimulationByHardware mocks base method
func (m *MockSimulationServiceClient) SimulationByHardware(ctx context.Context, in *v1.SimulationByHardwareRequest, opts ...grpc.CallOption) (*v1.SimulationByHardwareResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SimulationByHardware", varargs...)
	ret0, _ := ret[0].(*v1.SimulationByHardwareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimulationByHardware indicates an expected call of SimulationByHardware
func (mr *MockSimulationServiceClientMockRecorder) SimulationByHardware(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulationByHardware", reflect.TypeOf((*MockSimulationServiceClient)(nil).SimulationByHardware), varargs...)
}

// MockSimulationServiceServer is a mock of SimulationServiceServer interface
type MockSimulationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSimulationServiceServerMockRecorder
}

// MockSimulationServiceServerMockRecorder is the mock recorder for MockSimulationServiceServer
type MockSimulationServiceServerMockRecorder struct {
	mock *MockSimulationServiceServer
}

// NewMockSimulationServiceServer creates a new mock instance
func NewMockSimulationServiceServer(ctrl *gomock.Controller) *MockSimulationServiceServer {
	mock := &MockSimulationServiceServer{ctrl: ctrl}
	mock.recorder = &MockSimulationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSimulationServiceServer) EXPECT() *MockSimulationServiceServerMockRecorder {
	return m.recorder
}

// DeleteConfig mocks base method
func (m *MockSimulationServiceServer) DeleteConfig(arg0 context.Context, arg1 *v1.DeleteConfigRequest) (*v1.DeleteConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfig indicates an expected call of DeleteConfig
func (mr *MockSimulationServiceServerMockRecorder) DeleteConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockSimulationServiceServer)(nil).DeleteConfig), arg0, arg1)
}

// UpdateConfig mocks base method
func (m *MockSimulationServiceServer) UpdateConfig(arg0 context.Context, arg1 *v1.UpdateConfigRequest) (*v1.UpdateConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig
func (mr *MockSimulationServiceServerMockRecorder) UpdateConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockSimulationServiceServer)(nil).UpdateConfig), arg0, arg1)
}

// CreateConfig mocks base method
func (m *MockSimulationServiceServer) CreateConfig(arg0 context.Context, arg1 *v1.CreateConfigRequest) (*v1.CreateConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfig indicates an expected call of CreateConfig
func (mr *MockSimulationServiceServerMockRecorder) CreateConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockSimulationServiceServer)(nil).CreateConfig), arg0, arg1)
}

// ListConfig mocks base method
func (m *MockSimulationServiceServer) ListConfig(arg0 context.Context, arg1 *v1.ListConfigRequest) (*v1.ListConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfig indicates an expected call of ListConfig
func (mr *MockSimulationServiceServerMockRecorder) ListConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfig", reflect.TypeOf((*MockSimulationServiceServer)(nil).ListConfig), arg0, arg1)
}

// GetConfigData mocks base method
func (m *MockSimulationServiceServer) GetConfigData(arg0 context.Context, arg1 *v1.GetConfigDataRequest) (*v1.GetConfigDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigData", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetConfigDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigData indicates an expected call of GetConfigData
func (mr *MockSimulationServiceServerMockRecorder) GetConfigData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigData", reflect.TypeOf((*MockSimulationServiceServer)(nil).GetConfigData), arg0, arg1)
}

// SimulationByCost mocks base method
func (m *MockSimulationServiceServer) SimulationByCost(arg0 context.Context, arg1 *v1.SimulationByCostRequest) (*v1.SimulationByCostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimulationByCost", arg0, arg1)
	ret0, _ := ret[0].(*v1.SimulationByCostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimulationByCost indicates an expected call of SimulationByCost
func (mr *MockSimulationServiceServerMockRecorder) SimulationByCost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulationByCost", reflect.TypeOf((*MockSimulationServiceServer)(nil).SimulationByCost), arg0, arg1)
}

// SimulationByMetric mocks base method
func (m *MockSimulationServiceServer) SimulationByMetric(arg0 context.Context, arg1 *v1.SimulationByMetricRequest) (*v1.SimulationByMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimulationByMetric", arg0, arg1)
	ret0, _ := ret[0].(*v1.SimulationByMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimulationByMetric indicates an expected call of SimulationByMetric
func (mr *MockSimulationServiceServerMockRecorder) SimulationByMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulationByMetric", reflect.TypeOf((*MockSimulationServiceServer)(nil).SimulationByMetric), arg0, arg1)
}

// SimulationByHardware mocks base method
func (m *MockSimulationServiceServer) SimulationByHardware(arg0 context.Context, arg1 *v1.SimulationByHardwareRequest) (*v1.SimulationByHardwareResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimulationByHardware", arg0, arg1)
	ret0, _ := ret[0].(*v1.SimulationByHardwareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimulationByHardware indicates an expected call of SimulationByHardware
func (mr *MockSimulationServiceServerMockRecorder) SimulationByHardware(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulationByHardware", reflect.TypeOf((*MockSimulationServiceServer)(nil).SimulationByHardware), arg0, arg1)
}

// MockUnsafeSimulationServiceServer is a mock of UnsafeSimulationServiceServer interface
type MockUnsafeSimulationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSimulationServiceServerMockRecorder
}

// MockUnsafeSimulationServiceServerMockRecorder is the mock recorder for MockUnsafeSimulationServiceServer
type MockUnsafeSimulationServiceServerMockRecorder struct {
	mock *MockUnsafeSimulationServiceServer
}

// NewMockUnsafeSimulationServiceServer creates a new mock instance
func NewMockUnsafeSimulationServiceServer(ctrl *gomock.Controller) *MockUnsafeSimulationServiceServer {
	mock := &MockUnsafeSimulationServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSimulationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnsafeSimulationServiceServer) EXPECT() *MockUnsafeSimulationServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSimulationServiceServer mocks base method
func (m *MockUnsafeSimulationServiceServer) mustEmbedUnimplementedSimulationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSimulationServiceServer")
}

// mustEmbedUnimplementedSimulationServiceServer indicates an expected call of mustEmbedUnimplementedSimulationServiceServer
func (mr *MockUnsafeSimulationServiceServerMockRecorder) mustEmbedUnimplementedSimulationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSimulationServiceServer", reflect.TypeOf((*MockUnsafeSimulationServiceServer)(nil).mustEmbedUnimplementedSimulationServiceServer))
}
