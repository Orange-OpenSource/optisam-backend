// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: product.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SortOrder int32

const (
	SortOrder_asc  SortOrder = 0
	SortOrder_desc SortOrder = 1
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "asc",
		1: "desc",
	}
	SortOrder_value = map[string]int32{
		"asc":  0,
		"desc": 1,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{0}
}

type DataTypes int32

const (
	DataTypes_UNKNOWN DataTypes = 0
	DataTypes_STRING  DataTypes = 1
	DataTypes_INT     DataTypes = 2
	DataTypes_FLOAT   DataTypes = 3
)

// Enum value maps for DataTypes.
var (
	DataTypes_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "INT",
		3: "FLOAT",
	}
	DataTypes_value = map[string]int32{
		"UNKNOWN": 0,
		"STRING":  1,
		"INT":     2,
		"FLOAT":   3,
	}
)

func (x DataTypes) Enum() *DataTypes {
	p := new(DataTypes)
	*p = x
	return p
}

func (x DataTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[1].Descriptor()
}

func (DataTypes) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[1]
}

func (x DataTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTypes.Descriptor instead.
func (DataTypes) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{1}
}

type Producttype int32

const (
	Producttype_on_premise Producttype = 0
	Producttype_saas       Producttype = 1
)

// Enum value maps for Producttype.
var (
	Producttype_name = map[int32]string{
		0: "on_premise",
		1: "saas",
	}
	Producttype_value = map[string]int32{
		"on_premise": 0,
		"saas":       1,
	}
)

func (x Producttype) Enum() *Producttype {
	p := new(Producttype)
	*p = x
	return p
}

func (x Producttype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Producttype) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[2].Descriptor()
}

func (Producttype) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[2]
}

func (x Producttype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Producttype.Descriptor instead.
func (Producttype) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{2}
}

type ListProductAggregationViewRequest_SortBy int32

const (
	ListProductAggregationViewRequest_aggregation_name    ListProductAggregationViewRequest_SortBy = 0
	ListProductAggregationViewRequest_product_editor      ListProductAggregationViewRequest_SortBy = 1
	ListProductAggregationViewRequest_num_of_applications ListProductAggregationViewRequest_SortBy = 2
	ListProductAggregationViewRequest_num_of_equipments   ListProductAggregationViewRequest_SortBy = 3
	ListProductAggregationViewRequest_cost                ListProductAggregationViewRequest_SortBy = 4
)

// Enum value maps for ListProductAggregationViewRequest_SortBy.
var (
	ListProductAggregationViewRequest_SortBy_name = map[int32]string{
		0: "aggregation_name",
		1: "product_editor",
		2: "num_of_applications",
		3: "num_of_equipments",
		4: "cost",
	}
	ListProductAggregationViewRequest_SortBy_value = map[string]int32{
		"aggregation_name":    0,
		"product_editor":      1,
		"num_of_applications": 2,
		"num_of_equipments":   3,
		"cost":                4,
	}
)

func (x ListProductAggregationViewRequest_SortBy) Enum() *ListProductAggregationViewRequest_SortBy {
	p := new(ListProductAggregationViewRequest_SortBy)
	*p = x
	return p
}

func (x ListProductAggregationViewRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListProductAggregationViewRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[3].Descriptor()
}

func (ListProductAggregationViewRequest_SortBy) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[3]
}

func (x ListProductAggregationViewRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListProductAggregationViewRequest_SortBy.Descriptor instead.
func (ListProductAggregationViewRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{72, 0}
}

type ListAcqRightsRequest_SortBy int32

const (
	ListAcqRightsRequest_SKU                               ListAcqRightsRequest_SortBy = 0
	ListAcqRightsRequest_SWID_TAG                          ListAcqRightsRequest_SortBy = 1
	ListAcqRightsRequest_PRODUCT_NAME                      ListAcqRightsRequest_SortBy = 2
	ListAcqRightsRequest_EDITOR                            ListAcqRightsRequest_SortBy = 3
	ListAcqRightsRequest_METRIC                            ListAcqRightsRequest_SortBy = 4
	ListAcqRightsRequest_ACQUIRED_LICENSES_NUMBER          ListAcqRightsRequest_SortBy = 5
	ListAcqRightsRequest_AVG_LICENSE_UNIT_PRICE            ListAcqRightsRequest_SortBy = 6
	ListAcqRightsRequest_AVG_MAINTENANCE_UNIT_PRICE        ListAcqRightsRequest_SortBy = 7
	ListAcqRightsRequest_TOTAL_PURCHASE_COST               ListAcqRightsRequest_SortBy = 8
	ListAcqRightsRequest_TOTAL_MAINTENANCE_COST            ListAcqRightsRequest_SortBy = 9
	ListAcqRightsRequest_TOTAL_COST                        ListAcqRightsRequest_SortBy = 10
	ListAcqRightsRequest_START_OF_MAINTENANCE              ListAcqRightsRequest_SortBy = 11
	ListAcqRightsRequest_END_OF_MAINTENANCE                ListAcqRightsRequest_SortBy = 12
	ListAcqRightsRequest_LICENSES_UNDER_MAINTENANCE_NUMBER ListAcqRightsRequest_SortBy = 13
)

// Enum value maps for ListAcqRightsRequest_SortBy.
var (
	ListAcqRightsRequest_SortBy_name = map[int32]string{
		0:  "SKU",
		1:  "SWID_TAG",
		2:  "PRODUCT_NAME",
		3:  "EDITOR",
		4:  "METRIC",
		5:  "ACQUIRED_LICENSES_NUMBER",
		6:  "AVG_LICENSE_UNIT_PRICE",
		7:  "AVG_MAINTENANCE_UNIT_PRICE",
		8:  "TOTAL_PURCHASE_COST",
		9:  "TOTAL_MAINTENANCE_COST",
		10: "TOTAL_COST",
		11: "START_OF_MAINTENANCE",
		12: "END_OF_MAINTENANCE",
		13: "LICENSES_UNDER_MAINTENANCE_NUMBER",
	}
	ListAcqRightsRequest_SortBy_value = map[string]int32{
		"SKU":                               0,
		"SWID_TAG":                          1,
		"PRODUCT_NAME":                      2,
		"EDITOR":                            3,
		"METRIC":                            4,
		"ACQUIRED_LICENSES_NUMBER":          5,
		"AVG_LICENSE_UNIT_PRICE":            6,
		"AVG_MAINTENANCE_UNIT_PRICE":        7,
		"TOTAL_PURCHASE_COST":               8,
		"TOTAL_MAINTENANCE_COST":            9,
		"TOTAL_COST":                        10,
		"START_OF_MAINTENANCE":              11,
		"END_OF_MAINTENANCE":                12,
		"LICENSES_UNDER_MAINTENANCE_NUMBER": 13,
	}
)

func (x ListAcqRightsRequest_SortBy) Enum() *ListAcqRightsRequest_SortBy {
	p := new(ListAcqRightsRequest_SortBy)
	*p = x
	return p
}

func (x ListAcqRightsRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListAcqRightsRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[4].Descriptor()
}

func (ListAcqRightsRequest_SortBy) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[4]
}

func (x ListAcqRightsRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListAcqRightsRequest_SortBy.Descriptor instead.
func (ListAcqRightsRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{116, 0}
}

type ListAggregatedAcqRightsRequest_SortBy int32

const (
	ListAggregatedAcqRightsRequest_SKU                        ListAggregatedAcqRightsRequest_SortBy = 0
	ListAggregatedAcqRightsRequest_EDITOR                     ListAggregatedAcqRightsRequest_SortBy = 1
	ListAggregatedAcqRightsRequest_TOTAL_COST                 ListAggregatedAcqRightsRequest_SortBy = 2
	ListAggregatedAcqRightsRequest_METRIC                     ListAggregatedAcqRightsRequest_SortBy = 3
	ListAggregatedAcqRightsRequest_AGG_NAME                   ListAggregatedAcqRightsRequest_SortBy = 4
	ListAggregatedAcqRightsRequest_NUM_OF_SWIDTAGS            ListAggregatedAcqRightsRequest_SortBy = 5
	ListAggregatedAcqRightsRequest_ACQUIRED_LICENSES          ListAggregatedAcqRightsRequest_SortBy = 6
	ListAggregatedAcqRightsRequest_MAINTENANCE_LICENCES       ListAggregatedAcqRightsRequest_SortBy = 7
	ListAggregatedAcqRightsRequest_MAINTENANCE_START          ListAggregatedAcqRightsRequest_SortBy = 8
	ListAggregatedAcqRightsRequest_MAINTENANCE_END            ListAggregatedAcqRightsRequest_SortBy = 9
	ListAggregatedAcqRightsRequest_UNIT_PRICE                 ListAggregatedAcqRightsRequest_SortBy = 10
	ListAggregatedAcqRightsRequest_MAINTENANCE_PRICE          ListAggregatedAcqRightsRequest_SortBy = 11
	ListAggregatedAcqRightsRequest_TOTAL_PURCHASED_COST       ListAggregatedAcqRightsRequest_SortBy = 12
	ListAggregatedAcqRightsRequest_TOTAL_MAINTENANCE_COST     ListAggregatedAcqRightsRequest_SortBy = 13
	ListAggregatedAcqRightsRequest_LICENSES_UNDER_MAINTENANCE ListAggregatedAcqRightsRequest_SortBy = 14
)

// Enum value maps for ListAggregatedAcqRightsRequest_SortBy.
var (
	ListAggregatedAcqRightsRequest_SortBy_name = map[int32]string{
		0:  "SKU",
		1:  "EDITOR",
		2:  "TOTAL_COST",
		3:  "METRIC",
		4:  "AGG_NAME",
		5:  "NUM_OF_SWIDTAGS",
		6:  "ACQUIRED_LICENSES",
		7:  "MAINTENANCE_LICENCES",
		8:  "MAINTENANCE_START",
		9:  "MAINTENANCE_END",
		10: "UNIT_PRICE",
		11: "MAINTENANCE_PRICE",
		12: "TOTAL_PURCHASED_COST",
		13: "TOTAL_MAINTENANCE_COST",
		14: "LICENSES_UNDER_MAINTENANCE",
	}
	ListAggregatedAcqRightsRequest_SortBy_value = map[string]int32{
		"SKU":                        0,
		"EDITOR":                     1,
		"TOTAL_COST":                 2,
		"METRIC":                     3,
		"AGG_NAME":                   4,
		"NUM_OF_SWIDTAGS":            5,
		"ACQUIRED_LICENSES":          6,
		"MAINTENANCE_LICENCES":       7,
		"MAINTENANCE_START":          8,
		"MAINTENANCE_END":            9,
		"UNIT_PRICE":                 10,
		"MAINTENANCE_PRICE":          11,
		"TOTAL_PURCHASED_COST":       12,
		"TOTAL_MAINTENANCE_COST":     13,
		"LICENSES_UNDER_MAINTENANCE": 14,
	}
)

func (x ListAggregatedAcqRightsRequest_SortBy) Enum() *ListAggregatedAcqRightsRequest_SortBy {
	p := new(ListAggregatedAcqRightsRequest_SortBy)
	*p = x
	return p
}

func (x ListAggregatedAcqRightsRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListAggregatedAcqRightsRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[5].Descriptor()
}

func (ListAggregatedAcqRightsRequest_SortBy) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[5]
}

func (x ListAggregatedAcqRightsRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListAggregatedAcqRightsRequest_SortBy.Descriptor instead.
func (ListAggregatedAcqRightsRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{121, 0}
}

type ListAggregationsRequest_SortBy int32

const (
	ListAggregationsRequest_aggregation_name ListAggregationsRequest_SortBy = 0
	ListAggregationsRequest_product_editor   ListAggregationsRequest_SortBy = 1
)

// Enum value maps for ListAggregationsRequest_SortBy.
var (
	ListAggregationsRequest_SortBy_name = map[int32]string{
		0: "aggregation_name",
		1: "product_editor",
	}
	ListAggregationsRequest_SortBy_value = map[string]int32{
		"aggregation_name": 0,
		"product_editor":   1,
	}
)

func (x ListAggregationsRequest_SortBy) Enum() *ListAggregationsRequest_SortBy {
	p := new(ListAggregationsRequest_SortBy)
	*p = x
	return p
}

func (x ListAggregationsRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListAggregationsRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[6].Descriptor()
}

func (ListAggregationsRequest_SortBy) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[6]
}

func (x ListAggregationsRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListAggregationsRequest_SortBy.Descriptor instead.
func (ListAggregationsRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{128, 0}
}

type DropProductDataRequestDeletionTypes int32

const (
	DropProductDataRequest_ACQRIGHTS DropProductDataRequestDeletionTypes = 0
	DropProductDataRequest_FULL      DropProductDataRequestDeletionTypes = 1
	DropProductDataRequest_PARK      DropProductDataRequestDeletionTypes = 2
)

// Enum value maps for DropProductDataRequestDeletionTypes.
var (
	DropProductDataRequestDeletionTypes_name = map[int32]string{
		0: "ACQRIGHTS",
		1: "FULL",
		2: "PARK",
	}
	DropProductDataRequestDeletionTypes_value = map[string]int32{
		"ACQRIGHTS": 0,
		"FULL":      1,
		"PARK":      2,
	}
)

func (x DropProductDataRequestDeletionTypes) Enum() *DropProductDataRequestDeletionTypes {
	p := new(DropProductDataRequestDeletionTypes)
	*p = x
	return p
}

func (x DropProductDataRequestDeletionTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DropProductDataRequestDeletionTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_product_proto_enumTypes[7].Descriptor()
}

func (DropProductDataRequestDeletionTypes) Type() protoreflect.EnumType {
	return &file_product_proto_enumTypes[7]
}

func (x DropProductDataRequestDeletionTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DropProductDataRequestDeletionTypes.Descriptor instead.
func (DropProductDataRequestDeletionTypes) EnumDescriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{138, 0}
}

type DeleteSharedLicensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku           string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope         string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	RecieverScope string `protobuf:"bytes,3,opt,name=reciever_scope,json=recieverScope,proto3" json:"reciever_scope,omitempty"`
}

func (x *DeleteSharedLicensesRequest) Reset() {
	*x = DeleteSharedLicensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSharedLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSharedLicensesRequest) ProtoMessage() {}

func (x *DeleteSharedLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSharedLicensesRequest.ProtoReflect.Descriptor instead.
func (*DeleteSharedLicensesRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteSharedLicensesRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *DeleteSharedLicensesRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *DeleteSharedLicensesRequest) GetRecieverScope() string {
	if x != nil {
		return x.RecieverScope
	}
	return ""
}

type DeleteSharedLicensesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteSharedLicensesResponse) Reset() {
	*x = DeleteSharedLicensesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSharedLicensesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSharedLicensesResponse) ProtoMessage() {}

func (x *DeleteSharedLicensesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSharedLicensesResponse.ProtoReflect.Descriptor instead.
func (*DeleteSharedLicensesResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteSharedLicensesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetMaintenanceBySwidtagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Acqsku string `protobuf:"bytes,2,opt,name=acqsku,proto3" json:"acqsku,omitempty"`
}

func (x *GetMaintenanceBySwidtagRequest) Reset() {
	*x = GetMaintenanceBySwidtagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaintenanceBySwidtagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaintenanceBySwidtagRequest) ProtoMessage() {}

func (x *GetMaintenanceBySwidtagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaintenanceBySwidtagRequest.ProtoReflect.Descriptor instead.
func (*GetMaintenanceBySwidtagRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{2}
}

func (x *GetMaintenanceBySwidtagRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetMaintenanceBySwidtagRequest) GetAcqsku() string {
	if x != nil {
		return x.Acqsku
	}
	return ""
}

type GetMaintenanceBySwidtagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GetMaintenanceBySwidtagResponse) Reset() {
	*x = GetMaintenanceBySwidtagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaintenanceBySwidtagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaintenanceBySwidtagResponse) ProtoMessage() {}

func (x *GetMaintenanceBySwidtagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaintenanceBySwidtagResponse.ProtoReflect.Descriptor instead.
func (*GetMaintenanceBySwidtagResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{3}
}

func (x *GetMaintenanceBySwidtagResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku   string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetMetricRequest) Reset() {
	*x = GetMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricRequest) ProtoMessage() {}

func (x *GetMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricRequest.ProtoReflect.Descriptor instead.
func (*GetMetricRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{4}
}

func (x *GetMetricRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *GetMetricRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric string `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *GetMetricResponse) Reset() {
	*x = GetMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricResponse) ProtoMessage() {}

func (x *GetMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricResponse.ProtoReflect.Descriptor instead.
func (*GetMetricResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{5}
}

func (x *GetMetricResponse) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

type GetProductListByEditorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Editor string   `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
}

func (x *GetProductListByEditorRequest) Reset() {
	*x = GetProductListByEditorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductListByEditorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductListByEditorRequest) ProtoMessage() {}

func (x *GetProductListByEditorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductListByEditorRequest.ProtoReflect.Descriptor instead.
func (*GetProductListByEditorRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{6}
}

func (x *GetProductListByEditorRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GetProductListByEditorRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

type GetProductListByEditorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []string `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *GetProductListByEditorResponse) Reset() {
	*x = GetProductListByEditorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductListByEditorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductListByEditorResponse) ProtoMessage() {}

func (x *GetProductListByEditorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductListByEditorResponse.ProtoReflect.Descriptor instead.
func (*GetProductListByEditorResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{7}
}

func (x *GetProductListByEditorResponse) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

type GroupComplianceProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes      []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Editor      string   `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductName string   `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
}

func (x *GroupComplianceProductRequest) Reset() {
	*x = GroupComplianceProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupComplianceProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupComplianceProductRequest) ProtoMessage() {}

func (x *GroupComplianceProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupComplianceProductRequest.ProtoReflect.Descriptor instead.
func (*GroupComplianceProductRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{8}
}

func (x *GroupComplianceProductRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GroupComplianceProductRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *GroupComplianceProductRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

type GroupComplianceProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Licences []*LicencesData `protobuf:"bytes,1,rep,name=licences,proto3" json:"licences,omitempty"`
	Cost     []*CostData     `protobuf:"bytes,2,rep,name=cost,proto3" json:"cost,omitempty"`
}

func (x *GroupComplianceProductResponse) Reset() {
	*x = GroupComplianceProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupComplianceProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupComplianceProductResponse) ProtoMessage() {}

func (x *GroupComplianceProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupComplianceProductResponse.ProtoReflect.Descriptor instead.
func (*GroupComplianceProductResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{9}
}

func (x *GroupComplianceProductResponse) GetLicences() []*LicencesData {
	if x != nil {
		return x.Licences
	}
	return nil
}

func (x *GroupComplianceProductResponse) GetCost() []*CostData {
	if x != nil {
		return x.Cost
	}
	return nil
}

type LicencesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	AcquiredLicences int32  `protobuf:"varint,2,opt,name=acquired_licences,json=acquiredLicences,proto3" json:"acquired_licences,omitempty"`
	ComputedLicences int32  `protobuf:"varint,3,opt,name=computed_licences,json=computedLicences,proto3" json:"computed_licences,omitempty"`
}

func (x *LicencesData) Reset() {
	*x = LicencesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicencesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicencesData) ProtoMessage() {}

func (x *LicencesData) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicencesData.ProtoReflect.Descriptor instead.
func (*LicencesData) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{10}
}

func (x *LicencesData) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *LicencesData) GetAcquiredLicences() int32 {
	if x != nil {
		return x.AcquiredLicences
	}
	return 0
}

func (x *LicencesData) GetComputedLicences() int32 {
	if x != nil {
		return x.ComputedLicences
	}
	return 0
}

type CostData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope              string  `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	TotalCost          float64 `protobuf:"fixed64,2,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	UnderusageCost     float64 `protobuf:"fixed64,3,opt,name=underusage_cost,json=underusageCost,proto3" json:"underusage_cost,omitempty"`
	CounterfeitingCost float64 `protobuf:"fixed64,4,opt,name=counterfeiting_cost,json=counterfeitingCost,proto3" json:"counterfeiting_cost,omitempty"`
}

func (x *CostData) Reset() {
	*x = CostData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostData) ProtoMessage() {}

func (x *CostData) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostData.ProtoReflect.Descriptor instead.
func (*CostData) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{11}
}

func (x *CostData) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *CostData) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *CostData) GetUnderusageCost() float64 {
	if x != nil {
		return x.UnderusageCost
	}
	return 0
}

func (x *CostData) GetCounterfeitingCost() float64 {
	if x != nil {
		return x.CounterfeitingCost
	}
	return 0
}

type GetTotalSharedAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetTotalSharedAmountRequest) Reset() {
	*x = GetTotalSharedAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalSharedAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalSharedAmountRequest) ProtoMessage() {}

func (x *GetTotalSharedAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalSharedAmountRequest.ProtoReflect.Descriptor instead.
func (*GetTotalSharedAmountRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{12}
}

func (x *GetTotalSharedAmountRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetTotalSharedAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSharedAmount   float64 `protobuf:"fixed64,1,opt,name=total_shared_amount,json=totalSharedAmount,proto3" json:"total_shared_amount,omitempty"`
	TotalRecievedAmount float64 `protobuf:"fixed64,2,opt,name=total_recieved_amount,json=totalRecievedAmount,proto3" json:"total_recieved_amount,omitempty"`
}

func (x *GetTotalSharedAmountResponse) Reset() {
	*x = GetTotalSharedAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalSharedAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalSharedAmountResponse) ProtoMessage() {}

func (x *GetTotalSharedAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalSharedAmountResponse.ProtoReflect.Descriptor instead.
func (*GetTotalSharedAmountResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{13}
}

func (x *GetTotalSharedAmountResponse) GetTotalSharedAmount() float64 {
	if x != nil {
		return x.TotalSharedAmount
	}
	return 0
}

func (x *GetTotalSharedAmountResponse) GetTotalRecievedAmount() float64 {
	if x != nil {
		return x.TotalRecievedAmount
	}
	return 0
}

type GetAvailableLicensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku   string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetAvailableLicensesRequest) Reset() {
	*x = GetAvailableLicensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableLicensesRequest) ProtoMessage() {}

func (x *GetAvailableLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableLicensesRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableLicensesRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{14}
}

func (x *GetAvailableLicensesRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *GetAvailableLicensesRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetAvailableLicensesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableLicenses     int32         `protobuf:"varint,1,opt,name=available_licenses,json=availableLicenses,proto3" json:"available_licenses,omitempty"`
	SharedData            []*SharedData `protobuf:"bytes,2,rep,name=shared_data,json=sharedData,proto3" json:"shared_data,omitempty"`
	TotalSharedLicenses   int32         `protobuf:"varint,4,opt,name=total_shared_licenses,json=totalSharedLicenses,proto3" json:"total_shared_licenses,omitempty"`
	TotalRecievedLicenses int32         `protobuf:"varint,5,opt,name=total_recieved_licenses,json=totalRecievedLicenses,proto3" json:"total_recieved_licenses,omitempty"`
}

func (x *GetAvailableLicensesResponse) Reset() {
	*x = GetAvailableLicensesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableLicensesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableLicensesResponse) ProtoMessage() {}

func (x *GetAvailableLicensesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableLicensesResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableLicensesResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{15}
}

func (x *GetAvailableLicensesResponse) GetAvailableLicenses() int32 {
	if x != nil {
		return x.AvailableLicenses
	}
	return 0
}

func (x *GetAvailableLicensesResponse) GetSharedData() []*SharedData {
	if x != nil {
		return x.SharedData
	}
	return nil
}

func (x *GetAvailableLicensesResponse) GetTotalSharedLicenses() int32 {
	if x != nil {
		return x.TotalSharedLicenses
	}
	return 0
}

func (x *GetAvailableLicensesResponse) GetTotalRecievedLicenses() int32 {
	if x != nil {
		return x.TotalRecievedLicenses
	}
	return 0
}

type UpdateSharedLicensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku         string                                        `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	LicenseData []*UpdateSharedLicensesRequest_SharedLicenses `protobuf:"bytes,2,rep,name=license_data,json=licenseData,proto3" json:"license_data,omitempty"`
	Scope       string                                        `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *UpdateSharedLicensesRequest) Reset() {
	*x = UpdateSharedLicensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSharedLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSharedLicensesRequest) ProtoMessage() {}

func (x *UpdateSharedLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSharedLicensesRequest.ProtoReflect.Descriptor instead.
func (*UpdateSharedLicensesRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateSharedLicensesRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *UpdateSharedLicensesRequest) GetLicenseData() []*UpdateSharedLicensesRequest_SharedLicenses {
	if x != nil {
		return x.LicenseData
	}
	return nil
}

func (x *UpdateSharedLicensesRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type UpdateAggrightsSharedLicensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku             string                                                 `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	LicenseData     []*UpdateAggrightsSharedLicensesRequest_SharedLicenses `protobuf:"bytes,2,rep,name=license_data,json=licenseData,proto3" json:"license_data,omitempty"`
	Scope           string                                                 `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	AggregationName string                                                 `protobuf:"bytes,4,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
}

func (x *UpdateAggrightsSharedLicensesRequest) Reset() {
	*x = UpdateAggrightsSharedLicensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAggrightsSharedLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAggrightsSharedLicensesRequest) ProtoMessage() {}

func (x *UpdateAggrightsSharedLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAggrightsSharedLicensesRequest.ProtoReflect.Descriptor instead.
func (*UpdateAggrightsSharedLicensesRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateAggrightsSharedLicensesRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *UpdateAggrightsSharedLicensesRequest) GetLicenseData() []*UpdateAggrightsSharedLicensesRequest_SharedLicenses {
	if x != nil {
		return x.LicenseData
	}
	return nil
}

func (x *UpdateAggrightsSharedLicensesRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpdateAggrightsSharedLicensesRequest) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

type UpdateSharedLicensesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateSharedLicensesResponse) Reset() {
	*x = UpdateSharedLicensesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSharedLicensesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSharedLicensesResponse) ProtoMessage() {}

func (x *UpdateSharedLicensesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSharedLicensesResponse.ProtoReflect.Descriptor instead.
func (*UpdateSharedLicensesResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateSharedLicensesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetProductCountByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetProductCountByAppRequest) Reset() {
	*x = GetProductCountByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductCountByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductCountByAppRequest) ProtoMessage() {}

func (x *GetProductCountByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductCountByAppRequest.ProtoReflect.Descriptor instead.
func (*GetProductCountByAppRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{19}
}

func (x *GetProductCountByAppRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetProductCountByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppData []*GetProductCountByAppResponseApplications `protobuf:"bytes,1,rep,name=app_data,json=appData,proto3" json:"app_data,omitempty"`
}

func (x *GetProductCountByAppResponse) Reset() {
	*x = GetProductCountByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductCountByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductCountByAppResponse) ProtoMessage() {}

func (x *GetProductCountByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductCountByAppResponse.ProtoReflect.Descriptor instead.
func (*GetProductCountByAppResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{20}
}

func (x *GetProductCountByAppResponse) GetAppData() []*GetProductCountByAppResponseApplications {
	if x != nil {
		return x.AppData
	}
	return nil
}

type GetApplicationsByProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Swidtag string `protobuf:"bytes,2,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
}

func (x *GetApplicationsByProductRequest) Reset() {
	*x = GetApplicationsByProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicationsByProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationsByProductRequest) ProtoMessage() {}

func (x *GetApplicationsByProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationsByProductRequest.ProtoReflect.Descriptor instead.
func (*GetApplicationsByProductRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{21}
}

func (x *GetApplicationsByProductRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetApplicationsByProductRequest) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

type GetApplicationsByProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId []string `protobuf:"bytes,1,rep,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *GetApplicationsByProductResponse) Reset() {
	*x = GetApplicationsByProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicationsByProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationsByProductResponse) ProtoMessage() {}

func (x *GetApplicationsByProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationsByProductResponse.ProtoReflect.Descriptor instead.
func (*GetApplicationsByProductResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{22}
}

func (x *GetApplicationsByProductResponse) GetApplicationId() []string {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

type GetAggregationAcqrightsExpandedViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope           string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	AggregationName string `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	Metric          string `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *GetAggregationAcqrightsExpandedViewRequest) Reset() {
	*x = GetAggregationAcqrightsExpandedViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationAcqrightsExpandedViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationAcqrightsExpandedViewRequest) ProtoMessage() {}

func (x *GetAggregationAcqrightsExpandedViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationAcqrightsExpandedViewRequest.ProtoReflect.Descriptor instead.
func (*GetAggregationAcqrightsExpandedViewRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{23}
}

func (x *GetAggregationAcqrightsExpandedViewRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetAggregationAcqrightsExpandedViewRequest) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *GetAggregationAcqrightsExpandedViewRequest) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

type GetAggregationAcqrightsExpandedViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32        `protobuf:"varint,1,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	AcqRights    []*AcqRights `protobuf:"bytes,2,rep,name=acqRights,proto3" json:"acqRights,omitempty"`
}

func (x *GetAggregationAcqrightsExpandedViewResponse) Reset() {
	*x = GetAggregationAcqrightsExpandedViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationAcqrightsExpandedViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationAcqrightsExpandedViewResponse) ProtoMessage() {}

func (x *GetAggregationAcqrightsExpandedViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationAcqrightsExpandedViewResponse.ProtoReflect.Descriptor instead.
func (*GetAggregationAcqrightsExpandedViewResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{24}
}

func (x *GetAggregationAcqrightsExpandedViewResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetAggregationAcqrightsExpandedViewResponse) GetAcqRights() []*AcqRights {
	if x != nil {
		return x.AcqRights
	}
	return nil
}

type GetAggregationProductsExpandedViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope           string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	AggregationName string `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
}

func (x *GetAggregationProductsExpandedViewRequest) Reset() {
	*x = GetAggregationProductsExpandedViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationProductsExpandedViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationProductsExpandedViewRequest) ProtoMessage() {}

func (x *GetAggregationProductsExpandedViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationProductsExpandedViewRequest.ProtoReflect.Descriptor instead.
func (*GetAggregationProductsExpandedViewRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{25}
}

func (x *GetAggregationProductsExpandedViewRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetAggregationProductsExpandedViewRequest) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

type GetAggregationProductsExpandedViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32            `protobuf:"varint,1,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	Products     []*ProductExpand `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *GetAggregationProductsExpandedViewResponse) Reset() {
	*x = GetAggregationProductsExpandedViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationProductsExpandedViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationProductsExpandedViewResponse) ProtoMessage() {}

func (x *GetAggregationProductsExpandedViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationProductsExpandedViewResponse.ProtoReflect.Descriptor instead.
func (*GetAggregationProductsExpandedViewResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{26}
}

func (x *GetAggregationProductsExpandedViewResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetAggregationProductsExpandedViewResponse) GetProducts() []*ProductExpand {
	if x != nil {
		return x.Products
	}
	return nil
}

type ProductAggregationProductViewOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ProductAggregationProductViewOptionsRequest) Reset() {
	*x = ProductAggregationProductViewOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregationProductViewOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregationProductViewOptionsRequest) ProtoMessage() {}

func (x *ProductAggregationProductViewOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregationProductViewOptionsRequest.ProtoReflect.Descriptor instead.
func (*ProductAggregationProductViewOptionsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{27}
}

func (x *ProductAggregationProductViewOptionsRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProductAggregationProductViewOptionsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ProductAggregationProductViewOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOfOptions int32         `protobuf:"varint,1,opt,name=numOfOptions,proto3" json:"numOfOptions,omitempty"`
	Optioninfo   []*OptionInfo `protobuf:"bytes,2,rep,name=optioninfo,proto3" json:"optioninfo,omitempty"`
}

func (x *ProductAggregationProductViewOptionsResponse) Reset() {
	*x = ProductAggregationProductViewOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregationProductViewOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregationProductViewOptionsResponse) ProtoMessage() {}

func (x *ProductAggregationProductViewOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregationProductViewOptionsResponse.ProtoReflect.Descriptor instead.
func (*ProductAggregationProductViewOptionsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{28}
}

func (x *ProductAggregationProductViewOptionsResponse) GetNumOfOptions() int32 {
	if x != nil {
		return x.NumOfOptions
	}
	return 0
}

func (x *ProductAggregationProductViewOptionsResponse) GetOptioninfo() []*OptionInfo {
	if x != nil {
		return x.Optioninfo
	}
	return nil
}

type GetEquipmentsByProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	SwidTag string `protobuf:"bytes,2,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
}

func (x *GetEquipmentsByProductRequest) Reset() {
	*x = GetEquipmentsByProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquipmentsByProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentsByProductRequest) ProtoMessage() {}

func (x *GetEquipmentsByProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentsByProductRequest.ProtoReflect.Descriptor instead.
func (*GetEquipmentsByProductRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{29}
}

func (x *GetEquipmentsByProductRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetEquipmentsByProductRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

type GetEquipmentsByProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentId []string `protobuf:"bytes,1,rep,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
}

func (x *GetEquipmentsByProductResponse) Reset() {
	*x = GetEquipmentsByProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquipmentsByProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentsByProductResponse) ProtoMessage() {}

func (x *GetEquipmentsByProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentsByProductResponse.ProtoReflect.Descriptor instead.
func (*GetEquipmentsByProductResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{30}
}

func (x *GetEquipmentsByProductResponse) GetEquipmentId() []string {
	if x != nil {
		return x.EquipmentId
	}
	return nil
}

type DeleteAcqRightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku   string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DeleteAcqRightRequest) Reset() {
	*x = DeleteAcqRightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAcqRightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAcqRightRequest) ProtoMessage() {}

func (x *DeleteAcqRightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAcqRightRequest.ProtoReflect.Descriptor instead.
func (*DeleteAcqRightRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteAcqRightRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *DeleteAcqRightRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DeleteAcqRightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteAcqRightResponse) Reset() {
	*x = DeleteAcqRightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAcqRightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAcqRightResponse) ProtoMessage() {}

func (x *DeleteAcqRightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAcqRightResponse.ProtoReflect.Descriptor instead.
func (*DeleteAcqRightResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteAcqRightResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DownloadAcqRightFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku   string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DownloadAcqRightFileRequest) Reset() {
	*x = DownloadAcqRightFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAcqRightFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAcqRightFileRequest) ProtoMessage() {}

func (x *DownloadAcqRightFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAcqRightFileRequest.ProtoReflect.Descriptor instead.
func (*DownloadAcqRightFileRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{33}
}

func (x *DownloadAcqRightFileRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *DownloadAcqRightFileRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DownloadAcqRightFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileData []byte `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
}

func (x *DownloadAcqRightFileResponse) Reset() {
	*x = DownloadAcqRightFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAcqRightFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAcqRightFileResponse) ProtoMessage() {}

func (x *DownloadAcqRightFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAcqRightFileResponse.ProtoReflect.Descriptor instead.
func (*DownloadAcqRightFileResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{34}
}

func (x *DownloadAcqRightFileResponse) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

type DeleteAggregatedRightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku   string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DeleteAggregatedRightsRequest) Reset() {
	*x = DeleteAggregatedRightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAggregatedRightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAggregatedRightsRequest) ProtoMessage() {}

func (x *DeleteAggregatedRightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAggregatedRightsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAggregatedRightsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteAggregatedRightsRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *DeleteAggregatedRightsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DeleteAggregatedRightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteAggregatedRightsResponse) Reset() {
	*x = DeleteAggregatedRightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAggregatedRightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAggregatedRightsResponse) ProtoMessage() {}

func (x *DeleteAggregatedRightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAggregatedRightsResponse.ProtoReflect.Descriptor instead.
func (*DeleteAggregatedRightsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteAggregatedRightsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DownloadAggregatedRightsFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku   string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DownloadAggregatedRightsFileRequest) Reset() {
	*x = DownloadAggregatedRightsFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAggregatedRightsFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAggregatedRightsFileRequest) ProtoMessage() {}

func (x *DownloadAggregatedRightsFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAggregatedRightsFileRequest.ProtoReflect.Descriptor instead.
func (*DownloadAggregatedRightsFileRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{37}
}

func (x *DownloadAggregatedRightsFileRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *DownloadAggregatedRightsFileRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DownloadAggregatedRightsFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileData []byte `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
}

func (x *DownloadAggregatedRightsFileResponse) Reset() {
	*x = DownloadAggregatedRightsFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadAggregatedRightsFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAggregatedRightsFileResponse) ProtoMessage() {}

func (x *DownloadAggregatedRightsFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAggregatedRightsFileResponse.ProtoReflect.Descriptor instead.
func (*DownloadAggregatedRightsFileResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{38}
}

func (x *DownloadAggregatedRightsFileResponse) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

type CreateDashboardUpdateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *CreateDashboardUpdateJobRequest) Reset() {
	*x = CreateDashboardUpdateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDashboardUpdateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDashboardUpdateJobRequest) ProtoMessage() {}

func (x *CreateDashboardUpdateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDashboardUpdateJobRequest.ProtoReflect.Descriptor instead.
func (*CreateDashboardUpdateJobRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{39}
}

func (x *CreateDashboardUpdateJobRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type UpsertAllocateMetricEquipementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Swidtag          string `protobuf:"bytes,2,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	EquipmentId      string `protobuf:"bytes,3,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	EqType           string `protobuf:"bytes,4,opt,name=eq_type,json=eqType,proto3" json:"eq_type,omitempty"`
	AllocatedUsers   int32  `protobuf:"varint,5,opt,name=allocated_users,json=allocatedUsers,proto3" json:"allocated_users,omitempty"`
	AllocatedMetrics string `protobuf:"bytes,6,opt,name=allocated_metrics,json=allocatedMetrics,proto3" json:"allocated_metrics,omitempty"`
}

func (x *UpsertAllocateMetricEquipementRequest) Reset() {
	*x = UpsertAllocateMetricEquipementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAllocateMetricEquipementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAllocateMetricEquipementRequest) ProtoMessage() {}

func (x *UpsertAllocateMetricEquipementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAllocateMetricEquipementRequest.ProtoReflect.Descriptor instead.
func (*UpsertAllocateMetricEquipementRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{40}
}

func (x *UpsertAllocateMetricEquipementRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpsertAllocateMetricEquipementRequest) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *UpsertAllocateMetricEquipementRequest) GetEquipmentId() string {
	if x != nil {
		return x.EquipmentId
	}
	return ""
}

func (x *UpsertAllocateMetricEquipementRequest) GetEqType() string {
	if x != nil {
		return x.EqType
	}
	return ""
}

func (x *UpsertAllocateMetricEquipementRequest) GetAllocatedUsers() int32 {
	if x != nil {
		return x.AllocatedUsers
	}
	return 0
}

func (x *UpsertAllocateMetricEquipementRequest) GetAllocatedMetrics() string {
	if x != nil {
		return x.AllocatedMetrics
	}
	return ""
}

type DropAllocateMetricEquipementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Swidtag          string `protobuf:"bytes,2,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	EquipmentId      string `protobuf:"bytes,3,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	AllocatedMetrics string `protobuf:"bytes,4,opt,name=allocated_metrics,json=allocatedMetrics,proto3" json:"allocated_metrics,omitempty"`
}

func (x *DropAllocateMetricEquipementRequest) Reset() {
	*x = DropAllocateMetricEquipementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropAllocateMetricEquipementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropAllocateMetricEquipementRequest) ProtoMessage() {}

func (x *DropAllocateMetricEquipementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropAllocateMetricEquipementRequest.ProtoReflect.Descriptor instead.
func (*DropAllocateMetricEquipementRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{41}
}

func (x *DropAllocateMetricEquipementRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *DropAllocateMetricEquipementRequest) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *DropAllocateMetricEquipementRequest) GetEquipmentId() string {
	if x != nil {
		return x.EquipmentId
	}
	return ""
}

func (x *DropAllocateMetricEquipementRequest) GetAllocatedMetrics() string {
	if x != nil {
		return x.AllocatedMetrics
	}
	return ""
}

type CreateDashboardUpdateJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CreateDashboardUpdateJobResponse) Reset() {
	*x = CreateDashboardUpdateJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDashboardUpdateJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDashboardUpdateJobResponse) ProtoMessage() {}

func (x *CreateDashboardUpdateJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDashboardUpdateJobResponse.ProtoReflect.Descriptor instead.
func (*CreateDashboardUpdateJobResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{42}
}

func (x *CreateDashboardUpdateJobResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpsertAllocateMetricEquipementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpsertAllocateMetricEquipementResponse) Reset() {
	*x = UpsertAllocateMetricEquipementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAllocateMetricEquipementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAllocateMetricEquipementResponse) ProtoMessage() {}

func (x *UpsertAllocateMetricEquipementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAllocateMetricEquipementResponse.ProtoReflect.Descriptor instead.
func (*UpsertAllocateMetricEquipementResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{43}
}

func (x *UpsertAllocateMetricEquipementResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetAllEditorsCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllEditorsCatalogRequest) Reset() {
	*x = GetAllEditorsCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllEditorsCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllEditorsCatalogRequest) ProtoMessage() {}

func (x *GetAllEditorsCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllEditorsCatalogRequest.ProtoReflect.Descriptor instead.
func (*GetAllEditorsCatalogRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{44}
}

type GetAllEditorsCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditorName []string `protobuf:"bytes,1,rep,name=editor_name,json=editorName,proto3" json:"editor_name,omitempty"`
}

func (x *GetAllEditorsCatalogResponse) Reset() {
	*x = GetAllEditorsCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllEditorsCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllEditorsCatalogResponse) ProtoMessage() {}

func (x *GetAllEditorsCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllEditorsCatalogResponse.ProtoReflect.Descriptor instead.
func (*GetAllEditorsCatalogResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{45}
}

func (x *GetAllEditorsCatalogResponse) GetEditorName() []string {
	if x != nil {
		return x.EditorName
	}
	return nil
}

type GetBannerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeZone string `protobuf:"bytes,1,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	Scope    string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetBannerRequest) Reset() {
	*x = GetBannerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBannerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBannerRequest) ProtoMessage() {}

func (x *GetBannerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBannerRequest.ProtoReflect.Descriptor instead.
func (*GetBannerRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{46}
}

func (x *GetBannerRequest) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *GetBannerRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetBannerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt    string `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	NextUpdateAt string `protobuf:"bytes,2,opt,name=next_update_at,json=nextUpdateAt,proto3" json:"next_update_at,omitempty"`
}

func (x *GetBannerResponse) Reset() {
	*x = GetBannerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBannerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBannerResponse) ProtoMessage() {}

func (x *GetBannerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBannerResponse.ProtoReflect.Descriptor instead.
func (*GetBannerResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{47}
}

func (x *GetBannerResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *GetBannerResponse) GetNextUpdateAt() string {
	if x != nil {
		return x.NextUpdateAt
	}
	return ""
}

type AcqRightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku                       string  `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	ProductName               string  `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Version                   string  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	ProductEditor             string  `protobuf:"bytes,4,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	MetricName                string  `protobuf:"bytes,5,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	NumLicensesAcquired       int32   `protobuf:"varint,6,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
	AvgUnitPrice              float64 `protobuf:"fixed64,7,opt,name=avg_unit_price,json=avgUnitPrice,proto3" json:"avg_unit_price,omitempty"`
	StartOfMaintenance        string  `protobuf:"bytes,8,opt,name=start_of_maintenance,json=startOfMaintenance,proto3" json:"start_of_maintenance,omitempty"`
	EndOfMaintenance          string  `protobuf:"bytes,9,opt,name=end_of_maintenance,json=endOfMaintenance,proto3" json:"end_of_maintenance,omitempty"`
	NumLicencesMaintainance   int32   `protobuf:"varint,10,opt,name=num_licences_maintainance,json=numLicencesMaintainance,proto3" json:"num_licences_maintainance,omitempty"`
	AvgMaintenanceUnitPrice   float64 `protobuf:"fixed64,11,opt,name=avg_maintenance_unit_price,json=avgMaintenanceUnitPrice,proto3" json:"avg_maintenance_unit_price,omitempty"`
	LastPurchasedOrder        string  `protobuf:"bytes,12,opt,name=last_purchased_order,json=lastPurchasedOrder,proto3" json:"last_purchased_order,omitempty"`
	SupportNumber             string  `protobuf:"bytes,13,opt,name=support_number,json=supportNumber,proto3" json:"support_number,omitempty"`
	MaintenanceProvider       string  `protobuf:"bytes,14,opt,name=maintenance_provider,json=maintenanceProvider,proto3" json:"maintenance_provider,omitempty"`
	Scope                     string  `protobuf:"bytes,15,opt,name=scope,proto3" json:"scope,omitempty"`
	Comment                   string  `protobuf:"bytes,16,opt,name=comment,proto3" json:"comment,omitempty"`
	OrderingDate              string  `protobuf:"bytes,17,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	CorporateSourcingContract string  `protobuf:"bytes,18,opt,name=corporate_sourcing_contract,json=corporateSourcingContract,proto3" json:"corporate_sourcing_contract,omitempty"`
	SoftwareProvider          string  `protobuf:"bytes,19,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
	FileName                  string  `protobuf:"bytes,20,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileData                  []byte  `protobuf:"bytes,21,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	Repartition               bool    `protobuf:"varint,22,opt,name=repartition,proto3" json:"repartition,omitempty"`
}

func (x *AcqRightRequest) Reset() {
	*x = AcqRightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcqRightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcqRightRequest) ProtoMessage() {}

func (x *AcqRightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcqRightRequest.ProtoReflect.Descriptor instead.
func (*AcqRightRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{48}
}

func (x *AcqRightRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *AcqRightRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *AcqRightRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AcqRightRequest) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *AcqRightRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *AcqRightRequest) GetNumLicensesAcquired() int32 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

func (x *AcqRightRequest) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *AcqRightRequest) GetStartOfMaintenance() string {
	if x != nil {
		return x.StartOfMaintenance
	}
	return ""
}

func (x *AcqRightRequest) GetEndOfMaintenance() string {
	if x != nil {
		return x.EndOfMaintenance
	}
	return ""
}

func (x *AcqRightRequest) GetNumLicencesMaintainance() int32 {
	if x != nil {
		return x.NumLicencesMaintainance
	}
	return 0
}

func (x *AcqRightRequest) GetAvgMaintenanceUnitPrice() float64 {
	if x != nil {
		return x.AvgMaintenanceUnitPrice
	}
	return 0
}

func (x *AcqRightRequest) GetLastPurchasedOrder() string {
	if x != nil {
		return x.LastPurchasedOrder
	}
	return ""
}

func (x *AcqRightRequest) GetSupportNumber() string {
	if x != nil {
		return x.SupportNumber
	}
	return ""
}

func (x *AcqRightRequest) GetMaintenanceProvider() string {
	if x != nil {
		return x.MaintenanceProvider
	}
	return ""
}

func (x *AcqRightRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AcqRightRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AcqRightRequest) GetOrderingDate() string {
	if x != nil {
		return x.OrderingDate
	}
	return ""
}

func (x *AcqRightRequest) GetCorporateSourcingContract() string {
	if x != nil {
		return x.CorporateSourcingContract
	}
	return ""
}

func (x *AcqRightRequest) GetSoftwareProvider() string {
	if x != nil {
		return x.SoftwareProvider
	}
	return ""
}

func (x *AcqRightRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AcqRightRequest) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *AcqRightRequest) GetRepartition() bool {
	if x != nil {
		return x.Repartition
	}
	return false
}

type AcqRightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AcqRightResponse) Reset() {
	*x = AcqRightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcqRightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcqRightResponse) ProtoMessage() {}

func (x *AcqRightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcqRightResponse.ProtoReflect.Descriptor instead.
func (*AcqRightResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{49}
}

func (x *AcqRightResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              int32      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AggregationName string     `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	ProductEditor   string     `protobuf:"bytes,3,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	ProductNames    []string   `protobuf:"bytes,4,rep,name=product_names,json=productNames,proto3" json:"product_names,omitempty"`
	Swidtags        []string   `protobuf:"bytes,5,rep,name=swidtags,proto3" json:"swidtags,omitempty"`
	Scope           string     `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
	EditorId        string     `protobuf:"bytes,7,opt,name=editor_id,json=editorId,proto3" json:"editor_id,omitempty"`
	Mapping         []*Mapping `protobuf:"bytes,8,rep,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{50}
}

func (x *Aggregation) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Aggregation) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *Aggregation) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *Aggregation) GetProductNames() []string {
	if x != nil {
		return x.ProductNames
	}
	return nil
}

func (x *Aggregation) GetSwidtags() []string {
	if x != nil {
		return x.Swidtags
	}
	return nil
}

func (x *Aggregation) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Aggregation) GetEditorId() string {
	if x != nil {
		return x.EditorId
	}
	return ""
}

func (x *Aggregation) GetMapping() []*Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName    string `protobuf:"bytes,1,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductVersion string `protobuf:"bytes,2,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
}

func (x *Mapping) Reset() {
	*x = Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mapping) ProtoMessage() {}

func (x *Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mapping.ProtoReflect.Descriptor instead.
func (*Mapping) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{51}
}

func (x *Mapping) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Mapping) GetProductVersion() string {
	if x != nil {
		return x.ProductVersion
	}
	return ""
}

type AggregationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AggregationResponse) Reset() {
	*x = AggregationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationResponse) ProtoMessage() {}

func (x *AggregationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationResponse.ProtoReflect.Descriptor instead.
func (*AggregationResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{52}
}

func (x *AggregationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AggregatedRightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku                       string  `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	AggregationID             int32   `protobuf:"varint,2,opt,name=aggregationID,proto3" json:"aggregationID,omitempty"`
	MetricName                string  `protobuf:"bytes,3,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	NumLicensesAcquired       int32   `protobuf:"varint,4,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
	AvgUnitPrice              float64 `protobuf:"fixed64,5,opt,name=avg_unit_price,json=avgUnitPrice,proto3" json:"avg_unit_price,omitempty"`
	StartOfMaintenance        string  `protobuf:"bytes,6,opt,name=start_of_maintenance,json=startOfMaintenance,proto3" json:"start_of_maintenance,omitempty"`
	EndOfMaintenance          string  `protobuf:"bytes,7,opt,name=end_of_maintenance,json=endOfMaintenance,proto3" json:"end_of_maintenance,omitempty"`
	LastPurchasedOrder        string  `protobuf:"bytes,8,opt,name=last_purchased_order,json=lastPurchasedOrder,proto3" json:"last_purchased_order,omitempty"`
	SupportNumber             string  `protobuf:"bytes,9,opt,name=support_number,json=supportNumber,proto3" json:"support_number,omitempty"`
	MaintenanceProvider       string  `protobuf:"bytes,10,opt,name=maintenance_provider,json=maintenanceProvider,proto3" json:"maintenance_provider,omitempty"`
	NumLicencesMaintenance    int32   `protobuf:"varint,11,opt,name=num_licences_maintenance,json=numLicencesMaintenance,proto3" json:"num_licences_maintenance,omitempty"`
	AvgMaintenanceUnitPrice   float64 `protobuf:"fixed64,12,opt,name=avg_maintenance_unit_price,json=avgMaintenanceUnitPrice,proto3" json:"avg_maintenance_unit_price,omitempty"`
	Scope                     string  `protobuf:"bytes,13,opt,name=scope,proto3" json:"scope,omitempty"`
	Comment                   string  `protobuf:"bytes,14,opt,name=comment,proto3" json:"comment,omitempty"`
	OrderingDate              string  `protobuf:"bytes,15,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	CorporateSourcingContract string  `protobuf:"bytes,16,opt,name=corporate_sourcing_contract,json=corporateSourcingContract,proto3" json:"corporate_sourcing_contract,omitempty"`
	SoftwareProvider          string  `protobuf:"bytes,17,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
	FileName                  string  `protobuf:"bytes,18,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileData                  []byte  `protobuf:"bytes,19,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	Repartition               bool    `protobuf:"varint,20,opt,name=repartition,proto3" json:"repartition,omitempty"`
}

func (x *AggregatedRightsRequest) Reset() {
	*x = AggregatedRightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedRightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedRightsRequest) ProtoMessage() {}

func (x *AggregatedRightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedRightsRequest.ProtoReflect.Descriptor instead.
func (*AggregatedRightsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{53}
}

func (x *AggregatedRightsRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *AggregatedRightsRequest) GetAggregationID() int32 {
	if x != nil {
		return x.AggregationID
	}
	return 0
}

func (x *AggregatedRightsRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *AggregatedRightsRequest) GetNumLicensesAcquired() int32 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

func (x *AggregatedRightsRequest) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *AggregatedRightsRequest) GetStartOfMaintenance() string {
	if x != nil {
		return x.StartOfMaintenance
	}
	return ""
}

func (x *AggregatedRightsRequest) GetEndOfMaintenance() string {
	if x != nil {
		return x.EndOfMaintenance
	}
	return ""
}

func (x *AggregatedRightsRequest) GetLastPurchasedOrder() string {
	if x != nil {
		return x.LastPurchasedOrder
	}
	return ""
}

func (x *AggregatedRightsRequest) GetSupportNumber() string {
	if x != nil {
		return x.SupportNumber
	}
	return ""
}

func (x *AggregatedRightsRequest) GetMaintenanceProvider() string {
	if x != nil {
		return x.MaintenanceProvider
	}
	return ""
}

func (x *AggregatedRightsRequest) GetNumLicencesMaintenance() int32 {
	if x != nil {
		return x.NumLicencesMaintenance
	}
	return 0
}

func (x *AggregatedRightsRequest) GetAvgMaintenanceUnitPrice() float64 {
	if x != nil {
		return x.AvgMaintenanceUnitPrice
	}
	return 0
}

func (x *AggregatedRightsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AggregatedRightsRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AggregatedRightsRequest) GetOrderingDate() string {
	if x != nil {
		return x.OrderingDate
	}
	return ""
}

func (x *AggregatedRightsRequest) GetCorporateSourcingContract() string {
	if x != nil {
		return x.CorporateSourcingContract
	}
	return ""
}

func (x *AggregatedRightsRequest) GetSoftwareProvider() string {
	if x != nil {
		return x.SoftwareProvider
	}
	return ""
}

func (x *AggregatedRightsRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AggregatedRightsRequest) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *AggregatedRightsRequest) GetRepartition() bool {
	if x != nil {
		return x.Repartition
	}
	return false
}

type AggregatedRightsView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                        int32         `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AggregationName           string        `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	Sku                       string        `protobuf:"bytes,3,opt,name=sku,proto3" json:"sku,omitempty"`
	ProductEditor             string        `protobuf:"bytes,4,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	MetricName                string        `protobuf:"bytes,5,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	ProductNames              []string      `protobuf:"bytes,6,rep,name=product_names,json=productNames,proto3" json:"product_names,omitempty"`
	Swidtags                  []string      `protobuf:"bytes,7,rep,name=swidtags,proto3" json:"swidtags,omitempty"`
	NumLicensesAcquired       int32         `protobuf:"varint,8,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
	AvgUnitPrice              float64       `protobuf:"fixed64,9,opt,name=avg_unit_price,json=avgUnitPrice,proto3" json:"avg_unit_price,omitempty"`
	StartOfMaintenance        string        `protobuf:"bytes,10,opt,name=start_of_maintenance,json=startOfMaintenance,proto3" json:"start_of_maintenance,omitempty"`
	EndOfMaintenance          string        `protobuf:"bytes,11,opt,name=end_of_maintenance,json=endOfMaintenance,proto3" json:"end_of_maintenance,omitempty"`
	NumLicencesMaintenance    int32         `protobuf:"varint,12,opt,name=num_licences_maintenance,json=numLicencesMaintenance,proto3" json:"num_licences_maintenance,omitempty"`
	AvgMaintenanceUnitPrice   float64       `protobuf:"fixed64,13,opt,name=avg_maintenance_unit_price,json=avgMaintenanceUnitPrice,proto3" json:"avg_maintenance_unit_price,omitempty"`
	Scope                     string        `protobuf:"bytes,14,opt,name=scope,proto3" json:"scope,omitempty"`
	Comment                   string        `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
	IsIndividualRightExists   bool          `protobuf:"varint,16,opt,name=is_individual_right_exists,json=isIndividualRightExists,proto3" json:"is_individual_right_exists,omitempty"`
	TotalPurchaseCost         float64       `protobuf:"fixed64,17,opt,name=total_purchase_cost,json=totalPurchaseCost,proto3" json:"total_purchase_cost,omitempty"`
	TotalCost                 float64       `protobuf:"fixed64,18,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	TotalMaintenanceCost      float64       `protobuf:"fixed64,19,opt,name=total_maintenance_cost,json=totalMaintenanceCost,proto3" json:"total_maintenance_cost,omitempty"`
	LicenceUnderMaintenance   string        `protobuf:"bytes,20,opt,name=licence_under_maintenance,json=licenceUnderMaintenance,proto3" json:"licence_under_maintenance,omitempty"`
	OrderingDate              string        `protobuf:"bytes,21,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	CorporateSourcingContract string        `protobuf:"bytes,22,opt,name=corporate_sourcing_contract,json=corporateSourcingContract,proto3" json:"corporate_sourcing_contract,omitempty"`
	SoftwareProvider          string        `protobuf:"bytes,23,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
	LastPurchasedOrder        string        `protobuf:"bytes,24,opt,name=last_purchased_order,json=lastPurchasedOrder,proto3" json:"last_purchased_order,omitempty"`
	SupportNumber             string        `protobuf:"bytes,25,opt,name=support_number,json=supportNumber,proto3" json:"support_number,omitempty"`
	MaintenanceProvider       string        `protobuf:"bytes,26,opt,name=maintenance_provider,json=maintenanceProvider,proto3" json:"maintenance_provider,omitempty"`
	FileName                  string        `protobuf:"bytes,27,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Repartition               bool          `protobuf:"varint,28,opt,name=repartition,proto3" json:"repartition,omitempty"`
	SharedLicenses            int32         `protobuf:"varint,29,opt,name=shared_licenses,json=sharedLicenses,proto3" json:"shared_licenses,omitempty"`
	RecievedLicenses          int32         `protobuf:"varint,30,opt,name=recieved_licenses,json=recievedLicenses,proto3" json:"recieved_licenses,omitempty"`
	AvailableLicenses         int32         `protobuf:"varint,31,opt,name=available_licenses,json=availableLicenses,proto3" json:"available_licenses,omitempty"`
	SharedData                []*SharedData `protobuf:"bytes,32,rep,name=shared_data,json=sharedData,proto3" json:"shared_data,omitempty"`
	EditorId                  string        `protobuf:"bytes,33,opt,name=editor_id,json=editorId,proto3" json:"editor_id,omitempty"`
	Mapping                   []*Mapping    `protobuf:"bytes,34,rep,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *AggregatedRightsView) Reset() {
	*x = AggregatedRightsView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedRightsView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedRightsView) ProtoMessage() {}

func (x *AggregatedRightsView) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedRightsView.ProtoReflect.Descriptor instead.
func (*AggregatedRightsView) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{54}
}

func (x *AggregatedRightsView) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AggregatedRightsView) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *AggregatedRightsView) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *AggregatedRightsView) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *AggregatedRightsView) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *AggregatedRightsView) GetProductNames() []string {
	if x != nil {
		return x.ProductNames
	}
	return nil
}

func (x *AggregatedRightsView) GetSwidtags() []string {
	if x != nil {
		return x.Swidtags
	}
	return nil
}

func (x *AggregatedRightsView) GetNumLicensesAcquired() int32 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

func (x *AggregatedRightsView) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *AggregatedRightsView) GetStartOfMaintenance() string {
	if x != nil {
		return x.StartOfMaintenance
	}
	return ""
}

func (x *AggregatedRightsView) GetEndOfMaintenance() string {
	if x != nil {
		return x.EndOfMaintenance
	}
	return ""
}

func (x *AggregatedRightsView) GetNumLicencesMaintenance() int32 {
	if x != nil {
		return x.NumLicencesMaintenance
	}
	return 0
}

func (x *AggregatedRightsView) GetAvgMaintenanceUnitPrice() float64 {
	if x != nil {
		return x.AvgMaintenanceUnitPrice
	}
	return 0
}

func (x *AggregatedRightsView) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AggregatedRightsView) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AggregatedRightsView) GetIsIndividualRightExists() bool {
	if x != nil {
		return x.IsIndividualRightExists
	}
	return false
}

func (x *AggregatedRightsView) GetTotalPurchaseCost() float64 {
	if x != nil {
		return x.TotalPurchaseCost
	}
	return 0
}

func (x *AggregatedRightsView) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *AggregatedRightsView) GetTotalMaintenanceCost() float64 {
	if x != nil {
		return x.TotalMaintenanceCost
	}
	return 0
}

func (x *AggregatedRightsView) GetLicenceUnderMaintenance() string {
	if x != nil {
		return x.LicenceUnderMaintenance
	}
	return ""
}

func (x *AggregatedRightsView) GetOrderingDate() string {
	if x != nil {
		return x.OrderingDate
	}
	return ""
}

func (x *AggregatedRightsView) GetCorporateSourcingContract() string {
	if x != nil {
		return x.CorporateSourcingContract
	}
	return ""
}

func (x *AggregatedRightsView) GetSoftwareProvider() string {
	if x != nil {
		return x.SoftwareProvider
	}
	return ""
}

func (x *AggregatedRightsView) GetLastPurchasedOrder() string {
	if x != nil {
		return x.LastPurchasedOrder
	}
	return ""
}

func (x *AggregatedRightsView) GetSupportNumber() string {
	if x != nil {
		return x.SupportNumber
	}
	return ""
}

func (x *AggregatedRightsView) GetMaintenanceProvider() string {
	if x != nil {
		return x.MaintenanceProvider
	}
	return ""
}

func (x *AggregatedRightsView) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AggregatedRightsView) GetRepartition() bool {
	if x != nil {
		return x.Repartition
	}
	return false
}

func (x *AggregatedRightsView) GetSharedLicenses() int32 {
	if x != nil {
		return x.SharedLicenses
	}
	return 0
}

func (x *AggregatedRightsView) GetRecievedLicenses() int32 {
	if x != nil {
		return x.RecievedLicenses
	}
	return 0
}

func (x *AggregatedRightsView) GetAvailableLicenses() int32 {
	if x != nil {
		return x.AvailableLicenses
	}
	return 0
}

func (x *AggregatedRightsView) GetSharedData() []*SharedData {
	if x != nil {
		return x.SharedData
	}
	return nil
}

func (x *AggregatedRightsView) GetEditorId() string {
	if x != nil {
		return x.EditorId
	}
	return ""
}

func (x *AggregatedRightsView) GetMapping() []*Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type AggregatedRightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AggregatedRightsResponse) Reset() {
	*x = AggregatedRightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedRightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedRightsResponse) ProtoMessage() {}

func (x *AggregatedRightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedRightsResponse.ProtoReflect.Descriptor instead.
func (*AggregatedRightsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{55}
}

func (x *AggregatedRightsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type OverviewProductQualityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *OverviewProductQualityRequest) Reset() {
	*x = OverviewProductQualityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewProductQualityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewProductQualityRequest) ProtoMessage() {}

func (x *OverviewProductQualityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewProductQualityRequest.ProtoReflect.Descriptor instead.
func (*OverviewProductQualityRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{56}
}

func (x *OverviewProductQualityRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type OverviewProductQualityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotAcquiredProducts           int32   `protobuf:"varint,1,opt,name=not_acquired_products,json=notAcquiredProducts,proto3" json:"not_acquired_products,omitempty"`
	NotDeployedProducts           int32   `protobuf:"varint,2,opt,name=not_deployed_products,json=notDeployedProducts,proto3" json:"not_deployed_products,omitempty"`
	NotAcquiredProductsPercentage float64 `protobuf:"fixed64,3,opt,name=not_acquired_products_percentage,json=notAcquiredProductsPercentage,proto3" json:"not_acquired_products_percentage,omitempty"`
	NotDeployedProductsPercentage float64 `protobuf:"fixed64,4,opt,name=not_deployed_products_percentage,json=notDeployedProductsPercentage,proto3" json:"not_deployed_products_percentage,omitempty"`
}

func (x *OverviewProductQualityResponse) Reset() {
	*x = OverviewProductQualityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewProductQualityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewProductQualityResponse) ProtoMessage() {}

func (x *OverviewProductQualityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewProductQualityResponse.ProtoReflect.Descriptor instead.
func (*OverviewProductQualityResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{57}
}

func (x *OverviewProductQualityResponse) GetNotAcquiredProducts() int32 {
	if x != nil {
		return x.NotAcquiredProducts
	}
	return 0
}

func (x *OverviewProductQualityResponse) GetNotDeployedProducts() int32 {
	if x != nil {
		return x.NotDeployedProducts
	}
	return 0
}

func (x *OverviewProductQualityResponse) GetNotAcquiredProductsPercentage() float64 {
	if x != nil {
		return x.NotAcquiredProductsPercentage
	}
	return 0
}

func (x *OverviewProductQualityResponse) GetNotDeployedProductsPercentage() float64 {
	if x != nil {
		return x.NotDeployedProductsPercentage
	}
	return 0
}

type ProductMaintenancePercRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ProductMaintenancePercRequest) Reset() {
	*x = ProductMaintenancePercRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductMaintenancePercRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductMaintenancePercRequest) ProtoMessage() {}

func (x *ProductMaintenancePercRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductMaintenancePercRequest.ProtoReflect.Descriptor instead.
func (*ProductMaintenancePercRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{58}
}

func (x *ProductMaintenancePercRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ProductMaintenancePercResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductWithMaintenancePercentage    float64        `protobuf:"fixed64,1,opt,name=product_with_maintenance_percentage,json=productWithMaintenancePercentage,proto3" json:"product_with_maintenance_percentage,omitempty"`
	ProductWithoutMaintenancePercentage float64        `protobuf:"fixed64,2,opt,name=product_without_maintenance_percentage,json=productWithoutMaintenancePercentage,proto3" json:"product_without_maintenance_percentage,omitempty"`
	ProductPerc                         []*ProductPerc `protobuf:"bytes,3,rep,name=ProductPerc,proto3" json:"ProductPerc,omitempty"`
}

func (x *ProductMaintenancePercResponse) Reset() {
	*x = ProductMaintenancePercResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductMaintenancePercResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductMaintenancePercResponse) ProtoMessage() {}

func (x *ProductMaintenancePercResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductMaintenancePercResponse.ProtoReflect.Descriptor instead.
func (*ProductMaintenancePercResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{59}
}

func (x *ProductMaintenancePercResponse) GetProductWithMaintenancePercentage() float64 {
	if x != nil {
		return x.ProductWithMaintenancePercentage
	}
	return 0
}

func (x *ProductMaintenancePercResponse) GetProductWithoutMaintenancePercentage() float64 {
	if x != nil {
		return x.ProductWithoutMaintenancePercentage
	}
	return 0
}

func (x *ProductMaintenancePercResponse) GetProductPerc() []*ProductPerc {
	if x != nil {
		return x.ProductPerc
	}
	return nil
}

type ProductPerc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swidtag           string  `protobuf:"bytes,1,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	PrecentageCovered float64 `protobuf:"fixed64,2,opt,name=precentage_covered,json=precentageCovered,proto3" json:"precentage_covered,omitempty"`
}

func (x *ProductPerc) Reset() {
	*x = ProductPerc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPerc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPerc) ProtoMessage() {}

func (x *ProductPerc) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPerc.ProtoReflect.Descriptor instead.
func (*ProductPerc) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{60}
}

func (x *ProductPerc) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *ProductPerc) GetPrecentageCovered() float64 {
	if x != nil {
		return x.PrecentageCovered
	}
	return 0
}

type ProductNoMaintenanceDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ProductNoMaintenanceDetailsRequest) Reset() {
	*x = ProductNoMaintenanceDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductNoMaintenanceDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductNoMaintenanceDetailsRequest) ProtoMessage() {}

func (x *ProductNoMaintenanceDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductNoMaintenanceDetailsRequest.ProtoReflect.Descriptor instead.
func (*ProductNoMaintenanceDetailsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{61}
}

func (x *ProductNoMaintenanceDetailsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ProductNoMaintenanceDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalProducts int32            `protobuf:"varint,1,opt,name=total_products,json=totalProducts,proto3" json:"total_products,omitempty"`
	ProductNoMain []*ProductNoMain `protobuf:"bytes,2,rep,name=product_no_main,json=productNoMain,proto3" json:"product_no_main,omitempty"`
}

func (x *ProductNoMaintenanceDetailsResponse) Reset() {
	*x = ProductNoMaintenanceDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductNoMaintenanceDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductNoMaintenanceDetailsResponse) ProtoMessage() {}

func (x *ProductNoMaintenanceDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductNoMaintenanceDetailsResponse.ProtoReflect.Descriptor instead.
func (*ProductNoMaintenanceDetailsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{62}
}

func (x *ProductNoMaintenanceDetailsResponse) GetTotalProducts() int32 {
	if x != nil {
		return x.TotalProducts
	}
	return 0
}

func (x *ProductNoMaintenanceDetailsResponse) GetProductNoMain() []*ProductNoMain {
	if x != nil {
		return x.ProductNoMain
	}
	return nil
}

type ProductNoMain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku         string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	ProductName string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ProductNoMain) Reset() {
	*x = ProductNoMain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductNoMain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductNoMain) ProtoMessage() {}

func (x *ProductNoMain) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductNoMain.ProtoReflect.Descriptor instead.
func (*ProductNoMain) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{63}
}

func (x *ProductNoMain) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ProductNoMain) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductNoMain) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ProductsPerEditorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ProductsPerEditorRequest) Reset() {
	*x = ProductsPerEditorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsPerEditorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsPerEditorRequest) ProtoMessage() {}

func (x *ProductsPerEditorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsPerEditorRequest.ProtoReflect.Descriptor instead.
func (*ProductsPerEditorRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{64}
}

func (x *ProductsPerEditorRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ProductsPerEditorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditorsProducts []*EditorProducts `protobuf:"bytes,1,rep,name=editors_products,json=editorsProducts,proto3" json:"editors_products,omitempty"`
}

func (x *ProductsPerEditorResponse) Reset() {
	*x = ProductsPerEditorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsPerEditorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsPerEditorResponse) ProtoMessage() {}

func (x *ProductsPerEditorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsPerEditorResponse.ProtoReflect.Descriptor instead.
func (*ProductsPerEditorResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{65}
}

func (x *ProductsPerEditorResponse) GetEditorsProducts() []*EditorProducts {
	if x != nil {
		return x.EditorsProducts
	}
	return nil
}

type GetRightsInfoByEditorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor string `protobuf:"bytes,1,opt,name=editor,proto3" json:"editor,omitempty"`
	Scope  string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetRightsInfoByEditorRequest) Reset() {
	*x = GetRightsInfoByEditorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRightsInfoByEditorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRightsInfoByEditorRequest) ProtoMessage() {}

func (x *GetRightsInfoByEditorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRightsInfoByEditorRequest.ProtoReflect.Descriptor instead.
func (*GetRightsInfoByEditorRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{66}
}

func (x *GetRightsInfoByEditorRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *GetRightsInfoByEditorRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetRightsInfoByEditorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditorRights []*RightsInfoByEditor `protobuf:"bytes,1,rep,name=editor_rights,json=editorRights,proto3" json:"editor_rights,omitempty"`
}

func (x *GetRightsInfoByEditorResponse) Reset() {
	*x = GetRightsInfoByEditorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRightsInfoByEditorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRightsInfoByEditorResponse) ProtoMessage() {}

func (x *GetRightsInfoByEditorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRightsInfoByEditorResponse.ProtoReflect.Descriptor instead.
func (*GetRightsInfoByEditorResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{67}
}

func (x *GetRightsInfoByEditorResponse) GetEditorRights() []*RightsInfoByEditor {
	if x != nil {
		return x.EditorRights
	}
	return nil
}

type RightsInfoByEditor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku                 string  `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Swidtag             string  `protobuf:"bytes,2,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	AggregationName     string  `protobuf:"bytes,3,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	MetricName          string  `protobuf:"bytes,4,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	AvgUnitPrice        float64 `protobuf:"fixed64,5,opt,name=avg_unit_price,json=avgUnitPrice,proto3" json:"avg_unit_price,omitempty"`
	NumLicensesAcquired int32   `protobuf:"varint,6,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
}

func (x *RightsInfoByEditor) Reset() {
	*x = RightsInfoByEditor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RightsInfoByEditor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightsInfoByEditor) ProtoMessage() {}

func (x *RightsInfoByEditor) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightsInfoByEditor.ProtoReflect.Descriptor instead.
func (*RightsInfoByEditor) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{68}
}

func (x *RightsInfoByEditor) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *RightsInfoByEditor) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *RightsInfoByEditor) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *RightsInfoByEditor) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *RightsInfoByEditor) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *RightsInfoByEditor) GetNumLicensesAcquired() int32 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

type EditorProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor      string `protobuf:"bytes,1,opt,name=editor,proto3" json:"editor,omitempty"`
	NumProducts int32  `protobuf:"varint,2,opt,name=num_products,json=numProducts,proto3" json:"num_products,omitempty"`
}

func (x *EditorProducts) Reset() {
	*x = EditorProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditorProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorProducts) ProtoMessage() {}

func (x *EditorProducts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorProducts.ProtoReflect.Descriptor instead.
func (*EditorProducts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{69}
}

func (x *EditorProducts) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *EditorProducts) GetNumProducts() int32 {
	if x != nil {
		return x.NumProducts
	}
	return 0
}

type AggregatedRightDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *AggregatedRightDetailsRequest) Reset() {
	*x = AggregatedRightDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedRightDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedRightDetailsRequest) ProtoMessage() {}

func (x *AggregatedRightDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedRightDetailsRequest.ProtoReflect.Descriptor instead.
func (*AggregatedRightDetailsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{70}
}

func (x *AggregatedRightDetailsRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AggregatedRightDetailsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type AggregatedRightDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editor          string   `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductNames    []string `protobuf:"bytes,4,rep,name=product_names,json=productNames,proto3" json:"product_names,omitempty"`
	NumApplications int32    `protobuf:"varint,5,opt,name=num_applications,json=numApplications,proto3" json:"num_applications,omitempty"`
	NumEquipments   int32    `protobuf:"varint,6,opt,name=num_equipments,json=numEquipments,proto3" json:"num_equipments,omitempty"`
	Products        []string `protobuf:"bytes,7,rep,name=products,proto3" json:"products,omitempty"`
	Versions        []string `protobuf:"bytes,8,rep,name=versions,proto3" json:"versions,omitempty"`
	DefinedMetrics  []string `protobuf:"bytes,9,rep,name=defined_metrics,json=definedMetrics,proto3" json:"defined_metrics,omitempty"`
	NotDeployed     bool     `protobuf:"varint,10,opt,name=not_deployed,json=notDeployed,proto3" json:"not_deployed,omitempty"`
}

func (x *AggregatedRightDetailsResponse) Reset() {
	*x = AggregatedRightDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedRightDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedRightDetailsResponse) ProtoMessage() {}

func (x *AggregatedRightDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedRightDetailsResponse.ProtoReflect.Descriptor instead.
func (*AggregatedRightDetailsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{71}
}

func (x *AggregatedRightDetailsResponse) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AggregatedRightDetailsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AggregatedRightDetailsResponse) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *AggregatedRightDetailsResponse) GetProductNames() []string {
	if x != nil {
		return x.ProductNames
	}
	return nil
}

func (x *AggregatedRightDetailsResponse) GetNumApplications() int32 {
	if x != nil {
		return x.NumApplications
	}
	return 0
}

func (x *AggregatedRightDetailsResponse) GetNumEquipments() int32 {
	if x != nil {
		return x.NumEquipments
	}
	return 0
}

func (x *AggregatedRightDetailsResponse) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *AggregatedRightDetailsResponse) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *AggregatedRightDetailsResponse) GetDefinedMetrics() []string {
	if x != nil {
		return x.DefinedMetrics
	}
	return nil
}

func (x *AggregatedRightDetailsResponse) GetNotDeployed() bool {
	if x != nil {
		return x.NotDeployed
	}
	return false
}

type ListProductAggregationViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32                                      `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32                                      `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       ListProductAggregationViewRequest_SortBy   `protobuf:"varint,3,opt,name=sort_by,json=sortBy,proto3,enum=optisam.products.v1.ListProductAggregationViewRequest_SortBy" json:"sort_by,omitempty"`
	SortOrder    SortOrder                                  `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams *ProductAggregationProductViewSearchParams `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes       []string                                   `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListProductAggregationViewRequest) Reset() {
	*x = ListProductAggregationViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductAggregationViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductAggregationViewRequest) ProtoMessage() {}

func (x *ListProductAggregationViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductAggregationViewRequest.ProtoReflect.Descriptor instead.
func (*ListProductAggregationViewRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{72}
}

func (x *ListProductAggregationViewRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListProductAggregationViewRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProductAggregationViewRequest) GetSortBy() ListProductAggregationViewRequest_SortBy {
	if x != nil {
		return x.SortBy
	}
	return ListProductAggregationViewRequest_aggregation_name
}

func (x *ListProductAggregationViewRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListProductAggregationViewRequest) GetSearchParams() *ProductAggregationProductViewSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListProductAggregationViewRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ProductAggregationProductViewSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag     *StringFilter `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name        *StringFilter `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editor      *StringFilter `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductName *StringFilter `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
}

func (x *ProductAggregationProductViewSearchParams) Reset() {
	*x = ProductAggregationProductViewSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregationProductViewSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregationProductViewSearchParams) ProtoMessage() {}

func (x *ProductAggregationProductViewSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregationProductViewSearchParams.ProtoReflect.Descriptor instead.
func (*ProductAggregationProductViewSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{73}
}

func (x *ProductAggregationProductViewSearchParams) GetSwidTag() *StringFilter {
	if x != nil {
		return x.SwidTag
	}
	return nil
}

func (x *ProductAggregationProductViewSearchParams) GetName() *StringFilter {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProductAggregationProductViewSearchParams) GetEditor() *StringFilter {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *ProductAggregationProductViewSearchParams) GetProductName() *StringFilter {
	if x != nil {
		return x.ProductName
	}
	return nil
}

type ListProductAggregationViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32                     `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Aggregations []*ProductAggregationView `protobuf:"bytes,2,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
}

func (x *ListProductAggregationViewResponse) Reset() {
	*x = ListProductAggregationViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductAggregationViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductAggregationViewResponse) ProtoMessage() {}

func (x *ListProductAggregationViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductAggregationViewResponse.ProtoReflect.Descriptor instead.
func (*ListProductAggregationViewResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{74}
}

func (x *ListProductAggregationViewResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListProductAggregationViewResponse) GetAggregations() []*ProductAggregationView {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

type ProductAggregationView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                      int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AggregationName         string   `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	Editor                  string   `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	NumApplications         int32    `protobuf:"varint,4,opt,name=num_applications,json=numApplications,proto3" json:"num_applications,omitempty"`
	NumEquipments           int32    `protobuf:"varint,5,opt,name=num_equipments,json=numEquipments,proto3" json:"num_equipments,omitempty"`
	TotalCost               float64  `protobuf:"fixed64,6,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	Swidtags                []string `protobuf:"bytes,7,rep,name=swidtags,proto3" json:"swidtags,omitempty"`
	IndividualProductExists bool     `protobuf:"varint,8,opt,name=individual_product_exists,json=individualProductExists,proto3" json:"individual_product_exists,omitempty"`
	UsersCount              int32    `protobuf:"varint,9,opt,name=users_count,json=usersCount,proto3" json:"users_count,omitempty"`
	EditorId                string   `protobuf:"bytes,10,opt,name=editor_id,json=editorId,proto3" json:"editor_id,omitempty"`
	Location                string   `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ProductAggregationView) Reset() {
	*x = ProductAggregationView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregationView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregationView) ProtoMessage() {}

func (x *ProductAggregationView) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregationView.ProtoReflect.Descriptor instead.
func (*ProductAggregationView) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{75}
}

func (x *ProductAggregationView) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProductAggregationView) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *ProductAggregationView) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductAggregationView) GetNumApplications() int32 {
	if x != nil {
		return x.NumApplications
	}
	return 0
}

func (x *ProductAggregationView) GetNumEquipments() int32 {
	if x != nil {
		return x.NumEquipments
	}
	return 0
}

func (x *ProductAggregationView) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *ProductAggregationView) GetSwidtags() []string {
	if x != nil {
		return x.Swidtags
	}
	return nil
}

func (x *ProductAggregationView) GetIndividualProductExists() bool {
	if x != nil {
		return x.IndividualProductExists
	}
	return false
}

func (x *ProductAggregationView) GetUsersCount() int32 {
	if x != nil {
		return x.UsersCount
	}
	return 0
}

func (x *ProductAggregationView) GetEditorId() string {
	if x != nil {
		return x.EditorId
	}
	return ""
}

func (x *ProductAggregationView) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type ProductAggRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag         string  `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Edition         string  `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`
	Editor          string  `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	Version         string  `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	NumApplications int32   `protobuf:"varint,6,opt,name=num_applications,json=numApplications,proto3" json:"num_applications,omitempty"`
	NumEquipments   int32   `protobuf:"varint,7,opt,name=num_equipments,json=numEquipments,proto3" json:"num_equipments,omitempty"`
	TotalCost       float64 `protobuf:"fixed64,8,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	AggregationName string  `protobuf:"bytes,9,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
}

func (x *ProductAggRecord) Reset() {
	*x = ProductAggRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggRecord) ProtoMessage() {}

func (x *ProductAggRecord) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggRecord.ProtoReflect.Descriptor instead.
func (*ProductAggRecord) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{76}
}

func (x *ProductAggRecord) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductAggRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAggRecord) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *ProductAggRecord) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductAggRecord) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProductAggRecord) GetNumApplications() int32 {
	if x != nil {
		return x.NumApplications
	}
	return 0
}

func (x *ProductAggRecord) GetNumEquipments() int32 {
	if x != nil {
		return x.NumEquipments
	}
	return 0
}

func (x *ProductAggRecord) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *ProductAggRecord) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

type ListDeployedAndAcquiredEditorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListDeployedAndAcquiredEditorsRequest) Reset() {
	*x = ListDeployedAndAcquiredEditorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeployedAndAcquiredEditorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeployedAndAcquiredEditorsRequest) ProtoMessage() {}

func (x *ListDeployedAndAcquiredEditorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeployedAndAcquiredEditorsRequest.ProtoReflect.Descriptor instead.
func (*ListDeployedAndAcquiredEditorsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{77}
}

func (x *ListDeployedAndAcquiredEditorsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListEditorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListEditorsRequest) Reset() {
	*x = ListEditorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEditorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEditorsRequest) ProtoMessage() {}

func (x *ListEditorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEditorsRequest.ProtoReflect.Descriptor instead.
func (*ListEditorsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{78}
}

func (x *ListEditorsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListEditorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editors []string `protobuf:"bytes,1,rep,name=editors,proto3" json:"editors,omitempty"`
}

func (x *ListEditorsResponse) Reset() {
	*x = ListEditorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEditorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEditorsResponse) ProtoMessage() {}

func (x *ListEditorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEditorsResponse.ProtoReflect.Descriptor instead.
func (*ListEditorsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{79}
}

func (x *ListEditorsResponse) GetEditors() []string {
	if x != nil {
		return x.Editors
	}
	return nil
}

type ListEditorProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor        string   `protobuf:"bytes,1,opt,name=editor,proto3" json:"editor,omitempty"`
	Scopes        []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
	ParkInventory bool     `protobuf:"varint,3,opt,name=park_inventory,json=parkInventory,proto3" json:"park_inventory,omitempty"`
}

func (x *ListEditorProductsRequest) Reset() {
	*x = ListEditorProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEditorProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEditorProductsRequest) ProtoMessage() {}

func (x *ListEditorProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEditorProductsRequest.ProtoReflect.Descriptor instead.
func (*ListEditorProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{80}
}

func (x *ListEditorProductsRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ListEditorProductsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *ListEditorProductsRequest) GetParkInventory() bool {
	if x != nil {
		return x.ParkInventory
	}
	return false
}

type ListEditorProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *ListEditorProductsResponse) Reset() {
	*x = ListEditorProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEditorProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEditorProductsResponse) ProtoMessage() {}

func (x *ListEditorProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEditorProductsResponse.ProtoReflect.Descriptor instead.
func (*ListEditorProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{81}
}

func (x *ListEditorProductsResponse) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type Editor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Editor) Reset() {
	*x = Editor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Editor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Editor) ProtoMessage() {}

func (x *Editor) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Editor.ProtoReflect.Descriptor instead.
func (*Editor) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{82}
}

func (x *Editor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag           string  `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version           string  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Category          string  `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Edition           string  `protobuf:"bytes,5,opt,name=edition,proto3" json:"edition,omitempty"`
	Editor            string  `protobuf:"bytes,6,opt,name=editor,proto3" json:"editor,omitempty"`
	TotalCost         float64 `protobuf:"fixed64,7,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	NumOfApplications int32   `protobuf:"varint,8,opt,name=numOfApplications,proto3" json:"numOfApplications,omitempty"`
	NumofEquipments   int32   `protobuf:"varint,9,opt,name=numofEquipments,proto3" json:"numofEquipments,omitempty"`
	AllocatedUser     int32   `protobuf:"varint,10,opt,name=allocatedUser,proto3" json:"allocatedUser,omitempty"`
	AllocatedMetric   string  `protobuf:"bytes,11,opt,name=allocatedMetric,proto3" json:"allocatedMetric,omitempty"`
	NumofUsers        int32   `protobuf:"varint,12,opt,name=numofUsers,proto3" json:"numofUsers,omitempty"`
	Location          string  `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty"`
	ProductSwidTag    string  `protobuf:"bytes,14,opt,name=product_swid_tag,json=productSwidTag,proto3" json:"product_swid_tag,omitempty"`
	VersionSwidTag    string  `protobuf:"bytes,15,opt,name=version_swid_tag,json=versionSwidTag,proto3" json:"version_swid_tag,omitempty"`
	EditorId          string  `protobuf:"bytes,16,opt,name=editor_id,json=editorId,proto3" json:"editor_id,omitempty"`
	ProductId         string  `protobuf:"bytes,17,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{83}
}

func (x *Product) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Product) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Product) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *Product) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *Product) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *Product) GetNumOfApplications() int32 {
	if x != nil {
		return x.NumOfApplications
	}
	return 0
}

func (x *Product) GetNumofEquipments() int32 {
	if x != nil {
		return x.NumofEquipments
	}
	return 0
}

func (x *Product) GetAllocatedUser() int32 {
	if x != nil {
		return x.AllocatedUser
	}
	return 0
}

func (x *Product) GetAllocatedMetric() string {
	if x != nil {
		return x.AllocatedMetric
	}
	return ""
}

func (x *Product) GetNumofUsers() int32 {
	if x != nil {
		return x.NumofUsers
	}
	return 0
}

func (x *Product) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Product) GetProductSwidTag() string {
	if x != nil {
		return x.ProductSwidTag
	}
	return ""
}

func (x *Product) GetVersionSwidTag() string {
	if x != nil {
		return x.VersionSwidTag
	}
	return ""
}

func (x *Product) GetEditorId() string {
	if x != nil {
		return x.EditorId
	}
	return ""
}

func (x *Product) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type ListProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32      `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Products     []*Product `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *ListProductsResponse) Reset() {
	*x = ListProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductsResponse) ProtoMessage() {}

func (x *ListProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductsResponse.ProtoReflect.Descriptor instead.
func (*ListProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{84}
}

func (x *ListProductsResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListProductsResponse) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type ListProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32                `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       string               `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder    SortOrder            `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams *ProductSearchParams `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes       []string             `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListProductsRequest) Reset() {
	*x = ListProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductsRequest) ProtoMessage() {}

func (x *ListProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductsRequest.ProtoReflect.Descriptor instead.
func (*ListProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{85}
}

func (x *ListProductsRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListProductsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProductsRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListProductsRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListProductsRequest) GetSearchParams() *ProductSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListProductsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ProductSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag       *StringFilter `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name          *StringFilter `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editor        *StringFilter `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	ApplicationId *StringFilter `protobuf:"bytes,4,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	InstanceId    *StringFilter `protobuf:"bytes,5,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	EquipmentId   *StringFilter `protobuf:"bytes,6,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	Location      *StringFilter `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ProductSearchParams) Reset() {
	*x = ProductSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSearchParams) ProtoMessage() {}

func (x *ProductSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSearchParams.ProtoReflect.Descriptor instead.
func (*ProductSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{86}
}

func (x *ProductSearchParams) GetSwidTag() *StringFilter {
	if x != nil {
		return x.SwidTag
	}
	return nil
}

func (x *ProductSearchParams) GetName() *StringFilter {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProductSearchParams) GetEditor() *StringFilter {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *ProductSearchParams) GetApplicationId() *StringFilter {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

func (x *ProductSearchParams) GetInstanceId() *StringFilter {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *ProductSearchParams) GetEquipmentId() *StringFilter {
	if x != nil {
		return x.EquipmentId
	}
	return nil
}

func (x *ProductSearchParams) GetLocation() *StringFilter {
	if x != nil {
		return x.Location
	}
	return nil
}

type ProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag string `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ProductRequest) Reset() {
	*x = ProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRequest) ProtoMessage() {}

func (x *ProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRequest.ProtoReflect.Descriptor instead.
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{87}
}

func (x *ProductRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag         string   `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	ProductName     string   `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Editor          string   `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	Version         string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	NumApplications int32    `protobuf:"varint,5,opt,name=num_applications,json=numApplications,proto3" json:"num_applications,omitempty"`
	NumEquipments   int32    `protobuf:"varint,6,opt,name=num_equipments,json=numEquipments,proto3" json:"num_equipments,omitempty"`
	DefinedMetrics  []string `protobuf:"bytes,7,rep,name=defined_metrics,json=definedMetrics,proto3" json:"defined_metrics,omitempty"`
	ProductSwidTag  string   `protobuf:"bytes,8,opt,name=product_swid_tag,json=productSwidTag,proto3" json:"product_swid_tag,omitempty"`
	VersionSwidTag  string   `protobuf:"bytes,9,opt,name=version_swid_tag,json=versionSwidTag,proto3" json:"version_swid_tag,omitempty"`
	NotDeployed     bool     `protobuf:"varint,10,opt,name=not_deployed,json=notDeployed,proto3" json:"not_deployed,omitempty"`
}

func (x *ProductResponse) Reset() {
	*x = ProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductResponse) ProtoMessage() {}

func (x *ProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductResponse.ProtoReflect.Descriptor instead.
func (*ProductResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{88}
}

func (x *ProductResponse) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductResponse) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductResponse) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProductResponse) GetNumApplications() int32 {
	if x != nil {
		return x.NumApplications
	}
	return 0
}

func (x *ProductResponse) GetNumEquipments() int32 {
	if x != nil {
		return x.NumEquipments
	}
	return 0
}

func (x *ProductResponse) GetDefinedMetrics() []string {
	if x != nil {
		return x.DefinedMetrics
	}
	return nil
}

func (x *ProductResponse) GetProductSwidTag() string {
	if x != nil {
		return x.ProductSwidTag
	}
	return ""
}

func (x *ProductResponse) GetVersionSwidTag() string {
	if x != nil {
		return x.VersionSwidTag
	}
	return ""
}

func (x *ProductResponse) GetNotDeployed() bool {
	if x != nil {
		return x.NotDeployed
	}
	return false
}

type ProductOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOfOptions int32         `protobuf:"varint,1,opt,name=numOfOptions,proto3" json:"numOfOptions,omitempty"`
	Optioninfo   []*OptionInfo `protobuf:"bytes,2,rep,name=optioninfo,proto3" json:"optioninfo,omitempty"`
}

func (x *ProductOptionsResponse) Reset() {
	*x = ProductOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductOptionsResponse) ProtoMessage() {}

func (x *ProductOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductOptionsResponse.ProtoReflect.Descriptor instead.
func (*ProductOptionsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{89}
}

func (x *ProductOptionsResponse) GetNumOfOptions() int32 {
	if x != nil {
		return x.NumOfOptions
	}
	return 0
}

func (x *ProductOptionsResponse) GetOptioninfo() []*OptionInfo {
	if x != nil {
		return x.Optioninfo
	}
	return nil
}

type OptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag string `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Edition string `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`
	Editor  string `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *OptionInfo) Reset() {
	*x = OptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionInfo) ProtoMessage() {}

func (x *OptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionInfo.ProtoReflect.Descriptor instead.
func (*OptionInfo) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{90}
}

func (x *OptionInfo) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *OptionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OptionInfo) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *OptionInfo) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *OptionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ProductExpand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag         string  `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Edition         string  `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`
	Editor          string  `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	Version         string  `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	NumApplications int32   `protobuf:"varint,6,opt,name=num_applications,json=numApplications,proto3" json:"num_applications,omitempty"`
	NumEquipments   int32   `protobuf:"varint,7,opt,name=num_equipments,json=numEquipments,proto3" json:"num_equipments,omitempty"`
	TotalCost       float64 `protobuf:"fixed64,8,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
}

func (x *ProductExpand) Reset() {
	*x = ProductExpand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductExpand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductExpand) ProtoMessage() {}

func (x *ProductExpand) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductExpand.ProtoReflect.Descriptor instead.
func (*ProductExpand) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{91}
}

func (x *ProductExpand) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductExpand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductExpand) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *ProductExpand) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductExpand) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProductExpand) GetNumApplications() int32 {
	if x != nil {
		return x.NumApplications
	}
	return 0
}

func (x *ProductExpand) GetNumEquipments() int32 {
	if x != nil {
		return x.NumEquipments
	}
	return 0
}

func (x *ProductExpand) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

type StringFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilteringOrder       int32    `protobuf:"varint,1,opt,name=filteringOrder,proto3" json:"filteringOrder,omitempty"`
	Filteringkey         string   `protobuf:"bytes,2,opt,name=filteringkey,proto3" json:"filteringkey,omitempty"`
	FilterType           bool     `protobuf:"varint,3,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`
	FilteringkeyMultiple []string `protobuf:"bytes,4,rep,name=filteringkey_multiple,json=filteringkeyMultiple,proto3" json:"filteringkey_multiple,omitempty"`
}

func (x *StringFilter) Reset() {
	*x = StringFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFilter) ProtoMessage() {}

func (x *StringFilter) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFilter.ProtoReflect.Descriptor instead.
func (*StringFilter) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{92}
}

func (x *StringFilter) GetFilteringOrder() int32 {
	if x != nil {
		return x.FilteringOrder
	}
	return 0
}

func (x *StringFilter) GetFilteringkey() string {
	if x != nil {
		return x.Filteringkey
	}
	return ""
}

func (x *StringFilter) GetFilterType() bool {
	if x != nil {
		return x.FilterType
	}
	return false
}

func (x *StringFilter) GetFilteringkeyMultiple() []string {
	if x != nil {
		return x.FilteringkeyMultiple
	}
	return nil
}

type UpsertProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag  string `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Edition  string `protobuf:"bytes,4,opt,name=edition,proto3" json:"edition,omitempty"`
	Editor   string `protobuf:"bytes,5,opt,name=editor,proto3" json:"editor,omitempty"`
	Version  string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	OptionOf string `protobuf:"bytes,7,opt,name=optionOf,proto3" json:"optionOf,omitempty"`
	// SCOPE BASED CHANGES
	Scope        string                           `protobuf:"bytes,8,opt,name=scope,proto3" json:"scope,omitempty"`
	Applications *UpsertProductRequestApplication `protobuf:"bytes,9,opt,name=applications,proto3" json:"applications,omitempty"`
	Equipments   *UpsertProductRequestEquipment   `protobuf:"bytes,10,opt,name=equipments,proto3" json:"equipments,omitempty"`
	ProductType  Producttype                      `protobuf:"varint,11,opt,name=productType,proto3,enum=optisam.products.v1.Producttype" json:"productType,omitempty"`
}

func (x *UpsertProductRequest) Reset() {
	*x = UpsertProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProductRequest) ProtoMessage() {}

func (x *UpsertProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProductRequest.ProtoReflect.Descriptor instead.
func (*UpsertProductRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{93}
}

func (x *UpsertProductRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *UpsertProductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertProductRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UpsertProductRequest) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *UpsertProductRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *UpsertProductRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpsertProductRequest) GetOptionOf() string {
	if x != nil {
		return x.OptionOf
	}
	return ""
}

func (x *UpsertProductRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpsertProductRequest) GetApplications() *UpsertProductRequestApplication {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *UpsertProductRequest) GetEquipments() *UpsertProductRequestEquipment {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *UpsertProductRequest) GetProductType() Producttype {
	if x != nil {
		return x.ProductType
	}
	return Producttype_on_premise
}

type UpsertProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpsertProductResponse) Reset() {
	*x = UpsertProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProductResponse) ProtoMessage() {}

func (x *UpsertProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProductResponse.ProtoReflect.Descriptor instead.
func (*UpsertProductResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{94}
}

func (x *UpsertProductResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ComplianceAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ComplianceAlertRequest) Reset() {
	*x = ComplianceAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceAlertRequest) ProtoMessage() {}

func (x *ComplianceAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceAlertRequest.ProtoReflect.Descriptor instead.
func (*ComplianceAlertRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{95}
}

func (x *ComplianceAlertRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ComplianceAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CounterfeitingPercentage float64 `protobuf:"fixed64,1,opt,name=counterfeiting_percentage,json=counterfeitingPercentage,proto3" json:"counterfeiting_percentage,omitempty"`
	OverdeploymentPercentage float64 `protobuf:"fixed64,2,opt,name=overdeployment_percentage,json=overdeploymentPercentage,proto3" json:"overdeployment_percentage,omitempty"`
}

func (x *ComplianceAlertResponse) Reset() {
	*x = ComplianceAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceAlertResponse) ProtoMessage() {}

func (x *ComplianceAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceAlertResponse.ProtoReflect.Descriptor instead.
func (*ComplianceAlertResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{96}
}

func (x *ComplianceAlertResponse) GetCounterfeitingPercentage() float64 {
	if x != nil {
		return x.CounterfeitingPercentage
	}
	return 0
}

func (x *ComplianceAlertResponse) GetOverdeploymentPercentage() float64 {
	if x != nil {
		return x.OverdeploymentPercentage
	}
	return 0
}

type OverdeployedProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Editor string `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
}

func (x *OverdeployedProductsRequest) Reset() {
	*x = OverdeployedProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverdeployedProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverdeployedProductsRequest) ProtoMessage() {}

func (x *OverdeployedProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverdeployedProductsRequest.ProtoReflect.Descriptor instead.
func (*OverdeployedProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{97}
}

func (x *OverdeployedProductsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *OverdeployedProductsRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

type OverdeployedProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductsLicenses []*ProductsLicenses `protobuf:"bytes,1,rep,name=products_licenses,json=productsLicenses,proto3" json:"products_licenses,omitempty"`
	ProductsCosts    []*ProductsCosts    `protobuf:"bytes,2,rep,name=products_costs,json=productsCosts,proto3" json:"products_costs,omitempty"`
}

func (x *OverdeployedProductsResponse) Reset() {
	*x = OverdeployedProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverdeployedProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverdeployedProductsResponse) ProtoMessage() {}

func (x *OverdeployedProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverdeployedProductsResponse.ProtoReflect.Descriptor instead.
func (*OverdeployedProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{98}
}

func (x *OverdeployedProductsResponse) GetProductsLicenses() []*ProductsLicenses {
	if x != nil {
		return x.ProductsLicenses
	}
	return nil
}

func (x *OverdeployedProductsResponse) GetProductsCosts() []*ProductsCosts {
	if x != nil {
		return x.ProductsCosts
	}
	return nil
}

type SoftwareExpenditureByScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope []string `protobuf:"bytes,1,rep,name=scope,proto3" json:"scope,omitempty"`
}

func (x *SoftwareExpenditureByScopeRequest) Reset() {
	*x = SoftwareExpenditureByScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareExpenditureByScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareExpenditureByScopeRequest) ProtoMessage() {}

func (x *SoftwareExpenditureByScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareExpenditureByScopeRequest.ProtoReflect.Descriptor instead.
func (*SoftwareExpenditureByScopeRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{99}
}

func (x *SoftwareExpenditureByScopeRequest) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

type SoftwareExpenditureByScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpensePercent   []*SoftwareExpensePercent `protobuf:"bytes,1,rep,name=expense_percent,json=expensePercent,proto3" json:"expense_percent,omitempty"`
	TotalExpenditure float64                   `protobuf:"fixed64,2,opt,name=total_expenditure,json=totalExpenditure,proto3" json:"total_expenditure,omitempty"`
	TotalCost        float64                   `protobuf:"fixed64,3,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
}

func (x *SoftwareExpenditureByScopeResponse) Reset() {
	*x = SoftwareExpenditureByScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareExpenditureByScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareExpenditureByScopeResponse) ProtoMessage() {}

func (x *SoftwareExpenditureByScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareExpenditureByScopeResponse.ProtoReflect.Descriptor instead.
func (*SoftwareExpenditureByScopeResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{100}
}

func (x *SoftwareExpenditureByScopeResponse) GetExpensePercent() []*SoftwareExpensePercent {
	if x != nil {
		return x.ExpensePercent
	}
	return nil
}

func (x *SoftwareExpenditureByScopeResponse) GetTotalExpenditure() float64 {
	if x != nil {
		return x.TotalExpenditure
	}
	return 0
}

func (x *SoftwareExpenditureByScopeResponse) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

type DashboardQualityProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DashboardQualityProductsRequest) Reset() {
	*x = DashboardQualityProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardQualityProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardQualityProductsRequest) ProtoMessage() {}

func (x *DashboardQualityProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardQualityProductsRequest.ProtoReflect.Descriptor instead.
func (*DashboardQualityProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{101}
}

func (x *DashboardQualityProductsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DashboardQualityProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductsNotDeployed []*DashboardQualityProducts `protobuf:"bytes,1,rep,name=products_not_deployed,json=productsNotDeployed,proto3" json:"products_not_deployed,omitempty"`
	ProductsNotAcquired []*DashboardQualityProducts `protobuf:"bytes,2,rep,name=products_not_acquired,json=productsNotAcquired,proto3" json:"products_not_acquired,omitempty"`
}

func (x *DashboardQualityProductsResponse) Reset() {
	*x = DashboardQualityProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardQualityProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardQualityProductsResponse) ProtoMessage() {}

func (x *DashboardQualityProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardQualityProductsResponse.ProtoReflect.Descriptor instead.
func (*DashboardQualityProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{102}
}

func (x *DashboardQualityProductsResponse) GetProductsNotDeployed() []*DashboardQualityProducts {
	if x != nil {
		return x.ProductsNotDeployed
	}
	return nil
}

func (x *DashboardQualityProductsResponse) GetProductsNotAcquired() []*DashboardQualityProducts {
	if x != nil {
		return x.ProductsNotAcquired
	}
	return nil
}

type DashboardQualityProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag     string `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	ProductName string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Editor      string `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	Version     string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	EditorId    string `protobuf:"bytes,5,opt,name=editor_id,json=editorId,proto3" json:"editor_id,omitempty"`
}

func (x *DashboardQualityProducts) Reset() {
	*x = DashboardQualityProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardQualityProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardQualityProducts) ProtoMessage() {}

func (x *DashboardQualityProducts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardQualityProducts.ProtoReflect.Descriptor instead.
func (*DashboardQualityProducts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{103}
}

func (x *DashboardQualityProducts) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *DashboardQualityProducts) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *DashboardQualityProducts) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *DashboardQualityProducts) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DashboardQualityProducts) GetEditorId() string {
	if x != nil {
		return x.EditorId
	}
	return ""
}

type ProductsLicenses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag             string `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	ProductName         string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	AggregationName     string `protobuf:"bytes,3,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	NumLicensesAcquired int64  `protobuf:"varint,4,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
	NumLicensesComputed int64  `protobuf:"varint,5,opt,name=num_licenses_computed,json=numLicensesComputed,proto3" json:"num_licenses_computed,omitempty"`
	Delta               int64  `protobuf:"varint,6,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *ProductsLicenses) Reset() {
	*x = ProductsLicenses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsLicenses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsLicenses) ProtoMessage() {}

func (x *ProductsLicenses) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsLicenses.ProtoReflect.Descriptor instead.
func (*ProductsLicenses) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{104}
}

func (x *ProductsLicenses) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductsLicenses) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductsLicenses) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *ProductsLicenses) GetNumLicensesAcquired() int64 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

func (x *ProductsLicenses) GetNumLicensesComputed() int64 {
	if x != nil {
		return x.NumLicensesComputed
	}
	return 0
}

func (x *ProductsLicenses) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type ProductsCosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag              string  `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	ProductName          string  `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	AggregationName      string  `protobuf:"bytes,3,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	LicensesAcquiredCost float64 `protobuf:"fixed64,4,opt,name=licenses_acquired_cost,json=licensesAcquiredCost,proto3" json:"licenses_acquired_cost,omitempty"`
	LicensesComputedCost float64 `protobuf:"fixed64,5,opt,name=licenses_computed_cost,json=licensesComputedCost,proto3" json:"licenses_computed_cost,omitempty"`
	DeltaCost            float64 `protobuf:"fixed64,6,opt,name=delta_cost,json=deltaCost,proto3" json:"delta_cost,omitempty"`
}

func (x *ProductsCosts) Reset() {
	*x = ProductsCosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsCosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsCosts) ProtoMessage() {}

func (x *ProductsCosts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsCosts.ProtoReflect.Descriptor instead.
func (*ProductsCosts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{105}
}

func (x *ProductsCosts) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductsCosts) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductsCosts) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *ProductsCosts) GetLicensesAcquiredCost() float64 {
	if x != nil {
		return x.LicensesAcquiredCost
	}
	return 0
}

func (x *ProductsCosts) GetLicensesComputedCost() float64 {
	if x != nil {
		return x.LicensesComputedCost
	}
	return 0
}

func (x *ProductsCosts) GetDeltaCost() float64 {
	if x != nil {
		return x.DeltaCost
	}
	return 0
}

type SoftwareExpensePercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope              string  `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Expenditure        float64 `protobuf:"fixed64,2,opt,name=expenditure,proto3" json:"expenditure,omitempty"`
	TotalCost          float64 `protobuf:"fixed64,3,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	ExpenditurePercent float64 `protobuf:"fixed64,4,opt,name=expenditure_percent,json=expenditurePercent,proto3" json:"expenditure_percent,omitempty"`
}

func (x *SoftwareExpensePercent) Reset() {
	*x = SoftwareExpensePercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareExpensePercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareExpensePercent) ProtoMessage() {}

func (x *SoftwareExpensePercent) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareExpensePercent.ProtoReflect.Descriptor instead.
func (*SoftwareExpensePercent) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{106}
}

func (x *SoftwareExpensePercent) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *SoftwareExpensePercent) GetExpenditure() float64 {
	if x != nil {
		return x.Expenditure
	}
	return 0
}

func (x *SoftwareExpensePercent) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *SoftwareExpensePercent) GetExpenditurePercent() float64 {
	if x != nil {
		return x.ExpenditurePercent
	}
	return 0
}

type ProductsPerMetricTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ProductsPerMetricTypeRequest) Reset() {
	*x = ProductsPerMetricTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsPerMetricTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsPerMetricTypeRequest) ProtoMessage() {}

func (x *ProductsPerMetricTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsPerMetricTypeRequest.ProtoReflect.Descriptor instead.
func (*ProductsPerMetricTypeRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{107}
}

func (x *ProductsPerMetricTypeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type CounterfeitedProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Editor string `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
}

func (x *CounterfeitedProductsRequest) Reset() {
	*x = CounterfeitedProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterfeitedProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterfeitedProductsRequest) ProtoMessage() {}

func (x *CounterfeitedProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterfeitedProductsRequest.ProtoReflect.Descriptor instead.
func (*CounterfeitedProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{108}
}

func (x *CounterfeitedProductsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *CounterfeitedProductsRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

type CounterfeitedProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductsLicenses []*ProductsLicenses `protobuf:"bytes,1,rep,name=products_licenses,json=productsLicenses,proto3" json:"products_licenses,omitempty"`
	ProductsCosts    []*ProductsCosts    `protobuf:"bytes,2,rep,name=products_costs,json=productsCosts,proto3" json:"products_costs,omitempty"`
}

func (x *CounterfeitedProductsResponse) Reset() {
	*x = CounterfeitedProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterfeitedProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterfeitedProductsResponse) ProtoMessage() {}

func (x *CounterfeitedProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterfeitedProductsResponse.ProtoReflect.Descriptor instead.
func (*CounterfeitedProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{109}
}

func (x *CounterfeitedProductsResponse) GetProductsLicenses() []*ProductsLicenses {
	if x != nil {
		return x.ProductsLicenses
	}
	return nil
}

func (x *CounterfeitedProductsResponse) GetProductsCosts() []*ProductsCosts {
	if x != nil {
		return x.ProductsCosts
	}
	return nil
}

type ProductsPerMetricTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsProducts []*MetricProducts `protobuf:"bytes,1,rep,name=metrics_products,json=metricsProducts,proto3" json:"metrics_products,omitempty"`
}

func (x *ProductsPerMetricTypeResponse) Reset() {
	*x = ProductsPerMetricTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsPerMetricTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsPerMetricTypeResponse) ProtoMessage() {}

func (x *ProductsPerMetricTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsPerMetricTypeResponse.ProtoReflect.Descriptor instead.
func (*ProductsPerMetricTypeResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{110}
}

func (x *ProductsPerMetricTypeResponse) GetMetricsProducts() []*MetricProducts {
	if x != nil {
		return x.MetricsProducts
	}
	return nil
}

type MetricProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName  string `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	NumProducts int32  `protobuf:"varint,2,opt,name=num_products,json=numProducts,proto3" json:"num_products,omitempty"`
}

func (x *MetricProducts) Reset() {
	*x = MetricProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricProducts) ProtoMessage() {}

func (x *MetricProducts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricProducts.ProtoReflect.Descriptor instead.
func (*MetricProducts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{111}
}

func (x *MetricProducts) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *MetricProducts) GetNumProducts() int32 {
	if x != nil {
		return x.NumProducts
	}
	return 0
}

type DashboardOverviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DashboardOverviewRequest) Reset() {
	*x = DashboardOverviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardOverviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardOverviewRequest) ProtoMessage() {}

func (x *DashboardOverviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardOverviewRequest.ProtoReflect.Descriptor instead.
func (*DashboardOverviewRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{112}
}

func (x *DashboardOverviewRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DashboardOverviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalLicenseCost          float64 `protobuf:"fixed64,1,opt,name=total_license_cost,json=totalLicenseCost,proto3" json:"total_license_cost,omitempty"`
	TotalMaintenanceCost      float64 `protobuf:"fixed64,2,opt,name=total_maintenance_cost,json=totalMaintenanceCost,proto3" json:"total_maintenance_cost,omitempty"`
	NumEditors                int32   `protobuf:"varint,3,opt,name=num_editors,json=numEditors,proto3" json:"num_editors,omitempty"`
	NumProducts               int32   `protobuf:"varint,4,opt,name=num_products,json=numProducts,proto3" json:"num_products,omitempty"`
	TotalCounterfeitingAmount float64 `protobuf:"fixed64,5,opt,name=total_counterfeiting_amount,json=totalCounterfeitingAmount,proto3" json:"total_counterfeiting_amount,omitempty"`
	TotalUnderusageAmount     float64 `protobuf:"fixed64,6,opt,name=total_underusage_amount,json=totalUnderusageAmount,proto3" json:"total_underusage_amount,omitempty"`
}

func (x *DashboardOverviewResponse) Reset() {
	*x = DashboardOverviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardOverviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardOverviewResponse) ProtoMessage() {}

func (x *DashboardOverviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardOverviewResponse.ProtoReflect.Descriptor instead.
func (*DashboardOverviewResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{113}
}

func (x *DashboardOverviewResponse) GetTotalLicenseCost() float64 {
	if x != nil {
		return x.TotalLicenseCost
	}
	return 0
}

func (x *DashboardOverviewResponse) GetTotalMaintenanceCost() float64 {
	if x != nil {
		return x.TotalMaintenanceCost
	}
	return 0
}

func (x *DashboardOverviewResponse) GetNumEditors() int32 {
	if x != nil {
		return x.NumEditors
	}
	return 0
}

func (x *DashboardOverviewResponse) GetNumProducts() int32 {
	if x != nil {
		return x.NumProducts
	}
	return 0
}

func (x *DashboardOverviewResponse) GetTotalCounterfeitingAmount() float64 {
	if x != nil {
		return x.TotalCounterfeitingAmount
	}
	return 0
}

func (x *DashboardOverviewResponse) GetTotalUnderusageAmount() float64 {
	if x != nil {
		return x.TotalUnderusageAmount
	}
	return 0
}

type UpsertAcqRightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku                       string  `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Swidtag                   string  `protobuf:"bytes,2,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	ProductName               string  `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductEditor             string  `protobuf:"bytes,4,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	MetricType                string  `protobuf:"bytes,5,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	NumLicensesAcquired       int32   `protobuf:"varint,6,opt,name=num_licenses_acquired,json=numLicensesAcquired,proto3" json:"num_licenses_acquired,omitempty"`
	AvgUnitPrice              float64 `protobuf:"fixed64,7,opt,name=avg_unit_price,json=avgUnitPrice,proto3" json:"avg_unit_price,omitempty"`
	AvgMaintenanceUnitPrice   float64 `protobuf:"fixed64,8,opt,name=avg_maintenance_unit_price,json=avgMaintenanceUnitPrice,proto3" json:"avg_maintenance_unit_price,omitempty"`
	TotalPurchaseCost         float64 `protobuf:"fixed64,9,opt,name=total_purchase_cost,json=totalPurchaseCost,proto3" json:"total_purchase_cost,omitempty"`
	TotalMaintenanceCost      float64 `protobuf:"fixed64,10,opt,name=total_maintenance_cost,json=totalMaintenanceCost,proto3" json:"total_maintenance_cost,omitempty"`
	TotalCost                 float64 `protobuf:"fixed64,11,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	Scope                     string  `protobuf:"bytes,12,opt,name=scope,proto3" json:"scope,omitempty"`
	StartOfMaintenance        string  `protobuf:"bytes,13,opt,name=start_of_maintenance,json=startOfMaintenance,proto3" json:"start_of_maintenance,omitempty"`
	EndOfMaintenance          string  `protobuf:"bytes,14,opt,name=end_of_maintenance,json=endOfMaintenance,proto3" json:"end_of_maintenance,omitempty"`
	NumLicencesMaintainance   int32   `protobuf:"varint,15,opt,name=num_licences_maintainance,json=numLicencesMaintainance,proto3" json:"num_licences_maintainance,omitempty"`
	Version                   string  `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
	CorporateSourcingContract string  `protobuf:"bytes,17,opt,name=corporate_sourcing_contract,json=corporateSourcingContract,proto3" json:"corporate_sourcing_contract,omitempty"`
	OrderingDate              string  `protobuf:"bytes,18,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	SoftwareProvider          string  `protobuf:"bytes,19,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
	MaintenanceProvider       string  `protobuf:"bytes,20,opt,name=maintenance_provider,json=maintenanceProvider,proto3" json:"maintenance_provider,omitempty"`
	LastPurchasedOrder        string  `protobuf:"bytes,21,opt,name=last_purchased_order,json=lastPurchasedOrder,proto3" json:"last_purchased_order,omitempty"`
	SupportNumber             string  `protobuf:"bytes,22,opt,name=support_number,json=supportNumber,proto3" json:"support_number,omitempty"`
	Repartition               bool    `protobuf:"varint,23,opt,name=repartition,proto3" json:"repartition,omitempty"`
	Comment                   string  `protobuf:"bytes,24,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *UpsertAcqRightsRequest) Reset() {
	*x = UpsertAcqRightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAcqRightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAcqRightsRequest) ProtoMessage() {}

func (x *UpsertAcqRightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAcqRightsRequest.ProtoReflect.Descriptor instead.
func (*UpsertAcqRightsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{114}
}

func (x *UpsertAcqRightsRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetNumLicensesAcquired() int32 {
	if x != nil {
		return x.NumLicensesAcquired
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetAvgMaintenanceUnitPrice() float64 {
	if x != nil {
		return x.AvgMaintenanceUnitPrice
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetTotalPurchaseCost() float64 {
	if x != nil {
		return x.TotalPurchaseCost
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetTotalMaintenanceCost() float64 {
	if x != nil {
		return x.TotalMaintenanceCost
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetStartOfMaintenance() string {
	if x != nil {
		return x.StartOfMaintenance
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetEndOfMaintenance() string {
	if x != nil {
		return x.EndOfMaintenance
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetNumLicencesMaintainance() int32 {
	if x != nil {
		return x.NumLicencesMaintainance
	}
	return 0
}

func (x *UpsertAcqRightsRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetCorporateSourcingContract() string {
	if x != nil {
		return x.CorporateSourcingContract
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetOrderingDate() string {
	if x != nil {
		return x.OrderingDate
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetSoftwareProvider() string {
	if x != nil {
		return x.SoftwareProvider
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetMaintenanceProvider() string {
	if x != nil {
		return x.MaintenanceProvider
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetLastPurchasedOrder() string {
	if x != nil {
		return x.LastPurchasedOrder
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetSupportNumber() string {
	if x != nil {
		return x.SupportNumber
	}
	return ""
}

func (x *UpsertAcqRightsRequest) GetRepartition() bool {
	if x != nil {
		return x.Repartition
	}
	return false
}

func (x *UpsertAcqRightsRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type UpsertAcqRightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpsertAcqRightsResponse) Reset() {
	*x = UpsertAcqRightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAcqRightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAcqRightsResponse) ProtoMessage() {}

func (x *UpsertAcqRightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAcqRightsResponse.ProtoReflect.Descriptor instead.
func (*UpsertAcqRightsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{115}
}

func (x *UpsertAcqRightsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListAcqRightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32                       `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32                       `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       ListAcqRightsRequest_SortBy `protobuf:"varint,3,opt,name=sort_by,json=sortBy,proto3,enum=optisam.products.v1.ListAcqRightsRequest_SortBy" json:"sort_by,omitempty"`
	SortOrder    SortOrder                   `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"` //[(validate.rules).enum.defined_only = true];
	SearchParams *AcqRightsSearchParams      `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes       []string                    `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListAcqRightsRequest) Reset() {
	*x = ListAcqRightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsRequest) ProtoMessage() {}

func (x *ListAcqRightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsRequest.ProtoReflect.Descriptor instead.
func (*ListAcqRightsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{116}
}

func (x *ListAcqRightsRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListAcqRightsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAcqRightsRequest) GetSortBy() ListAcqRightsRequest_SortBy {
	if x != nil {
		return x.SortBy
	}
	return ListAcqRightsRequest_SKU
}

func (x *ListAcqRightsRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListAcqRightsRequest) GetSearchParams() *AcqRightsSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListAcqRightsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type AcqRightsSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag          *StringFilter `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	SKU              *StringFilter `protobuf:"bytes,2,opt,name=SKU,proto3" json:"SKU,omitempty"`
	Editor           *StringFilter `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductName      *StringFilter `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	Metric           *StringFilter `protobuf:"bytes,5,opt,name=metric,proto3" json:"metric,omitempty"`
	SoftwareProvider *StringFilter `protobuf:"bytes,6,opt,name=softwareProvider,proto3" json:"softwareProvider,omitempty"`
	OrderingDate     *StringFilter `protobuf:"bytes,7,opt,name=orderingDate,proto3" json:"orderingDate,omitempty"` //
}

func (x *AcqRightsSearchParams) Reset() {
	*x = AcqRightsSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcqRightsSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcqRightsSearchParams) ProtoMessage() {}

func (x *AcqRightsSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcqRightsSearchParams.ProtoReflect.Descriptor instead.
func (*AcqRightsSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{117}
}

func (x *AcqRightsSearchParams) GetSwidTag() *StringFilter {
	if x != nil {
		return x.SwidTag
	}
	return nil
}

func (x *AcqRightsSearchParams) GetSKU() *StringFilter {
	if x != nil {
		return x.SKU
	}
	return nil
}

func (x *AcqRightsSearchParams) GetEditor() *StringFilter {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *AcqRightsSearchParams) GetProductName() *StringFilter {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *AcqRightsSearchParams) GetMetric() *StringFilter {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *AcqRightsSearchParams) GetSoftwareProvider() *StringFilter {
	if x != nil {
		return x.SoftwareProvider
	}
	return nil
}

func (x *AcqRightsSearchParams) GetOrderingDate() *StringFilter {
	if x != nil {
		return x.OrderingDate
	}
	return nil
}

type ListAcqRightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords   int32        `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	AcquiredRights []*AcqRights `protobuf:"bytes,2,rep,name=acquired_rights,json=acquiredRights,proto3" json:"acquired_rights,omitempty"`
}

func (x *ListAcqRightsResponse) Reset() {
	*x = ListAcqRightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsResponse) ProtoMessage() {}

func (x *ListAcqRightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsResponse.ProtoReflect.Descriptor instead.
func (*ListAcqRightsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{118}
}

func (x *ListAcqRightsResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListAcqRightsResponse) GetAcquiredRights() []*AcqRights {
	if x != nil {
		return x.AcquiredRights
	}
	return nil
}

type AcqRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SKU                            string               `protobuf:"bytes,1,opt,name=SKU,proto3" json:"SKU,omitempty"`
	SwidTag                        string               `protobuf:"bytes,2,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	ProductName                    string               `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Editor                         string               `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	Metric                         string               `protobuf:"bytes,5,opt,name=metric,proto3" json:"metric,omitempty"`
	AcquiredLicensesNumber         int32                `protobuf:"varint,6,opt,name=acquired_licenses_number,json=acquiredLicensesNumber,proto3" json:"acquired_licenses_number,omitempty"`
	AvgLicenesUnitPrice            float64              `protobuf:"fixed64,7,opt,name=avg_licenes_unit_price,json=avgLicenesUnitPrice,proto3" json:"avg_licenes_unit_price,omitempty"`
	AvgMaintenanceUnitPrice        float64              `protobuf:"fixed64,8,opt,name=avg_maintenance_unit_price,json=avgMaintenanceUnitPrice,proto3" json:"avg_maintenance_unit_price,omitempty"`
	TotalPurchaseCost              float64              `protobuf:"fixed64,9,opt,name=total_purchase_cost,json=totalPurchaseCost,proto3" json:"total_purchase_cost,omitempty"`
	TotalMaintenanceCost           float64              `protobuf:"fixed64,10,opt,name=total_maintenance_cost,json=totalMaintenanceCost,proto3" json:"total_maintenance_cost,omitempty"`
	TotalCost                      float64              `protobuf:"fixed64,11,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	StartOfMaintenance             *timestamp.Timestamp `protobuf:"bytes,12,opt,name=start_of_maintenance,json=startOfMaintenance,proto3" json:"start_of_maintenance,omitempty"`
	EndOfMaintenance               *timestamp.Timestamp `protobuf:"bytes,13,opt,name=end_of_maintenance,json=endOfMaintenance,proto3" json:"end_of_maintenance,omitempty"`
	LicensesUnderMaintenance       string               `protobuf:"bytes,14,opt,name=licenses_under_maintenance,json=licensesUnderMaintenance,proto3" json:"licenses_under_maintenance,omitempty"`
	LicensesUnderMaintenanceNumber int32                `protobuf:"varint,15,opt,name=licenses_under_maintenance_number,json=licensesUnderMaintenanceNumber,proto3" json:"licenses_under_maintenance_number,omitempty"`
	Version                        string               `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
	Comment                        string               `protobuf:"bytes,17,opt,name=comment,proto3" json:"comment,omitempty"`
	OrderingDate                   *timestamp.Timestamp `protobuf:"bytes,18,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	CorporateSourcingContract      string               `protobuf:"bytes,19,opt,name=corporate_sourcing_contract,json=corporateSourcingContract,proto3" json:"corporate_sourcing_contract,omitempty"`
	SoftwareProvider               string               `protobuf:"bytes,20,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
	LastPurchasedOrder             string               `protobuf:"bytes,21,opt,name=last_purchased_order,json=lastPurchasedOrder,proto3" json:"last_purchased_order,omitempty"`
	SupportNumber                  string               `protobuf:"bytes,22,opt,name=support_number,json=supportNumber,proto3" json:"support_number,omitempty"`
	MaintenanceProvider            string               `protobuf:"bytes,23,opt,name=maintenance_provider,json=maintenanceProvider,proto3" json:"maintenance_provider,omitempty"`
	FileName                       string               `protobuf:"bytes,24,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Repartition                    bool                 `protobuf:"varint,25,opt,name=repartition,proto3" json:"repartition,omitempty"`
	SharedLicenses                 int32                `protobuf:"varint,26,opt,name=shared_licenses,json=sharedLicenses,proto3" json:"shared_licenses,omitempty"`
	RecievedLicenses               int32                `protobuf:"varint,27,opt,name=recieved_licenses,json=recievedLicenses,proto3" json:"recieved_licenses,omitempty"`
	AvailableLicenses              int32                `protobuf:"varint,28,opt,name=available_licenses,json=availableLicenses,proto3" json:"available_licenses,omitempty"`
	SharedData                     []*SharedData        `protobuf:"bytes,29,rep,name=shared_data,json=sharedData,proto3" json:"shared_data,omitempty"`
	ProductSwidTag                 string               `protobuf:"bytes,30,opt,name=product_swid_tag,json=productSwidTag,proto3" json:"product_swid_tag,omitempty"`
	VersionSwidTag                 string               `protobuf:"bytes,31,opt,name=version_swid_tag,json=versionSwidTag,proto3" json:"version_swid_tag,omitempty"`
	EditorId                       string               `protobuf:"bytes,32,opt,name=editor_id,json=editorId,proto3" json:"editor_id,omitempty"`
	ProductId                      string               `protobuf:"bytes,33,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *AcqRights) Reset() {
	*x = AcqRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcqRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcqRights) ProtoMessage() {}

func (x *AcqRights) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcqRights.ProtoReflect.Descriptor instead.
func (*AcqRights) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{119}
}

func (x *AcqRights) GetSKU() string {
	if x != nil {
		return x.SKU
	}
	return ""
}

func (x *AcqRights) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *AcqRights) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *AcqRights) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *AcqRights) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *AcqRights) GetAcquiredLicensesNumber() int32 {
	if x != nil {
		return x.AcquiredLicensesNumber
	}
	return 0
}

func (x *AcqRights) GetAvgLicenesUnitPrice() float64 {
	if x != nil {
		return x.AvgLicenesUnitPrice
	}
	return 0
}

func (x *AcqRights) GetAvgMaintenanceUnitPrice() float64 {
	if x != nil {
		return x.AvgMaintenanceUnitPrice
	}
	return 0
}

func (x *AcqRights) GetTotalPurchaseCost() float64 {
	if x != nil {
		return x.TotalPurchaseCost
	}
	return 0
}

func (x *AcqRights) GetTotalMaintenanceCost() float64 {
	if x != nil {
		return x.TotalMaintenanceCost
	}
	return 0
}

func (x *AcqRights) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *AcqRights) GetStartOfMaintenance() *timestamp.Timestamp {
	if x != nil {
		return x.StartOfMaintenance
	}
	return nil
}

func (x *AcqRights) GetEndOfMaintenance() *timestamp.Timestamp {
	if x != nil {
		return x.EndOfMaintenance
	}
	return nil
}

func (x *AcqRights) GetLicensesUnderMaintenance() string {
	if x != nil {
		return x.LicensesUnderMaintenance
	}
	return ""
}

func (x *AcqRights) GetLicensesUnderMaintenanceNumber() int32 {
	if x != nil {
		return x.LicensesUnderMaintenanceNumber
	}
	return 0
}

func (x *AcqRights) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AcqRights) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AcqRights) GetOrderingDate() *timestamp.Timestamp {
	if x != nil {
		return x.OrderingDate
	}
	return nil
}

func (x *AcqRights) GetCorporateSourcingContract() string {
	if x != nil {
		return x.CorporateSourcingContract
	}
	return ""
}

func (x *AcqRights) GetSoftwareProvider() string {
	if x != nil {
		return x.SoftwareProvider
	}
	return ""
}

func (x *AcqRights) GetLastPurchasedOrder() string {
	if x != nil {
		return x.LastPurchasedOrder
	}
	return ""
}

func (x *AcqRights) GetSupportNumber() string {
	if x != nil {
		return x.SupportNumber
	}
	return ""
}

func (x *AcqRights) GetMaintenanceProvider() string {
	if x != nil {
		return x.MaintenanceProvider
	}
	return ""
}

func (x *AcqRights) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AcqRights) GetRepartition() bool {
	if x != nil {
		return x.Repartition
	}
	return false
}

func (x *AcqRights) GetSharedLicenses() int32 {
	if x != nil {
		return x.SharedLicenses
	}
	return 0
}

func (x *AcqRights) GetRecievedLicenses() int32 {
	if x != nil {
		return x.RecievedLicenses
	}
	return 0
}

func (x *AcqRights) GetAvailableLicenses() int32 {
	if x != nil {
		return x.AvailableLicenses
	}
	return 0
}

func (x *AcqRights) GetSharedData() []*SharedData {
	if x != nil {
		return x.SharedData
	}
	return nil
}

func (x *AcqRights) GetProductSwidTag() string {
	if x != nil {
		return x.ProductSwidTag
	}
	return ""
}

func (x *AcqRights) GetVersionSwidTag() string {
	if x != nil {
		return x.VersionSwidTag
	}
	return ""
}

func (x *AcqRights) GetEditorId() string {
	if x != nil {
		return x.EditorId
	}
	return ""
}

func (x *AcqRights) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type SharedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	SharedLicenses   int32  `protobuf:"varint,2,opt,name=shared_licenses,json=sharedLicenses,proto3" json:"shared_licenses,omitempty"`
	RecievedLicenses int32  `protobuf:"varint,3,opt,name=recieved_licenses,json=recievedLicenses,proto3" json:"recieved_licenses,omitempty"`
}

func (x *SharedData) Reset() {
	*x = SharedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedData) ProtoMessage() {}

func (x *SharedData) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedData.ProtoReflect.Descriptor instead.
func (*SharedData) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{120}
}

func (x *SharedData) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *SharedData) GetSharedLicenses() int32 {
	if x != nil {
		return x.SharedLicenses
	}
	return 0
}

func (x *SharedData) GetRecievedLicenses() int32 {
	if x != nil {
		return x.RecievedLicenses
	}
	return 0
}

type ListAggregatedAcqRightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32                                 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32                                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       ListAggregatedAcqRightsRequest_SortBy `protobuf:"varint,3,opt,name=sort_by,json=sortBy,proto3,enum=optisam.products.v1.ListAggregatedAcqRightsRequest_SortBy" json:"sort_by,omitempty"`
	SortOrder    SortOrder                             `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams *ListAcqRightsAggregationSearchParams `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scope        string                                `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListAggregatedAcqRightsRequest) Reset() {
	*x = ListAggregatedAcqRightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregatedAcqRightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregatedAcqRightsRequest) ProtoMessage() {}

func (x *ListAggregatedAcqRightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregatedAcqRightsRequest.ProtoReflect.Descriptor instead.
func (*ListAggregatedAcqRightsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{121}
}

func (x *ListAggregatedAcqRightsRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListAggregatedAcqRightsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAggregatedAcqRightsRequest) GetSortBy() ListAggregatedAcqRightsRequest_SortBy {
	if x != nil {
		return x.SortBy
	}
	return ListAggregatedAcqRightsRequest_SKU
}

func (x *ListAggregatedAcqRightsRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListAggregatedAcqRightsRequest) GetSearchParams() *ListAcqRightsAggregationSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListAggregatedAcqRightsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListAggregatedAcqRightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32                   `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Aggregations []*AggregatedRightsView `protobuf:"bytes,2,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
}

func (x *ListAggregatedAcqRightsResponse) Reset() {
	*x = ListAggregatedAcqRightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregatedAcqRightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregatedAcqRightsResponse) ProtoMessage() {}

func (x *ListAggregatedAcqRightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregatedAcqRightsResponse.ProtoReflect.Descriptor instead.
func (*ListAggregatedAcqRightsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{122}
}

func (x *ListAggregatedAcqRightsResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListAggregatedAcqRightsResponse) GetAggregations() []*AggregatedRightsView {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

type AcqRightsAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Scope     string   `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	Editor    string   `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	Swidtags  []string `protobuf:"bytes,5,rep,name=swidtags,proto3" json:"swidtags,omitempty"`
	Skus      []string `protobuf:"bytes,6,rep,name=skus,proto3" json:"skus,omitempty"`
	Metric    string   `protobuf:"bytes,7,opt,name=metric,proto3" json:"metric,omitempty"`
	TotalCost float64  `protobuf:"fixed64,8,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
}

func (x *AcqRightsAggregation) Reset() {
	*x = AcqRightsAggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcqRightsAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcqRightsAggregation) ProtoMessage() {}

func (x *AcqRightsAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcqRightsAggregation.ProtoReflect.Descriptor instead.
func (*AcqRightsAggregation) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{123}
}

func (x *AcqRightsAggregation) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AcqRightsAggregation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AcqRightsAggregation) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AcqRightsAggregation) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *AcqRightsAggregation) GetSwidtags() []string {
	if x != nil {
		return x.Swidtags
	}
	return nil
}

func (x *AcqRightsAggregation) GetSkus() []string {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *AcqRightsAggregation) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *AcqRightsAggregation) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

type ListAcqRightsAggregationSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *StringFilter `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Editor           *StringFilter `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
	SKU              *StringFilter `protobuf:"bytes,3,opt,name=SKU,proto3" json:"SKU,omitempty"`
	Metric           *StringFilter `protobuf:"bytes,4,opt,name=metric,proto3" json:"metric,omitempty"`
	OrderingDate     *StringFilter `protobuf:"bytes,5,opt,name=ordering_date,json=orderingDate,proto3" json:"ordering_date,omitempty"`
	SoftwareProvider *StringFilter `protobuf:"bytes,6,opt,name=software_provider,json=softwareProvider,proto3" json:"software_provider,omitempty"`
}

func (x *ListAcqRightsAggregationSearchParams) Reset() {
	*x = ListAcqRightsAggregationSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsAggregationSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsAggregationSearchParams) ProtoMessage() {}

func (x *ListAcqRightsAggregationSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsAggregationSearchParams.ProtoReflect.Descriptor instead.
func (*ListAcqRightsAggregationSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{124}
}

func (x *ListAcqRightsAggregationSearchParams) GetName() *StringFilter {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListAcqRightsAggregationSearchParams) GetEditor() *StringFilter {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *ListAcqRightsAggregationSearchParams) GetSKU() *StringFilter {
	if x != nil {
		return x.SKU
	}
	return nil
}

func (x *ListAcqRightsAggregationSearchParams) GetMetric() *StringFilter {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *ListAcqRightsAggregationSearchParams) GetOrderingDate() *StringFilter {
	if x != nil {
		return x.OrderingDate
	}
	return nil
}

func (x *ListAcqRightsAggregationSearchParams) GetSoftwareProvider() *StringFilter {
	if x != nil {
		return x.SoftwareProvider
	}
	return nil
}

type ListAcqRightsAggregationRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationId int32    `protobuf:"varint,1,opt,name=aggregation_id,json=aggregationId,proto3" json:"aggregation_id,omitempty"`
	Scopes        []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListAcqRightsAggregationRecordsRequest) Reset() {
	*x = ListAcqRightsAggregationRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsAggregationRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsAggregationRecordsRequest) ProtoMessage() {}

func (x *ListAcqRightsAggregationRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsAggregationRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListAcqRightsAggregationRecordsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{125}
}

func (x *ListAcqRightsAggregationRecordsRequest) GetAggregationId() int32 {
	if x != nil {
		return x.AggregationId
	}
	return 0
}

func (x *ListAcqRightsAggregationRecordsRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListAcqRightsAggregationRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcquiredRights []*AcqRights `protobuf:"bytes,1,rep,name=acquired_rights,json=acquiredRights,proto3" json:"acquired_rights,omitempty"`
}

func (x *ListAcqRightsAggregationRecordsResponse) Reset() {
	*x = ListAcqRightsAggregationRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsAggregationRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsAggregationRecordsResponse) ProtoMessage() {}

func (x *ListAcqRightsAggregationRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsAggregationRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListAcqRightsAggregationRecordsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{126}
}

func (x *ListAcqRightsAggregationRecordsResponse) GetAcquiredRights() []*AcqRights {
	if x != nil {
		return x.AcquiredRights
	}
	return nil
}

type DeleteAggregationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DeleteAggregationRequest) Reset() {
	*x = DeleteAggregationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAggregationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAggregationRequest) ProtoMessage() {}

func (x *DeleteAggregationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAggregationRequest.ProtoReflect.Descriptor instead.
func (*DeleteAggregationRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{127}
}

func (x *DeleteAggregationRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DeleteAggregationRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListAggregationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32                          `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32                          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       ListAggregationsRequest_SortBy `protobuf:"varint,3,opt,name=sort_by,json=sortBy,proto3,enum=optisam.products.v1.ListAggregationsRequest_SortBy" json:"sort_by,omitempty"`
	SortOrder    SortOrder                      `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams *ListAggregationsSearchParams  `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scope        string                         `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListAggregationsRequest) Reset() {
	*x = ListAggregationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationsRequest) ProtoMessage() {}

func (x *ListAggregationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationsRequest.ProtoReflect.Descriptor instead.
func (*ListAggregationsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{128}
}

func (x *ListAggregationsRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListAggregationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAggregationsRequest) GetSortBy() ListAggregationsRequest_SortBy {
	if x != nil {
		return x.SortBy
	}
	return ListAggregationsRequest_aggregation_name
}

func (x *ListAggregationsRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListAggregationsRequest) GetSearchParams() *ListAggregationsSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListAggregationsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListAggregationsSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationName *StringFilter `protobuf:"bytes,1,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	ProductEditor   *StringFilter `protobuf:"bytes,2,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
}

func (x *ListAggregationsSearchParams) Reset() {
	*x = ListAggregationsSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationsSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationsSearchParams) ProtoMessage() {}

func (x *ListAggregationsSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationsSearchParams.ProtoReflect.Descriptor instead.
func (*ListAggregationsSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{129}
}

func (x *ListAggregationsSearchParams) GetAggregationName() *StringFilter {
	if x != nil {
		return x.AggregationName
	}
	return nil
}

func (x *ListAggregationsSearchParams) GetProductEditor() *StringFilter {
	if x != nil {
		return x.ProductEditor
	}
	return nil
}

type ListAggregationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords int32          `protobuf:"varint,1,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	Aggregations []*Aggregation `protobuf:"bytes,2,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
}

func (x *ListAggregationsResponse) Reset() {
	*x = ListAggregationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationsResponse) ProtoMessage() {}

func (x *ListAggregationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationsResponse.ProtoReflect.Descriptor instead.
func (*ListAggregationsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{130}
}

func (x *ListAggregationsResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListAggregationsResponse) GetAggregations() []*Aggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

type ProductAggregationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editor   string   `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	Metric   string   `protobuf:"bytes,4,opt,name=metric,proto3" json:"metric,omitempty"`
	Scope    string   `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	Products []string `protobuf:"bytes,6,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *ProductAggregationMessage) Reset() {
	*x = ProductAggregationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregationMessage) ProtoMessage() {}

func (x *ProductAggregationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregationMessage.ProtoReflect.Descriptor instead.
func (*ProductAggregationMessage) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{131}
}

func (x *ProductAggregationMessage) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProductAggregationMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAggregationMessage) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductAggregationMessage) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *ProductAggregationMessage) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProductAggregationMessage) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

type ProductAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editor       string   `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductNames []string `protobuf:"bytes,4,rep,name=product_names,json=productNames,proto3" json:"product_names,omitempty"`
	Metric       string   `protobuf:"bytes,5,opt,name=metric,proto3" json:"metric,omitempty"`
	Scope        string   `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
	Products     []string `protobuf:"bytes,7,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *ProductAggregation) Reset() {
	*x = ProductAggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAggregation) ProtoMessage() {}

func (x *ProductAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAggregation.ProtoReflect.Descriptor instead.
func (*ProductAggregation) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{132}
}

func (x *ProductAggregation) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProductAggregation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAggregation) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ProductAggregation) GetProductNames() []string {
	if x != nil {
		return x.ProductNames
	}
	return nil
}

func (x *ProductAggregation) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *ProductAggregation) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProductAggregation) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

type ListAggregationEditorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListAggregationEditorsRequest) Reset() {
	*x = ListAggregationEditorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationEditorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationEditorsRequest) ProtoMessage() {}

func (x *ListAggregationEditorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationEditorsRequest.ProtoReflect.Descriptor instead.
func (*ListAggregationEditorsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{133}
}

func (x *ListAggregationEditorsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListAggregationEditorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor []string `protobuf:"bytes,1,rep,name=editor,proto3" json:"editor,omitempty"`
}

func (x *ListAggregationEditorsResponse) Reset() {
	*x = ListAggregationEditorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationEditorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationEditorsResponse) ProtoMessage() {}

func (x *ListAggregationEditorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationEditorsResponse.ProtoReflect.Descriptor instead.
func (*ListAggregationEditorsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{134}
}

func (x *ListAggregationEditorsResponse) GetEditor() []string {
	if x != nil {
		return x.Editor
	}
	return nil
}

type ListAggregationProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Editor string `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
	ID     int32  `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ListAggregationProductsRequest) Reset() {
	*x = ListAggregationProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationProductsRequest) ProtoMessage() {}

func (x *ListAggregationProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationProductsRequest.ProtoReflect.Descriptor instead.
func (*ListAggregationProductsRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{135}
}

func (x *ListAggregationProductsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListAggregationProductsRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *ListAggregationProductsRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ListAggregationProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggrightsProducts []*AggregationProducts `protobuf:"bytes,1,rep,name=aggrights_products,json=aggrightsProducts,proto3" json:"aggrights_products,omitempty"`
	SelectedProducts  []*AggregationProducts `protobuf:"bytes,2,rep,name=selected_products,json=selectedProducts,proto3" json:"selected_products,omitempty"`
}

func (x *ListAggregationProductsResponse) Reset() {
	*x = ListAggregationProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAggregationProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAggregationProductsResponse) ProtoMessage() {}

func (x *ListAggregationProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAggregationProductsResponse.ProtoReflect.Descriptor instead.
func (*ListAggregationProductsResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{136}
}

func (x *ListAggregationProductsResponse) GetAggrightsProducts() []*AggregationProducts {
	if x != nil {
		return x.AggrightsProducts
	}
	return nil
}

func (x *ListAggregationProductsResponse) GetSelectedProducts() []*AggregationProducts {
	if x != nil {
		return x.SelectedProducts
	}
	return nil
}

type AggregationProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swidtag        string `protobuf:"bytes,1,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	ProductName    string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Editor         string `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductVersion string `protobuf:"bytes,4,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
}

func (x *AggregationProducts) Reset() {
	*x = AggregationProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationProducts) ProtoMessage() {}

func (x *AggregationProducts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationProducts.ProtoReflect.Descriptor instead.
func (*AggregationProducts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{137}
}

func (x *AggregationProducts) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *AggregationProducts) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *AggregationProducts) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *AggregationProducts) GetProductVersion() string {
	if x != nil {
		return x.ProductVersion
	}
	return ""
}

type DropProductDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope        string                              `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	DeletionType DropProductDataRequestDeletionTypes `protobuf:"varint,2,opt,name=deletion_type,json=deletionType,proto3,enum=optisam.products.v1.DropProductDataRequestDeletionTypes" json:"deletion_type,omitempty"`
}

func (x *DropProductDataRequest) Reset() {
	*x = DropProductDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropProductDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropProductDataRequest) ProtoMessage() {}

func (x *DropProductDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropProductDataRequest.ProtoReflect.Descriptor instead.
func (*DropProductDataRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{138}
}

func (x *DropProductDataRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *DropProductDataRequest) GetDeletionType() DropProductDataRequestDeletionTypes {
	if x != nil {
		return x.DeletionType
	}
	return DropProductDataRequest_ACQRIGHTS
}

type DropProductDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DropProductDataResponse) Reset() {
	*x = DropProductDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropProductDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropProductDataResponse) ProtoMessage() {}

func (x *DropProductDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropProductDataResponse.ProtoReflect.Descriptor instead.
func (*DropProductDataResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{139}
}

func (x *DropProductDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DropAggregationDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DropAggregationDataRequest) Reset() {
	*x = DropAggregationDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropAggregationDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropAggregationDataRequest) ProtoMessage() {}

func (x *DropAggregationDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropAggregationDataRequest.ProtoReflect.Descriptor instead.
func (*DropAggregationDataRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{140}
}

func (x *DropAggregationDataRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DropAggregationDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DropAggregationDataResponse) Reset() {
	*x = DropAggregationDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropAggregationDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropAggregationDataResponse) ProtoMessage() {}

func (x *DropAggregationDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropAggregationDataResponse.ProtoReflect.Descriptor instead.
func (*DropAggregationDataResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{141}
}

func (x *DropAggregationDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpserNominativeUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor          string                   `protobuf:"bytes,1,opt,name=editor,proto3" json:"editor,omitempty"`
	Scope           string                   `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ProductName     string                   `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductVersion  string                   `protobuf:"bytes,4,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
	AggregationId   int32                    `protobuf:"varint,5,opt,name=aggregation_id,json=aggregationId,proto3" json:"aggregation_id,omitempty"`
	FileName        string                   `protobuf:"bytes,6,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	SheetName       string                   `protobuf:"bytes,7,opt,name=sheet_name,json=sheetName,proto3" json:"sheet_name,omitempty"`
	UserDetails     []*NominativeUserDetails `protobuf:"bytes,8,rep,name=user_details,json=userDetails,proto3" json:"user_details,omitempty"`
	UploadId        string                   `protobuf:"bytes,9,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	UpdatedBy       string                   `protobuf:"bytes,10,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	CreatedBy       string                   `protobuf:"bytes,11,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	SwidTag         string                   `protobuf:"bytes,12,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	AggregationName string                   `protobuf:"bytes,13,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
}

func (x *UpserNominativeUserRequest) Reset() {
	*x = UpserNominativeUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpserNominativeUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpserNominativeUserRequest) ProtoMessage() {}

func (x *UpserNominativeUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpserNominativeUserRequest.ProtoReflect.Descriptor instead.
func (*UpserNominativeUserRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{142}
}

func (x *UpserNominativeUserRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *UpserNominativeUserRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpserNominativeUserRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *UpserNominativeUserRequest) GetProductVersion() string {
	if x != nil {
		return x.ProductVersion
	}
	return ""
}

func (x *UpserNominativeUserRequest) GetAggregationId() int32 {
	if x != nil {
		return x.AggregationId
	}
	return 0
}

func (x *UpserNominativeUserRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UpserNominativeUserRequest) GetSheetName() string {
	if x != nil {
		return x.SheetName
	}
	return ""
}

func (x *UpserNominativeUserRequest) GetUserDetails() []*NominativeUserDetails {
	if x != nil {
		return x.UserDetails
	}
	return nil
}

func (x *UpserNominativeUserRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *UpserNominativeUserRequest) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UpserNominativeUserRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UpserNominativeUserRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *UpserNominativeUserRequest) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

type NominativeUserDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName       string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	FirstName      string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	Email          string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Profile        string `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	ActivationDate string `protobuf:"bytes,5,opt,name=activation_date,json=activationDate,proto3" json:"activation_date,omitempty"`
	Comments       string `protobuf:"bytes,6,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *NominativeUserDetails) Reset() {
	*x = NominativeUserDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominativeUserDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominativeUserDetails) ProtoMessage() {}

func (x *NominativeUserDetails) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominativeUserDetails.ProtoReflect.Descriptor instead.
func (*NominativeUserDetails) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{143}
}

func (x *NominativeUserDetails) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NominativeUserDetails) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *NominativeUserDetails) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NominativeUserDetails) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *NominativeUserDetails) GetActivationDate() string {
	if x != nil {
		return x.ActivationDate
	}
	return ""
}

func (x *NominativeUserDetails) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

type UpserNominativeUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpserNominativeUserResponse) Reset() {
	*x = UpserNominativeUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpserNominativeUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpserNominativeUserResponse) ProtoMessage() {}

func (x *UpserNominativeUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpserNominativeUserResponse.ProtoReflect.Descriptor instead.
func (*UpserNominativeUserResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{144}
}

func (x *UpserNominativeUserResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type ListNominativeUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      int32                       `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     int32                       `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy       string                      `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder    SortOrder                   `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams *NominativeUserSearchParams `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes       string                      `protobuf:"bytes,6,opt,name=scopes,proto3" json:"scopes,omitempty"`
	IsProduct    bool                        `protobuf:"varint,7,opt,name=is_product,json=isProduct,proto3" json:"is_product,omitempty"`
}

func (x *ListNominativeUsersRequest) Reset() {
	*x = ListNominativeUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNominativeUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNominativeUsersRequest) ProtoMessage() {}

func (x *ListNominativeUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNominativeUsersRequest.ProtoReflect.Descriptor instead.
func (*ListNominativeUsersRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{145}
}

func (x *ListNominativeUsersRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListNominativeUsersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNominativeUsersRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListNominativeUsersRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListNominativeUsersRequest) GetSearchParams() *NominativeUserSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListNominativeUsersRequest) GetScopes() string {
	if x != nil {
		return x.Scopes
	}
	return ""
}

func (x *ListNominativeUsersRequest) GetIsProduct() bool {
	if x != nil {
		return x.IsProduct
	}
	return false
}

type NominativeUserSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName     *StringFilter        `protobuf:"bytes,1,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	AggregationName *StringFilter        `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	ProductVersion  *StringFilter        `protobuf:"bytes,3,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
	UserName        *StringFilter        `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	FirstName       *StringFilter        `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	UserEmail       *StringFilter        `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	Profile         *StringFilter        `protobuf:"bytes,7,opt,name=profile,proto3" json:"profile,omitempty"`
	ActivationDate  *timestamp.Timestamp `protobuf:"bytes,8,opt,name=activation_date,json=activationDate,proto3" json:"activation_date,omitempty"`
	Editor          *StringFilter        `protobuf:"bytes,9,opt,name=editor,proto3" json:"editor,omitempty"`
}

func (x *NominativeUserSearchParams) Reset() {
	*x = NominativeUserSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominativeUserSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominativeUserSearchParams) ProtoMessage() {}

func (x *NominativeUserSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominativeUserSearchParams.ProtoReflect.Descriptor instead.
func (*NominativeUserSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{146}
}

func (x *NominativeUserSearchParams) GetProductName() *StringFilter {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *NominativeUserSearchParams) GetAggregationName() *StringFilter {
	if x != nil {
		return x.AggregationName
	}
	return nil
}

func (x *NominativeUserSearchParams) GetProductVersion() *StringFilter {
	if x != nil {
		return x.ProductVersion
	}
	return nil
}

func (x *NominativeUserSearchParams) GetUserName() *StringFilter {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *NominativeUserSearchParams) GetFirstName() *StringFilter {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *NominativeUserSearchParams) GetUserEmail() *StringFilter {
	if x != nil {
		return x.UserEmail
	}
	return nil
}

func (x *NominativeUserSearchParams) GetProfile() *StringFilter {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *NominativeUserSearchParams) GetActivationDate() *timestamp.Timestamp {
	if x != nil {
		return x.ActivationDate
	}
	return nil
}

func (x *NominativeUserSearchParams) GetEditor() *StringFilter {
	if x != nil {
		return x.Editor
	}
	return nil
}

type NominativeUsersExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortBy       string                      `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder    SortOrder                   `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams *NominativeUserSearchParams `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes       string                      `protobuf:"bytes,6,opt,name=scopes,proto3" json:"scopes,omitempty"`
	IsProduct    bool                        `protobuf:"varint,7,opt,name=is_product,json=isProduct,proto3" json:"is_product,omitempty"`
}

func (x *NominativeUsersExportRequest) Reset() {
	*x = NominativeUsersExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominativeUsersExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominativeUsersExportRequest) ProtoMessage() {}

func (x *NominativeUsersExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominativeUsersExportRequest.ProtoReflect.Descriptor instead.
func (*NominativeUsersExportRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{147}
}

func (x *NominativeUsersExportRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *NominativeUsersExportRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *NominativeUsersExportRequest) GetSearchParams() *NominativeUserSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *NominativeUsersExportRequest) GetScopes() string {
	if x != nil {
		return x.Scopes
	}
	return ""
}

func (x *NominativeUsersExportRequest) GetIsProduct() bool {
	if x != nil {
		return x.IsProduct
	}
	return false
}

type ListNominativeUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords   int32             `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	NominativeUser []*NominativeUser `protobuf:"bytes,2,rep,name=nominative_user,json=nominativeUser,proto3" json:"nominative_user,omitempty"`
}

func (x *ListNominativeUsersResponse) Reset() {
	*x = ListNominativeUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNominativeUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNominativeUsersResponse) ProtoMessage() {}

func (x *ListNominativeUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNominativeUsersResponse.ProtoReflect.Descriptor instead.
func (*ListNominativeUsersResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{148}
}

func (x *ListNominativeUsersResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListNominativeUsersResponse) GetNominativeUser() []*NominativeUser {
	if x != nil {
		return x.NominativeUser
	}
	return nil
}

type ListNominativeUsersExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords   int32                   `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	NominativeUser []*NominativeUserExport `protobuf:"bytes,2,rep,name=nominative_user,json=nominativeUser,proto3" json:"nominative_user,omitempty"`
}

func (x *ListNominativeUsersExportResponse) Reset() {
	*x = ListNominativeUsersExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNominativeUsersExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNominativeUsersExportResponse) ProtoMessage() {}

func (x *ListNominativeUsersExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNominativeUsersExportResponse.ProtoReflect.Descriptor instead.
func (*ListNominativeUsersExportResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{149}
}

func (x *ListNominativeUsersExportResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListNominativeUsersExportResponse) GetNominativeUser() []*NominativeUserExport {
	if x != nil {
		return x.NominativeUser
	}
	return nil
}

type NominativeUserExport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor               string `protobuf:"bytes,1,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductName          string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	AggregationName      string `protobuf:"bytes,3,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	ProductVersion       string `protobuf:"bytes,4,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
	UserName             string `protobuf:"bytes,5,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	FirstName            string `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	UserEmail            string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	Profile              string `protobuf:"bytes,8,opt,name=profile,proto3" json:"profile,omitempty"`
	ActivationDate       string `protobuf:"bytes,9,opt,name=activation_date,json=activationDate,proto3" json:"activation_date,omitempty"`
	AggregationId        int32  `protobuf:"varint,10,opt,name=aggregation_id,json=aggregationId,proto3" json:"aggregation_id,omitempty"`
	Id                   int32  `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	Comment              string `protobuf:"bytes,12,opt,name=comment,proto3" json:"comment,omitempty"`
	ActivationDateString string `protobuf:"bytes,13,opt,name=activation_date_string,json=activationDateString,proto3" json:"activation_date_string,omitempty"`
}

func (x *NominativeUserExport) Reset() {
	*x = NominativeUserExport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominativeUserExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominativeUserExport) ProtoMessage() {}

func (x *NominativeUserExport) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominativeUserExport.ProtoReflect.Descriptor instead.
func (*NominativeUserExport) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{150}
}

func (x *NominativeUserExport) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *NominativeUserExport) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *NominativeUserExport) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *NominativeUserExport) GetProductVersion() string {
	if x != nil {
		return x.ProductVersion
	}
	return ""
}

func (x *NominativeUserExport) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NominativeUserExport) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *NominativeUserExport) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *NominativeUserExport) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *NominativeUserExport) GetActivationDate() string {
	if x != nil {
		return x.ActivationDate
	}
	return ""
}

func (x *NominativeUserExport) GetAggregationId() int32 {
	if x != nil {
		return x.AggregationId
	}
	return 0
}

func (x *NominativeUserExport) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NominativeUserExport) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *NominativeUserExport) GetActivationDateString() string {
	if x != nil {
		return x.ActivationDateString
	}
	return ""
}

type NominativeUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor               string               `protobuf:"bytes,1,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductName          string               `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	AggregationName      string               `protobuf:"bytes,3,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	ProductVersion       string               `protobuf:"bytes,4,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
	UserName             string               `protobuf:"bytes,5,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	FirstName            string               `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	UserEmail            string               `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	Profile              string               `protobuf:"bytes,8,opt,name=profile,proto3" json:"profile,omitempty"`
	ActivationDate       *timestamp.Timestamp `protobuf:"bytes,9,opt,name=activation_date,json=activationDate,proto3" json:"activation_date,omitempty"`
	AggregationId        int32                `protobuf:"varint,10,opt,name=aggregation_id,json=aggregationId,proto3" json:"aggregation_id,omitempty"`
	Id                   int32                `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	Comment              string               `protobuf:"bytes,12,opt,name=comment,proto3" json:"comment,omitempty"`
	ActivationDateString string               `protobuf:"bytes,13,opt,name=activation_date_string,json=activationDateString,proto3" json:"activation_date_string,omitempty"`
	ActivationDateValid  bool                 `protobuf:"varint,14,opt,name=activation_date_valid,json=activationDateValid,proto3" json:"activation_date_valid,omitempty"`
}

func (x *NominativeUser) Reset() {
	*x = NominativeUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominativeUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominativeUser) ProtoMessage() {}

func (x *NominativeUser) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominativeUser.ProtoReflect.Descriptor instead.
func (*NominativeUser) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{151}
}

func (x *NominativeUser) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *NominativeUser) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *NominativeUser) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *NominativeUser) GetProductVersion() string {
	if x != nil {
		return x.ProductVersion
	}
	return ""
}

func (x *NominativeUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NominativeUser) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *NominativeUser) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *NominativeUser) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *NominativeUser) GetActivationDate() *timestamp.Timestamp {
	if x != nil {
		return x.ActivationDate
	}
	return nil
}

func (x *NominativeUser) GetAggregationId() int32 {
	if x != nil {
		return x.AggregationId
	}
	return 0
}

func (x *NominativeUser) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NominativeUser) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *NominativeUser) GetActivationDateString() string {
	if x != nil {
		return x.ActivationDateString
	}
	return ""
}

func (x *NominativeUser) GetActivationDateValid() bool {
	if x != nil {
		return x.ActivationDateValid
	}
	return false
}

type ProductConcurrentUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope          string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	AggregationId  int32  `protobuf:"varint,2,opt,name=aggregation_id,json=aggregationId,proto3" json:"aggregation_id,omitempty"`
	IsAggregations bool   `protobuf:"varint,3,opt,name=is_aggregations,json=isAggregations,proto3" json:"is_aggregations,omitempty"`
	Swidtag        string `protobuf:"bytes,4,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	ProductName    string `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductEditor  string `protobuf:"bytes,6,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	ProductVersion string `protobuf:"bytes,7,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
	NumberOfUsers  int32  `protobuf:"varint,8,opt,name=number_of_users,json=numberOfUsers,proto3" json:"number_of_users,omitempty"`
	ProfileUser    string `protobuf:"bytes,9,opt,name=profile_user,json=profileUser,proto3" json:"profile_user,omitempty"`
	Team           string `protobuf:"bytes,10,opt,name=team,proto3" json:"team,omitempty"`
	Id             int32  `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ProductConcurrentUserRequest) Reset() {
	*x = ProductConcurrentUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductConcurrentUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductConcurrentUserRequest) ProtoMessage() {}

func (x *ProductConcurrentUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductConcurrentUserRequest.ProtoReflect.Descriptor instead.
func (*ProductConcurrentUserRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{152}
}

func (x *ProductConcurrentUserRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ProductConcurrentUserRequest) GetAggregationId() int32 {
	if x != nil {
		return x.AggregationId
	}
	return 0
}

func (x *ProductConcurrentUserRequest) GetIsAggregations() bool {
	if x != nil {
		return x.IsAggregations
	}
	return false
}

func (x *ProductConcurrentUserRequest) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *ProductConcurrentUserRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductConcurrentUserRequest) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *ProductConcurrentUserRequest) GetProductVersion() string {
	if x != nil {
		return x.ProductVersion
	}
	return ""
}

func (x *ProductConcurrentUserRequest) GetNumberOfUsers() int32 {
	if x != nil {
		return x.NumberOfUsers
	}
	return 0
}

func (x *ProductConcurrentUserRequest) GetProfileUser() string {
	if x != nil {
		return x.ProfileUser
	}
	return ""
}

func (x *ProductConcurrentUserRequest) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

func (x *ProductConcurrentUserRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProductConcurrentUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ProductConcurrentUserResponse) Reset() {
	*x = ProductConcurrentUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductConcurrentUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductConcurrentUserResponse) ProtoMessage() {}

func (x *ProductConcurrentUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductConcurrentUserResponse.ProtoReflect.Descriptor instead.
func (*ProductConcurrentUserResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{153}
}

func (x *ProductConcurrentUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListConcurrentUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum       int32                       `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize      int32                       `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy        string                      `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder     SortOrder                   `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams  *ConcurrentUserSearchParams `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes        string                      `protobuf:"bytes,6,opt,name=scopes,proto3" json:"scopes,omitempty"`
	IsAggregation bool                        `protobuf:"varint,8,opt,name=is_aggregation,json=isAggregation,proto3" json:"is_aggregation,omitempty"`
}

func (x *ListConcurrentUsersRequest) Reset() {
	*x = ListConcurrentUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConcurrentUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConcurrentUsersRequest) ProtoMessage() {}

func (x *ListConcurrentUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConcurrentUsersRequest.ProtoReflect.Descriptor instead.
func (*ListConcurrentUsersRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{154}
}

func (x *ListConcurrentUsersRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListConcurrentUsersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListConcurrentUsersRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListConcurrentUsersRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListConcurrentUsersRequest) GetSearchParams() *ConcurrentUserSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListConcurrentUsersRequest) GetScopes() string {
	if x != nil {
		return x.Scopes
	}
	return ""
}

func (x *ListConcurrentUsersRequest) GetIsAggregation() bool {
	if x != nil {
		return x.IsAggregation
	}
	return false
}

type ListConcurrentUsersExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortBy        string                      `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder     SortOrder                   `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	SearchParams  *ConcurrentUserSearchParams `protobuf:"bytes,5,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	Scopes        string                      `protobuf:"bytes,6,opt,name=scopes,proto3" json:"scopes,omitempty"`
	NumberOfUsers int32                       `protobuf:"varint,7,opt,name=number_of_users,json=numberOfUsers,proto3" json:"number_of_users,omitempty"`
	IsAggregation bool                        `protobuf:"varint,8,opt,name=is_aggregation,json=isAggregation,proto3" json:"is_aggregation,omitempty"`
}

func (x *ListConcurrentUsersExportRequest) Reset() {
	*x = ListConcurrentUsersExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConcurrentUsersExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConcurrentUsersExportRequest) ProtoMessage() {}

func (x *ListConcurrentUsersExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConcurrentUsersExportRequest.ProtoReflect.Descriptor instead.
func (*ListConcurrentUsersExportRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{155}
}

func (x *ListConcurrentUsersExportRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListConcurrentUsersExportRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *ListConcurrentUsersExportRequest) GetSearchParams() *ConcurrentUserSearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *ListConcurrentUsersExportRequest) GetScopes() string {
	if x != nil {
		return x.Scopes
	}
	return ""
}

func (x *ListConcurrentUsersExportRequest) GetNumberOfUsers() int32 {
	if x != nil {
		return x.NumberOfUsers
	}
	return 0
}

func (x *ListConcurrentUsersExportRequest) GetIsAggregation() bool {
	if x != nil {
		return x.IsAggregation
	}
	return false
}

type ConcurrentUserSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName     *StringFilter        `protobuf:"bytes,1,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	AggregationName *StringFilter        `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	ProductVersion  *StringFilter        `protobuf:"bytes,3,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
	Team            *StringFilter        `protobuf:"bytes,4,opt,name=team,proto3" json:"team,omitempty"`
	ProfileUser     *StringFilter        `protobuf:"bytes,5,opt,name=profile_user,json=profileUser,proto3" json:"profile_user,omitempty"`
	NumberOfUsers   *StringFilter        `protobuf:"bytes,6,opt,name=number_of_users,json=numberOfUsers,proto3" json:"number_of_users,omitempty"`
	ProductEditor   *StringFilter        `protobuf:"bytes,7,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	PurchaseDate    *timestamp.Timestamp `protobuf:"bytes,8,opt,name=purchase_date,json=purchaseDate,proto3" json:"purchase_date,omitempty"`
}

func (x *ConcurrentUserSearchParams) Reset() {
	*x = ConcurrentUserSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrentUserSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrentUserSearchParams) ProtoMessage() {}

func (x *ConcurrentUserSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrentUserSearchParams.ProtoReflect.Descriptor instead.
func (*ConcurrentUserSearchParams) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{156}
}

func (x *ConcurrentUserSearchParams) GetProductName() *StringFilter {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *ConcurrentUserSearchParams) GetAggregationName() *StringFilter {
	if x != nil {
		return x.AggregationName
	}
	return nil
}

func (x *ConcurrentUserSearchParams) GetProductVersion() *StringFilter {
	if x != nil {
		return x.ProductVersion
	}
	return nil
}

func (x *ConcurrentUserSearchParams) GetTeam() *StringFilter {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *ConcurrentUserSearchParams) GetProfileUser() *StringFilter {
	if x != nil {
		return x.ProfileUser
	}
	return nil
}

func (x *ConcurrentUserSearchParams) GetNumberOfUsers() *StringFilter {
	if x != nil {
		return x.NumberOfUsers
	}
	return nil
}

func (x *ConcurrentUserSearchParams) GetProductEditor() *StringFilter {
	if x != nil {
		return x.ProductEditor
	}
	return nil
}

func (x *ConcurrentUserSearchParams) GetPurchaseDate() *timestamp.Timestamp {
	if x != nil {
		return x.PurchaseDate
	}
	return nil
}

type ListConcurrentUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords   int32             `protobuf:"varint,1,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	ConcurrentUser []*ConcurrentUser `protobuf:"bytes,2,rep,name=concurrent_user,json=concurrentUser,proto3" json:"concurrent_user,omitempty"`
}

func (x *ListConcurrentUsersResponse) Reset() {
	*x = ListConcurrentUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConcurrentUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConcurrentUsersResponse) ProtoMessage() {}

func (x *ListConcurrentUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConcurrentUsersResponse.ProtoReflect.Descriptor instead.
func (*ListConcurrentUsersResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{157}
}

func (x *ListConcurrentUsersResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *ListConcurrentUsersResponse) GetConcurrentUser() []*ConcurrentUser {
	if x != nil {
		return x.ConcurrentUser
	}
	return nil
}

type ConcurrentUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName     string               `protobuf:"bytes,1,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	AggregationName string               `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	ProductVersion  string               `protobuf:"bytes,3,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
	Team            string               `protobuf:"bytes,4,opt,name=team,proto3" json:"team,omitempty"`
	ProfileUser     string               `protobuf:"bytes,5,opt,name=profile_user,json=profileUser,proto3" json:"profile_user,omitempty"`
	NumberOfUsers   int32                `protobuf:"varint,6,opt,name=number_of_users,json=numberOfUsers,proto3" json:"number_of_users,omitempty"`
	PurchaseDate    *timestamp.Timestamp `protobuf:"bytes,7,opt,name=purchase_date,json=purchaseDate,proto3" json:"purchase_date,omitempty"`
	AggregationId   int32                `protobuf:"varint,8,opt,name=aggregation_id,json=aggregationId,proto3" json:"aggregation_id,omitempty"`
	Id              int32                `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	IsAggregation   bool                 `protobuf:"varint,10,opt,name=is_aggregation,json=isAggregation,proto3" json:"is_aggregation,omitempty"`
	ProductEditor   string               `protobuf:"bytes,11,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
}

func (x *ConcurrentUser) Reset() {
	*x = ConcurrentUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrentUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrentUser) ProtoMessage() {}

func (x *ConcurrentUser) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrentUser.ProtoReflect.Descriptor instead.
func (*ConcurrentUser) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{158}
}

func (x *ConcurrentUser) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ConcurrentUser) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *ConcurrentUser) GetProductVersion() string {
	if x != nil {
		return x.ProductVersion
	}
	return ""
}

func (x *ConcurrentUser) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

func (x *ConcurrentUser) GetProfileUser() string {
	if x != nil {
		return x.ProfileUser
	}
	return ""
}

func (x *ConcurrentUser) GetNumberOfUsers() int32 {
	if x != nil {
		return x.NumberOfUsers
	}
	return 0
}

func (x *ConcurrentUser) GetPurchaseDate() *timestamp.Timestamp {
	if x != nil {
		return x.PurchaseDate
	}
	return nil
}

func (x *ConcurrentUser) GetAggregationId() int32 {
	if x != nil {
		return x.AggregationId
	}
	return 0
}

func (x *ConcurrentUser) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConcurrentUser) GetIsAggregation() bool {
	if x != nil {
		return x.IsAggregation
	}
	return false
}

func (x *ConcurrentUser) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

type DeleteConcurrentUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Id    int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteConcurrentUsersRequest) Reset() {
	*x = DeleteConcurrentUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConcurrentUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConcurrentUsersRequest) ProtoMessage() {}

func (x *DeleteConcurrentUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConcurrentUsersRequest.ProtoReflect.Descriptor instead.
func (*DeleteConcurrentUsersRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{159}
}

func (x *DeleteConcurrentUsersRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *DeleteConcurrentUsersRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteConcurrentUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteConcurrentUsersResponse) Reset() {
	*x = DeleteConcurrentUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConcurrentUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConcurrentUsersResponse) ProtoMessage() {}

func (x *DeleteConcurrentUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConcurrentUsersResponse.ProtoReflect.Descriptor instead.
func (*DeleteConcurrentUsersResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{160}
}

func (x *DeleteConcurrentUsersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteNominativeUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Id    int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteNominativeUserRequest) Reset() {
	*x = DeleteNominativeUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNominativeUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNominativeUserRequest) ProtoMessage() {}

func (x *DeleteNominativeUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNominativeUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteNominativeUserRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{161}
}

func (x *DeleteNominativeUserRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *DeleteNominativeUserRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteNominativeUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteNominativeUserResponse) Reset() {
	*x = DeleteNominativeUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNominativeUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNominativeUserResponse) ProtoMessage() {}

func (x *DeleteNominativeUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNominativeUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteNominativeUserResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{162}
}

func (x *DeleteNominativeUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetConcurrentUsersHistroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     string               `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Swidtag   string               `protobuf:"bytes,2,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	AggID     int32                `protobuf:"varint,3,opt,name=aggID,proto3" json:"aggID,omitempty"`
	StartDate *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *GetConcurrentUsersHistroyRequest) Reset() {
	*x = GetConcurrentUsersHistroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConcurrentUsersHistroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConcurrentUsersHistroyRequest) ProtoMessage() {}

func (x *GetConcurrentUsersHistroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConcurrentUsersHistroyRequest.ProtoReflect.Descriptor instead.
func (*GetConcurrentUsersHistroyRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{163}
}

func (x *GetConcurrentUsersHistroyRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetConcurrentUsersHistroyRequest) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *GetConcurrentUsersHistroyRequest) GetAggID() int32 {
	if x != nil {
		return x.AggID
	}
	return 0
}

func (x *GetConcurrentUsersHistroyRequest) GetStartDate() *timestamp.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetConcurrentUsersHistroyRequest) GetEndDate() *timestamp.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type GetConcurrentUsersHistroyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConcurrentUsersByDays   []*ConcurrentUsersByDay   `protobuf:"bytes,1,rep,name=concurrentUsersByDays,proto3" json:"concurrentUsersByDays,omitempty"`
	ConcurrentUsersByMonths []*ConcurrentUsersByMonth `protobuf:"bytes,2,rep,name=concurrentUsersByMonths,proto3" json:"concurrentUsersByMonths,omitempty"`
}

func (x *GetConcurrentUsersHistroyResponse) Reset() {
	*x = GetConcurrentUsersHistroyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConcurrentUsersHistroyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConcurrentUsersHistroyResponse) ProtoMessage() {}

func (x *GetConcurrentUsersHistroyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConcurrentUsersHistroyResponse.ProtoReflect.Descriptor instead.
func (*GetConcurrentUsersHistroyResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{164}
}

func (x *GetConcurrentUsersHistroyResponse) GetConcurrentUsersByDays() []*ConcurrentUsersByDay {
	if x != nil {
		return x.ConcurrentUsersByDays
	}
	return nil
}

func (x *GetConcurrentUsersHistroyResponse) GetConcurrentUsersByMonths() []*ConcurrentUsersByMonth {
	if x != nil {
		return x.ConcurrentUsersByMonths
	}
	return nil
}

type ConcurrentUsersByDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseDate    *timestamp.Timestamp `protobuf:"bytes,1,opt,name=purchase_date,json=purchaseDate,proto3" json:"purchase_date,omitempty"`
	ConcurrentUsers int32                `protobuf:"varint,2,opt,name=concurrent_users,json=concurrentUsers,proto3" json:"concurrent_users,omitempty"`
}

func (x *ConcurrentUsersByDay) Reset() {
	*x = ConcurrentUsersByDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrentUsersByDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrentUsersByDay) ProtoMessage() {}

func (x *ConcurrentUsersByDay) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrentUsersByDay.ProtoReflect.Descriptor instead.
func (*ConcurrentUsersByDay) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{165}
}

func (x *ConcurrentUsersByDay) GetPurchaseDate() *timestamp.Timestamp {
	if x != nil {
		return x.PurchaseDate
	}
	return nil
}

func (x *ConcurrentUsersByDay) GetConcurrentUsers() int32 {
	if x != nil {
		return x.ConcurrentUsers
	}
	return 0
}

type ConcurrentUsersByMonth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseMonth    string `protobuf:"bytes,1,opt,name=purchase_month,json=purchaseMonth,proto3" json:"purchase_month,omitempty"`
	CouncurrentUsers int32  `protobuf:"varint,2,opt,name=councurrent_users,json=councurrentUsers,proto3" json:"councurrent_users,omitempty"`
}

func (x *ConcurrentUsersByMonth) Reset() {
	*x = ConcurrentUsersByMonth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrentUsersByMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrentUsersByMonth) ProtoMessage() {}

func (x *ConcurrentUsersByMonth) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrentUsersByMonth.ProtoReflect.Descriptor instead.
func (*ConcurrentUsersByMonth) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{166}
}

func (x *ConcurrentUsersByMonth) GetPurchaseMonth() string {
	if x != nil {
		return x.PurchaseMonth
	}
	return ""
}

func (x *ConcurrentUsersByMonth) GetCouncurrentUsers() int32 {
	if x != nil {
		return x.CouncurrentUsers
	}
	return 0
}

type GroupComplianceEditorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Editor string   `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
}

func (x *GroupComplianceEditorRequest) Reset() {
	*x = GroupComplianceEditorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupComplianceEditorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupComplianceEditorRequest) ProtoMessage() {}

func (x *GroupComplianceEditorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupComplianceEditorRequest.ProtoReflect.Descriptor instead.
func (*GroupComplianceEditorRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{167}
}

func (x *GroupComplianceEditorRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GroupComplianceEditorRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

type GroupComplianceEditorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Costs                   *ScopesEditorCosts `protobuf:"bytes,1,opt,name=costs,proto3" json:"costs,omitempty"`
	GroupCounterFeitingCost float64            `protobuf:"fixed64,2,opt,name=groupCounterFeitingCost,proto3" json:"groupCounterFeitingCost,omitempty"`
	GroupUnderUsageCost     float64            `protobuf:"fixed64,3,opt,name=groupUnderUsageCost,proto3" json:"groupUnderUsageCost,omitempty"`
	GroupTotalCost          float64            `protobuf:"fixed64,4,opt,name=groupTotalCost,proto3" json:"groupTotalCost,omitempty"`
}

func (x *GroupComplianceEditorResponse) Reset() {
	*x = GroupComplianceEditorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupComplianceEditorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupComplianceEditorResponse) ProtoMessage() {}

func (x *GroupComplianceEditorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupComplianceEditorResponse.ProtoReflect.Descriptor instead.
func (*GroupComplianceEditorResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{168}
}

func (x *GroupComplianceEditorResponse) GetCosts() *ScopesEditorCosts {
	if x != nil {
		return x.Costs
	}
	return nil
}

func (x *GroupComplianceEditorResponse) GetGroupCounterFeitingCost() float64 {
	if x != nil {
		return x.GroupCounterFeitingCost
	}
	return 0
}

func (x *GroupComplianceEditorResponse) GetGroupUnderUsageCost() float64 {
	if x != nil {
		return x.GroupUnderUsageCost
	}
	return 0
}

func (x *GroupComplianceEditorResponse) GetGroupTotalCost() float64 {
	if x != nil {
		return x.GroupTotalCost
	}
	return 0
}

type ScopesEditorCosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CounterFeiting []*ScopeCost `protobuf:"bytes,1,rep,name=counterFeiting,proto3" json:"counterFeiting,omitempty"`
	UnderUsage     []*ScopeCost `protobuf:"bytes,2,rep,name=underUsage,proto3" json:"underUsage,omitempty"`
	Total          []*ScopeCost `protobuf:"bytes,3,rep,name=total,proto3" json:"total,omitempty"`
}

func (x *ScopesEditorCosts) Reset() {
	*x = ScopesEditorCosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopesEditorCosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopesEditorCosts) ProtoMessage() {}

func (x *ScopesEditorCosts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopesEditorCosts.ProtoReflect.Descriptor instead.
func (*ScopesEditorCosts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{169}
}

func (x *ScopesEditorCosts) GetCounterFeiting() []*ScopeCost {
	if x != nil {
		return x.CounterFeiting
	}
	return nil
}

func (x *ScopesEditorCosts) GetUnderUsage() []*ScopeCost {
	if x != nil {
		return x.UnderUsage
	}
	return nil
}

func (x *ScopesEditorCosts) GetTotal() []*ScopeCost {
	if x != nil {
		return x.Total
	}
	return nil
}

type ScopeCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string  `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Cost  float64 `protobuf:"fixed64,2,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *ScopeCost) Reset() {
	*x = ScopeCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeCost) ProtoMessage() {}

func (x *ScopeCost) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeCost.ProtoReflect.Descriptor instead.
func (*ScopeCost) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{170}
}

func (x *ScopeCost) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ScopeCost) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type GetUnderusageByEditorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int32 page_num = 1 [
	//   (validate.rules).int32 = {gte : 1, lt : 1000},
	//   (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
	//       {description : "Page number", minimum : 1, maximum : 1000}
	// ];
	// int32 page_size = 2 [
	//   (validate.rules).int32 = {gte : 10, lte : 200},
	//   (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
	//       {description : "Items per page", minimum : 10, maximum : 200}
	// ];
	SortBy    string    `protobuf:"bytes,1,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder SortOrder `protobuf:"varint,2,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
	// scopes must be subset of the scopes of parent.
	Scopes      []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Editor      string   `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	ProductName string   `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
}

func (x *GetUnderusageByEditorRequest) Reset() {
	*x = GetUnderusageByEditorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnderusageByEditorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnderusageByEditorRequest) ProtoMessage() {}

func (x *GetUnderusageByEditorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnderusageByEditorRequest.ProtoReflect.Descriptor instead.
func (*GetUnderusageByEditorRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{171}
}

func (x *GetUnderusageByEditorRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *GetUnderusageByEditorRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

func (x *GetUnderusageByEditorRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GetUnderusageByEditorRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *GetUnderusageByEditorRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

type GetUnderusageByEditorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//int32 totalRecords = 1;
	UnderusageByEditorData []*UnderusageByEditorData `protobuf:"bytes,2,rep,name=UnderusageByEditorData,proto3" json:"UnderusageByEditorData,omitempty"`
}

func (x *GetUnderusageByEditorResponse) Reset() {
	*x = GetUnderusageByEditorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnderusageByEditorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnderusageByEditorResponse) ProtoMessage() {}

func (x *GetUnderusageByEditorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnderusageByEditorResponse.ProtoReflect.Descriptor instead.
func (*GetUnderusageByEditorResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{172}
}

func (x *GetUnderusageByEditorResponse) GetUnderusageByEditorData() []*UnderusageByEditorData {
	if x != nil {
		return x.UnderusageByEditorData
	}
	return nil
}

type UnderusageByEditorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope         string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Metrics       string `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	DeltaNumber   int64  `protobuf:"varint,3,opt,name=delta_number,json=deltaNumber,proto3" json:"delta_number,omitempty"`
	ProductName   string `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	IsAggregation bool   `protobuf:"varint,5,opt,name=is_aggregation,json=isAggregation,proto3" json:"is_aggregation,omitempty"`
}

func (x *UnderusageByEditorData) Reset() {
	*x = UnderusageByEditorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnderusageByEditorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnderusageByEditorData) ProtoMessage() {}

func (x *UnderusageByEditorData) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnderusageByEditorData.ProtoReflect.Descriptor instead.
func (*UnderusageByEditorData) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{173}
}

func (x *UnderusageByEditorData) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnderusageByEditorData) GetMetrics() string {
	if x != nil {
		return x.Metrics
	}
	return ""
}

func (x *UnderusageByEditorData) GetDeltaNumber() int64 {
	if x != nil {
		return x.DeltaNumber
	}
	return 0
}

func (x *UnderusageByEditorData) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *UnderusageByEditorData) GetIsAggregation() bool {
	if x != nil {
		return x.IsAggregation
	}
	return false
}

type ListNominativeUsersFileUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Scope     string    `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	PageNum   int32     `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize  int32     `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortBy    string    `protobuf:"bytes,5,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder SortOrder `protobuf:"varint,6,opt,name=sort_order,json=sortOrder,proto3,enum=optisam.products.v1.SortOrder" json:"sort_order,omitempty"`
}

func (x *ListNominativeUsersFileUploadRequest) Reset() {
	*x = ListNominativeUsersFileUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNominativeUsersFileUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNominativeUsersFileUploadRequest) ProtoMessage() {}

func (x *ListNominativeUsersFileUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNominativeUsersFileUploadRequest.ProtoReflect.Descriptor instead.
func (*ListNominativeUsersFileUploadRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{174}
}

func (x *ListNominativeUsersFileUploadRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListNominativeUsersFileUploadRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListNominativeUsersFileUploadRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListNominativeUsersFileUploadRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNominativeUsersFileUploadRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListNominativeUsersFileUploadRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_asc
}

type ListNominativeUsersFileUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       int32                            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	FileDetails []*ListNominativeUsersFileUpload `protobuf:"bytes,2,rep,name=file_details,json=fileDetails,proto3" json:"file_details,omitempty"`
}

func (x *ListNominativeUsersFileUploadResponse) Reset() {
	*x = ListNominativeUsersFileUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNominativeUsersFileUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNominativeUsersFileUploadResponse) ProtoMessage() {}

func (x *ListNominativeUsersFileUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNominativeUsersFileUploadResponse.ProtoReflect.Descriptor instead.
func (*ListNominativeUsersFileUploadResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{175}
}

func (x *ListNominativeUsersFileUploadResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListNominativeUsersFileUploadResponse) GetFileDetails() []*ListNominativeUsersFileUpload {
	if x != nil {
		return x.FileDetails
	}
	return nil
}

type ListNominativeUsersFileUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Scope                  string                   `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	Swidtag                string                   `protobuf:"bytes,3,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	AggregationsId         int32                    `protobuf:"varint,4,opt,name=aggregations_id,json=aggregationsId,proto3" json:"aggregations_id,omitempty"`
	ProductEditor          string                   `protobuf:"bytes,5,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	UploadedBy             string                   `protobuf:"bytes,6,opt,name=uploaded_by,json=uploadedBy,proto3" json:"uploaded_by,omitempty"`
	NominativeUsersDetails []*NominativeUserDetails `protobuf:"bytes,7,rep,name=nominative_users_details,json=nominativeUsersDetails,proto3" json:"nominative_users_details,omitempty"`
	RecordSucceed          int32                    `protobuf:"varint,8,opt,name=record_succeed,json=recordSucceed,proto3" json:"record_succeed,omitempty"`
	RecordFailed           int32                    `protobuf:"varint,9,opt,name=record_failed,json=recordFailed,proto3" json:"record_failed,omitempty"`
	FileName               string                   `protobuf:"bytes,10,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	SheetName              string                   `protobuf:"bytes,11,opt,name=sheet_name,json=sheetName,proto3" json:"sheet_name,omitempty"`
	FileStatus             string                   `protobuf:"bytes,12,opt,name=file_status,json=fileStatus,proto3" json:"file_status,omitempty"`
	UploadedAt             *timestamp.Timestamp     `protobuf:"bytes,13,opt,name=uploaded_at,json=uploadedAt,proto3" json:"uploaded_at,omitempty"`
	UploadId               string                   `protobuf:"bytes,14,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	ProductName            string                   `protobuf:"bytes,15,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductVersion         string                   `protobuf:"bytes,16,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
	AggregationName        string                   `protobuf:"bytes,17,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	Name                   string                   `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	Type                   string                   `protobuf:"bytes,19,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ListNominativeUsersFileUpload) Reset() {
	*x = ListNominativeUsersFileUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNominativeUsersFileUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNominativeUsersFileUpload) ProtoMessage() {}

func (x *ListNominativeUsersFileUpload) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNominativeUsersFileUpload.ProtoReflect.Descriptor instead.
func (*ListNominativeUsersFileUpload) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{176}
}

func (x *ListNominativeUsersFileUpload) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListNominativeUsersFileUpload) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetAggregationsId() int32 {
	if x != nil {
		return x.AggregationsId
	}
	return 0
}

func (x *ListNominativeUsersFileUpload) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetUploadedBy() string {
	if x != nil {
		return x.UploadedBy
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetNominativeUsersDetails() []*NominativeUserDetails {
	if x != nil {
		return x.NominativeUsersDetails
	}
	return nil
}

func (x *ListNominativeUsersFileUpload) GetRecordSucceed() int32 {
	if x != nil {
		return x.RecordSucceed
	}
	return 0
}

func (x *ListNominativeUsersFileUpload) GetRecordFailed() int32 {
	if x != nil {
		return x.RecordFailed
	}
	return 0
}

func (x *ListNominativeUsersFileUpload) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetSheetName() string {
	if x != nil {
		return x.SheetName
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetFileStatus() string {
	if x != nil {
		return x.FileStatus
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetUploadedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UploadedAt
	}
	return nil
}

func (x *ListNominativeUsersFileUpload) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetProductVersion() string {
	if x != nil {
		return x.ProductVersion
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListNominativeUsersFileUpload) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type EditorExpensesByScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *EditorExpensesByScopeRequest) Reset() {
	*x = EditorExpensesByScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditorExpensesByScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorExpensesByScopeRequest) ProtoMessage() {}

func (x *EditorExpensesByScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorExpensesByScopeRequest.ProtoReflect.Descriptor instead.
func (*EditorExpensesByScopeRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{177}
}

func (x *EditorExpensesByScopeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type EditorExpensesByScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditorExpensesByScope []*EditorExpensesByScopeData `protobuf:"bytes,1,rep,name=editorExpensesByScope,proto3" json:"editorExpensesByScope,omitempty"`
}

func (x *EditorExpensesByScopeResponse) Reset() {
	*x = EditorExpensesByScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditorExpensesByScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorExpensesByScopeResponse) ProtoMessage() {}

func (x *EditorExpensesByScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorExpensesByScopeResponse.ProtoReflect.Descriptor instead.
func (*EditorExpensesByScopeResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{178}
}

func (x *EditorExpensesByScopeResponse) GetEditorExpensesByScope() []*EditorExpensesByScopeData {
	if x != nil {
		return x.EditorExpensesByScope
	}
	return nil
}

type EditorExpensesByScopeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditorName           string  `protobuf:"bytes,1,opt,name=editor_name,json=editorName,proto3" json:"editor_name,omitempty"`
	TotalPurchaseCost    float64 `protobuf:"fixed64,2,opt,name=total_purchase_cost,json=totalPurchaseCost,proto3" json:"total_purchase_cost,omitempty"`
	TotalMaintenanceCost float64 `protobuf:"fixed64,3,opt,name=total_maintenance_cost,json=totalMaintenanceCost,proto3" json:"total_maintenance_cost,omitempty"`
	TotalCost            float64 `protobuf:"fixed64,4,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
}

func (x *EditorExpensesByScopeData) Reset() {
	*x = EditorExpensesByScopeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditorExpensesByScopeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorExpensesByScopeData) ProtoMessage() {}

func (x *EditorExpensesByScopeData) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorExpensesByScopeData.ProtoReflect.Descriptor instead.
func (*EditorExpensesByScopeData) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{179}
}

func (x *EditorExpensesByScopeData) GetEditorName() string {
	if x != nil {
		return x.EditorName
	}
	return ""
}

func (x *EditorExpensesByScopeData) GetTotalPurchaseCost() float64 {
	if x != nil {
		return x.TotalPurchaseCost
	}
	return 0
}

func (x *EditorExpensesByScopeData) GetTotalMaintenanceCost() float64 {
	if x != nil {
		return x.TotalMaintenanceCost
	}
	return 0
}

func (x *EditorExpensesByScopeData) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

type EditorProductsExpensesByScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Editor string `protobuf:"bytes,2,opt,name=editor,proto3" json:"editor,omitempty"`
}

func (x *EditorProductsExpensesByScopeRequest) Reset() {
	*x = EditorProductsExpensesByScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditorProductsExpensesByScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorProductsExpensesByScopeRequest) ProtoMessage() {}

func (x *EditorProductsExpensesByScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorProductsExpensesByScopeRequest.ProtoReflect.Descriptor instead.
func (*EditorProductsExpensesByScopeRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{180}
}

func (x *EditorProductsExpensesByScopeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *EditorProductsExpensesByScopeRequest) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

type EditorProductExpensesByScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditorProductExpensesByScope []*EditorProductExpensesByScopeData `protobuf:"bytes,1,rep,name=editorProductExpensesByScope,proto3" json:"editorProductExpensesByScope,omitempty"`
}

func (x *EditorProductExpensesByScopeResponse) Reset() {
	*x = EditorProductExpensesByScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditorProductExpensesByScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorProductExpensesByScopeResponse) ProtoMessage() {}

func (x *EditorProductExpensesByScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorProductExpensesByScopeResponse.ProtoReflect.Descriptor instead.
func (*EditorProductExpensesByScopeResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{181}
}

func (x *EditorProductExpensesByScopeResponse) GetEditorProductExpensesByScope() []*EditorProductExpensesByScopeData {
	if x != nil {
		return x.EditorProductExpensesByScope
	}
	return nil
}

type EditorProductExpensesByScopeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TotalPurchaseCost    float64 `protobuf:"fixed64,2,opt,name=total_purchase_cost,json=totalPurchaseCost,proto3" json:"total_purchase_cost,omitempty"`
	TotalMaintenanceCost float64 `protobuf:"fixed64,3,opt,name=total_maintenance_cost,json=totalMaintenanceCost,proto3" json:"total_maintenance_cost,omitempty"`
	TotalCost            float64 `protobuf:"fixed64,4,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	Type                 string  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *EditorProductExpensesByScopeData) Reset() {
	*x = EditorProductExpensesByScopeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditorProductExpensesByScopeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorProductExpensesByScopeData) ProtoMessage() {}

func (x *EditorProductExpensesByScopeData) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorProductExpensesByScopeData.ProtoReflect.Descriptor instead.
func (*EditorProductExpensesByScopeData) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{182}
}

func (x *EditorProductExpensesByScopeData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EditorProductExpensesByScopeData) GetTotalPurchaseCost() float64 {
	if x != nil {
		return x.TotalPurchaseCost
	}
	return 0
}

func (x *EditorProductExpensesByScopeData) GetTotalMaintenanceCost() float64 {
	if x != nil {
		return x.TotalMaintenanceCost
	}
	return 0
}

func (x *EditorProductExpensesByScopeData) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *EditorProductExpensesByScopeData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetDeploymentTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetDeploymentTypeRequest) Reset() {
	*x = GetDeploymentTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentTypeRequest) ProtoMessage() {}

func (x *GetDeploymentTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentTypeRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentTypeRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{183}
}

func (x *GetDeploymentTypeRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetDeploymentTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaasPercentage      float64 `protobuf:"fixed64,1,opt,name=saas_percentage,json=saasPercentage,proto3" json:"saas_percentage,omitempty"`
	OnPremisePercentage float64 `protobuf:"fixed64,2,opt,name=on_premise_percentage,json=onPremisePercentage,proto3" json:"on_premise_percentage,omitempty"`
}

func (x *GetDeploymentTypeResponse) Reset() {
	*x = GetDeploymentTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentTypeResponse) ProtoMessage() {}

func (x *GetDeploymentTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentTypeResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentTypeResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{184}
}

func (x *GetDeploymentTypeResponse) GetSaasPercentage() float64 {
	if x != nil {
		return x.SaasPercentage
	}
	return 0
}

func (x *GetDeploymentTypeResponse) GetOnPremisePercentage() float64 {
	if x != nil {
		return x.OnPremisePercentage
	}
	return 0
}

type GetAggregationByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationId int32  `protobuf:"varint,1,opt,name=aggregation_id,json=aggregationId,proto3" json:"aggregation_id,omitempty"`
	Scope         string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetAggregationByIdRequest) Reset() {
	*x = GetAggregationByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationByIdRequest) ProtoMessage() {}

func (x *GetAggregationByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationByIdRequest.ProtoReflect.Descriptor instead.
func (*GetAggregationByIdRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{185}
}

func (x *GetAggregationByIdRequest) GetAggregationId() int32 {
	if x != nil {
		return x.AggregationId
	}
	return 0
}

func (x *GetAggregationByIdRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetAggregationByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AggregationName string               `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
	Scope           string               `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	ProductEditor   string               `protobuf:"bytes,4,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	Products        []string             `protobuf:"bytes,5,rep,name=products,proto3" json:"products,omitempty"`
	Swidtags        []string             `protobuf:"bytes,6,rep,name=swidtags,proto3" json:"swidtags,omitempty"`
	CreatedOn       *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	CreatedBy       string               `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedOn       *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updated_on,json=updatedOn,proto3" json:"updated_on,omitempty"`
	UpdatedBy       string               `protobuf:"bytes,10,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *GetAggregationByIdResponse) Reset() {
	*x = GetAggregationByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationByIdResponse) ProtoMessage() {}

func (x *GetAggregationByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationByIdResponse.ProtoReflect.Descriptor instead.
func (*GetAggregationByIdResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{186}
}

func (x *GetAggregationByIdResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetAggregationByIdResponse) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *GetAggregationByIdResponse) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetAggregationByIdResponse) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *GetAggregationByIdResponse) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *GetAggregationByIdResponse) GetSwidtags() []string {
	if x != nil {
		return x.Swidtags
	}
	return nil
}

func (x *GetAggregationByIdResponse) GetCreatedOn() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *GetAggregationByIdResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *GetAggregationByIdResponse) GetUpdatedOn() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedOn
	}
	return nil
}

func (x *GetAggregationByIdResponse) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type GetProductInformationBySwidTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag string `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetProductInformationBySwidTagRequest) Reset() {
	*x = GetProductInformationBySwidTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductInformationBySwidTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductInformationBySwidTagRequest) ProtoMessage() {}

func (x *GetProductInformationBySwidTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductInformationBySwidTagRequest.ProtoReflect.Descriptor instead.
func (*GetProductInformationBySwidTagRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{187}
}

func (x *GetProductInformationBySwidTagRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *GetProductInformationBySwidTagRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetProductInformationBySwidTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swidtag           string   `protobuf:"bytes,1,opt,name=swidtag,proto3" json:"swidtag,omitempty"`
	ProductName       string   `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductEditor     string   `protobuf:"bytes,3,opt,name=product_editor,json=productEditor,proto3" json:"product_editor,omitempty"`
	ProductVersion    string   `protobuf:"bytes,4,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
	Metrics           []string `protobuf:"bytes,5,rep,name=metrics,proto3" json:"metrics,omitempty"`
	NumOfApplications int32    `protobuf:"varint,6,opt,name=num_of_applications,json=numOfApplications,proto3" json:"num_of_applications,omitempty"`
	NumOfEquipments   int32    `protobuf:"varint,7,opt,name=num_of_equipments,json=numOfEquipments,proto3" json:"num_of_equipments,omitempty"`
}

func (x *GetProductInformationBySwidTagResponse) Reset() {
	*x = GetProductInformationBySwidTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductInformationBySwidTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductInformationBySwidTagResponse) ProtoMessage() {}

func (x *GetProductInformationBySwidTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductInformationBySwidTagResponse.ProtoReflect.Descriptor instead.
func (*GetProductInformationBySwidTagResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{188}
}

func (x *GetProductInformationBySwidTagResponse) GetSwidtag() string {
	if x != nil {
		return x.Swidtag
	}
	return ""
}

func (x *GetProductInformationBySwidTagResponse) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *GetProductInformationBySwidTagResponse) GetProductEditor() string {
	if x != nil {
		return x.ProductEditor
	}
	return ""
}

func (x *GetProductInformationBySwidTagResponse) GetProductVersion() string {
	if x != nil {
		return x.ProductVersion
	}
	return ""
}

func (x *GetProductInformationBySwidTagResponse) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GetProductInformationBySwidTagResponse) GetNumOfApplications() int32 {
	if x != nil {
		return x.NumOfApplications
	}
	return 0
}

func (x *GetProductInformationBySwidTagResponse) GetNumOfEquipments() int32 {
	if x != nil {
		return x.NumOfEquipments
	}
	return 0
}

type UpdateNominativeUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordSucceed      []*NominativeUser `protobuf:"bytes,1,rep,name=record_succeed,json=recordSucceed,proto3" json:"record_succeed,omitempty"`
	RecordFailed       []*NominativeUser `protobuf:"bytes,2,rep,name=record_failed,json=recordFailed,proto3" json:"record_failed,omitempty"`
	TotalDgraphBatches int32             `protobuf:"varint,3,opt,name=total_dgraph_batches,json=totalDgraphBatches,proto3" json:"total_dgraph_batches,omitempty"`
	UploadId           string            `protobuf:"bytes,4,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
}

func (x *UpdateNominativeUserRequest) Reset() {
	*x = UpdateNominativeUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNominativeUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNominativeUserRequest) ProtoMessage() {}

func (x *UpdateNominativeUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNominativeUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateNominativeUserRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{189}
}

func (x *UpdateNominativeUserRequest) GetRecordSucceed() []*NominativeUser {
	if x != nil {
		return x.RecordSucceed
	}
	return nil
}

func (x *UpdateNominativeUserRequest) GetRecordFailed() []*NominativeUser {
	if x != nil {
		return x.RecordFailed
	}
	return nil
}

func (x *UpdateNominativeUserRequest) GetTotalDgraphBatches() int32 {
	if x != nil {
		return x.TotalDgraphBatches
	}
	return 0
}

func (x *UpdateNominativeUserRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

type DeadLetterQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error     string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeadLetterQueue) Reset() {
	*x = DeadLetterQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeadLetterQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeadLetterQueue) ProtoMessage() {}

func (x *DeadLetterQueue) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeadLetterQueue.ProtoReflect.Descriptor instead.
func (*DeadLetterQueue) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{190}
}

func (x *DeadLetterQueue) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *DeadLetterQueue) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeadLetterQueue) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type UpdatePostgresBatchSucessNomUSers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	UploadId string `protobuf:"bytes,2,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	Scope    string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *UpdatePostgresBatchSucessNomUSers) Reset() {
	*x = UpdatePostgresBatchSucessNomUSers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePostgresBatchSucessNomUSers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePostgresBatchSucessNomUSers) ProtoMessage() {}

func (x *UpdatePostgresBatchSucessNomUSers) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePostgresBatchSucessNomUSers.ProtoReflect.Descriptor instead.
func (*UpdatePostgresBatchSucessNomUSers) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{191}
}

func (x *UpdatePostgresBatchSucessNomUSers) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdatePostgresBatchSucessNomUSers) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *UpdatePostgresBatchSucessNomUSers) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type UpdateDgraphBatchSuccessCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	UploadId string `protobuf:"bytes,2,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	Scope    string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *UpdateDgraphBatchSuccessCount) Reset() {
	*x = UpdateDgraphBatchSuccessCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDgraphBatchSuccessCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDgraphBatchSuccessCount) ProtoMessage() {}

func (x *UpdateDgraphBatchSuccessCount) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDgraphBatchSuccessCount.ProtoReflect.Descriptor instead.
func (*UpdateDgraphBatchSuccessCount) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{192}
}

func (x *UpdateDgraphBatchSuccessCount) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateDgraphBatchSuccessCount) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *UpdateDgraphBatchSuccessCount) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type UpdateSharedLicensesRequest_SharedLicenses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecieverScope  string `protobuf:"bytes,1,opt,name=reciever_scope,json=recieverScope,proto3" json:"reciever_scope,omitempty"`
	SharedLicenses int32  `protobuf:"varint,2,opt,name=shared_licenses,json=sharedLicenses,proto3" json:"shared_licenses,omitempty"`
}

func (x *UpdateSharedLicensesRequest_SharedLicenses) Reset() {
	*x = UpdateSharedLicensesRequest_SharedLicenses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSharedLicensesRequest_SharedLicenses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSharedLicensesRequest_SharedLicenses) ProtoMessage() {}

func (x *UpdateSharedLicensesRequest_SharedLicenses) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSharedLicensesRequest_SharedLicenses.ProtoReflect.Descriptor instead.
func (*UpdateSharedLicensesRequest_SharedLicenses) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{16, 0}
}

func (x *UpdateSharedLicensesRequest_SharedLicenses) GetRecieverScope() string {
	if x != nil {
		return x.RecieverScope
	}
	return ""
}

func (x *UpdateSharedLicensesRequest_SharedLicenses) GetSharedLicenses() int32 {
	if x != nil {
		return x.SharedLicenses
	}
	return 0
}

type UpdateAggrightsSharedLicensesRequest_SharedLicenses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecieverScope  string `protobuf:"bytes,1,opt,name=reciever_scope,json=recieverScope,proto3" json:"reciever_scope,omitempty"`
	SharedLicenses int32  `protobuf:"varint,2,opt,name=shared_licenses,json=sharedLicenses,proto3" json:"shared_licenses,omitempty"`
}

func (x *UpdateAggrightsSharedLicensesRequest_SharedLicenses) Reset() {
	*x = UpdateAggrightsSharedLicensesRequest_SharedLicenses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAggrightsSharedLicensesRequest_SharedLicenses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAggrightsSharedLicensesRequest_SharedLicenses) ProtoMessage() {}

func (x *UpdateAggrightsSharedLicensesRequest_SharedLicenses) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAggrightsSharedLicensesRequest_SharedLicenses.ProtoReflect.Descriptor instead.
func (*UpdateAggrightsSharedLicensesRequest_SharedLicenses) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{17, 0}
}

func (x *UpdateAggrightsSharedLicensesRequest_SharedLicenses) GetRecieverScope() string {
	if x != nil {
		return x.RecieverScope
	}
	return ""
}

func (x *UpdateAggrightsSharedLicensesRequest_SharedLicenses) GetSharedLicenses() int32 {
	if x != nil {
		return x.SharedLicenses
	}
	return 0
}

type GetProductCountByAppResponseApplications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	NumOfProducts int64  `protobuf:"varint,2,opt,name=num_of_products,json=numOfProducts,proto3" json:"num_of_products,omitempty"`
}

func (x *GetProductCountByAppResponseApplications) Reset() {
	*x = GetProductCountByAppResponseApplications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductCountByAppResponseApplications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductCountByAppResponseApplications) ProtoMessage() {}

func (x *GetProductCountByAppResponseApplications) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductCountByAppResponseApplications.ProtoReflect.Descriptor instead.
func (*GetProductCountByAppResponseApplications) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{20, 0}
}

func (x *GetProductCountByAppResponseApplications) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *GetProductCountByAppResponseApplications) GetNumOfProducts() int64 {
	if x != nil {
		return x.NumOfProducts
	}
	return 0
}

type UpsertProductRequestApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation     string   `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	ApplicationId []string `protobuf:"bytes,2,rep,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *UpsertProductRequestApplication) Reset() {
	*x = UpsertProductRequestApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProductRequestApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProductRequestApplication) ProtoMessage() {}

func (x *UpsertProductRequestApplication) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProductRequestApplication.ProtoReflect.Descriptor instead.
func (*UpsertProductRequestApplication) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{93, 0}
}

func (x *UpsertProductRequestApplication) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *UpsertProductRequestApplication) GetApplicationId() []string {
	if x != nil {
		return x.ApplicationId
	}
	return nil
}

type UpsertProductRequestEquipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation      string                                        `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Equipmentusers []*UpsertProductRequestEquipmentEquipmentuser `protobuf:"bytes,2,rep,name=equipmentusers,proto3" json:"equipmentusers,omitempty"`
}

func (x *UpsertProductRequestEquipment) Reset() {
	*x = UpsertProductRequestEquipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProductRequestEquipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProductRequestEquipment) ProtoMessage() {}

func (x *UpsertProductRequestEquipment) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProductRequestEquipment.ProtoReflect.Descriptor instead.
func (*UpsertProductRequestEquipment) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{93, 1}
}

func (x *UpsertProductRequestEquipment) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *UpsertProductRequestEquipment) GetEquipmentusers() []*UpsertProductRequestEquipmentEquipmentuser {
	if x != nil {
		return x.Equipmentusers
	}
	return nil
}

type UpsertProductRequestEquipmentEquipmentuser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentId      string `protobuf:"bytes,1,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	AllocatedMetrics string `protobuf:"bytes,2,opt,name=allocated_metrics,json=allocatedMetrics,proto3" json:"allocated_metrics,omitempty"`
	AllocatedUsers   int32  `protobuf:"varint,3,opt,name=allocated_users,json=allocatedUsers,proto3" json:"allocated_users,omitempty"`
}

func (x *UpsertProductRequestEquipmentEquipmentuser) Reset() {
	*x = UpsertProductRequestEquipmentEquipmentuser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProductRequestEquipmentEquipmentuser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProductRequestEquipmentEquipmentuser) ProtoMessage() {}

func (x *UpsertProductRequestEquipmentEquipmentuser) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProductRequestEquipmentEquipmentuser.ProtoReflect.Descriptor instead.
func (*UpsertProductRequestEquipmentEquipmentuser) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{93, 1, 0}
}

func (x *UpsertProductRequestEquipmentEquipmentuser) GetEquipmentId() string {
	if x != nil {
		return x.EquipmentId
	}
	return ""
}

func (x *UpsertProductRequestEquipmentEquipmentuser) GetAllocatedMetrics() string {
	if x != nil {
		return x.AllocatedMetrics
	}
	return ""
}

func (x *UpsertProductRequestEquipmentEquipmentuser) GetAllocatedUsers() int32 {
	if x != nil {
		return x.AllocatedUsers
	}
	return 0
}

var File_product_proto protoreflect.FileDescriptor

var file_product_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10,
	0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x65,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x63, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x79, 0x53, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33,
	0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x71, 0x73, 0x6b, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x71, 0x73,
	0x6b, 0x75, 0x22, 0x3b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x53, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b,
	0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x22, 0x2b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x71, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x20,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10,
	0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x22, 0x3c, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x94,
	0x01, 0x0a, 0x1d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x20, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12,
	0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d,
	0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x1e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72,
	0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x22, 0xae, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42,
	0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c,
	0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73,
	0x74, 0x22, 0x48, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09,
	0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x15,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b,
	0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x45, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b,
	0x75, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x11, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3b, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x22, 0xbe, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x6b, 0x75, 0x12, 0x62, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62,
	0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x1a, 0x7e, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10,
	0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62,
	0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28,
	0x00, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x22, 0xfb, 0x02, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x6b, 0x0a, 0x0c,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x67, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x0b, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32,
	0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x7e, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e,
	0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52,
	0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x22,
	0x38, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x48, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c,
	0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x5d, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x66,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x22, 0x49, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xa3, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x90, 0x01, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x71, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x09,
	0x61, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x09, 0x61, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x29, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c,
	0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x79, 0x0a, 0x2b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e,
	0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x2c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e,
	0x75, 0x6d, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42,
	0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c,
	0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64,
	0x54, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54,
	0x61, 0x67, 0x22, 0x43, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72,
	0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x73, 0x0a, 0x1b, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52,
	0x03, 0x73, 0x6b, 0x75, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0x3b, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72,
	0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e,
	0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c,
	0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x7b, 0x0a, 0x23, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73, 0x6b,
	0x75, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x24,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x4c, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0xfe, 0x01, 0x0a, 0x25, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32,
	0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0xba, 0x01, 0x0a, 0x23, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c,
	0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x3c, 0x0a,
	0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x42, 0x0a, 0x26, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3f,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x71, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x52, 0x03, 0x43,
	0x45, 0x54, 0x52, 0x03, 0x49, 0x53, 0x54, 0x52, 0x04, 0x43, 0x45, 0x53, 0x54, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c,
	0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6e, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xc8, 0x08, 0x0a,
	0x0f, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x3f, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x32, 0x15, 0x5e, 0x5b, 0x5c, 0x73, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x28, 0x29, 0x2e, 0x2b, 0x2d, 0x5d, 0x2b, 0x24, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0xfa, 0x42, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x5c, 0x73, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6f,
	0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28,
	0x00, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x1a, 0x61, 0x76,
	0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e,
	0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x17,
	0x61, 0x76, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10,
	0x52, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x1b,
	0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x19, 0x63, 0x6f, 0x72, 0x70,
	0x6f, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x10, 0x41, 0x63, 0x71, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf4, 0x02, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x32,
	0x12, 0x5e, 0x5b, 0x5c, 0x73, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x2d,
	0x5d, 0x2b, 0x24, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x08, 0x01, 0xfa, 0x42, 0x1e, 0x92, 0x01, 0x1b, 0x22, 0x19, 0x72, 0x17, 0x32, 0x15, 0x5e,
	0x5b, 0x5c, 0x73, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x28, 0x29, 0x2e, 0x2b,
	0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08,
	0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x55, 0x0a, 0x07,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0xe0, 0x07, 0x0a, 0x17, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x15, 0x6e,
	0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x00, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x52, 0x0c, 0x61, 0x76, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e,
	0x64, 0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10,
	0x52, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00,
	0x52, 0x16, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x1a, 0x61, 0x76, 0x67, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42,
	0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x17, 0x61, 0x76,
	0x67, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x1b,
	0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x19, 0x63, 0x6f, 0x72, 0x70,
	0x6f, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x0d, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x73,
	0x6b, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32,
	0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2b,
	0x24, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0xfa, 0x42, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x5c, 0x73, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x08, 0x01, 0xfa, 0x42, 0x1e, 0x92, 0x01, 0x1b, 0x22, 0x19, 0x72, 0x17, 0x32, 0x15, 0x5e,
	0x5b, 0x5c, 0x73, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x28, 0x29, 0x2e, 0x2b,
	0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08,
	0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00,
	0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa,
	0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0c, 0x61,
	0x76, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4f, 0x66,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x18, 0x6e,
	0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4b,
	0x0a, 0x1a, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x52, 0x17, 0x61, 0x76, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x1a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e,
	0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x16, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09,
	0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x19, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22,
	0x34, 0x0a, 0x18, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a, 0x1d, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62,
	0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x22, 0x9a, 0x02, 0x0a, 0x1e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x20,
	0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x6e, 0x6f, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1d, 0x6e, 0x6f, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x4a,
	0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33,
	0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x1e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x23, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x20, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x26,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x23, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x65, 0x72, 0x63, 0x22, 0x56, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x65, 0x72, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x22, 0x4f, 0x0a,
	0x22, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d,
	0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x98,
	0x01, 0x0a, 0x23, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x6f, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x4a, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4e, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x22, 0x5e, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x18, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b,
	0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x22, 0x6b, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x10, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x0f, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x6a, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa,
	0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d,
	0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x6d, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b,
	0x75, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x61, 0x76, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75,
	0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x4b, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x5a,
	0x0a, 0x1d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33,
	0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x1e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x22, 0xf4, 0x04, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0xfa, 0x42,
	0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32, 0x0b, 0x50, 0x61, 0x67,
	0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f,
	0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xc8, 0x01,
	0x28, 0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x70, 0x65, 0x72,
	0x20, 0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x40, 0x69, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x60, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x0d,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x15,
	0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x6c, 0x0a,
	0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x10, 0x04, 0x22, 0xa0, 0x02, 0x0a, 0x29,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x77, 0x69,
	0x64, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x73,
	0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x99,
	0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0c, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8e, 0x03, 0x0a, 0x16, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77, 0x69,
	0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x77, 0x69,
	0x64, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x02, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75,
	0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e,
	0x75, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa,
	0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d,
	0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x18, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b,
	0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x22, 0x2f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12,
	0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d,
	0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0x56, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x4f, 0x66,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x77,
	0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x22, 0x99, 0x04, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0xfa, 0x42, 0x07,
	0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32, 0x0b, 0x50, 0x61, 0x67, 0x65,
	0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f, 0x40,
	0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xc8, 0x01, 0x28,
	0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20,
	0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x40, 0x69, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x96, 0x01, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x7d, 0xfa, 0x42, 0x7a, 0x72, 0x78, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x6f,
	0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x15,
	0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xd7, 0x03,
	0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54,
	0x61, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x77, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69,
	0x64, 0x54, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0xf2, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75,
	0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x64, 0x54, 0x61,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x22, 0x7d, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x01, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x6b, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x85, 0x07, 0x0a, 0x14,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62,
	0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x59, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x0a,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x66, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xfa, 0x42, 0x0f, 0x72, 0x0d, 0x52, 0x03,
	0x61, 0x64, 0x64, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0xb3, 0x02,
	0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xfa, 0x42, 0x0f, 0x72, 0x0d, 0x52, 0x03, 0x61, 0x64, 0x64, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a,
	0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x88, 0x01, 0x0a, 0x0d, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x22, 0x31, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x43, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x17,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x19, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x19, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x22, 0x60, 0x0a, 0x1b, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f,
	0x73, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x21, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x01, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c,
	0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x22, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x1f, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa,
	0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d,
	0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x20, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x12, 0x61, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xf9,
	0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x83, 0x02, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x73, 0x74,
	0x22, 0x9f, 0x01, 0x0a, 0x16, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x22, 0x49, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a,
	0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x61, 0x0a,
	0x1c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42,
	0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c,
	0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x73,
	0x74, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x73, 0x74,
	0x73, 0x22, 0x6f, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x18, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0xbb, 0x02, 0x0a, 0x19, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0, 0x08,
	0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03,
	0x73, 0x6b, 0x75, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73,
	0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61,
	0x76, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x61,
	0x76, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x61, 0x76, 0x67, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4f,
	0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x19,
	0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x1b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10,
	0x52, 0x19, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x10, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x13, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x10, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x33, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x8f, 0x06, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x2c, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32,
	0x0b, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x70, 0x65,
	0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x40, 0x69,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x01, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c,
	0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x4b, 0x55, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x57, 0x49, 0x44, 0x5f,
	0x54, 0x41, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x54, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x43, 0x45,
	0x4e, 0x53, 0x45, 0x53, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x56, 0x47, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x56, 0x47,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54,
	0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x09, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54,
	0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x44, 0x5f,
	0x4f, 0x46, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0c,
	0x12, 0x25, 0x0a, 0x21, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0d, 0x22, 0xda, 0x03, 0x0a, 0x15, 0x41, 0x63, 0x71, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x33,
	0x0a, 0x03, 0x53, 0x4b, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03,
	0x53, 0x4b, 0x55, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x43,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x4d,
	0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x10, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xfc, 0x0b, 0x0a, 0x09,
	0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x4b, 0x55,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x4b, 0x55, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x76, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x76, 0x67, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x61, 0x76,
	0x67, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f,
	0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x49, 0x0a, 0x21, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3f, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x77, 0x69,
	0x64, 0x54, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0a, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32,
	0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x65, 0x76,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69,
	0x65, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x99, 0x06, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x2c, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f,
	0x32, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07,
	0x1a, 0x05, 0x18, 0xc8, 0x01, 0x28, 0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x69, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x71, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0xb6, 0x02, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4b,
	0x55, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x47, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x55, 0x4d,
	0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x57, 0x49, 0x44, 0x54, 0x41, 0x47, 0x53, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e,
	0x53, 0x45, 0x53, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x07, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45,
	0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x50, 0x55, 0x52, 0x43,
	0x48, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x43, 0x45,
	0x4e, 0x53, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54,
	0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0e, 0x22, 0x94, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x4d, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xcf, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77,
	0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x77,
	0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x22, 0xa0, 0x03, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x03,
	0x53, 0x4b, 0x55, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x53, 0x4b,
	0x55, 0x12, 0x39, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x46, 0x0a, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x01, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62,
	0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x22, 0x72, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x0f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72,
	0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x88, 0x04, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01,
	0x92, 0x41, 0x1f, 0x32, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xf0, 0x3f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f,
	0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xc8, 0x01, 0x28, 0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x69, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a,
	0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x32, 0x0a,
	0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x10,
	0x01, 0x22, 0xb6, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0c,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42,
	0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c,
	0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c,
	0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0x38, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x22, 0x7c, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa,
	0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d,
	0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x02, 0x49, 0x44, 0x22, 0xd1, 0x01, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x10, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x93,
	0x01, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x16, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33,
	0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0c, 0xfa,
	0x42, 0x09, 0x82, 0x01, 0x06, 0x18, 0x00, 0x18, 0x01, 0x18, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x0e, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x43, 0x51, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55,
	0x4c, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x52, 0x4b, 0x10, 0x02, 0x22, 0x33,
	0x0a, 0x17, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x1a, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x1b,
	0x44, 0x72, 0x6f, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xfe, 0x03, 0x0a, 0x1a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10,
	0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x15, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x35, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb5, 0x04, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0xfa, 0x42, 0x07, 0x1a, 0x05,
	0x10, 0x90, 0x4e, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x69, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xc8, 0x01, 0x28, 0x0a, 0x92,
	0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61,
	0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x94,
	0x01, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x7b, 0xfa, 0x42, 0x78, 0x72, 0x76, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x54,
	0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b,
	0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x22, 0xfd, 0x04, 0x0a, 0x1a, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x43, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x22, 0x98, 0x03, 0x0a, 0x1c, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x8c, 0x01, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x73, 0xfa, 0x42, 0x70, 0x72, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x4c, 0x0a, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x9b, 0x01,
	0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0xca, 0x03, 0x0a, 0x14,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x94, 0x04, 0x0a, 0x0e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x43, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22,
	0x9e, 0x03, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77,
	0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x39, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xbc, 0x04, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0xfa, 0x42,
	0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07, 0x28, 0x01, 0x92, 0x41, 0x1f, 0x32, 0x0b, 0x50, 0x61, 0x67,
	0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f,
	0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xc8, 0x01,
	0x28, 0x0a, 0x92, 0x41, 0x22, 0x32, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x70, 0x65, 0x72,
	0x20, 0x70, 0x61, 0x67, 0x65, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x40, 0x69, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x93, 0x01, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x7a, 0xfa, 0x42, 0x77, 0x72, 0x75, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x54, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c,
	0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x03, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x72, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x59, 0xfa, 0x42, 0x56, 0x72, 0x54, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0d,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d,
	0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcf,
	0x04, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x44, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x3f, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x22, 0xac, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x22, 0x59, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x58, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62,
	0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x38, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x48, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77,
	0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x67, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x67, 0x67, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xeb, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x44, 0x61,
	0x79, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x73, 0x12, 0x65, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42,
	0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x22,
	0x82, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x6c, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x22, 0x58, 0x0a, 0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x22, 0xf1, 0x01, 0x0a,
	0x1d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x05, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x05, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x65, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x65, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x22, 0xd1, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x46, 0x65, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x65, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e,
	0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x35, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x45,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xfa,
	0x42, 0x20, 0x72, 0x1e, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb5, 0x01,
	0x0a, 0x16, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x03, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x10, 0xe8, 0x07,
	0x28, 0x01, 0x92, 0x41, 0x1f, 0x32, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xf0, 0x3f, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x4c, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x2f, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xc8, 0x01, 0x28, 0x0a, 0x92, 0x41, 0x22, 0x32,
	0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x59,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
	0x40, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x73, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0xfa, 0x42,
	0x57, 0x72, 0x55, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x79, 0x52,
	0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x94, 0x01, 0x0a, 0x25, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0xd8, 0x05, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74,
	0x61, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x64, 0x0a, 0x18, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x16, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x1c, 0x45,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72,
	0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xc1,
	0x01, 0x0a, 0x19, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x73, 0x74, 0x22, 0x69, 0x0a, 0x24, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e,
	0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x22, 0xa1, 0x01,
	0x0a, 0x24, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1c, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42,
	0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x1c, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x22, 0xcf, 0x01, 0x0a, 0x20, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33,
	0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x61, 0x61, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x73, 0x61, 0x61, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x80,
	0x03, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x4f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x58, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x77, 0x69, 0x64,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x77,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77,
	0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x26,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4f,
	0x66, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x67, 0x72, 0x61, 0x70, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x22, 0x60,
	0x0a, 0x0f, 0x44, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x70, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x6d,
	0x55, 0x53, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0x6c, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x2a, 0x1e, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x07, 0x0a,
	0x03, 0x61, 0x73, 0x63, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x10, 0x01,
	0x2a, 0x38, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x2a, 0x27, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x61, 0x61,
	0x73, 0x10, 0x01, 0x32, 0xe9, 0x63, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2d, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0xa6, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12,
	0xb2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x45,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x7d, 0x2f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x7b, 0x73,
	0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x7b, 0x73, 0x77, 0x69, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x7d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb7, 0x01, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x36, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x12, 0xb4, 0x01, 0x0a, 0x16, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xb2, 0x01,
	0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x41, 0x6e,
	0x64, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x63,
	0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x12, 0x9f, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22,
	0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb2, 0x01,
	0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x65, 0x69, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12,
	0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x65, 0x69, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0xbc, 0x01, 0x0a, 0x19, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x12, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0xb8, 0x01, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6f,
	0x76, 0x65, 0x72, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xc4, 0x01,
	0x0a, 0x1a, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x36, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x12, 0xbb, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0xb2,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x7d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x30, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa2, 0x01,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0xd5, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2c, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x58, 0x1a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x2b, 0x32,
	0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x12, 0xc8,
	0x01, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x38, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x7b,
	0x73, 0x6b, 0x75, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4e, 0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x26, 0x32, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x97, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0xb4, 0x01, 0x0a, 0x16,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0xb8, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x12, 0x32, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xca, 0x01,
	0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x6f, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x6e, 0x6f, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x44,
	0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x7d, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x44,
	0x72, 0x6f, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x71,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x71, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x99, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0xad, 0x01, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x48, 0x1a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x7b, 0x73, 0x6b, 0x75,
	0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x32, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xa9, 0x01, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x1a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xbc, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x67, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x1a, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61,
	0x67, 0x67, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x12, 0xa8, 0x01, 0x0a, 0x14, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x32,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12,
	0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xde, 0x01, 0x0a, 0x23,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x3f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x71, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0xda, 0x01, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x3e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x30, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xd1, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x45, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x3a,
	0x01, 0x2a, 0x5a, 0x24, 0x1a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x2f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xb2, 0x01, 0x0a,
	0x14, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0xa7, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xab, 0x01,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa1, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0xbc, 0x01, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0xc3,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0xb6, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48, 0x69, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48, 0x69, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x48, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x7d, 0x12, 0xba, 0x01,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0xca, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x39, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12,
	0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0xb4, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x79,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0xaf, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33,
	0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x12, 0xc9, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x3a, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x77, 0x69, 0x64, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x73,
	0x77, 0x69, 0x64, 0x74, 0x61, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x53, 0x77, 0x69, 0x64, 0x74,
	0x61, 0x67, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x53, 0x77, 0x69, 0x64, 0x74, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x53, 0x77,
	0x69, 0x64, 0x74, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x36, 0x5a, 0x34, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_product_proto_rawDescOnce sync.Once
	file_product_proto_rawDescData = file_product_proto_rawDesc
)

func file_product_proto_rawDescGZIP() []byte {
	file_product_proto_rawDescOnce.Do(func() {
		file_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_product_proto_rawDescData)
	})
	return file_product_proto_rawDescData
}

var file_product_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_product_proto_msgTypes = make([]protoimpl.MessageInfo, 199)
var file_product_proto_goTypes = []interface{}{
	(SortOrder)(0),   // 0: optisam.products.v1.SortOrder
	(DataTypes)(0),   // 1: optisam.products.v1.DataTypes
	(Producttype)(0), // 2: optisam.products.v1.producttype
	(ListProductAggregationViewRequest_SortBy)(0),               // 3: optisam.products.v1.ListProductAggregationViewRequest.SortBy
	(ListAcqRightsRequest_SortBy)(0),                            // 4: optisam.products.v1.ListAcqRightsRequest.SortBy
	(ListAggregatedAcqRightsRequest_SortBy)(0),                  // 5: optisam.products.v1.ListAggregatedAcqRightsRequest.SortBy
	(ListAggregationsRequest_SortBy)(0),                         // 6: optisam.products.v1.ListAggregationsRequest.SortBy
	(DropProductDataRequestDeletionTypes)(0),                    // 7: optisam.products.v1.DropProductDataRequest.deletion_types
	(*DeleteSharedLicensesRequest)(nil),                         // 8: optisam.products.v1.DeleteSharedLicensesRequest
	(*DeleteSharedLicensesResponse)(nil),                        // 9: optisam.products.v1.DeleteSharedLicensesResponse
	(*GetMaintenanceBySwidtagRequest)(nil),                      // 10: optisam.products.v1.GetMaintenanceBySwidtagRequest
	(*GetMaintenanceBySwidtagResponse)(nil),                     // 11: optisam.products.v1.GetMaintenanceBySwidtagResponse
	(*GetMetricRequest)(nil),                                    // 12: optisam.products.v1.GetMetricRequest
	(*GetMetricResponse)(nil),                                   // 13: optisam.products.v1.GetMetricResponse
	(*GetProductListByEditorRequest)(nil),                       // 14: optisam.products.v1.GetProductListByEditorRequest
	(*GetProductListByEditorResponse)(nil),                      // 15: optisam.products.v1.GetProductListByEditorResponse
	(*GroupComplianceProductRequest)(nil),                       // 16: optisam.products.v1.GroupComplianceProductRequest
	(*GroupComplianceProductResponse)(nil),                      // 17: optisam.products.v1.GroupComplianceProductResponse
	(*LicencesData)(nil),                                        // 18: optisam.products.v1.LicencesData
	(*CostData)(nil),                                            // 19: optisam.products.v1.CostData
	(*GetTotalSharedAmountRequest)(nil),                         // 20: optisam.products.v1.GetTotalSharedAmountRequest
	(*GetTotalSharedAmountResponse)(nil),                        // 21: optisam.products.v1.GetTotalSharedAmountResponse
	(*GetAvailableLicensesRequest)(nil),                         // 22: optisam.products.v1.GetAvailableLicensesRequest
	(*GetAvailableLicensesResponse)(nil),                        // 23: optisam.products.v1.GetAvailableLicensesResponse
	(*UpdateSharedLicensesRequest)(nil),                         // 24: optisam.products.v1.UpdateSharedLicensesRequest
	(*UpdateAggrightsSharedLicensesRequest)(nil),                // 25: optisam.products.v1.UpdateAggrightsSharedLicensesRequest
	(*UpdateSharedLicensesResponse)(nil),                        // 26: optisam.products.v1.UpdateSharedLicensesResponse
	(*GetProductCountByAppRequest)(nil),                         // 27: optisam.products.v1.GetProductCountByAppRequest
	(*GetProductCountByAppResponse)(nil),                        // 28: optisam.products.v1.GetProductCountByAppResponse
	(*GetApplicationsByProductRequest)(nil),                     // 29: optisam.products.v1.GetApplicationsByProductRequest
	(*GetApplicationsByProductResponse)(nil),                    // 30: optisam.products.v1.GetApplicationsByProductResponse
	(*GetAggregationAcqrightsExpandedViewRequest)(nil),          // 31: optisam.products.v1.GetAggregationAcqrightsExpandedViewRequest
	(*GetAggregationAcqrightsExpandedViewResponse)(nil),         // 32: optisam.products.v1.GetAggregationAcqrightsExpandedViewResponse
	(*GetAggregationProductsExpandedViewRequest)(nil),           // 33: optisam.products.v1.GetAggregationProductsExpandedViewRequest
	(*GetAggregationProductsExpandedViewResponse)(nil),          // 34: optisam.products.v1.GetAggregationProductsExpandedViewResponse
	(*ProductAggregationProductViewOptionsRequest)(nil),         // 35: optisam.products.v1.ProductAggregationProductViewOptionsRequest
	(*ProductAggregationProductViewOptionsResponse)(nil),        // 36: optisam.products.v1.ProductAggregationProductViewOptionsResponse
	(*GetEquipmentsByProductRequest)(nil),                       // 37: optisam.products.v1.GetEquipmentsByProductRequest
	(*GetEquipmentsByProductResponse)(nil),                      // 38: optisam.products.v1.GetEquipmentsByProductResponse
	(*DeleteAcqRightRequest)(nil),                               // 39: optisam.products.v1.DeleteAcqRightRequest
	(*DeleteAcqRightResponse)(nil),                              // 40: optisam.products.v1.DeleteAcqRightResponse
	(*DownloadAcqRightFileRequest)(nil),                         // 41: optisam.products.v1.DownloadAcqRightFileRequest
	(*DownloadAcqRightFileResponse)(nil),                        // 42: optisam.products.v1.DownloadAcqRightFileResponse
	(*DeleteAggregatedRightsRequest)(nil),                       // 43: optisam.products.v1.DeleteAggregatedRightsRequest
	(*DeleteAggregatedRightsResponse)(nil),                      // 44: optisam.products.v1.DeleteAggregatedRightsResponse
	(*DownloadAggregatedRightsFileRequest)(nil),                 // 45: optisam.products.v1.DownloadAggregatedRightsFileRequest
	(*DownloadAggregatedRightsFileResponse)(nil),                // 46: optisam.products.v1.DownloadAggregatedRightsFileResponse
	(*CreateDashboardUpdateJobRequest)(nil),                     // 47: optisam.products.v1.CreateDashboardUpdateJobRequest
	(*UpsertAllocateMetricEquipementRequest)(nil),               // 48: optisam.products.v1.UpsertAllocateMetricEquipementRequest
	(*DropAllocateMetricEquipementRequest)(nil),                 // 49: optisam.products.v1.DropAllocateMetricEquipementRequest
	(*CreateDashboardUpdateJobResponse)(nil),                    // 50: optisam.products.v1.CreateDashboardUpdateJobResponse
	(*UpsertAllocateMetricEquipementResponse)(nil),              // 51: optisam.products.v1.UpsertAllocateMetricEquipementResponse
	(*GetAllEditorsCatalogRequest)(nil),                         // 52: optisam.products.v1.GetAllEditorsCatalogRequest
	(*GetAllEditorsCatalogResponse)(nil),                        // 53: optisam.products.v1.GetAllEditorsCatalogResponse
	(*GetBannerRequest)(nil),                                    // 54: optisam.products.v1.GetBannerRequest
	(*GetBannerResponse)(nil),                                   // 55: optisam.products.v1.GetBannerResponse
	(*AcqRightRequest)(nil),                                     // 56: optisam.products.v1.AcqRightRequest
	(*AcqRightResponse)(nil),                                    // 57: optisam.products.v1.AcqRightResponse
	(*Aggregation)(nil),                                         // 58: optisam.products.v1.Aggregation
	(*Mapping)(nil),                                             // 59: optisam.products.v1.Mapping
	(*AggregationResponse)(nil),                                 // 60: optisam.products.v1.AggregationResponse
	(*AggregatedRightsRequest)(nil),                             // 61: optisam.products.v1.AggregatedRightsRequest
	(*AggregatedRightsView)(nil),                                // 62: optisam.products.v1.AggregatedRightsView
	(*AggregatedRightsResponse)(nil),                            // 63: optisam.products.v1.AggregatedRightsResponse
	(*OverviewProductQualityRequest)(nil),                       // 64: optisam.products.v1.OverviewProductQualityRequest
	(*OverviewProductQualityResponse)(nil),                      // 65: optisam.products.v1.OverviewProductQualityResponse
	(*ProductMaintenancePercRequest)(nil),                       // 66: optisam.products.v1.ProductMaintenancePercRequest
	(*ProductMaintenancePercResponse)(nil),                      // 67: optisam.products.v1.ProductMaintenancePercResponse
	(*ProductPerc)(nil),                                         // 68: optisam.products.v1.ProductPerc
	(*ProductNoMaintenanceDetailsRequest)(nil),                  // 69: optisam.products.v1.ProductNoMaintenanceDetailsRequest
	(*ProductNoMaintenanceDetailsResponse)(nil),                 // 70: optisam.products.v1.ProductNoMaintenanceDetailsResponse
	(*ProductNoMain)(nil),                                       // 71: optisam.products.v1.ProductNoMain
	(*ProductsPerEditorRequest)(nil),                            // 72: optisam.products.v1.ProductsPerEditorRequest
	(*ProductsPerEditorResponse)(nil),                           // 73: optisam.products.v1.ProductsPerEditorResponse
	(*GetRightsInfoByEditorRequest)(nil),                        // 74: optisam.products.v1.GetRightsInfoByEditorRequest
	(*GetRightsInfoByEditorResponse)(nil),                       // 75: optisam.products.v1.GetRightsInfoByEditorResponse
	(*RightsInfoByEditor)(nil),                                  // 76: optisam.products.v1.RightsInfoByEditor
	(*EditorProducts)(nil),                                      // 77: optisam.products.v1.EditorProducts
	(*AggregatedRightDetailsRequest)(nil),                       // 78: optisam.products.v1.AggregatedRightDetailsRequest
	(*AggregatedRightDetailsResponse)(nil),                      // 79: optisam.products.v1.AggregatedRightDetailsResponse
	(*ListProductAggregationViewRequest)(nil),                   // 80: optisam.products.v1.ListProductAggregationViewRequest
	(*ProductAggregationProductViewSearchParams)(nil),           // 81: optisam.products.v1.ProductAggregationProductViewSearchParams
	(*ListProductAggregationViewResponse)(nil),                  // 82: optisam.products.v1.ListProductAggregationViewResponse
	(*ProductAggregationView)(nil),                              // 83: optisam.products.v1.ProductAggregationView
	(*ProductAggRecord)(nil),                                    // 84: optisam.products.v1.ProductAggRecord
	(*ListDeployedAndAcquiredEditorsRequest)(nil),               // 85: optisam.products.v1.ListDeployedAndAcquiredEditorsRequest
	(*ListEditorsRequest)(nil),                                  // 86: optisam.products.v1.ListEditorsRequest
	(*ListEditorsResponse)(nil),                                 // 87: optisam.products.v1.ListEditorsResponse
	(*ListEditorProductsRequest)(nil),                           // 88: optisam.products.v1.ListEditorProductsRequest
	(*ListEditorProductsResponse)(nil),                          // 89: optisam.products.v1.ListEditorProductsResponse
	(*Editor)(nil),                                              // 90: optisam.products.v1.Editor
	(*Product)(nil),                                             // 91: optisam.products.v1.Product
	(*ListProductsResponse)(nil),                                // 92: optisam.products.v1.ListProductsResponse
	(*ListProductsRequest)(nil),                                 // 93: optisam.products.v1.ListProductsRequest
	(*ProductSearchParams)(nil),                                 // 94: optisam.products.v1.ProductSearchParams
	(*ProductRequest)(nil),                                      // 95: optisam.products.v1.ProductRequest
	(*ProductResponse)(nil),                                     // 96: optisam.products.v1.ProductResponse
	(*ProductOptionsResponse)(nil),                              // 97: optisam.products.v1.ProductOptionsResponse
	(*OptionInfo)(nil),                                          // 98: optisam.products.v1.OptionInfo
	(*ProductExpand)(nil),                                       // 99: optisam.products.v1.ProductExpand
	(*StringFilter)(nil),                                        // 100: optisam.products.v1.StringFilter
	(*UpsertProductRequest)(nil),                                // 101: optisam.products.v1.UpsertProductRequest
	(*UpsertProductResponse)(nil),                               // 102: optisam.products.v1.UpsertProductResponse
	(*ComplianceAlertRequest)(nil),                              // 103: optisam.products.v1.ComplianceAlertRequest
	(*ComplianceAlertResponse)(nil),                             // 104: optisam.products.v1.ComplianceAlertResponse
	(*OverdeployedProductsRequest)(nil),                         // 105: optisam.products.v1.OverdeployedProductsRequest
	(*OverdeployedProductsResponse)(nil),                        // 106: optisam.products.v1.OverdeployedProductsResponse
	(*SoftwareExpenditureByScopeRequest)(nil),                   // 107: optisam.products.v1.SoftwareExpenditureByScopeRequest
	(*SoftwareExpenditureByScopeResponse)(nil),                  // 108: optisam.products.v1.SoftwareExpenditureByScopeResponse
	(*DashboardQualityProductsRequest)(nil),                     // 109: optisam.products.v1.DashboardQualityProductsRequest
	(*DashboardQualityProductsResponse)(nil),                    // 110: optisam.products.v1.DashboardQualityProductsResponse
	(*DashboardQualityProducts)(nil),                            // 111: optisam.products.v1.DashboardQualityProducts
	(*ProductsLicenses)(nil),                                    // 112: optisam.products.v1.ProductsLicenses
	(*ProductsCosts)(nil),                                       // 113: optisam.products.v1.ProductsCosts
	(*SoftwareExpensePercent)(nil),                              // 114: optisam.products.v1.SoftwareExpensePercent
	(*ProductsPerMetricTypeRequest)(nil),                        // 115: optisam.products.v1.ProductsPerMetricTypeRequest
	(*CounterfeitedProductsRequest)(nil),                        // 116: optisam.products.v1.CounterfeitedProductsRequest
	(*CounterfeitedProductsResponse)(nil),                       // 117: optisam.products.v1.CounterfeitedProductsResponse
	(*ProductsPerMetricTypeResponse)(nil),                       // 118: optisam.products.v1.ProductsPerMetricTypeResponse
	(*MetricProducts)(nil),                                      // 119: optisam.products.v1.MetricProducts
	(*DashboardOverviewRequest)(nil),                            // 120: optisam.products.v1.DashboardOverviewRequest
	(*DashboardOverviewResponse)(nil),                           // 121: optisam.products.v1.DashboardOverviewResponse
	(*UpsertAcqRightsRequest)(nil),                              // 122: optisam.products.v1.UpsertAcqRightsRequest
	(*UpsertAcqRightsResponse)(nil),                             // 123: optisam.products.v1.UpsertAcqRightsResponse
	(*ListAcqRightsRequest)(nil),                                // 124: optisam.products.v1.ListAcqRightsRequest
	(*AcqRightsSearchParams)(nil),                               // 125: optisam.products.v1.AcqRightsSearchParams
	(*ListAcqRightsResponse)(nil),                               // 126: optisam.products.v1.ListAcqRightsResponse
	(*AcqRights)(nil),                                           // 127: optisam.products.v1.AcqRights
	(*SharedData)(nil),                                          // 128: optisam.products.v1.SharedData
	(*ListAggregatedAcqRightsRequest)(nil),                      // 129: optisam.products.v1.ListAggregatedAcqRightsRequest
	(*ListAggregatedAcqRightsResponse)(nil),                     // 130: optisam.products.v1.ListAggregatedAcqRightsResponse
	(*AcqRightsAggregation)(nil),                                // 131: optisam.products.v1.AcqRightsAggregation
	(*ListAcqRightsAggregationSearchParams)(nil),                // 132: optisam.products.v1.ListAcqRightsAggregationSearchParams
	(*ListAcqRightsAggregationRecordsRequest)(nil),              // 133: optisam.products.v1.ListAcqRightsAggregationRecordsRequest
	(*ListAcqRightsAggregationRecordsResponse)(nil),             // 134: optisam.products.v1.ListAcqRightsAggregationRecordsResponse
	(*DeleteAggregationRequest)(nil),                            // 135: optisam.products.v1.DeleteAggregationRequest
	(*ListAggregationsRequest)(nil),                             // 136: optisam.products.v1.ListAggregationsRequest
	(*ListAggregationsSearchParams)(nil),                        // 137: optisam.products.v1.ListAggregationsSearchParams
	(*ListAggregationsResponse)(nil),                            // 138: optisam.products.v1.ListAggregationsResponse
	(*ProductAggregationMessage)(nil),                           // 139: optisam.products.v1.ProductAggregationMessage
	(*ProductAggregation)(nil),                                  // 140: optisam.products.v1.ProductAggregation
	(*ListAggregationEditorsRequest)(nil),                       // 141: optisam.products.v1.ListAggregationEditorsRequest
	(*ListAggregationEditorsResponse)(nil),                      // 142: optisam.products.v1.ListAggregationEditorsResponse
	(*ListAggregationProductsRequest)(nil),                      // 143: optisam.products.v1.ListAggregationProductsRequest
	(*ListAggregationProductsResponse)(nil),                     // 144: optisam.products.v1.ListAggregationProductsResponse
	(*AggregationProducts)(nil),                                 // 145: optisam.products.v1.AggregationProducts
	(*DropProductDataRequest)(nil),                              // 146: optisam.products.v1.DropProductDataRequest
	(*DropProductDataResponse)(nil),                             // 147: optisam.products.v1.DropProductDataResponse
	(*DropAggregationDataRequest)(nil),                          // 148: optisam.products.v1.DropAggregationDataRequest
	(*DropAggregationDataResponse)(nil),                         // 149: optisam.products.v1.DropAggregationDataResponse
	(*UpserNominativeUserRequest)(nil),                          // 150: optisam.products.v1.UpserNominativeUserRequest
	(*NominativeUserDetails)(nil),                               // 151: optisam.products.v1.NominativeUserDetails
	(*UpserNominativeUserResponse)(nil),                         // 152: optisam.products.v1.UpserNominativeUserResponse
	(*ListNominativeUsersRequest)(nil),                          // 153: optisam.products.v1.ListNominativeUsersRequest
	(*NominativeUserSearchParams)(nil),                          // 154: optisam.products.v1.NominativeUserSearchParams
	(*NominativeUsersExportRequest)(nil),                        // 155: optisam.products.v1.NominativeUsersExportRequest
	(*ListNominativeUsersResponse)(nil),                         // 156: optisam.products.v1.ListNominativeUsersResponse
	(*ListNominativeUsersExportResponse)(nil),                   // 157: optisam.products.v1.ListNominativeUsersExportResponse
	(*NominativeUserExport)(nil),                                // 158: optisam.products.v1.NominativeUserExport
	(*NominativeUser)(nil),                                      // 159: optisam.products.v1.NominativeUser
	(*ProductConcurrentUserRequest)(nil),                        // 160: optisam.products.v1.ProductConcurrentUserRequest
	(*ProductConcurrentUserResponse)(nil),                       // 161: optisam.products.v1.ProductConcurrentUserResponse
	(*ListConcurrentUsersRequest)(nil),                          // 162: optisam.products.v1.ListConcurrentUsersRequest
	(*ListConcurrentUsersExportRequest)(nil),                    // 163: optisam.products.v1.ListConcurrentUsersExportRequest
	(*ConcurrentUserSearchParams)(nil),                          // 164: optisam.products.v1.ConcurrentUserSearchParams
	(*ListConcurrentUsersResponse)(nil),                         // 165: optisam.products.v1.ListConcurrentUsersResponse
	(*ConcurrentUser)(nil),                                      // 166: optisam.products.v1.ConcurrentUser
	(*DeleteConcurrentUsersRequest)(nil),                        // 167: optisam.products.v1.DeleteConcurrentUsersRequest
	(*DeleteConcurrentUsersResponse)(nil),                       // 168: optisam.products.v1.DeleteConcurrentUsersResponse
	(*DeleteNominativeUserRequest)(nil),                         // 169: optisam.products.v1.DeleteNominativeUserRequest
	(*DeleteNominativeUserResponse)(nil),                        // 170: optisam.products.v1.DeleteNominativeUserResponse
	(*GetConcurrentUsersHistroyRequest)(nil),                    // 171: optisam.products.v1.GetConcurrentUsersHistroyRequest
	(*GetConcurrentUsersHistroyResponse)(nil),                   // 172: optisam.products.v1.GetConcurrentUsersHistroyResponse
	(*ConcurrentUsersByDay)(nil),                                // 173: optisam.products.v1.ConcurrentUsersByDay
	(*ConcurrentUsersByMonth)(nil),                              // 174: optisam.products.v1.ConcurrentUsersByMonth
	(*GroupComplianceEditorRequest)(nil),                        // 175: optisam.products.v1.GroupComplianceEditorRequest
	(*GroupComplianceEditorResponse)(nil),                       // 176: optisam.products.v1.GroupComplianceEditorResponse
	(*ScopesEditorCosts)(nil),                                   // 177: optisam.products.v1.ScopesEditorCosts
	(*ScopeCost)(nil),                                           // 178: optisam.products.v1.ScopeCost
	(*GetUnderusageByEditorRequest)(nil),                        // 179: optisam.products.v1.GetUnderusageByEditorRequest
	(*GetUnderusageByEditorResponse)(nil),                       // 180: optisam.products.v1.GetUnderusageByEditorResponse
	(*UnderusageByEditorData)(nil),                              // 181: optisam.products.v1.UnderusageByEditorData
	(*ListNominativeUsersFileUploadRequest)(nil),                // 182: optisam.products.v1.ListNominativeUsersFileUploadRequest
	(*ListNominativeUsersFileUploadResponse)(nil),               // 183: optisam.products.v1.ListNominativeUsersFileUploadResponse
	(*ListNominativeUsersFileUpload)(nil),                       // 184: optisam.products.v1.ListNominativeUsersFileUpload
	(*EditorExpensesByScopeRequest)(nil),                        // 185: optisam.products.v1.EditorExpensesByScopeRequest
	(*EditorExpensesByScopeResponse)(nil),                       // 186: optisam.products.v1.EditorExpensesByScopeResponse
	(*EditorExpensesByScopeData)(nil),                           // 187: optisam.products.v1.EditorExpensesByScopeData
	(*EditorProductsExpensesByScopeRequest)(nil),                // 188: optisam.products.v1.EditorProductsExpensesByScopeRequest
	(*EditorProductExpensesByScopeResponse)(nil),                // 189: optisam.products.v1.EditorProductExpensesByScopeResponse
	(*EditorProductExpensesByScopeData)(nil),                    // 190: optisam.products.v1.EditorProductExpensesByScopeData
	(*GetDeploymentTypeRequest)(nil),                            // 191: optisam.products.v1.GetDeploymentTypeRequest
	(*GetDeploymentTypeResponse)(nil),                           // 192: optisam.products.v1.GetDeploymentTypeResponse
	(*GetAggregationByIdRequest)(nil),                           // 193: optisam.products.v1.GetAggregationByIdRequest
	(*GetAggregationByIdResponse)(nil),                          // 194: optisam.products.v1.GetAggregationByIdResponse
	(*GetProductInformationBySwidTagRequest)(nil),               // 195: optisam.products.v1.GetProductInformationBySwidTagRequest
	(*GetProductInformationBySwidTagResponse)(nil),              // 196: optisam.products.v1.GetProductInformationBySwidTagResponse
	(*UpdateNominativeUserRequest)(nil),                         // 197: optisam.products.v1.UpdateNominativeUserRequest
	(*DeadLetterQueue)(nil),                                     // 198: optisam.products.v1.DeadLetterQueue
	(*UpdatePostgresBatchSucessNomUSers)(nil),                   // 199: optisam.products.v1.UpdatePostgresBatchSucessNomUSers
	(*UpdateDgraphBatchSuccessCount)(nil),                       // 200: optisam.products.v1.UpdateDgraphBatchSuccessCount
	(*UpdateSharedLicensesRequest_SharedLicenses)(nil),          // 201: optisam.products.v1.UpdateSharedLicensesRequest.SharedLicenses
	(*UpdateAggrightsSharedLicensesRequest_SharedLicenses)(nil), // 202: optisam.products.v1.UpdateAggrightsSharedLicensesRequest.SharedLicenses
	(*GetProductCountByAppResponseApplications)(nil),            // 203: optisam.products.v1.GetProductCountByAppResponse.applications
	(*UpsertProductRequestApplication)(nil),                     // 204: optisam.products.v1.UpsertProductRequest.application
	(*UpsertProductRequestEquipment)(nil),                       // 205: optisam.products.v1.UpsertProductRequest.equipment
	(*UpsertProductRequestEquipmentEquipmentuser)(nil),          // 206: optisam.products.v1.UpsertProductRequest.equipment.equipmentuser
	(*timestamp.Timestamp)(nil),                                 // 207: google.protobuf.Timestamp
}
var file_product_proto_depIdxs = []int32{
	18,  // 0: optisam.products.v1.GroupComplianceProductResponse.licences:type_name -> optisam.products.v1.LicencesData
	19,  // 1: optisam.products.v1.GroupComplianceProductResponse.cost:type_name -> optisam.products.v1.CostData
	128, // 2: optisam.products.v1.GetAvailableLicensesResponse.shared_data:type_name -> optisam.products.v1.SharedData
	201, // 3: optisam.products.v1.UpdateSharedLicensesRequest.license_data:type_name -> optisam.products.v1.UpdateSharedLicensesRequest.SharedLicenses
	202, // 4: optisam.products.v1.UpdateAggrightsSharedLicensesRequest.license_data:type_name -> optisam.products.v1.UpdateAggrightsSharedLicensesRequest.SharedLicenses
	203, // 5: optisam.products.v1.GetProductCountByAppResponse.app_data:type_name -> optisam.products.v1.GetProductCountByAppResponse.applications
	127, // 6: optisam.products.v1.GetAggregationAcqrightsExpandedViewResponse.acqRights:type_name -> optisam.products.v1.AcqRights
	99,  // 7: optisam.products.v1.GetAggregationProductsExpandedViewResponse.products:type_name -> optisam.products.v1.ProductExpand
	98,  // 8: optisam.products.v1.ProductAggregationProductViewOptionsResponse.optioninfo:type_name -> optisam.products.v1.OptionInfo
	59,  // 9: optisam.products.v1.Aggregation.mapping:type_name -> optisam.products.v1.Mapping
	128, // 10: optisam.products.v1.AggregatedRightsView.shared_data:type_name -> optisam.products.v1.SharedData
	59,  // 11: optisam.products.v1.AggregatedRightsView.mapping:type_name -> optisam.products.v1.Mapping
	68,  // 12: optisam.products.v1.ProductMaintenancePercResponse.ProductPerc:type_name -> optisam.products.v1.ProductPerc
	71,  // 13: optisam.products.v1.ProductNoMaintenanceDetailsResponse.product_no_main:type_name -> optisam.products.v1.ProductNoMain
	77,  // 14: optisam.products.v1.ProductsPerEditorResponse.editors_products:type_name -> optisam.products.v1.EditorProducts
	76,  // 15: optisam.products.v1.GetRightsInfoByEditorResponse.editor_rights:type_name -> optisam.products.v1.RightsInfoByEditor
	3,   // 16: optisam.products.v1.ListProductAggregationViewRequest.sort_by:type_name -> optisam.products.v1.ListProductAggregationViewRequest.SortBy
	0,   // 17: optisam.products.v1.ListProductAggregationViewRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	81,  // 18: optisam.products.v1.ListProductAggregationViewRequest.search_params:type_name -> optisam.products.v1.ProductAggregationProductViewSearchParams
	100, // 19: optisam.products.v1.ProductAggregationProductViewSearchParams.swidTag:type_name -> optisam.products.v1.StringFilter
	100, // 20: optisam.products.v1.ProductAggregationProductViewSearchParams.name:type_name -> optisam.products.v1.StringFilter
	100, // 21: optisam.products.v1.ProductAggregationProductViewSearchParams.editor:type_name -> optisam.products.v1.StringFilter
	100, // 22: optisam.products.v1.ProductAggregationProductViewSearchParams.product_name:type_name -> optisam.products.v1.StringFilter
	83,  // 23: optisam.products.v1.ListProductAggregationViewResponse.aggregations:type_name -> optisam.products.v1.ProductAggregationView
	91,  // 24: optisam.products.v1.ListEditorProductsResponse.products:type_name -> optisam.products.v1.Product
	91,  // 25: optisam.products.v1.ListProductsResponse.products:type_name -> optisam.products.v1.Product
	0,   // 26: optisam.products.v1.ListProductsRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	94,  // 27: optisam.products.v1.ListProductsRequest.search_params:type_name -> optisam.products.v1.ProductSearchParams
	100, // 28: optisam.products.v1.ProductSearchParams.swidTag:type_name -> optisam.products.v1.StringFilter
	100, // 29: optisam.products.v1.ProductSearchParams.name:type_name -> optisam.products.v1.StringFilter
	100, // 30: optisam.products.v1.ProductSearchParams.editor:type_name -> optisam.products.v1.StringFilter
	100, // 31: optisam.products.v1.ProductSearchParams.application_id:type_name -> optisam.products.v1.StringFilter
	100, // 32: optisam.products.v1.ProductSearchParams.instance_id:type_name -> optisam.products.v1.StringFilter
	100, // 33: optisam.products.v1.ProductSearchParams.equipment_id:type_name -> optisam.products.v1.StringFilter
	100, // 34: optisam.products.v1.ProductSearchParams.location:type_name -> optisam.products.v1.StringFilter
	98,  // 35: optisam.products.v1.ProductOptionsResponse.optioninfo:type_name -> optisam.products.v1.OptionInfo
	204, // 36: optisam.products.v1.UpsertProductRequest.applications:type_name -> optisam.products.v1.UpsertProductRequest.application
	205, // 37: optisam.products.v1.UpsertProductRequest.equipments:type_name -> optisam.products.v1.UpsertProductRequest.equipment
	2,   // 38: optisam.products.v1.UpsertProductRequest.productType:type_name -> optisam.products.v1.producttype
	112, // 39: optisam.products.v1.OverdeployedProductsResponse.products_licenses:type_name -> optisam.products.v1.ProductsLicenses
	113, // 40: optisam.products.v1.OverdeployedProductsResponse.products_costs:type_name -> optisam.products.v1.ProductsCosts
	114, // 41: optisam.products.v1.SoftwareExpenditureByScopeResponse.expense_percent:type_name -> optisam.products.v1.SoftwareExpensePercent
	111, // 42: optisam.products.v1.DashboardQualityProductsResponse.products_not_deployed:type_name -> optisam.products.v1.DashboardQualityProducts
	111, // 43: optisam.products.v1.DashboardQualityProductsResponse.products_not_acquired:type_name -> optisam.products.v1.DashboardQualityProducts
	112, // 44: optisam.products.v1.CounterfeitedProductsResponse.products_licenses:type_name -> optisam.products.v1.ProductsLicenses
	113, // 45: optisam.products.v1.CounterfeitedProductsResponse.products_costs:type_name -> optisam.products.v1.ProductsCosts
	119, // 46: optisam.products.v1.ProductsPerMetricTypeResponse.metrics_products:type_name -> optisam.products.v1.MetricProducts
	4,   // 47: optisam.products.v1.ListAcqRightsRequest.sort_by:type_name -> optisam.products.v1.ListAcqRightsRequest.SortBy
	0,   // 48: optisam.products.v1.ListAcqRightsRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	125, // 49: optisam.products.v1.ListAcqRightsRequest.search_params:type_name -> optisam.products.v1.AcqRightsSearchParams
	100, // 50: optisam.products.v1.AcqRightsSearchParams.swidTag:type_name -> optisam.products.v1.StringFilter
	100, // 51: optisam.products.v1.AcqRightsSearchParams.SKU:type_name -> optisam.products.v1.StringFilter
	100, // 52: optisam.products.v1.AcqRightsSearchParams.editor:type_name -> optisam.products.v1.StringFilter
	100, // 53: optisam.products.v1.AcqRightsSearchParams.productName:type_name -> optisam.products.v1.StringFilter
	100, // 54: optisam.products.v1.AcqRightsSearchParams.metric:type_name -> optisam.products.v1.StringFilter
	100, // 55: optisam.products.v1.AcqRightsSearchParams.softwareProvider:type_name -> optisam.products.v1.StringFilter
	100, // 56: optisam.products.v1.AcqRightsSearchParams.orderingDate:type_name -> optisam.products.v1.StringFilter
	127, // 57: optisam.products.v1.ListAcqRightsResponse.acquired_rights:type_name -> optisam.products.v1.AcqRights
	207, // 58: optisam.products.v1.AcqRights.start_of_maintenance:type_name -> google.protobuf.Timestamp
	207, // 59: optisam.products.v1.AcqRights.end_of_maintenance:type_name -> google.protobuf.Timestamp
	207, // 60: optisam.products.v1.AcqRights.ordering_date:type_name -> google.protobuf.Timestamp
	128, // 61: optisam.products.v1.AcqRights.shared_data:type_name -> optisam.products.v1.SharedData
	5,   // 62: optisam.products.v1.ListAggregatedAcqRightsRequest.sort_by:type_name -> optisam.products.v1.ListAggregatedAcqRightsRequest.SortBy
	0,   // 63: optisam.products.v1.ListAggregatedAcqRightsRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	132, // 64: optisam.products.v1.ListAggregatedAcqRightsRequest.search_params:type_name -> optisam.products.v1.ListAcqRightsAggregationSearchParams
	62,  // 65: optisam.products.v1.ListAggregatedAcqRightsResponse.aggregations:type_name -> optisam.products.v1.AggregatedRightsView
	100, // 66: optisam.products.v1.ListAcqRightsAggregationSearchParams.name:type_name -> optisam.products.v1.StringFilter
	100, // 67: optisam.products.v1.ListAcqRightsAggregationSearchParams.editor:type_name -> optisam.products.v1.StringFilter
	100, // 68: optisam.products.v1.ListAcqRightsAggregationSearchParams.SKU:type_name -> optisam.products.v1.StringFilter
	100, // 69: optisam.products.v1.ListAcqRightsAggregationSearchParams.metric:type_name -> optisam.products.v1.StringFilter
	100, // 70: optisam.products.v1.ListAcqRightsAggregationSearchParams.ordering_date:type_name -> optisam.products.v1.StringFilter
	100, // 71: optisam.products.v1.ListAcqRightsAggregationSearchParams.software_provider:type_name -> optisam.products.v1.StringFilter
	127, // 72: optisam.products.v1.ListAcqRightsAggregationRecordsResponse.acquired_rights:type_name -> optisam.products.v1.AcqRights
	6,   // 73: optisam.products.v1.ListAggregationsRequest.sort_by:type_name -> optisam.products.v1.ListAggregationsRequest.SortBy
	0,   // 74: optisam.products.v1.ListAggregationsRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	137, // 75: optisam.products.v1.ListAggregationsRequest.search_params:type_name -> optisam.products.v1.ListAggregationsSearchParams
	100, // 76: optisam.products.v1.ListAggregationsSearchParams.aggregation_name:type_name -> optisam.products.v1.StringFilter
	100, // 77: optisam.products.v1.ListAggregationsSearchParams.product_editor:type_name -> optisam.products.v1.StringFilter
	58,  // 78: optisam.products.v1.ListAggregationsResponse.aggregations:type_name -> optisam.products.v1.Aggregation
	145, // 79: optisam.products.v1.ListAggregationProductsResponse.aggrights_products:type_name -> optisam.products.v1.AggregationProducts
	145, // 80: optisam.products.v1.ListAggregationProductsResponse.selected_products:type_name -> optisam.products.v1.AggregationProducts
	7,   // 81: optisam.products.v1.DropProductDataRequest.deletion_type:type_name -> optisam.products.v1.DropProductDataRequest.deletion_types
	151, // 82: optisam.products.v1.UpserNominativeUserRequest.user_details:type_name -> optisam.products.v1.NominativeUserDetails
	0,   // 83: optisam.products.v1.ListNominativeUsersRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	154, // 84: optisam.products.v1.ListNominativeUsersRequest.search_params:type_name -> optisam.products.v1.NominativeUserSearchParams
	100, // 85: optisam.products.v1.NominativeUserSearchParams.product_name:type_name -> optisam.products.v1.StringFilter
	100, // 86: optisam.products.v1.NominativeUserSearchParams.aggregation_name:type_name -> optisam.products.v1.StringFilter
	100, // 87: optisam.products.v1.NominativeUserSearchParams.product_version:type_name -> optisam.products.v1.StringFilter
	100, // 88: optisam.products.v1.NominativeUserSearchParams.user_name:type_name -> optisam.products.v1.StringFilter
	100, // 89: optisam.products.v1.NominativeUserSearchParams.first_name:type_name -> optisam.products.v1.StringFilter
	100, // 90: optisam.products.v1.NominativeUserSearchParams.user_email:type_name -> optisam.products.v1.StringFilter
	100, // 91: optisam.products.v1.NominativeUserSearchParams.profile:type_name -> optisam.products.v1.StringFilter
	207, // 92: optisam.products.v1.NominativeUserSearchParams.activation_date:type_name -> google.protobuf.Timestamp
	100, // 93: optisam.products.v1.NominativeUserSearchParams.editor:type_name -> optisam.products.v1.StringFilter
	0,   // 94: optisam.products.v1.NominativeUsersExportRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	154, // 95: optisam.products.v1.NominativeUsersExportRequest.search_params:type_name -> optisam.products.v1.NominativeUserSearchParams
	159, // 96: optisam.products.v1.ListNominativeUsersResponse.nominative_user:type_name -> optisam.products.v1.NominativeUser
	158, // 97: optisam.products.v1.ListNominativeUsersExportResponse.nominative_user:type_name -> optisam.products.v1.NominativeUserExport
	207, // 98: optisam.products.v1.NominativeUser.activation_date:type_name -> google.protobuf.Timestamp
	0,   // 99: optisam.products.v1.ListConcurrentUsersRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	164, // 100: optisam.products.v1.ListConcurrentUsersRequest.search_params:type_name -> optisam.products.v1.ConcurrentUserSearchParams
	0,   // 101: optisam.products.v1.ListConcurrentUsersExportRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	164, // 102: optisam.products.v1.ListConcurrentUsersExportRequest.search_params:type_name -> optisam.products.v1.ConcurrentUserSearchParams
	100, // 103: optisam.products.v1.ConcurrentUserSearchParams.product_name:type_name -> optisam.products.v1.StringFilter
	100, // 104: optisam.products.v1.ConcurrentUserSearchParams.aggregation_name:type_name -> optisam.products.v1.StringFilter
	100, // 105: optisam.products.v1.ConcurrentUserSearchParams.product_version:type_name -> optisam.products.v1.StringFilter
	100, // 106: optisam.products.v1.ConcurrentUserSearchParams.team:type_name -> optisam.products.v1.StringFilter
	100, // 107: optisam.products.v1.ConcurrentUserSearchParams.profile_user:type_name -> optisam.products.v1.StringFilter
	100, // 108: optisam.products.v1.ConcurrentUserSearchParams.number_of_users:type_name -> optisam.products.v1.StringFilter
	100, // 109: optisam.products.v1.ConcurrentUserSearchParams.product_editor:type_name -> optisam.products.v1.StringFilter
	207, // 110: optisam.products.v1.ConcurrentUserSearchParams.purchase_date:type_name -> google.protobuf.Timestamp
	166, // 111: optisam.products.v1.ListConcurrentUsersResponse.concurrent_user:type_name -> optisam.products.v1.ConcurrentUser
	207, // 112: optisam.products.v1.ConcurrentUser.purchase_date:type_name -> google.protobuf.Timestamp
	207, // 113: optisam.products.v1.GetConcurrentUsersHistroyRequest.start_date:type_name -> google.protobuf.Timestamp
	207, // 114: optisam.products.v1.GetConcurrentUsersHistroyRequest.end_date:type_name -> google.protobuf.Timestamp
	173, // 115: optisam.products.v1.GetConcurrentUsersHistroyResponse.concurrentUsersByDays:type_name -> optisam.products.v1.ConcurrentUsersByDay
	174, // 116: optisam.products.v1.GetConcurrentUsersHistroyResponse.concurrentUsersByMonths:type_name -> optisam.products.v1.ConcurrentUsersByMonth
	207, // 117: optisam.products.v1.ConcurrentUsersByDay.purchase_date:type_name -> google.protobuf.Timestamp
	177, // 118: optisam.products.v1.GroupComplianceEditorResponse.costs:type_name -> optisam.products.v1.ScopesEditorCosts
	178, // 119: optisam.products.v1.ScopesEditorCosts.counterFeiting:type_name -> optisam.products.v1.ScopeCost
	178, // 120: optisam.products.v1.ScopesEditorCosts.underUsage:type_name -> optisam.products.v1.ScopeCost
	178, // 121: optisam.products.v1.ScopesEditorCosts.total:type_name -> optisam.products.v1.ScopeCost
	0,   // 122: optisam.products.v1.GetUnderusageByEditorRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	181, // 123: optisam.products.v1.GetUnderusageByEditorResponse.UnderusageByEditorData:type_name -> optisam.products.v1.UnderusageByEditorData
	0,   // 124: optisam.products.v1.ListNominativeUsersFileUploadRequest.sort_order:type_name -> optisam.products.v1.SortOrder
	184, // 125: optisam.products.v1.ListNominativeUsersFileUploadResponse.file_details:type_name -> optisam.products.v1.ListNominativeUsersFileUpload
	151, // 126: optisam.products.v1.ListNominativeUsersFileUpload.nominative_users_details:type_name -> optisam.products.v1.NominativeUserDetails
	207, // 127: optisam.products.v1.ListNominativeUsersFileUpload.uploaded_at:type_name -> google.protobuf.Timestamp
	187, // 128: optisam.products.v1.EditorExpensesByScopeResponse.editorExpensesByScope:type_name -> optisam.products.v1.EditorExpensesByScopeData
	190, // 129: optisam.products.v1.EditorProductExpensesByScopeResponse.editorProductExpensesByScope:type_name -> optisam.products.v1.EditorProductExpensesByScopeData
	207, // 130: optisam.products.v1.GetAggregationByIdResponse.created_on:type_name -> google.protobuf.Timestamp
	207, // 131: optisam.products.v1.GetAggregationByIdResponse.updated_on:type_name -> google.protobuf.Timestamp
	159, // 132: optisam.products.v1.UpdateNominativeUserRequest.record_succeed:type_name -> optisam.products.v1.NominativeUser
	159, // 133: optisam.products.v1.UpdateNominativeUserRequest.record_failed:type_name -> optisam.products.v1.NominativeUser
	206, // 134: optisam.products.v1.UpsertProductRequest.equipment.equipmentusers:type_name -> optisam.products.v1.UpsertProductRequest.equipment.equipmentuser
	93,  // 135: optisam.products.v1.ProductService.ListProducts:input_type -> optisam.products.v1.ListProductsRequest
	120, // 136: optisam.products.v1.ProductService.DashboardOverview:input_type -> optisam.products.v1.DashboardOverviewRequest
	72,  // 137: optisam.products.v1.ProductService.ProductsPerEditor:input_type -> optisam.products.v1.ProductsPerEditorRequest
	74,  // 138: optisam.products.v1.ProductService.GetRightsInfoByEditor:input_type -> optisam.products.v1.GetRightsInfoByEditorRequest
	95,  // 139: optisam.products.v1.ProductService.GetProductDetail:input_type -> optisam.products.v1.ProductRequest
	95,  // 140: optisam.products.v1.ProductService.GetProductOptions:input_type -> optisam.products.v1.ProductRequest
	80,  // 141: optisam.products.v1.ProductService.ListProductAggregationView:input_type -> optisam.products.v1.ListProductAggregationViewRequest
	78,  // 142: optisam.products.v1.ProductService.AggregatedRightDetails:input_type -> optisam.products.v1.AggregatedRightDetailsRequest
	85,  // 143: optisam.products.v1.ProductService.ListDeployedAndAcquiredEditors:input_type -> optisam.products.v1.ListDeployedAndAcquiredEditorsRequest
	86,  // 144: optisam.products.v1.ProductService.ListEditors:input_type -> optisam.products.v1.ListEditorsRequest
	22,  // 145: optisam.products.v1.ProductService.GetAvailableLicenses:input_type -> optisam.products.v1.GetAvailableLicensesRequest
	88,  // 146: optisam.products.v1.ProductService.ListEditorProducts:input_type -> optisam.products.v1.ListEditorProductsRequest
	101, // 147: optisam.products.v1.ProductService.UpsertProduct:input_type -> optisam.products.v1.UpsertProductRequest
	122, // 148: optisam.products.v1.ProductService.UpsertAcqRights:input_type -> optisam.products.v1.UpsertAcqRightsRequest
	115, // 149: optisam.products.v1.ProductService.ProductsPerMetricType:input_type -> optisam.products.v1.ProductsPerMetricTypeRequest
	103, // 150: optisam.products.v1.ProductService.ComplianceAlert:input_type -> optisam.products.v1.ComplianceAlertRequest
	116, // 151: optisam.products.v1.ProductService.CounterfeitedProducts:input_type -> optisam.products.v1.CounterfeitedProductsRequest
	175, // 152: optisam.products.v1.ProductService.GroupComplianceEditorCost:input_type -> optisam.products.v1.GroupComplianceEditorRequest
	105, // 153: optisam.products.v1.ProductService.OverdeployedProducts:input_type -> optisam.products.v1.OverdeployedProductsRequest
	107, // 154: optisam.products.v1.ProductService.SoftwareExpenditureByScope:input_type -> optisam.products.v1.SoftwareExpenditureByScopeRequest
	109, // 155: optisam.products.v1.ProductService.DashboardQualityProducts:input_type -> optisam.products.v1.DashboardQualityProductsRequest
	124, // 156: optisam.products.v1.ProductService.ListAcqRights:input_type -> optisam.products.v1.ListAcqRightsRequest
	129, // 157: optisam.products.v1.ProductService.ListAggregatedAcqRights:input_type -> optisam.products.v1.ListAggregatedAcqRightsRequest
	52,  // 158: optisam.products.v1.ProductService.GetAllEditorsCatalog:input_type -> optisam.products.v1.GetAllEditorsCatalogRequest
	58,  // 159: optisam.products.v1.ProductService.CreateAggregation:input_type -> optisam.products.v1.Aggregation
	61,  // 160: optisam.products.v1.ProductService.CreateAggregatedRights:input_type -> optisam.products.v1.AggregatedRightsRequest
	61,  // 161: optisam.products.v1.ProductService.UpdateAggregatedRights:input_type -> optisam.products.v1.AggregatedRightsRequest
	43,  // 162: optisam.products.v1.ProductService.DeleteAggregatedRights:input_type -> optisam.products.v1.DeleteAggregatedRightsRequest
	45,  // 163: optisam.products.v1.ProductService.DownloadAggregatedRightsFile:input_type -> optisam.products.v1.DownloadAggregatedRightsFileRequest
	141, // 164: optisam.products.v1.ProductService.ListAggregationEditors:input_type -> optisam.products.v1.ListAggregationEditorsRequest
	143, // 165: optisam.products.v1.ProductService.ListAggregationProducts:input_type -> optisam.products.v1.ListAggregationProductsRequest
	136, // 166: optisam.products.v1.ProductService.ListAggregations:input_type -> optisam.products.v1.ListAggregationsRequest
	58,  // 167: optisam.products.v1.ProductService.UpdateAggregation:input_type -> optisam.products.v1.Aggregation
	135, // 168: optisam.products.v1.ProductService.DeleteAggregation:input_type -> optisam.products.v1.DeleteAggregationRequest
	64,  // 169: optisam.products.v1.ProductService.OverviewProductQuality:input_type -> optisam.products.v1.OverviewProductQualityRequest
	66,  // 170: optisam.products.v1.ProductService.ProductMaintenancePerc:input_type -> optisam.products.v1.ProductMaintenancePercRequest
	69,  // 171: optisam.products.v1.ProductService.ProductNoMaintenanceDetails:input_type -> optisam.products.v1.ProductNoMaintenanceDetailsRequest
	146, // 172: optisam.products.v1.ProductService.DropProductData:input_type -> optisam.products.v1.DropProductDataRequest
	148, // 173: optisam.products.v1.ProductService.DropAggregationData:input_type -> optisam.products.v1.DropAggregationDataRequest
	56,  // 174: optisam.products.v1.ProductService.CreateAcqRight:input_type -> optisam.products.v1.AcqRightRequest
	47,  // 175: optisam.products.v1.ProductService.CreateDashboardUpdateJob:input_type -> optisam.products.v1.CreateDashboardUpdateJobRequest
	48,  // 176: optisam.products.v1.ProductService.UpsertAllocatedMetricEquipment:input_type -> optisam.products.v1.UpsertAllocateMetricEquipementRequest
	49,  // 177: optisam.products.v1.ProductService.DeleteAllocatedMetricEquipment:input_type -> optisam.products.v1.DropAllocateMetricEquipementRequest
	54,  // 178: optisam.products.v1.ProductService.GetBanner:input_type -> optisam.products.v1.GetBannerRequest
	56,  // 179: optisam.products.v1.ProductService.UpdateAcqRight:input_type -> optisam.products.v1.AcqRightRequest
	24,  // 180: optisam.products.v1.ProductService.UpdateAcqrightsSharedLicenses:input_type -> optisam.products.v1.UpdateSharedLicensesRequest
	25,  // 181: optisam.products.v1.ProductService.UpdateAggrightsSharedLicenses:input_type -> optisam.products.v1.UpdateAggrightsSharedLicensesRequest
	39,  // 182: optisam.products.v1.ProductService.DeleteAcqRight:input_type -> optisam.products.v1.DeleteAcqRightRequest
	41,  // 183: optisam.products.v1.ProductService.DownloadAcqRightFile:input_type -> optisam.products.v1.DownloadAcqRightFileRequest
	37,  // 184: optisam.products.v1.ProductService.GetEquipmentsByProduct:input_type -> optisam.products.v1.GetEquipmentsByProductRequest
	31,  // 185: optisam.products.v1.ProductService.GetAggregationAcqrightsExpandedView:input_type -> optisam.products.v1.GetAggregationAcqrightsExpandedViewRequest
	33,  // 186: optisam.products.v1.ProductService.GetAggregationProductsExpandedView:input_type -> optisam.products.v1.GetAggregationProductsExpandedViewRequest
	29,  // 187: optisam.products.v1.ProductService.GetApplicationsByProduct:input_type -> optisam.products.v1.GetApplicationsByProductRequest
	27,  // 188: optisam.products.v1.ProductService.GetProductCountByApp:input_type -> optisam.products.v1.GetProductCountByAppRequest
	160, // 189: optisam.products.v1.ProductService.UpsertProductConcurrentUser:input_type -> optisam.products.v1.ProductConcurrentUserRequest
	153, // 190: optisam.products.v1.ProductService.ListNominativeUser:input_type -> optisam.products.v1.ListNominativeUsersRequest
	155, // 191: optisam.products.v1.ProductService.NominativeUserExport:input_type -> optisam.products.v1.NominativeUsersExportRequest
	163, // 192: optisam.products.v1.ProductService.ConcurrentUserExport:input_type -> optisam.products.v1.ListConcurrentUsersExportRequest
	162, // 193: optisam.products.v1.ProductService.ListConcurrentUsers:input_type -> optisam.products.v1.ListConcurrentUsersRequest
	167, // 194: optisam.products.v1.ProductService.DeleteConcurrentUsers:input_type -> optisam.products.v1.DeleteConcurrentUsersRequest
	169, // 195: optisam.products.v1.ProductService.DeleteNominativeUsers:input_type -> optisam.products.v1.DeleteNominativeUserRequest
	20,  // 196: optisam.products.v1.ProductService.GetTotalSharedAmount:input_type -> optisam.products.v1.GetTotalSharedAmountRequest
	16,  // 197: optisam.products.v1.ProductService.GroupComplianceProduct:input_type -> optisam.products.v1.GroupComplianceProductRequest
	14,  // 198: optisam.products.v1.ProductService.GetProductListByEditor:input_type -> optisam.products.v1.GetProductListByEditorRequest
	171, // 199: optisam.products.v1.ProductService.GetConcurrentUsersHistroy:input_type -> optisam.products.v1.GetConcurrentUsersHistroyRequest
	179, // 200: optisam.products.v1.ProductService.GetUnderusageLicenceByEditorProduct:input_type -> optisam.products.v1.GetUnderusageByEditorRequest
	12,  // 201: optisam.products.v1.ProductService.GetMetric:input_type -> optisam.products.v1.GetMetricRequest
	8,   // 202: optisam.products.v1.ProductService.DeleteSharedLicenses:input_type -> optisam.products.v1.DeleteSharedLicensesRequest
	182, // 203: optisam.products.v1.ProductService.ListNominativeUserFileUpload:input_type -> optisam.products.v1.ListNominativeUsersFileUploadRequest
	185, // 204: optisam.products.v1.ProductService.GetEditorExpensesByScope:input_type -> optisam.products.v1.EditorExpensesByScopeRequest
	188, // 205: optisam.products.v1.ProductService.GetEditorProductExpensesByScope:input_type -> optisam.products.v1.EditorProductsExpensesByScopeRequest
	191, // 206: optisam.products.v1.ProductService.ProductLocationType:input_type -> optisam.products.v1.GetDeploymentTypeRequest
	193, // 207: optisam.products.v1.ProductService.GetAggregationById:input_type -> optisam.products.v1.GetAggregationByIdRequest
	195, // 208: optisam.products.v1.ProductService.GetProductInformationBySwidTag:input_type -> optisam.products.v1.GetProductInformationBySwidTagRequest
	10,  // 209: optisam.products.v1.ProductService.GetMaintenanceBySwidtag:input_type -> optisam.products.v1.GetMaintenanceBySwidtagRequest
	92,  // 210: optisam.products.v1.ProductService.ListProducts:output_type -> optisam.products.v1.ListProductsResponse
	121, // 211: optisam.products.v1.ProductService.DashboardOverview:output_type -> optisam.products.v1.DashboardOverviewResponse
	73,  // 212: optisam.products.v1.ProductService.ProductsPerEditor:output_type -> optisam.products.v1.ProductsPerEditorResponse
	75,  // 213: optisam.products.v1.ProductService.GetRightsInfoByEditor:output_type -> optisam.products.v1.GetRightsInfoByEditorResponse
	96,  // 214: optisam.products.v1.ProductService.GetProductDetail:output_type -> optisam.products.v1.ProductResponse
	97,  // 215: optisam.products.v1.ProductService.GetProductOptions:output_type -> optisam.products.v1.ProductOptionsResponse
	82,  // 216: optisam.products.v1.ProductService.ListProductAggregationView:output_type -> optisam.products.v1.ListProductAggregationViewResponse
	79,  // 217: optisam.products.v1.ProductService.AggregatedRightDetails:output_type -> optisam.products.v1.AggregatedRightDetailsResponse
	87,  // 218: optisam.products.v1.ProductService.ListDeployedAndAcquiredEditors:output_type -> optisam.products.v1.ListEditorsResponse
	87,  // 219: optisam.products.v1.ProductService.ListEditors:output_type -> optisam.products.v1.ListEditorsResponse
	23,  // 220: optisam.products.v1.ProductService.GetAvailableLicenses:output_type -> optisam.products.v1.GetAvailableLicensesResponse
	89,  // 221: optisam.products.v1.ProductService.ListEditorProducts:output_type -> optisam.products.v1.ListEditorProductsResponse
	102, // 222: optisam.products.v1.ProductService.UpsertProduct:output_type -> optisam.products.v1.UpsertProductResponse
	123, // 223: optisam.products.v1.ProductService.UpsertAcqRights:output_type -> optisam.products.v1.UpsertAcqRightsResponse
	118, // 224: optisam.products.v1.ProductService.ProductsPerMetricType:output_type -> optisam.products.v1.ProductsPerMetricTypeResponse
	104, // 225: optisam.products.v1.ProductService.ComplianceAlert:output_type -> optisam.products.v1.ComplianceAlertResponse
	117, // 226: optisam.products.v1.ProductService.CounterfeitedProducts:output_type -> optisam.products.v1.CounterfeitedProductsResponse
	176, // 227: optisam.products.v1.ProductService.GroupComplianceEditorCost:output_type -> optisam.products.v1.GroupComplianceEditorResponse
	106, // 228: optisam.products.v1.ProductService.OverdeployedProducts:output_type -> optisam.products.v1.OverdeployedProductsResponse
	108, // 229: optisam.products.v1.ProductService.SoftwareExpenditureByScope:output_type -> optisam.products.v1.SoftwareExpenditureByScopeResponse
	110, // 230: optisam.products.v1.ProductService.DashboardQualityProducts:output_type -> optisam.products.v1.DashboardQualityProductsResponse
	126, // 231: optisam.products.v1.ProductService.ListAcqRights:output_type -> optisam.products.v1.ListAcqRightsResponse
	130, // 232: optisam.products.v1.ProductService.ListAggregatedAcqRights:output_type -> optisam.products.v1.ListAggregatedAcqRightsResponse
	53,  // 233: optisam.products.v1.ProductService.GetAllEditorsCatalog:output_type -> optisam.products.v1.GetAllEditorsCatalogResponse
	60,  // 234: optisam.products.v1.ProductService.CreateAggregation:output_type -> optisam.products.v1.AggregationResponse
	63,  // 235: optisam.products.v1.ProductService.CreateAggregatedRights:output_type -> optisam.products.v1.AggregatedRightsResponse
	63,  // 236: optisam.products.v1.ProductService.UpdateAggregatedRights:output_type -> optisam.products.v1.AggregatedRightsResponse
	44,  // 237: optisam.products.v1.ProductService.DeleteAggregatedRights:output_type -> optisam.products.v1.DeleteAggregatedRightsResponse
	46,  // 238: optisam.products.v1.ProductService.DownloadAggregatedRightsFile:output_type -> optisam.products.v1.DownloadAggregatedRightsFileResponse
	142, // 239: optisam.products.v1.ProductService.ListAggregationEditors:output_type -> optisam.products.v1.ListAggregationEditorsResponse
	144, // 240: optisam.products.v1.ProductService.ListAggregationProducts:output_type -> optisam.products.v1.ListAggregationProductsResponse
	138, // 241: optisam.products.v1.ProductService.ListAggregations:output_type -> optisam.products.v1.ListAggregationsResponse
	60,  // 242: optisam.products.v1.ProductService.UpdateAggregation:output_type -> optisam.products.v1.AggregationResponse
	60,  // 243: optisam.products.v1.ProductService.DeleteAggregation:output_type -> optisam.products.v1.AggregationResponse
	65,  // 244: optisam.products.v1.ProductService.OverviewProductQuality:output_type -> optisam.products.v1.OverviewProductQualityResponse
	67,  // 245: optisam.products.v1.ProductService.ProductMaintenancePerc:output_type -> optisam.products.v1.ProductMaintenancePercResponse
	70,  // 246: optisam.products.v1.ProductService.ProductNoMaintenanceDetails:output_type -> optisam.products.v1.ProductNoMaintenanceDetailsResponse
	147, // 247: optisam.products.v1.ProductService.DropProductData:output_type -> optisam.products.v1.DropProductDataResponse
	149, // 248: optisam.products.v1.ProductService.DropAggregationData:output_type -> optisam.products.v1.DropAggregationDataResponse
	57,  // 249: optisam.products.v1.ProductService.CreateAcqRight:output_type -> optisam.products.v1.AcqRightResponse
	50,  // 250: optisam.products.v1.ProductService.CreateDashboardUpdateJob:output_type -> optisam.products.v1.CreateDashboardUpdateJobResponse
	51,  // 251: optisam.products.v1.ProductService.UpsertAllocatedMetricEquipment:output_type -> optisam.products.v1.UpsertAllocateMetricEquipementResponse
	51,  // 252: optisam.products.v1.ProductService.DeleteAllocatedMetricEquipment:output_type -> optisam.products.v1.UpsertAllocateMetricEquipementResponse
	55,  // 253: optisam.products.v1.ProductService.GetBanner:output_type -> optisam.products.v1.GetBannerResponse
	57,  // 254: optisam.products.v1.ProductService.UpdateAcqRight:output_type -> optisam.products.v1.AcqRightResponse
	26,  // 255: optisam.products.v1.ProductService.UpdateAcqrightsSharedLicenses:output_type -> optisam.products.v1.UpdateSharedLicensesResponse
	26,  // 256: optisam.products.v1.ProductService.UpdateAggrightsSharedLicenses:output_type -> optisam.products.v1.UpdateSharedLicensesResponse
	40,  // 257: optisam.products.v1.ProductService.DeleteAcqRight:output_type -> optisam.products.v1.DeleteAcqRightResponse
	42,  // 258: optisam.products.v1.ProductService.DownloadAcqRightFile:output_type -> optisam.products.v1.DownloadAcqRightFileResponse
	38,  // 259: optisam.products.v1.ProductService.GetEquipmentsByProduct:output_type -> optisam.products.v1.GetEquipmentsByProductResponse
	32,  // 260: optisam.products.v1.ProductService.GetAggregationAcqrightsExpandedView:output_type -> optisam.products.v1.GetAggregationAcqrightsExpandedViewResponse
	34,  // 261: optisam.products.v1.ProductService.GetAggregationProductsExpandedView:output_type -> optisam.products.v1.GetAggregationProductsExpandedViewResponse
	30,  // 262: optisam.products.v1.ProductService.GetApplicationsByProduct:output_type -> optisam.products.v1.GetApplicationsByProductResponse
	28,  // 263: optisam.products.v1.ProductService.GetProductCountByApp:output_type -> optisam.products.v1.GetProductCountByAppResponse
	161, // 264: optisam.products.v1.ProductService.UpsertProductConcurrentUser:output_type -> optisam.products.v1.ProductConcurrentUserResponse
	156, // 265: optisam.products.v1.ProductService.ListNominativeUser:output_type -> optisam.products.v1.ListNominativeUsersResponse
	157, // 266: optisam.products.v1.ProductService.NominativeUserExport:output_type -> optisam.products.v1.ListNominativeUsersExportResponse
	165, // 267: optisam.products.v1.ProductService.ConcurrentUserExport:output_type -> optisam.products.v1.ListConcurrentUsersResponse
	165, // 268: optisam.products.v1.ProductService.ListConcurrentUsers:output_type -> optisam.products.v1.ListConcurrentUsersResponse
	168, // 269: optisam.products.v1.ProductService.DeleteConcurrentUsers:output_type -> optisam.products.v1.DeleteConcurrentUsersResponse
	170, // 270: optisam.products.v1.ProductService.DeleteNominativeUsers:output_type -> optisam.products.v1.DeleteNominativeUserResponse
	21,  // 271: optisam.products.v1.ProductService.GetTotalSharedAmount:output_type -> optisam.products.v1.GetTotalSharedAmountResponse
	17,  // 272: optisam.products.v1.ProductService.GroupComplianceProduct:output_type -> optisam.products.v1.GroupComplianceProductResponse
	15,  // 273: optisam.products.v1.ProductService.GetProductListByEditor:output_type -> optisam.products.v1.GetProductListByEditorResponse
	172, // 274: optisam.products.v1.ProductService.GetConcurrentUsersHistroy:output_type -> optisam.products.v1.GetConcurrentUsersHistroyResponse
	180, // 275: optisam.products.v1.ProductService.GetUnderusageLicenceByEditorProduct:output_type -> optisam.products.v1.GetUnderusageByEditorResponse
	13,  // 276: optisam.products.v1.ProductService.GetMetric:output_type -> optisam.products.v1.GetMetricResponse
	9,   // 277: optisam.products.v1.ProductService.DeleteSharedLicenses:output_type -> optisam.products.v1.DeleteSharedLicensesResponse
	183, // 278: optisam.products.v1.ProductService.ListNominativeUserFileUpload:output_type -> optisam.products.v1.ListNominativeUsersFileUploadResponse
	186, // 279: optisam.products.v1.ProductService.GetEditorExpensesByScope:output_type -> optisam.products.v1.EditorExpensesByScopeResponse
	189, // 280: optisam.products.v1.ProductService.GetEditorProductExpensesByScope:output_type -> optisam.products.v1.EditorProductExpensesByScopeResponse
	192, // 281: optisam.products.v1.ProductService.ProductLocationType:output_type -> optisam.products.v1.GetDeploymentTypeResponse
	194, // 282: optisam.products.v1.ProductService.GetAggregationById:output_type -> optisam.products.v1.GetAggregationByIdResponse
	196, // 283: optisam.products.v1.ProductService.GetProductInformationBySwidTag:output_type -> optisam.products.v1.GetProductInformationBySwidTagResponse
	11,  // 284: optisam.products.v1.ProductService.GetMaintenanceBySwidtag:output_type -> optisam.products.v1.GetMaintenanceBySwidtagResponse
	210, // [210:285] is the sub-list for method output_type
	135, // [135:210] is the sub-list for method input_type
	135, // [135:135] is the sub-list for extension type_name
	135, // [135:135] is the sub-list for extension extendee
	0,   // [0:135] is the sub-list for field type_name
}

func init() { file_product_proto_init() }
func file_product_proto_init() {
	if File_product_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSharedLicensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSharedLicensesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaintenanceBySwidtagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaintenanceBySwidtagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductListByEditorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductListByEditorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupComplianceProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupComplianceProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicencesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalSharedAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalSharedAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableLicensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableLicensesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSharedLicensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAggrightsSharedLicensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSharedLicensesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductCountByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductCountByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicationsByProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicationsByProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationAcqrightsExpandedViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationAcqrightsExpandedViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationProductsExpandedViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationProductsExpandedViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregationProductViewOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregationProductViewOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquipmentsByProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquipmentsByProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAcqRightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAcqRightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAcqRightFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAcqRightFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAggregatedRightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAggregatedRightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAggregatedRightsFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadAggregatedRightsFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDashboardUpdateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAllocateMetricEquipementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropAllocateMetricEquipementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDashboardUpdateJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAllocateMetricEquipementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllEditorsCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllEditorsCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBannerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBannerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcqRightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcqRightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedRightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedRightsView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedRightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewProductQualityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewProductQualityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductMaintenancePercRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductMaintenancePercResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPerc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductNoMaintenanceDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductNoMaintenanceDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductNoMain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsPerEditorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsPerEditorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRightsInfoByEditorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRightsInfoByEditorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RightsInfoByEditor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditorProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedRightDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedRightDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductAggregationViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregationProductViewSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductAggregationViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregationView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeployedAndAcquiredEditorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEditorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEditorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEditorProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEditorProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Editor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductExpand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverdeployedProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverdeployedProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareExpenditureByScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareExpenditureByScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardQualityProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardQualityProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardQualityProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsLicenses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsCosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareExpensePercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsPerMetricTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterfeitedProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterfeitedProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsPerMetricTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardOverviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardOverviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAcqRightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAcqRightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcqRightsSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcqRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregatedAcqRightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregatedAcqRightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcqRightsAggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsAggregationSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsAggregationRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsAggregationRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAggregationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationsSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationEditorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationEditorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAggregationProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropProductDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropProductDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropAggregationDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropAggregationDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpserNominativeUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominativeUserDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpserNominativeUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNominativeUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominativeUserSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominativeUsersExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNominativeUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNominativeUsersExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominativeUserExport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominativeUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductConcurrentUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductConcurrentUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConcurrentUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConcurrentUsersExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrentUserSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConcurrentUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrentUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConcurrentUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConcurrentUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNominativeUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNominativeUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConcurrentUsersHistroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConcurrentUsersHistroyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrentUsersByDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrentUsersByMonth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupComplianceEditorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupComplianceEditorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopesEditorCosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnderusageByEditorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnderusageByEditorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnderusageByEditorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNominativeUsersFileUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNominativeUsersFileUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNominativeUsersFileUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditorExpensesByScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditorExpensesByScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditorExpensesByScopeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditorProductsExpensesByScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditorProductExpensesByScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditorProductExpensesByScopeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductInformationBySwidTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductInformationBySwidTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNominativeUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeadLetterQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePostgresBatchSucessNomUSers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDgraphBatchSuccessCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSharedLicensesRequest_SharedLicenses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAggrightsSharedLicensesRequest_SharedLicenses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductCountByAppResponseApplications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProductRequestApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProductRequestEquipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProductRequestEquipmentEquipmentuser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_product_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   199,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_product_proto_goTypes,
		DependencyIndexes: file_product_proto_depIdxs,
		EnumInfos:         file_product_proto_enumTypes,
		MessageInfos:      file_product_proto_msgTypes,
	}.Build()
	File_product_proto = out.File
	file_product_proto_rawDesc = nil
	file_product_proto_goTypes = nil
	file_product_proto_depIdxs = nil
}
