// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.tech.orange/optisam/optisam-it/optisam-services/common/optisam/workerqueue/worker (interfaces: Worker)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	job "gitlab.tech.orange/optisam/optisam-it/optisam-services/common/optisam/workerqueue/job"
	reflect "reflect"
)

// MockWorker is a mock of Worker interface
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// DoWork mocks base method
func (m *MockWorker) DoWork(arg0 context.Context, arg1 *job.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoWork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoWork indicates an expected call of DoWork
func (mr *MockWorkerMockRecorder) DoWork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWork", reflect.TypeOf((*MockWorker)(nil).DoWork), arg0, arg1)
}

// ID mocks base method
func (m *MockWorker) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockWorkerMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockWorker)(nil).ID))
}
