// Copyright (C) 2019 Orange
// 
// This software is distributed under the terms and conditions of the 'Apache License 2.0'
// license which can be found in the file 'License.txt' in this package distribution 
// or at 'http://www.apache.org/licenses/LICENSE-2.0'. 

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: acqrights.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on UpsertAcqRightsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertAcqRightsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sku

	// no validation rules for Swidtag

	// no validation rules for ProductName

	// no validation rules for ProductEditor

	// no validation rules for MetricType

	// no validation rules for NumLicensesAcquired

	// no validation rules for NumLicencesMaintainance

	// no validation rules for AvgUnitPrice

	// no validation rules for AvgMaintenanceUnitPrice

	// no validation rules for TotalPurchaseCost

	// no validation rules for TotalMaintenanceCost

	// no validation rules for TotalCost

	// no validation rules for Entity

	// no validation rules for Scope

	return nil
}

// UpsertAcqRightsRequestValidationError is the validation error returned by
// UpsertAcqRightsRequest.Validate if the designated constraints aren't met.
type UpsertAcqRightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAcqRightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAcqRightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAcqRightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAcqRightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAcqRightsRequestValidationError) ErrorName() string {
	return "UpsertAcqRightsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAcqRightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAcqRightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAcqRightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAcqRightsRequestValidationError{}

// Validate checks the field values on UpsertAcqRightsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertAcqRightsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertAcqRightsResponseValidationError is the validation error returned by
// UpsertAcqRightsResponse.Validate if the designated constraints aren't met.
type UpsertAcqRightsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAcqRightsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAcqRightsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAcqRightsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAcqRightsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAcqRightsResponseValidationError) ErrorName() string {
	return "UpsertAcqRightsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAcqRightsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAcqRightsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAcqRightsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAcqRightsResponseValidationError{}

// Validate checks the field values on ListAcqRightsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	// no validation rules for SortBy

	// no validation rules for SortOrder

	if v, ok := interface{}(m.GetSearchParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListAcqRightsRequestValidationError is the validation error returned by
// ListAcqRightsRequest.Validate if the designated constraints aren't met.
type ListAcqRightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsRequestValidationError) ErrorName() string {
	return "ListAcqRightsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsRequestValidationError{}

// Validate checks the field values on AcqRightsSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcqRightsSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSKU()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "SKU",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "ProductName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AcqRightsSearchParamsValidationError is the validation error returned by
// AcqRightsSearchParams.Validate if the designated constraints aren't met.
type AcqRightsSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcqRightsSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcqRightsSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcqRightsSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcqRightsSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcqRightsSearchParamsValidationError) ErrorName() string {
	return "AcqRightsSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AcqRightsSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcqRightsSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcqRightsSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcqRightsSearchParamsValidationError{}

// Validate checks the field values on ListAcqRightsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAcquiredRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsResponseValidationError{
					field:  fmt.Sprintf("AcquiredRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsResponseValidationError is the validation error returned by
// ListAcqRightsResponse.Validate if the designated constraints aren't met.
type ListAcqRightsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsResponseValidationError) ErrorName() string {
	return "ListAcqRightsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsResponseValidationError{}

// Validate checks the field values on AcqRights with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AcqRights) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Entity

	// no validation rules for SKU

	// no validation rules for SwidTag

	// no validation rules for ProductName

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for AcquiredLicensesNumber

	// no validation rules for LicensesUnderMaintenanceNumber

	// no validation rules for AvgLicenesUnitPrice

	// no validation rules for AvgMaintenanceUnitPrice

	// no validation rules for TotalPurchaseCost

	// no validation rules for TotalMaintenanceCost

	// no validation rules for TotalCost

	return nil
}

// AcqRightsValidationError is the validation error returned by
// AcqRights.Validate if the designated constraints aren't met.
type AcqRightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcqRightsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcqRightsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcqRightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcqRightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcqRightsValidationError) ErrorName() string { return "AcqRightsValidationError" }

// Error satisfies the builtin error interface
func (e AcqRightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcqRights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcqRightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcqRightsValidationError{}

// Validate checks the field values on StringFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilteringOrder

	// no validation rules for Filteringkey

	// no validation rules for FilterType

	return nil
}

// StringFilterValidationError is the validation error returned by
// StringFilter.Validate if the designated constraints aren't met.
type StringFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFilterValidationError) ErrorName() string { return "StringFilterValidationError" }

// Error satisfies the builtin error interface
func (e StringFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFilterValidationError{}

// Validate checks the field values on ListAcqRightsAggregationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	// no validation rules for SortBy

	// no validation rules for SortOrder

	if v, ok := interface{}(m.GetSearchParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListAcqRightsAggregationRequestValidationError is the validation error
// returned by ListAcqRightsAggregationRequest.Validate if the designated
// constraints aren't met.
type ListAcqRightsAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationRequestValidationError) ErrorName() string {
	return "ListAcqRightsAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationRequestValidationError{}

// Validate checks the field values on ListAcqRightsAggregationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListAcqRightsAggregationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAggregations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsAggregationResponseValidationError{
					field:  fmt.Sprintf("Aggregations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsAggregationResponseValidationError is the validation error
// returned by ListAcqRightsAggregationResponse.Validate if the designated
// constraints aren't met.
type ListAcqRightsAggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationResponseValidationError) ErrorName() string {
	return "ListAcqRightsAggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationResponseValidationError{}

// Validate checks the field values on AcqRightsAggregation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcqRightsAggregation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Scope

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for TotalCost

	return nil
}

// AcqRightsAggregationValidationError is the validation error returned by
// AcqRightsAggregation.Validate if the designated constraints aren't met.
type AcqRightsAggregationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcqRightsAggregationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcqRightsAggregationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcqRightsAggregationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcqRightsAggregationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcqRightsAggregationValidationError) ErrorName() string {
	return "AcqRightsAggregationValidationError"
}

// Error satisfies the builtin error interface
func (e AcqRightsAggregationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcqRightsAggregation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcqRightsAggregationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcqRightsAggregationValidationError{}

// Validate checks the field values on ListAcqRightsAggregationSearchParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListAcqRightsAggregationSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSKU()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "SKU",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListAcqRightsAggregationSearchParamsValidationError is the validation error
// returned by ListAcqRightsAggregationSearchParams.Validate if the designated
// constraints aren't met.
type ListAcqRightsAggregationSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationSearchParamsValidationError) ErrorName() string {
	return "ListAcqRightsAggregationSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationSearchParamsValidationError{}

// Validate checks the field values on ListAcqRightsAggregationRecordsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListAcqRightsAggregationRecordsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AggregationId

	return nil
}

// ListAcqRightsAggregationRecordsRequestValidationError is the validation
// error returned by ListAcqRightsAggregationRecordsRequest.Validate if the
// designated constraints aren't met.
type ListAcqRightsAggregationRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationRecordsRequestValidationError) ErrorName() string {
	return "ListAcqRightsAggregationRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationRecordsRequestValidationError{}

// Validate checks the field values on ListAcqRightsAggregationRecordsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListAcqRightsAggregationRecordsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAcquiredRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsAggregationRecordsResponseValidationError{
					field:  fmt.Sprintf("AcquiredRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsAggregationRecordsResponseValidationError is the validation
// error returned by ListAcqRightsAggregationRecordsResponse.Validate if the
// designated constraints aren't met.
type ListAcqRightsAggregationRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationRecordsResponseValidationError) ErrorName() string {
	return "ListAcqRightsAggregationRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationRecordsResponseValidationError{}

// Validate checks the field values on DeleteProductAggregationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProductAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Scope

	return nil
}

// DeleteProductAggregationRequestValidationError is the validation error
// returned by DeleteProductAggregationRequest.Validate if the designated
// constraints aren't met.
type DeleteProductAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductAggregationRequestValidationError) ErrorName() string {
	return "DeleteProductAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductAggregationRequestValidationError{}

// Validate checks the field values on DeleteProductAggregationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DeleteProductAggregationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteProductAggregationResponseValidationError is the validation error
// returned by DeleteProductAggregationResponse.Validate if the designated
// constraints aren't met.
type DeleteProductAggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductAggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductAggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductAggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductAggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductAggregationResponseValidationError) ErrorName() string {
	return "DeleteProductAggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductAggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductAggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductAggregationResponseValidationError{}

// Validate checks the field values on ListProductAggregationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductAggregationResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAggregations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductAggregationResponseValidationError{
					field:  fmt.Sprintf("Aggregations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductAggregationResponseValidationError is the validation error
// returned by ListProductAggregationResponse.Validate if the designated
// constraints aren't met.
type ListProductAggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationResponseValidationError) ErrorName() string {
	return "ListProductAggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationResponseValidationError{}

// Validate checks the field values on ListProductAggregationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListProductAggregationRequestValidationError is the validation error
// returned by ListProductAggregationRequest.Validate if the designated
// constraints aren't met.
type ListProductAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationRequestValidationError) ErrorName() string {
	return "ListProductAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationRequestValidationError{}

// Validate checks the field values on ProductAggregationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAggregationMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for Scope

	return nil
}

// ProductAggregationMessageValidationError is the validation error returned by
// ProductAggregationMessage.Validate if the designated constraints aren't met.
type ProductAggregationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationMessageValidationError) ErrorName() string {
	return "ProductAggregationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationMessageValidationError{}

// Validate checks the field values on ProductAggregation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAggregation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for Scope

	return nil
}

// ProductAggregationValidationError is the validation error returned by
// ProductAggregation.Validate if the designated constraints aren't met.
type ProductAggregationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationValidationError) ErrorName() string {
	return "ProductAggregationValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationValidationError{}

// Validate checks the field values on ListAcqRightsEditorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsEditorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Scope

	return nil
}

// ListAcqRightsEditorsRequestValidationError is the validation error returned
// by ListAcqRightsEditorsRequest.Validate if the designated constraints
// aren't met.
type ListAcqRightsEditorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsEditorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsEditorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsEditorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsEditorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsEditorsRequestValidationError) ErrorName() string {
	return "ListAcqRightsEditorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsEditorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsEditorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsEditorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsEditorsRequestValidationError{}

// Validate checks the field values on ListAcqRightsEditorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsEditorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListAcqRightsEditorsResponseValidationError is the validation error returned
// by ListAcqRightsEditorsResponse.Validate if the designated constraints
// aren't met.
type ListAcqRightsEditorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsEditorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsEditorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsEditorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsEditorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsEditorsResponseValidationError) ErrorName() string {
	return "ListAcqRightsEditorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsEditorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsEditorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsEditorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsEditorsResponseValidationError{}

// Validate checks the field values on ListAcqRightsMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsMetricsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Scope

	return nil
}

// ListAcqRightsMetricsRequestValidationError is the validation error returned
// by ListAcqRightsMetricsRequest.Validate if the designated constraints
// aren't met.
type ListAcqRightsMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsMetricsRequestValidationError) ErrorName() string {
	return "ListAcqRightsMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsMetricsRequestValidationError{}

// Validate checks the field values on ListAcqRightsMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsMetricsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListAcqRightsMetricsResponseValidationError is the validation error returned
// by ListAcqRightsMetricsResponse.Validate if the designated constraints
// aren't met.
type ListAcqRightsMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsMetricsResponseValidationError) ErrorName() string {
	return "ListAcqRightsMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsMetricsResponseValidationError{}

// Validate checks the field values on ListAcqRightsProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Scope

	// no validation rules for Editor

	// no validation rules for Metric

	return nil
}

// ListAcqRightsProductsRequestValidationError is the validation error returned
// by ListAcqRightsProductsRequest.Validate if the designated constraints
// aren't met.
type ListAcqRightsProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsProductsRequestValidationError) ErrorName() string {
	return "ListAcqRightsProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsProductsRequestValidationError{}

// Validate checks the field values on ListAcqRightsProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAcqrightsProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsProductsResponseValidationError{
					field:  fmt.Sprintf("AcqrightsProducts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsProductsResponseValidationError is the validation error
// returned by ListAcqRightsProductsResponse.Validate if the designated
// constraints aren't met.
type ListAcqRightsProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsProductsResponseValidationError) ErrorName() string {
	return "ListAcqRightsProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsProductsResponseValidationError{}

// Validate checks the field values on
// ListAcqRightsProductsResponse_AcqRightsProducts with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListAcqRightsProductsResponse_AcqRightsProducts) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Swidtag

	// no validation rules for ProductName

	return nil
}

// ListAcqRightsProductsResponse_AcqRightsProductsValidationError is the
// validation error returned by
// ListAcqRightsProductsResponse_AcqRightsProducts.Validate if the designated
// constraints aren't met.
type ListAcqRightsProductsResponse_AcqRightsProductsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) ErrorName() string {
	return "ListAcqRightsProductsResponse_AcqRightsProductsValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsProductsResponse_AcqRightsProductsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsProductsResponse_AcqRightsProducts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsProductsResponse_AcqRightsProductsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsProductsResponse_AcqRightsProductsValidationError{}
