syntax = "proto3";

option go_package = "v1";

package optisam.acrights.v1;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "validate/validate.proto";

service AcqRightsService {

  rpc UpsertAcqRights(UpsertAcqRightsRequest)
      returns (UpsertAcqRightsResponse) {
    option (google.api.http) = {
      post : "/api/v1/acqrights"
      body : "*"
    };
  }

  rpc ListAcqRights(ListAcqRightsRequest) returns (ListAcqRightsResponse) {
    option (google.api.http) = {
      get : "/api/v1/acqrights"
    };
  }
  rpc ListAcqRightsAggregation(ListAcqRightsAggregationRequest)
      returns (ListAcqRightsAggregationResponse) {
    option (google.api.http) = {
      get : "/api/v1/acqrights/aggregations"
    };
  }

  rpc ListAcqRightsAggregationRecords(ListAcqRightsAggregationRecordsRequest)
      returns (ListAcqRightsAggregationRecordsResponse) {
    option (google.api.http) = {
      get : "/api/v1/acqrights/aggregations/{aggregation_id}/records"
    };
  }

  rpc CreateProductAggregation(ProductAggregationMessage)
      returns (ProductAggregationMessage) {
    option (google.api.http) = {
      post : "/api/v1/aggregations"
      body : "*"
    };
  }

  rpc ListAcqRightsEditors(ListAcqRightsEditorsRequest)
      returns (ListAcqRightsEditorsResponse) {
    option (google.api.http) = {
      get : "/api/v1/aggregations/editors"
    };
  }

  rpc ListAcqRightsProducts(ListAcqRightsProductsRequest)
      returns (ListAcqRightsProductsResponse) {
    option (google.api.http) = {
      get : "/api/v1/aggregations/products"
    };
  }

  rpc ListAcqRightsMetrics(ListAcqRightsMetricsRequest)
      returns (ListAcqRightsMetricsResponse) {
    option (google.api.http) = {
      get : "/api/v1/aggregations/metrics"
    };
  }

  rpc ListProductAggregation(ListProductAggregationRequest)
      returns (ListProductAggregationResponse) {
    option (google.api.http) = {
      get : "/api/v1/aggregations"
    };
  }
  // update product aggregation
  rpc UpdateProductAggregation(ProductAggregationMessage)
      returns (ProductAggregationMessage) {
    option (google.api.http) = {
      put : "/api/v1/aggregations/{ID}"
      body : "*"
    };
  }

  rpc DeleteProductAggregation(DeleteProductAggregationRequest)
      returns (DeleteProductAggregationResponse) {
    option (google.api.http) = {
      delete : "/api/v1/aggregations/{ID}"
    };
  }
}

message UpsertAcqRightsRequest {
  string sku = 1 [ (validate.rules).string.min_len = 1 ];
  string swidtag = 2 [ (validate.rules).string.min_len = 1 ];
  string product_name = 3;
  string product_editor = 4;
  string metric_type = 5;
  int32 num_licenses_acquired = 6;
  int32 num_licences_maintainance = 7;
  float avg_unit_price = 8;
  float avg_maintenance_unit_price = 9;
  float total_purchase_cost = 10;
  float total_maintenance_cost = 11;
  float total_cost = 12;
  string entity = 13;
  string scope = 14 [ (validate.rules).string.min_len = 1 ];
}

message UpsertAcqRightsResponse { bool success = 1; }

message ListAcqRightsRequest {
  int32 page_num = 1 [
    (validate.rules).int32 = {gte : 1, lt : 1000},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Page number", minimum : 1, maximum : 1000}
  ];
  int32 page_size = 2 [
    (validate.rules).int32 = {gte : 10, lt : 100},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Items per page", minimum : 10, maximum : 100}
  ];
  enum SortBy {
    ENTITY = 0;
    SKU = 1;
    SWID_TAG = 2;
    PRODUCT_NAME = 3;
    EDITOR = 4;
    METRIC = 5;
    ACQUIRED_LICENSES_NUMBER = 6;
    LICENSES_UNDER_MAINTENANCE_NUMBER = 7;
    AVG_LICENSE_UNIT_PRICE = 8;
    AVG_MAINTENANCE_UNIT_PRICE = 9;
    TOTAL_PURCHASE_COST = 10;
    TOTAL_MAINTENANCE_COST = 11;
    TOTAL_COST = 12;
  }
  SortBy sort_by = 3 [ (validate.rules).enum.defined_only = true ];
  SortOrder sort_order = 4; //[(validate.rules).enum.defined_only = true];
  AcqRightsSearchParams search_params = 5;
}

message AcqRightsSearchParams {
  StringFilter swidTag = 1;
  StringFilter SKU = 2;
  StringFilter editor = 3;
  StringFilter productName = 4;
  StringFilter metric = 5;
}

message ListAcqRightsResponse {
  int32 totalRecords = 1;
  repeated AcqRights acquired_rights = 2;
}

message AcqRights {
  string entity = 1;
  string SKU = 2;
  string swid_tag = 3;
  string product_name = 4;
  string editor = 5;
  string metric = 6;
  int32 acquired_licenses_number = 7;
  int32 licenses_under_maintenance_number = 8;
  float avg_licenes_unit_price = 9;
  float avg_maintenance_unit_price = 10;
  float total_purchase_cost = 11;
  float total_maintenance_cost = 12;
  float total_cost = 13;
}

message StringFilter {
  int32 filteringOrder = 1;
  string filteringkey = 2;
  bool filter_type = 3;
  repeated string filteringkey_multiple = 4;
}

enum SortOrder {
  asc = 0;
  desc = 1;
}

message ListAcqRightsAggregationRequest {
  int32 page_num = 1 [
    (validate.rules).int32 = {gte : 1, lt : 1000},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Page number", minimum : 1, maximum : 1000}
  ];
  int32 page_size = 2 [
    (validate.rules).int32 = {gte : 10},
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
        {description : "Items per page", minimum : 10, maximum : 100}
  ];
  enum SortBy {
    NAME = 0;
    EDITOR = 1;
    TOTAL_COST = 2;
    METRIC = 3;
  }
  SortBy sort_by = 3 [ (validate.rules).enum.defined_only = true ];
  SortOrder sort_order = 4;
  ListAcqRightsAggregationSearchParams search_params = 5;
}

message ListAcqRightsAggregationResponse {
  int32 totalRecords = 1;
  repeated AcqRightsAggregation aggregations = 2;
}

message AcqRightsAggregation {
  int32 ID = 1;
  string name = 2;
  string scope = 3;
  string editor = 4;
  repeated string swidtags = 5;
  repeated string skus = 6;
  string metric = 7;
  float total_cost = 8;
}

message ListAcqRightsAggregationSearchParams {
  StringFilter swidTag = 1;
  StringFilter name = 2;
  StringFilter editor = 3;
  StringFilter SKU = 5;
  StringFilter metric = 6;
  /* map<string,string> search_map = 5 [(validate.rules).map.keys.string = {in:
   * ["name",
   * "swidtag","version","category","editor","metric","numCptLicences","numAcqLicences","totalCost","deltaNumber","deltaCost","numOfApplications","numofEquipments"]}];*/
}

message ListAcqRightsAggregationRecordsRequest { int32 aggregation_id = 1; }

message ListAcqRightsAggregationRecordsResponse {
  repeated AcqRights acquired_rights = 1;
}

message DeleteProductAggregationRequest {
  int32 ID = 1;
  string scope = 2;
}

message DeleteProductAggregationResponse { bool success = 1; }

message ListProductAggregationResponse {
  repeated ProductAggregation aggregations = 1;
}

message ListProductAggregationRequest {
  // May be required in future
}

message ProductAggregationMessage {
  int32 ID = 1;
  string name = 2;
  string editor = 3;
  string metric = 4;
  string scope = 5;
  repeated string products = 6;
}

message ProductAggregation {
  int32 ID = 1;
  string name = 2;
  string editor = 3;
  repeated string product_names = 4;
  string metric = 5;
  string scope = 6;
  repeated string products = 7;
}

message ListAcqRightsEditorsRequest { string scope = 1; }
message ListAcqRightsEditorsResponse { repeated string editor = 1; }

message ListAcqRightsMetricsRequest { string scope = 1; }
message ListAcqRightsMetricsResponse { repeated string metric = 1; }

message ListAcqRightsProductsRequest { string scope = 1; string editor =2; string metric = 3;}
message ListAcqRightsProductsResponse {
  repeated AcqRightsProducts acqrights_products = 1;
  message AcqRightsProducts {
    string swidtag = 1;
    string product_name = 2;
  }
}
