// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: simulation.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _simulation_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SimulationByHardwareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SimulationByHardwareRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EquipType

	// no validation rules for EquipId

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return SimulationByHardwareRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMetricDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return SimulationByHardwareRequestValidationError{
					field:  fmt.Sprintf("MetricDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if !_SimulationByHardwareRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return SimulationByHardwareRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// SimulationByHardwareRequestValidationError is the validation error returned
// by SimulationByHardwareRequest.Validate if the designated constraints
// aren't met.
type SimulationByHardwareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimulationByHardwareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimulationByHardwareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimulationByHardwareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimulationByHardwareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimulationByHardwareRequestValidationError) ErrorName() string {
	return "SimulationByHardwareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SimulationByHardwareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimulationByHardwareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimulationByHardwareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimulationByHardwareRequestValidationError{}

var _SimulationByHardwareRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on SimulationByHardwareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SimulationByHardwareResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSimulationResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return SimulationByHardwareResponseValidationError{
					field:  fmt.Sprintf("SimulationResult[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SimulationByHardwareResponseValidationError is the validation error returned
// by SimulationByHardwareResponse.Validate if the designated constraints
// aren't met.
type SimulationByHardwareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimulationByHardwareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimulationByHardwareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimulationByHardwareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimulationByHardwareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimulationByHardwareResponseValidationError) ErrorName() string {
	return "SimulationByHardwareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SimulationByHardwareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimulationByHardwareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimulationByHardwareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimulationByHardwareResponseValidationError{}

// Validate checks the field values on SimulatedProductsLicenses with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SimulatedProductsLicenses) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	for idx, item := range m.GetLicenses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return SimulatedProductsLicensesValidationError{
					field:  fmt.Sprintf("Licenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SimFailureReason

	// no validation rules for MetricName

	return nil
}

// SimulatedProductsLicensesValidationError is the validation error returned by
// SimulatedProductsLicenses.Validate if the designated constraints aren't met.
type SimulatedProductsLicensesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimulatedProductsLicensesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimulatedProductsLicensesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimulatedProductsLicensesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimulatedProductsLicensesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimulatedProductsLicensesValidationError) ErrorName() string {
	return "SimulatedProductsLicensesValidationError"
}

// Error satisfies the builtin error interface
func (e SimulatedProductsLicensesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimulatedProductsLicenses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimulatedProductsLicensesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimulatedProductsLicensesValidationError{}

// Validate checks the field values on SimulatedProductLicense with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SimulatedProductLicense) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OldLicences

	// no validation rules for NewLicenses

	// no validation rules for Delta

	// no validation rules for SwidTag

	// no validation rules for ProductName

	// no validation rules for Editor

	return nil
}

// SimulatedProductLicenseValidationError is the validation error returned by
// SimulatedProductLicense.Validate if the designated constraints aren't met.
type SimulatedProductLicenseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimulatedProductLicenseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimulatedProductLicenseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimulatedProductLicenseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimulatedProductLicenseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimulatedProductLicenseValidationError) ErrorName() string {
	return "SimulatedProductLicenseValidationError"
}

// Error satisfies the builtin error interface
func (e SimulatedProductLicenseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimulatedProductLicense.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimulatedProductLicenseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimulatedProductLicenseValidationError{}

// Validate checks the field values on SimMetricDetails with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SimMetricDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetricType

	// no validation rules for MetricName

	return nil
}

// SimMetricDetailsValidationError is the validation error returned by
// SimMetricDetails.Validate if the designated constraints aren't met.
type SimMetricDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimMetricDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimMetricDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimMetricDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimMetricDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimMetricDetailsValidationError) ErrorName() string { return "SimMetricDetailsValidationError" }

// Error satisfies the builtin error interface
func (e SimMetricDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimMetricDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimMetricDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimMetricDetailsValidationError{}

// Validate checks the field values on EquipAttribute with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EquipAttribute) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if !_EquipAttribute_Name_Pattern.MatchString(m.GetName()) {
		return EquipAttributeValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[-_A-Za-z0-9]+$\"",
		}
	}

	if _, ok := _EquipAttribute_DataType_InLookup[m.GetDataType()]; !ok {
		return EquipAttributeValidationError{
			field:  "DataType",
			reason: "value must be in list [1 2 3]",
		}
	}

	// no validation rules for PrimaryKey

	// no validation rules for Displayed

	// no validation rules for Searchable

	// no validation rules for ParentIdentifier

	// no validation rules for MappedTo

	// no validation rules for Simulated

	switch m.Val.(type) {

	case *EquipAttribute_IntVal:
		// no validation rules for IntVal

	case *EquipAttribute_FloatVal:
		// no validation rules for FloatVal

	case *EquipAttribute_StringVal:
		// no validation rules for StringVal

	}

	switch m.OldVal.(type) {

	case *EquipAttribute_IntValOld:
		// no validation rules for IntValOld

	case *EquipAttribute_FloatValOld:
		// no validation rules for FloatValOld

	case *EquipAttribute_StringValOld:
		// no validation rules for StringValOld

	}

	return nil
}

// EquipAttributeValidationError is the validation error returned by
// EquipAttribute.Validate if the designated constraints aren't met.
type EquipAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipAttributeValidationError) ErrorName() string { return "EquipAttributeValidationError" }

// Error satisfies the builtin error interface
func (e EquipAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipAttributeValidationError{}

var _EquipAttribute_Name_Pattern = regexp.MustCompile("^[-_A-Za-z0-9]+$")

var _EquipAttribute_DataType_InLookup = map[DataTypes]struct{}{
	1: {},
	2: {},
	3: {},
}

// Validate checks the field values on SimulationByMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SimulationByMetricRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Editor

	for idx, item := range m.GetMetricDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return SimulationByMetricRequestValidationError{
					field:  fmt.Sprintf("MetricDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if !_SimulationByMetricRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return SimulationByMetricRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// SimulationByMetricRequestValidationError is the validation error returned by
// SimulationByMetricRequest.Validate if the designated constraints aren't met.
type SimulationByMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimulationByMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimulationByMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimulationByMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimulationByMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimulationByMetricRequestValidationError) ErrorName() string {
	return "SimulationByMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SimulationByMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimulationByMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimulationByMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimulationByMetricRequestValidationError{}

var _SimulationByMetricRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on MetricSimDetails with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MetricSimDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Swidtag

	// no validation rules for AggregationName

	// no validation rules for MetricName

	// no validation rules for UnitCost

	// no validation rules for Sku

	return nil
}

// MetricSimDetailsValidationError is the validation error returned by
// MetricSimDetails.Validate if the designated constraints aren't met.
type MetricSimDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricSimDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricSimDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricSimDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricSimDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricSimDetailsValidationError) ErrorName() string { return "MetricSimDetailsValidationError" }

// Error satisfies the builtin error interface
func (e MetricSimDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricSimDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricSimDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricSimDetailsValidationError{}

// Validate checks the field values on SimulationByMetricResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SimulationByMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	for idx, item := range m.GetMetricSimResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return SimulationByMetricResponseValidationError{
					field:  fmt.Sprintf("MetricSimResult[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SimFailureReason

	return nil
}

// SimulationByMetricResponseValidationError is the validation error returned
// by SimulationByMetricResponse.Validate if the designated constraints aren't met.
type SimulationByMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimulationByMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimulationByMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimulationByMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimulationByMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimulationByMetricResponseValidationError) ErrorName() string {
	return "SimulationByMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SimulationByMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimulationByMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimulationByMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimulationByMetricResponseValidationError{}

// Validate checks the field values on MetricSimulationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MetricSimulationResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Swidtag

	// no validation rules for AggregationName

	// no validation rules for MetricName

	// no validation rules for NumCptLicences

	// no validation rules for OldTotalCost

	// no validation rules for NewTotalCost

	// no validation rules for Sku

	// no validation rules for NotDeployed

	// no validation rules for MetricNotDefined

	return nil
}

// MetricSimulationResultValidationError is the validation error returned by
// MetricSimulationResult.Validate if the designated constraints aren't met.
type MetricSimulationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricSimulationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricSimulationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricSimulationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricSimulationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricSimulationResultValidationError) ErrorName() string {
	return "MetricSimulationResultValidationError"
}

// Error satisfies the builtin error interface
func (e MetricSimulationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricSimulationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricSimulationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricSimulationResultValidationError{}

// Validate checks the field values on GetConfigDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetConfigDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ConfigId

	// no validation rules for MetadataId

	return nil
}

// GetConfigDataRequestValidationError is the validation error returned by
// GetConfigDataRequest.Validate if the designated constraints aren't met.
type GetConfigDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigDataRequestValidationError) ErrorName() string {
	return "GetConfigDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigDataRequestValidationError{}

// Validate checks the field values on GetConfigDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetConfigDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// GetConfigDataResponseValidationError is the validation error returned by
// GetConfigDataResponse.Validate if the designated constraints aren't met.
type GetConfigDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigDataResponseValidationError) ErrorName() string {
	return "GetConfigDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigDataResponseValidationError{}

// Validate checks the field values on ListConfigRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EquipmentType

	return nil
}

// ListConfigRequestValidationError is the validation error returned by
// ListConfigRequest.Validate if the designated constraints aren't met.
type ListConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigRequestValidationError) ErrorName() string {
	return "ListConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigRequestValidationError{}

// Validate checks the field values on ListConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetConfigurations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListConfigResponseValidationError{
					field:  fmt.Sprintf("Configurations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListConfigResponseValidationError is the validation error returned by
// ListConfigResponse.Validate if the designated constraints aren't met.
type ListConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigResponseValidationError) ErrorName() string {
	return "ListConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigResponseValidationError{}

// Validate checks the field values on Configuration with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Configuration) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ConfigId

	// no validation rules for ConfigName

	// no validation rules for EquipmentType

	// no validation rules for CreatedBy

	if v, ok := interface{}(m.GetCreatedOn()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetConfigAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ConfigurationValidationError{
					field:  fmt.Sprintf("ConfigAttributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ConfigurationValidationError is the validation error returned by
// Configuration.Validate if the designated constraints aren't met.
type ConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationValidationError) ErrorName() string { return "ConfigurationValidationError" }

// Error satisfies the builtin error interface
func (e ConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationValidationError{}

// Validate checks the field values on Attribute with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Attribute) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AttributeId

	// no validation rules for AttributeName

	// no validation rules for ConfigFilename

	return nil
}

// AttributeValidationError is the validation error returned by
// Attribute.Validate if the designated constraints aren't met.
type AttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValidationError) ErrorName() string { return "AttributeValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValidationError{}

// Validate checks the field values on DeleteConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ConfigId

	return nil
}

// DeleteConfigRequestValidationError is the validation error returned by
// DeleteConfigRequest.Validate if the designated constraints aren't met.
type DeleteConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConfigRequestValidationError) ErrorName() string {
	return "DeleteConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConfigRequestValidationError{}

// Validate checks the field values on DeleteConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteConfigResponseValidationError is the validation error returned by
// DeleteConfigResponse.Validate if the designated constraints aren't met.
type DeleteConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConfigResponseValidationError) ErrorName() string {
	return "DeleteConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConfigResponseValidationError{}

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Data) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMetadata()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return DataValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}

// Validate checks the field values on CreateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ConfigName

	// no validation rules for EquipmentType

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return CreateConfigRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateConfigRequestValidationError is the validation error returned by
// CreateConfigRequest.Validate if the designated constraints aren't met.
type CreateConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConfigRequestValidationError) ErrorName() string {
	return "CreateConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConfigRequestValidationError{}

// Validate checks the field values on ConfigValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ConfigValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Value

	return nil
}

// ConfigValueValidationError is the validation error returned by
// ConfigValue.Validate if the designated constraints aren't met.
type ConfigValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValueValidationError) ErrorName() string { return "ConfigValueValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValueValidationError{}

// Validate checks the field values on CreateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateConfigResponseValidationError is the validation error returned by
// CreateConfigResponse.Validate if the designated constraints aren't met.
type CreateConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConfigResponseValidationError) ErrorName() string {
	return "CreateConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConfigResponseValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AttributeName

	// no validation rules for ConfigFilename

	return nil
}

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ConfigId

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return UpdateConfigRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdateConfigRequestValidationError is the validation error returned by
// UpdateConfigRequest.Validate if the designated constraints aren't met.
type UpdateConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigRequestValidationError) ErrorName() string {
	return "UpdateConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigRequestValidationError{}

// Validate checks the field values on UpdateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateConfigResponseValidationError is the validation error returned by
// UpdateConfigResponse.Validate if the designated constraints aren't met.
type UpdateConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigResponseValidationError) ErrorName() string {
	return "UpdateConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigResponseValidationError{}
