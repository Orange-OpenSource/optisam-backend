// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"encoding/json"
)

const deleteConfig = `-- name: DeleteConfig :exec
UPDATE config_master SET status=$1 where id=$2
`

type DeleteConfigParams struct {
	Status int32 `json:"status"`
	ID     int32 `json:"id"`
}

func (q *Queries) DeleteConfig(ctx context.Context, arg DeleteConfigParams) error {
	_, err := q.db.ExecContext(ctx, deleteConfig, arg.Status, arg.ID)
	return err
}

const deleteConfigData = `-- name: DeleteConfigData :exec
DELETE FROM config_metadata WHERE config_id=$1
`

func (q *Queries) DeleteConfigData(ctx context.Context, configID int32) error {
	_, err := q.db.ExecContext(ctx, deleteConfigData, configID)
	return err
}

const getConfig = `-- name: GetConfig :one
SELECT id,name,equipment_type,status,created_by,created_on,updated_by,updated_on from config_master where id=$1 AND status=$2
`

type GetConfigParams struct {
	ID     int32 `json:"id"`
	Status int32 `json:"status"`
}

func (q *Queries) GetConfig(ctx context.Context, arg GetConfigParams) (ConfigMaster, error) {
	row := q.db.QueryRowContext(ctx, getConfig, arg.ID, arg.Status)
	var i ConfigMaster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EquipmentType,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedOn,
		&i.UpdatedBy,
		&i.UpdatedOn,
	)
	return i, err
}

const getDataByMetadataID = `-- name: GetDataByMetadataID :many
SELECT attribute_value, json_data from config_data where metadata_id=$1
`

type GetDataByMetadataIDRow struct {
	AttributeValue string          `json:"attribute_value"`
	JsonData       json.RawMessage `json:"json_data"`
}

func (q *Queries) GetDataByMetadataID(ctx context.Context, metadataID int32) ([]GetDataByMetadataIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getDataByMetadataID, metadataID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDataByMetadataIDRow
	for rows.Next() {
		var i GetDataByMetadataIDRow
		if err := rows.Scan(&i.AttributeValue, &i.JsonData); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMetadatabyConfigID = `-- name: GetMetadatabyConfigID :many
Select id,equipment_type,attribute_name,config_filename from config_metadata where config_id=$1
`

type GetMetadatabyConfigIDRow struct {
	ID             int32  `json:"id"`
	EquipmentType  string `json:"equipment_type"`
	AttributeName  string `json:"attribute_name"`
	ConfigFilename string `json:"config_filename"`
}

func (q *Queries) GetMetadatabyConfigID(ctx context.Context, configID int32) ([]GetMetadatabyConfigIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMetadatabyConfigID, configID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMetadatabyConfigIDRow
	for rows.Next() {
		var i GetMetadatabyConfigIDRow
		if err := rows.Scan(
			&i.ID,
			&i.EquipmentType,
			&i.AttributeName,
			&i.ConfigFilename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listConfig = `-- name: ListConfig :many
SELECT id,name,equipment_type,status,created_by,created_on,updated_by,updated_on from config_master 
WHERE (CASE WHEN $1::bool THEN equipment_type = $2 ELSE TRUE END) AND
status = $3
`

type ListConfigParams struct {
	IsEquipType   bool   `json:"is_equip_type"`
	EquipmentType string `json:"equipment_type"`
	Status        int32  `json:"status"`
}

func (q *Queries) ListConfig(ctx context.Context, arg ListConfigParams) ([]ConfigMaster, error) {
	rows, err := q.db.QueryContext(ctx, listConfig, arg.IsEquipType, arg.EquipmentType, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ConfigMaster
	for rows.Next() {
		var i ConfigMaster
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EquipmentType,
			&i.Status,
			&i.CreatedBy,
			&i.CreatedOn,
			&i.UpdatedBy,
			&i.UpdatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
