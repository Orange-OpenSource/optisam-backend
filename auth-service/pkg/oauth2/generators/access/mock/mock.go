// Code generated by MockGen. DO NOT EDIT.
// Source: gopkg.in/oauth2.v3 (interfaces: AccessGenerate)

package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oauth2_v3 "gopkg.in/oauth2.v3"
)

// MockAccessGenerate is a mock of AccessGenerate interface
type MockAccessGenerate struct {
	ctrl     *gomock.Controller
	recorder *MockAccessGenerateMockRecorder
}

// MockAccessGenerateMockRecorder is the mock recorder for MockAccessGenerate
type MockAccessGenerateMockRecorder struct {
	mock *MockAccessGenerate
}

// NewMockAccessGenerate creates a new mock instance
func NewMockAccessGenerate(ctrl *gomock.Controller) *MockAccessGenerate {
	mock := &MockAccessGenerate{ctrl: ctrl}
	mock.recorder = &MockAccessGenerateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccessGenerate) EXPECT() *MockAccessGenerateMockRecorder {
	return m.recorder
}

// Token mocks base method
func (m *MockAccessGenerate) Token(arg0 *oauth2_v3.GenerateBasic, arg1 bool) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Token indicates an expected call of Token
func (mr *MockAccessGenerateMockRecorder) Token(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockAccessGenerate)(nil).Token), arg0, arg1)
}
