// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.tech.orange/optisam/optisam-it/optisam-services/auth-service/pkg/repository/v1 (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	v1 "gitlab.tech.orange/optisam/optisam-it/optisam-services/auth-service/pkg/api/v1"
	config "gitlab.tech.orange/optisam/optisam-it/optisam-services/auth-service/pkg/config"
	v10 "gitlab.tech.orange/optisam/optisam-it/optisam-services/auth-service/pkg/repository/v1"
	helper "gitlab.tech.orange/optisam/optisam-it/optisam-services/common/optisam/helper"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AccountInfo mocks base method.
func (m *MockRepository) AccountInfo(arg0 context.Context, arg1 string) (*v1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInfo", arg0, arg1)
	ret0, _ := ret[0].(*v1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo.
func (mr *MockRepositoryMockRecorder) AccountInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockRepository)(nil).AccountInfo), arg0, arg1)
}

// ChangePassword mocks base method.
func (m *MockRepository) ChangePassword(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockRepositoryMockRecorder) ChangePassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockRepository)(nil).ChangePassword), arg0, arg1, arg2)
}

// ChangeUserFirstLogin mocks base method.
func (m *MockRepository) ChangeUserFirstLogin(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserFirstLogin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserFirstLogin indicates an expected call of ChangeUserFirstLogin.
func (mr *MockRepositoryMockRecorder) ChangeUserFirstLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserFirstLogin", reflect.TypeOf((*MockRepository)(nil).ChangeUserFirstLogin), arg0, arg1)
}

// CreateAuthContext mocks base method.
func (m *MockRepository) CreateAuthContext(arg0 config.Config) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthContext", arg0)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthContext indicates an expected call of CreateAuthContext.
func (mr *MockRepositoryMockRecorder) CreateAuthContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthContext", reflect.TypeOf((*MockRepository)(nil).CreateAuthContext), arg0)
}

// DelToken mocks base method.
func (m *MockRepository) DelToken(arg0 context.Context, arg1 helper.EmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelToken indicates an expected call of DelToken.
func (mr *MockRepositoryMockRecorder) DelToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelToken", reflect.TypeOf((*MockRepository)(nil).DelToken), arg0, arg1)
}

// GenerateMailBody mocks base method.
func (m *MockRepository) GenerateMailBody(arg0 context.Context, arg1 helper.EmailParams, arg2 config.Config) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMailBody", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMailBody indicates an expected call of GenerateMailBody.
func (mr *MockRepositoryMockRecorder) GenerateMailBody(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMailBody", reflect.TypeOf((*MockRepository)(nil).GenerateMailBody), arg0, arg1, arg2)
}

// GetToken mocks base method.
func (m *MockRepository) GetToken(arg0 context.Context, arg1 helper.EmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetToken indicates an expected call of GetToken.
func (mr *MockRepositoryMockRecorder) GetToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockRepository)(nil).GetToken), arg0, arg1)
}

// IncreaseFailedLoginCount mocks base method.
func (m *MockRepository) IncreaseFailedLoginCount(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseFailedLoginCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseFailedLoginCount indicates an expected call of IncreaseFailedLoginCount.
func (mr *MockRepositoryMockRecorder) IncreaseFailedLoginCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseFailedLoginCount", reflect.TypeOf((*MockRepository)(nil).IncreaseFailedLoginCount), arg0, arg1)
}

// ResetLoginCount mocks base method.
func (m *MockRepository) ResetLoginCount(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLoginCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetLoginCount indicates an expected call of ResetLoginCount.
func (mr *MockRepositoryMockRecorder) ResetLoginCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLoginCount", reflect.TypeOf((*MockRepository)(nil).ResetLoginCount), arg0, arg1)
}

// SetToken mocks base method.
func (m *MockRepository) SetToken(arg0 context.Context, arg1 helper.EmailParams, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetToken indicates an expected call of SetToken.
func (mr *MockRepositoryMockRecorder) SetToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockRepository)(nil).SetToken), arg0, arg1, arg2)
}

// UserInfo mocks base method.
func (m *MockRepository) UserInfo(arg0 context.Context, arg1 string) (*v10.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInfo", arg0, arg1)
	ret0, _ := ret[0].(*v10.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserInfo indicates an expected call of UserInfo.
func (mr *MockRepositoryMockRecorder) UserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInfo", reflect.TypeOf((*MockRepository)(nil).UserInfo), arg0, arg1)
}

// UserOwnedGroupsDirect mocks base method.
func (m *MockRepository) UserOwnedGroupsDirect(arg0 context.Context, arg1 string) ([]*v10.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOwnedGroupsDirect", arg0, arg1)
	ret0, _ := ret[0].([]*v10.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOwnedGroupsDirect indicates an expected call of UserOwnedGroupsDirect.
func (mr *MockRepositoryMockRecorder) UserOwnedGroupsDirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOwnedGroupsDirect", reflect.TypeOf((*MockRepository)(nil).UserOwnedGroupsDirect), arg0, arg1)
}
