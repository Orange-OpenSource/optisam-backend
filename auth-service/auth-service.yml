---
kind: "Template"
apiVersion: "v1"
metadata:
  name: "deploy-template"
  annotations:
    description: "Template for deployment"
objects:
  - kind: Service
    apiVersion: v1
    metadata:
      name: svc-optisam-auth-${ENV}
      annotations:
        description: Exposes and load balances the application pods
      labels:
        run: optisam-auth-${ENV}
    spec:
      ports:
        - name: api
          port: 80
          targetPort: 8080
          protocol: TCP
      selector:
        app: optisam-auth-${ENV}
  - kind: Route
    apiVersion: v1
    metadata:
      name: route-svc-optisam-auth-${ENV}
      labels:
        run: optisam-auth-${ENV}
    spec:
      host: optisam-auth-${ENV}.apps.fr01.paas.tech.orange
      to:
        kind: Service
        name: svc-optisam-auth-${ENV}
      tls:
        termination: edge
  - kind: Service
    apiVersion: v1
    metadata:
      name: svc-optisam-auth-instrumentation-${ENV}
      annotations:
        description: Exposes and load balances the application pods
      labels:
        run: optisam-auth-instrumentation-${ENV}
    spec:
      ports:
        - name: api
          port: 80
          targetPort: 8081
          protocol: TCP
      selector:
        app: optisam-auth-${ENV}
  - kind: Route
    apiVersion: v1
    metadata:
      name: route-svc-optisam-auth-instrumentation-${ENV}
      labels:
        run: optisam-auth-${ENV}
    spec:
      host: optisam-auth-inst-${ENV}.apps.fr01.paas.tech.orange
      to:
        kind: Service
        name: svc-optisam-auth-instrumentation-${ENV}
      tls:
        termination: edge
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: optisam-auth-${ENV}
      labels:
        app: optisam-auth-${ENV}
    spec:
      replicas: ${{REPLICAS}}
      selector:
        app: optisam-auth-${ENV}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: optisam-auth-${ENV}
            internal-elasticsearch: 'true'
          name: optisam-auth-${ENV}
        spec:
          containers:
            - name: optisam-auth-${ENV}
              image: ${DOCKER_REGISTRY}/optisam/auth-service-${ENV}:${TAG}
              imagePullPolicy: Always
              env:
                - name: "ENV"
                  value: ${ENV}
                - name: "MIG_DIR"
                  value: ${MIG_DIR}
                - name: "MIG_VERSION"
                  value: ${MIG_VERSION}
              envFrom:
                - secretRef:
                    name: user-access
                - secretRef:
                    name: db-access
                - secretRef:
                    name: db-pass
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 8081
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /healthz
                  port: 8081
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 2
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /healthz
                  port: 8081
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 2
              resources:
                requests:
                  cpu: "5m"
                  memory: "20Mi"
                limits:
                  cpu: "80m"
                  memory: "150Mi"
              volumeMounts:
                - name: config-volume-${ENV}
                  mountPath: /opt/config/
                - name: secret-volume
                  mountPath: /opt/secret
                  readOnly: true
          volumes:
            - name: config-volume-${ENV}
              configMap:
                name: config-auth-${ENV}
            - name: secret-volume
              secret:
                secretName: secret-apiprivatekey-${ENV}
parameters:
  - name: MIG_DIR
    description: Postgres Database variable
    required: true
  - name: MIG_VERSION
    description: Postgres Database variable
    required: true
  - name: TAG
    description: Tag for Docker image
    value: "latest"
    required: true
  - name: ENV
    description: Env for deployment
    required: true
  - name: REPLICAS
    description: Pod replica count
    value: "1"
    required: true
  - name: DOCKER_REGISTRY
    description: Artifactory URL to download images
    value: "optisam-it-virt-docker-unstable.repos.tech.orange"
    required: true
