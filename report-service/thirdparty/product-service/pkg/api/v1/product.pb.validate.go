// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _product_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DeleteSharedLicensesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSharedLicensesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sku

	if !_DeleteSharedLicensesRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DeleteSharedLicensesRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if !_DeleteSharedLicensesRequest_RecieverScope_Pattern.MatchString(m.GetRecieverScope()) {
		return DeleteSharedLicensesRequestValidationError{
			field:  "RecieverScope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DeleteSharedLicensesRequestValidationError is the validation error returned
// by DeleteSharedLicensesRequest.Validate if the designated constraints
// aren't met.
type DeleteSharedLicensesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSharedLicensesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSharedLicensesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSharedLicensesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSharedLicensesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSharedLicensesRequestValidationError) ErrorName() string {
	return "DeleteSharedLicensesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSharedLicensesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSharedLicensesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSharedLicensesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSharedLicensesRequestValidationError{}

var _DeleteSharedLicensesRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

var _DeleteSharedLicensesRequest_RecieverScope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DeleteSharedLicensesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSharedLicensesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteSharedLicensesResponseValidationError is the validation error returned
// by DeleteSharedLicensesResponse.Validate if the designated constraints
// aren't met.
type DeleteSharedLicensesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSharedLicensesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSharedLicensesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSharedLicensesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSharedLicensesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSharedLicensesResponseValidationError) ErrorName() string {
	return "DeleteSharedLicensesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSharedLicensesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSharedLicensesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSharedLicensesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSharedLicensesResponseValidationError{}

// Validate checks the field values on GetMetricRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMetricRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sku

	if !_GetMetricRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetMetricRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// GetMetricRequestValidationError is the validation error returned by
// GetMetricRequest.Validate if the designated constraints aren't met.
type GetMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricRequestValidationError) ErrorName() string { return "GetMetricRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricRequestValidationError{}

var _GetMetricRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetMetricResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Metric

	return nil
}

// GetMetricResponseValidationError is the validation error returned by
// GetMetricResponse.Validate if the designated constraints aren't met.
type GetMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricResponseValidationError) ErrorName() string {
	return "GetMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricResponseValidationError{}

// Validate checks the field values on GetProductListByEditorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProductListByEditorRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_GetProductListByEditorRequest_Scopes_Pattern.MatchString(item) {
			return GetProductListByEditorRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	// no validation rules for Editor

	return nil
}

// GetProductListByEditorRequestValidationError is the validation error
// returned by GetProductListByEditorRequest.Validate if the designated
// constraints aren't met.
type GetProductListByEditorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductListByEditorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductListByEditorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductListByEditorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductListByEditorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductListByEditorRequestValidationError) ErrorName() string {
	return "GetProductListByEditorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductListByEditorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductListByEditorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductListByEditorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductListByEditorRequestValidationError{}

var _GetProductListByEditorRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetProductListByEditorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProductListByEditorResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetProductListByEditorResponseValidationError is the validation error
// returned by GetProductListByEditorResponse.Validate if the designated
// constraints aren't met.
type GetProductListByEditorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductListByEditorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductListByEditorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductListByEditorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductListByEditorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductListByEditorResponseValidationError) ErrorName() string {
	return "GetProductListByEditorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductListByEditorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductListByEditorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductListByEditorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductListByEditorResponseValidationError{}

// Validate checks the field values on GroupComplianceProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GroupComplianceProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_GroupComplianceProductRequest_Scopes_Pattern.MatchString(item) {
			return GroupComplianceProductRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	// no validation rules for Editor

	// no validation rules for ProductName

	return nil
}

// GroupComplianceProductRequestValidationError is the validation error
// returned by GroupComplianceProductRequest.Validate if the designated
// constraints aren't met.
type GroupComplianceProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupComplianceProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupComplianceProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupComplianceProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupComplianceProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupComplianceProductRequestValidationError) ErrorName() string {
	return "GroupComplianceProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupComplianceProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupComplianceProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupComplianceProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupComplianceProductRequestValidationError{}

var _GroupComplianceProductRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GroupComplianceProductResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GroupComplianceProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLicences() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return GroupComplianceProductResponseValidationError{
					field:  fmt.Sprintf("Licences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCost() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return GroupComplianceProductResponseValidationError{
					field:  fmt.Sprintf("Cost[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GroupComplianceProductResponseValidationError is the validation error
// returned by GroupComplianceProductResponse.Validate if the designated
// constraints aren't met.
type GroupComplianceProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupComplianceProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupComplianceProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupComplianceProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupComplianceProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupComplianceProductResponseValidationError) ErrorName() string {
	return "GroupComplianceProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupComplianceProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupComplianceProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupComplianceProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupComplianceProductResponseValidationError{}

// Validate checks the field values on LicencesData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LicencesData) Validate() error {
	if m == nil {
		return nil
	}

	if !_LicencesData_Scope_Pattern.MatchString(m.GetScope()) {
		return LicencesDataValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for AcquiredLicences

	// no validation rules for ComputedLicences

	return nil
}

// LicencesDataValidationError is the validation error returned by
// LicencesData.Validate if the designated constraints aren't met.
type LicencesDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicencesDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicencesDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicencesDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicencesDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicencesDataValidationError) ErrorName() string { return "LicencesDataValidationError" }

// Error satisfies the builtin error interface
func (e LicencesDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicencesData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicencesDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicencesDataValidationError{}

var _LicencesData_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on CostData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CostData) Validate() error {
	if m == nil {
		return nil
	}

	if !_CostData_Scope_Pattern.MatchString(m.GetScope()) {
		return CostDataValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for TotalCost

	// no validation rules for UnderusageCost

	// no validation rules for CounterfeitingCost

	return nil
}

// CostDataValidationError is the validation error returned by
// CostData.Validate if the designated constraints aren't met.
type CostDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CostDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CostDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CostDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CostDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CostDataValidationError) ErrorName() string { return "CostDataValidationError" }

// Error satisfies the builtin error interface
func (e CostDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCostData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CostDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CostDataValidationError{}

var _CostData_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetTotalSharedAmountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTotalSharedAmountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetTotalSharedAmountRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetTotalSharedAmountRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// GetTotalSharedAmountRequestValidationError is the validation error returned
// by GetTotalSharedAmountRequest.Validate if the designated constraints
// aren't met.
type GetTotalSharedAmountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalSharedAmountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalSharedAmountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalSharedAmountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalSharedAmountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalSharedAmountRequestValidationError) ErrorName() string {
	return "GetTotalSharedAmountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalSharedAmountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalSharedAmountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalSharedAmountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalSharedAmountRequestValidationError{}

var _GetTotalSharedAmountRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetTotalSharedAmountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTotalSharedAmountResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTotalSharedAmount() < 0 {
		return GetTotalSharedAmountResponseValidationError{
			field:  "TotalSharedAmount",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetTotalRecievedAmount() < 0 {
		return GetTotalSharedAmountResponseValidationError{
			field:  "TotalRecievedAmount",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// GetTotalSharedAmountResponseValidationError is the validation error returned
// by GetTotalSharedAmountResponse.Validate if the designated constraints
// aren't met.
type GetTotalSharedAmountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalSharedAmountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalSharedAmountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalSharedAmountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalSharedAmountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalSharedAmountResponseValidationError) ErrorName() string {
	return "GetTotalSharedAmountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalSharedAmountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalSharedAmountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalSharedAmountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalSharedAmountResponseValidationError{}

// Validate checks the field values on GetAvailableLicensesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAvailableLicensesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sku

	// no validation rules for Scope

	return nil
}

// GetAvailableLicensesRequestValidationError is the validation error returned
// by GetAvailableLicensesRequest.Validate if the designated constraints
// aren't met.
type GetAvailableLicensesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailableLicensesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailableLicensesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailableLicensesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailableLicensesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailableLicensesRequestValidationError) ErrorName() string {
	return "GetAvailableLicensesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailableLicensesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailableLicensesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailableLicensesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailableLicensesRequestValidationError{}

// Validate checks the field values on GetAvailableLicensesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAvailableLicensesResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAvailableLicenses() < 0 {
		return GetAvailableLicensesResponseValidationError{
			field:  "AvailableLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	for idx, item := range m.GetSharedData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return GetAvailableLicensesResponseValidationError{
					field:  fmt.Sprintf("SharedData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetTotalSharedLicenses() < 0 {
		return GetAvailableLicensesResponseValidationError{
			field:  "TotalSharedLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetTotalRecievedLicenses() < 0 {
		return GetAvailableLicensesResponseValidationError{
			field:  "TotalRecievedLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// GetAvailableLicensesResponseValidationError is the validation error returned
// by GetAvailableLicensesResponse.Validate if the designated constraints
// aren't met.
type GetAvailableLicensesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvailableLicensesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvailableLicensesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvailableLicensesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvailableLicensesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvailableLicensesResponseValidationError) ErrorName() string {
	return "GetAvailableLicensesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvailableLicensesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvailableLicensesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvailableLicensesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvailableLicensesResponseValidationError{}

// Validate checks the field values on UpdateSharedLicensesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSharedLicensesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sku

	for idx, item := range m.GetLicenseData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return UpdateSharedLicensesRequestValidationError{
					field:  fmt.Sprintf("LicenseData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if !_UpdateSharedLicensesRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return UpdateSharedLicensesRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// UpdateSharedLicensesRequestValidationError is the validation error returned
// by UpdateSharedLicensesRequest.Validate if the designated constraints
// aren't met.
type UpdateSharedLicensesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSharedLicensesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSharedLicensesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSharedLicensesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSharedLicensesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSharedLicensesRequestValidationError) ErrorName() string {
	return "UpdateSharedLicensesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSharedLicensesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSharedLicensesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSharedLicensesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSharedLicensesRequestValidationError{}

var _UpdateSharedLicensesRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on UpdateAggrightsSharedLicensesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateAggrightsSharedLicensesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sku

	for idx, item := range m.GetLicenseData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return UpdateAggrightsSharedLicensesRequestValidationError{
					field:  fmt.Sprintf("LicenseData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if !_UpdateAggrightsSharedLicensesRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return UpdateAggrightsSharedLicensesRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for AggregationName

	return nil
}

// UpdateAggrightsSharedLicensesRequestValidationError is the validation error
// returned by UpdateAggrightsSharedLicensesRequest.Validate if the designated
// constraints aren't met.
type UpdateAggrightsSharedLicensesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAggrightsSharedLicensesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAggrightsSharedLicensesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAggrightsSharedLicensesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAggrightsSharedLicensesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAggrightsSharedLicensesRequestValidationError) ErrorName() string {
	return "UpdateAggrightsSharedLicensesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAggrightsSharedLicensesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAggrightsSharedLicensesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAggrightsSharedLicensesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAggrightsSharedLicensesRequestValidationError{}

var _UpdateAggrightsSharedLicensesRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on UpdateSharedLicensesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSharedLicensesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpdateSharedLicensesResponseValidationError is the validation error returned
// by UpdateSharedLicensesResponse.Validate if the designated constraints
// aren't met.
type UpdateSharedLicensesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSharedLicensesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSharedLicensesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSharedLicensesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSharedLicensesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSharedLicensesResponseValidationError) ErrorName() string {
	return "UpdateSharedLicensesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSharedLicensesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSharedLicensesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSharedLicensesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSharedLicensesResponseValidationError{}

// Validate checks the field values on GetProductCountByAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProductCountByAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetProductCountByAppRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetProductCountByAppRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// GetProductCountByAppRequestValidationError is the validation error returned
// by GetProductCountByAppRequest.Validate if the designated constraints
// aren't met.
type GetProductCountByAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCountByAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCountByAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCountByAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCountByAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCountByAppRequestValidationError) ErrorName() string {
	return "GetProductCountByAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCountByAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCountByAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCountByAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCountByAppRequestValidationError{}

var _GetProductCountByAppRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetProductCountByAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProductCountByAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAppData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return GetProductCountByAppResponseValidationError{
					field:  fmt.Sprintf("AppData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetProductCountByAppResponseValidationError is the validation error returned
// by GetProductCountByAppResponse.Validate if the designated constraints
// aren't met.
type GetProductCountByAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCountByAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCountByAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCountByAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCountByAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCountByAppResponseValidationError) ErrorName() string {
	return "GetProductCountByAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCountByAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCountByAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCountByAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCountByAppResponseValidationError{}

// Validate checks the field values on GetApplicationsByProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetApplicationsByProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetApplicationsByProductRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetApplicationsByProductRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Swidtag

	return nil
}

// GetApplicationsByProductRequestValidationError is the validation error
// returned by GetApplicationsByProductRequest.Validate if the designated
// constraints aren't met.
type GetApplicationsByProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationsByProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationsByProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationsByProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationsByProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationsByProductRequestValidationError) ErrorName() string {
	return "GetApplicationsByProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationsByProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationsByProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationsByProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationsByProductRequestValidationError{}

var _GetApplicationsByProductRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetApplicationsByProductResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetApplicationsByProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetApplicationsByProductResponseValidationError is the validation error
// returned by GetApplicationsByProductResponse.Validate if the designated
// constraints aren't met.
type GetApplicationsByProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationsByProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationsByProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationsByProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationsByProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationsByProductResponseValidationError) ErrorName() string {
	return "GetApplicationsByProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationsByProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationsByProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationsByProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationsByProductResponseValidationError{}

// Validate checks the field values on
// GetAggregationAcqrightsExpandedViewRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetAggregationAcqrightsExpandedViewRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetAggregationAcqrightsExpandedViewRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetAggregationAcqrightsExpandedViewRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if utf8.RuneCountInString(m.GetAggregationName()) < 1 {
		return GetAggregationAcqrightsExpandedViewRequestValidationError{
			field:  "AggregationName",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Metric

	return nil
}

// GetAggregationAcqrightsExpandedViewRequestValidationError is the validation
// error returned by GetAggregationAcqrightsExpandedViewRequest.Validate if
// the designated constraints aren't met.
type GetAggregationAcqrightsExpandedViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAggregationAcqrightsExpandedViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAggregationAcqrightsExpandedViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAggregationAcqrightsExpandedViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAggregationAcqrightsExpandedViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAggregationAcqrightsExpandedViewRequestValidationError) ErrorName() string {
	return "GetAggregationAcqrightsExpandedViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAggregationAcqrightsExpandedViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAggregationAcqrightsExpandedViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAggregationAcqrightsExpandedViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAggregationAcqrightsExpandedViewRequestValidationError{}

var _GetAggregationAcqrightsExpandedViewRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on
// GetAggregationAcqrightsExpandedViewResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetAggregationAcqrightsExpandedViewResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAcqRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return GetAggregationAcqrightsExpandedViewResponseValidationError{
					field:  fmt.Sprintf("AcqRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAggregationAcqrightsExpandedViewResponseValidationError is the validation
// error returned by GetAggregationAcqrightsExpandedViewResponse.Validate if
// the designated constraints aren't met.
type GetAggregationAcqrightsExpandedViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAggregationAcqrightsExpandedViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAggregationAcqrightsExpandedViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAggregationAcqrightsExpandedViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAggregationAcqrightsExpandedViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAggregationAcqrightsExpandedViewResponseValidationError) ErrorName() string {
	return "GetAggregationAcqrightsExpandedViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAggregationAcqrightsExpandedViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAggregationAcqrightsExpandedViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAggregationAcqrightsExpandedViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAggregationAcqrightsExpandedViewResponseValidationError{}

// Validate checks the field values on
// GetAggregationProductsExpandedViewRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetAggregationProductsExpandedViewRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetAggregationProductsExpandedViewRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetAggregationProductsExpandedViewRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if utf8.RuneCountInString(m.GetAggregationName()) < 1 {
		return GetAggregationProductsExpandedViewRequestValidationError{
			field:  "AggregationName",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetAggregationProductsExpandedViewRequestValidationError is the validation
// error returned by GetAggregationProductsExpandedViewRequest.Validate if the
// designated constraints aren't met.
type GetAggregationProductsExpandedViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAggregationProductsExpandedViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAggregationProductsExpandedViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAggregationProductsExpandedViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAggregationProductsExpandedViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAggregationProductsExpandedViewRequestValidationError) ErrorName() string {
	return "GetAggregationProductsExpandedViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAggregationProductsExpandedViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAggregationProductsExpandedViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAggregationProductsExpandedViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAggregationProductsExpandedViewRequestValidationError{}

var _GetAggregationProductsExpandedViewRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on
// GetAggregationProductsExpandedViewResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetAggregationProductsExpandedViewResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return GetAggregationProductsExpandedViewResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAggregationProductsExpandedViewResponseValidationError is the validation
// error returned by GetAggregationProductsExpandedViewResponse.Validate if
// the designated constraints aren't met.
type GetAggregationProductsExpandedViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAggregationProductsExpandedViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAggregationProductsExpandedViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAggregationProductsExpandedViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAggregationProductsExpandedViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAggregationProductsExpandedViewResponseValidationError) ErrorName() string {
	return "GetAggregationProductsExpandedViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAggregationProductsExpandedViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAggregationProductsExpandedViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAggregationProductsExpandedViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAggregationProductsExpandedViewResponseValidationError{}

// Validate checks the field values on
// ProductAggregationProductViewOptionsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewOptionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ProductAggregationProductViewOptionsRequest_Scopes_Pattern.MatchString(item) {
			return ProductAggregationProductViewOptionsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ProductAggregationProductViewOptionsRequestValidationError is the validation
// error returned by ProductAggregationProductViewOptionsRequest.Validate if
// the designated constraints aren't met.
type ProductAggregationProductViewOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewOptionsRequestValidationError) ErrorName() string {
	return "ProductAggregationProductViewOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewOptionsRequestValidationError{}

var _ProductAggregationProductViewOptionsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on
// ProductAggregationProductViewOptionsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewOptionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumOfOptions

	for idx, item := range m.GetOptioninfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ProductAggregationProductViewOptionsResponseValidationError{
					field:  fmt.Sprintf("Optioninfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductAggregationProductViewOptionsResponseValidationError is the
// validation error returned by
// ProductAggregationProductViewOptionsResponse.Validate if the designated
// constraints aren't met.
type ProductAggregationProductViewOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewOptionsResponseValidationError) ErrorName() string {
	return "ProductAggregationProductViewOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewOptionsResponseValidationError{}

// Validate checks the field values on GetEquipmentsByProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEquipmentsByProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetEquipmentsByProductRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetEquipmentsByProductRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for SwidTag

	return nil
}

// GetEquipmentsByProductRequestValidationError is the validation error
// returned by GetEquipmentsByProductRequest.Validate if the designated
// constraints aren't met.
type GetEquipmentsByProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEquipmentsByProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEquipmentsByProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEquipmentsByProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEquipmentsByProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEquipmentsByProductRequestValidationError) ErrorName() string {
	return "GetEquipmentsByProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEquipmentsByProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEquipmentsByProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEquipmentsByProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEquipmentsByProductRequestValidationError{}

var _GetEquipmentsByProductRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetEquipmentsByProductResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEquipmentsByProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetEquipmentsByProductResponseValidationError is the validation error
// returned by GetEquipmentsByProductResponse.Validate if the designated
// constraints aren't met.
type GetEquipmentsByProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEquipmentsByProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEquipmentsByProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEquipmentsByProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEquipmentsByProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEquipmentsByProductResponseValidationError) ErrorName() string {
	return "GetEquipmentsByProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEquipmentsByProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEquipmentsByProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEquipmentsByProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEquipmentsByProductResponseValidationError{}

// Validate checks the field values on DeleteAcqRightRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAcqRightRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteAcqRightRequest_Sku_Pattern.MatchString(m.GetSku()) {
		return DeleteAcqRightRequestValidationError{
			field:  "Sku",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_.]+$\"",
		}
	}

	if !_DeleteAcqRightRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DeleteAcqRightRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DeleteAcqRightRequestValidationError is the validation error returned by
// DeleteAcqRightRequest.Validate if the designated constraints aren't met.
type DeleteAcqRightRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAcqRightRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAcqRightRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAcqRightRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAcqRightRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAcqRightRequestValidationError) ErrorName() string {
	return "DeleteAcqRightRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAcqRightRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAcqRightRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAcqRightRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAcqRightRequestValidationError{}

var _DeleteAcqRightRequest_Sku_Pattern = regexp.MustCompile("^[a-zA-Z0-9_.]+$")

var _DeleteAcqRightRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DeleteAcqRightResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAcqRightResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteAcqRightResponseValidationError is the validation error returned by
// DeleteAcqRightResponse.Validate if the designated constraints aren't met.
type DeleteAcqRightResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAcqRightResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAcqRightResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAcqRightResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAcqRightResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAcqRightResponseValidationError) ErrorName() string {
	return "DeleteAcqRightResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAcqRightResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAcqRightResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAcqRightResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAcqRightResponseValidationError{}

// Validate checks the field values on DownloadAcqRightFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DownloadAcqRightFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DownloadAcqRightFileRequest_Sku_Pattern.MatchString(m.GetSku()) {
		return DownloadAcqRightFileRequestValidationError{
			field:  "Sku",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_.]+$\"",
		}
	}

	if !_DownloadAcqRightFileRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DownloadAcqRightFileRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DownloadAcqRightFileRequestValidationError is the validation error returned
// by DownloadAcqRightFileRequest.Validate if the designated constraints
// aren't met.
type DownloadAcqRightFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadAcqRightFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadAcqRightFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadAcqRightFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadAcqRightFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadAcqRightFileRequestValidationError) ErrorName() string {
	return "DownloadAcqRightFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadAcqRightFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadAcqRightFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadAcqRightFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadAcqRightFileRequestValidationError{}

var _DownloadAcqRightFileRequest_Sku_Pattern = regexp.MustCompile("^[a-zA-Z0-9_.]+$")

var _DownloadAcqRightFileRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DownloadAcqRightFileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DownloadAcqRightFileResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FileData

	return nil
}

// DownloadAcqRightFileResponseValidationError is the validation error returned
// by DownloadAcqRightFileResponse.Validate if the designated constraints
// aren't met.
type DownloadAcqRightFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadAcqRightFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadAcqRightFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadAcqRightFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadAcqRightFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadAcqRightFileResponseValidationError) ErrorName() string {
	return "DownloadAcqRightFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadAcqRightFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadAcqRightFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadAcqRightFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadAcqRightFileResponseValidationError{}

// Validate checks the field values on DeleteAggregatedRightsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAggregatedRightsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteAggregatedRightsRequest_Sku_Pattern.MatchString(m.GetSku()) {
		return DeleteAggregatedRightsRequestValidationError{
			field:  "Sku",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_.]+$\"",
		}
	}

	if !_DeleteAggregatedRightsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DeleteAggregatedRightsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DeleteAggregatedRightsRequestValidationError is the validation error
// returned by DeleteAggregatedRightsRequest.Validate if the designated
// constraints aren't met.
type DeleteAggregatedRightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAggregatedRightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAggregatedRightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAggregatedRightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAggregatedRightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAggregatedRightsRequestValidationError) ErrorName() string {
	return "DeleteAggregatedRightsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAggregatedRightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAggregatedRightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAggregatedRightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAggregatedRightsRequestValidationError{}

var _DeleteAggregatedRightsRequest_Sku_Pattern = regexp.MustCompile("^[a-zA-Z0-9_.]+$")

var _DeleteAggregatedRightsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DeleteAggregatedRightsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAggregatedRightsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteAggregatedRightsResponseValidationError is the validation error
// returned by DeleteAggregatedRightsResponse.Validate if the designated
// constraints aren't met.
type DeleteAggregatedRightsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAggregatedRightsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAggregatedRightsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAggregatedRightsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAggregatedRightsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAggregatedRightsResponseValidationError) ErrorName() string {
	return "DeleteAggregatedRightsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAggregatedRightsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAggregatedRightsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAggregatedRightsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAggregatedRightsResponseValidationError{}

// Validate checks the field values on DownloadAggregatedRightsFileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DownloadAggregatedRightsFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DownloadAggregatedRightsFileRequest_Sku_Pattern.MatchString(m.GetSku()) {
		return DownloadAggregatedRightsFileRequestValidationError{
			field:  "Sku",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_.]+$\"",
		}
	}

	if !_DownloadAggregatedRightsFileRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DownloadAggregatedRightsFileRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DownloadAggregatedRightsFileRequestValidationError is the validation error
// returned by DownloadAggregatedRightsFileRequest.Validate if the designated
// constraints aren't met.
type DownloadAggregatedRightsFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadAggregatedRightsFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadAggregatedRightsFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadAggregatedRightsFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadAggregatedRightsFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadAggregatedRightsFileRequestValidationError) ErrorName() string {
	return "DownloadAggregatedRightsFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadAggregatedRightsFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadAggregatedRightsFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadAggregatedRightsFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadAggregatedRightsFileRequestValidationError{}

var _DownloadAggregatedRightsFileRequest_Sku_Pattern = regexp.MustCompile("^[a-zA-Z0-9_.]+$")

var _DownloadAggregatedRightsFileRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DownloadAggregatedRightsFileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DownloadAggregatedRightsFileResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FileData

	return nil
}

// DownloadAggregatedRightsFileResponseValidationError is the validation error
// returned by DownloadAggregatedRightsFileResponse.Validate if the designated
// constraints aren't met.
type DownloadAggregatedRightsFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadAggregatedRightsFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadAggregatedRightsFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadAggregatedRightsFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadAggregatedRightsFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadAggregatedRightsFileResponseValidationError) ErrorName() string {
	return "DownloadAggregatedRightsFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadAggregatedRightsFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadAggregatedRightsFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadAggregatedRightsFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadAggregatedRightsFileResponseValidationError{}

// Validate checks the field values on CreateDashboardUpdateJobRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDashboardUpdateJobRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateDashboardUpdateJobRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return CreateDashboardUpdateJobRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// CreateDashboardUpdateJobRequestValidationError is the validation error
// returned by CreateDashboardUpdateJobRequest.Validate if the designated
// constraints aren't met.
type CreateDashboardUpdateJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDashboardUpdateJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDashboardUpdateJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDashboardUpdateJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDashboardUpdateJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDashboardUpdateJobRequestValidationError) ErrorName() string {
	return "CreateDashboardUpdateJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDashboardUpdateJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDashboardUpdateJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDashboardUpdateJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDashboardUpdateJobRequestValidationError{}

var _CreateDashboardUpdateJobRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on UpsertAllocateMetricEquipementRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpsertAllocateMetricEquipementRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpsertAllocateMetricEquipementRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return UpsertAllocateMetricEquipementRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Swidtag

	// no validation rules for EquipmentId

	// no validation rules for EqType

	// no validation rules for AllocatedUsers

	// no validation rules for AllocatedMetrics

	return nil
}

// UpsertAllocateMetricEquipementRequestValidationError is the validation error
// returned by UpsertAllocateMetricEquipementRequest.Validate if the
// designated constraints aren't met.
type UpsertAllocateMetricEquipementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAllocateMetricEquipementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAllocateMetricEquipementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAllocateMetricEquipementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAllocateMetricEquipementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAllocateMetricEquipementRequestValidationError) ErrorName() string {
	return "UpsertAllocateMetricEquipementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAllocateMetricEquipementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAllocateMetricEquipementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAllocateMetricEquipementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAllocateMetricEquipementRequestValidationError{}

var _UpsertAllocateMetricEquipementRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DropAllocateMetricEquipementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DropAllocateMetricEquipementRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DropAllocateMetricEquipementRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DropAllocateMetricEquipementRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Swidtag

	// no validation rules for EquipmentId

	// no validation rules for AllocatedMetrics

	return nil
}

// DropAllocateMetricEquipementRequestValidationError is the validation error
// returned by DropAllocateMetricEquipementRequest.Validate if the designated
// constraints aren't met.
type DropAllocateMetricEquipementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropAllocateMetricEquipementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropAllocateMetricEquipementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropAllocateMetricEquipementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropAllocateMetricEquipementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropAllocateMetricEquipementRequestValidationError) ErrorName() string {
	return "DropAllocateMetricEquipementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropAllocateMetricEquipementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropAllocateMetricEquipementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropAllocateMetricEquipementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropAllocateMetricEquipementRequestValidationError{}

var _DropAllocateMetricEquipementRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on CreateDashboardUpdateJobResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateDashboardUpdateJobResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// CreateDashboardUpdateJobResponseValidationError is the validation error
// returned by CreateDashboardUpdateJobResponse.Validate if the designated
// constraints aren't met.
type CreateDashboardUpdateJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDashboardUpdateJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDashboardUpdateJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDashboardUpdateJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDashboardUpdateJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDashboardUpdateJobResponseValidationError) ErrorName() string {
	return "CreateDashboardUpdateJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDashboardUpdateJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDashboardUpdateJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDashboardUpdateJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDashboardUpdateJobResponseValidationError{}

// Validate checks the field values on UpsertAllocateMetricEquipementResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpsertAllocateMetricEquipementResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertAllocateMetricEquipementResponseValidationError is the validation
// error returned by UpsertAllocateMetricEquipementResponse.Validate if the
// designated constraints aren't met.
type UpsertAllocateMetricEquipementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAllocateMetricEquipementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAllocateMetricEquipementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAllocateMetricEquipementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAllocateMetricEquipementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAllocateMetricEquipementResponseValidationError) ErrorName() string {
	return "UpsertAllocateMetricEquipementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAllocateMetricEquipementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAllocateMetricEquipementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAllocateMetricEquipementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAllocateMetricEquipementResponseValidationError{}

// Validate checks the field values on GetAllEditorsCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllEditorsCatalogRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetAllEditorsCatalogRequestValidationError is the validation error returned
// by GetAllEditorsCatalogRequest.Validate if the designated constraints
// aren't met.
type GetAllEditorsCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllEditorsCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllEditorsCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllEditorsCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllEditorsCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllEditorsCatalogRequestValidationError) ErrorName() string {
	return "GetAllEditorsCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllEditorsCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllEditorsCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllEditorsCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllEditorsCatalogRequestValidationError{}

// Validate checks the field values on GetAllEditorsCatalogResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllEditorsCatalogResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetAllEditorsCatalogResponseValidationError is the validation error returned
// by GetAllEditorsCatalogResponse.Validate if the designated constraints
// aren't met.
type GetAllEditorsCatalogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllEditorsCatalogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllEditorsCatalogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllEditorsCatalogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllEditorsCatalogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllEditorsCatalogResponseValidationError) ErrorName() string {
	return "GetAllEditorsCatalogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllEditorsCatalogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllEditorsCatalogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllEditorsCatalogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllEditorsCatalogResponseValidationError{}

// Validate checks the field values on GetBannerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetBannerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _GetBannerRequest_TimeZone_InLookup[m.GetTimeZone()]; !ok {
		return GetBannerRequestValidationError{
			field:  "TimeZone",
			reason: "value must be in list [CET IST CEST]",
		}
	}

	if !_GetBannerRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetBannerRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// GetBannerRequestValidationError is the validation error returned by
// GetBannerRequest.Validate if the designated constraints aren't met.
type GetBannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBannerRequestValidationError) ErrorName() string { return "GetBannerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBannerRequestValidationError{}

var _GetBannerRequest_TimeZone_InLookup = map[string]struct{}{
	"CET":  {},
	"IST":  {},
	"CEST": {},
}

var _GetBannerRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetBannerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetBannerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UpdatedAt

	// no validation rules for NextUpdateAt

	return nil
}

// GetBannerResponseValidationError is the validation error returned by
// GetBannerResponse.Validate if the designated constraints aren't met.
type GetBannerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBannerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBannerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBannerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBannerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBannerResponseValidationError) ErrorName() string {
	return "GetBannerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBannerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBannerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBannerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBannerResponseValidationError{}

// Validate checks the field values on AcqRightRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AcqRightRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_AcqRightRequest_Sku_Pattern.MatchString(m.GetSku()) {
		return AcqRightRequestValidationError{
			field:  "Sku",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_.]+$\"",
		}
	}

	if !_AcqRightRequest_ProductName_Pattern.MatchString(m.GetProductName()) {
		return AcqRightRequestValidationError{
			field:  "ProductName",
			reason: "value does not match regex pattern \"^[\\\\sa-zA-Z0-9().+-]+$\"",
		}
	}

	// no validation rules for Version

	if !_AcqRightRequest_ProductEditor_Pattern.MatchString(m.GetProductEditor()) {
		return AcqRightRequestValidationError{
			field:  "ProductEditor",
			reason: "value does not match regex pattern \"^[\\\\sa-zA-Z0-9.-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetMetricName()) < 1 {
		return AcqRightRequestValidationError{
			field:  "MetricName",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetNumLicensesAcquired() < 0 {
		return AcqRightRequestValidationError{
			field:  "NumLicensesAcquired",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetAvgUnitPrice() < 0 {
		return AcqRightRequestValidationError{
			field:  "AvgUnitPrice",
			reason: "value must be greater than or equal to 0",
		}
	}

	// no validation rules for StartOfMaintenance

	// no validation rules for EndOfMaintenance

	if m.GetNumLicencesMaintainance() < 0 {
		return AcqRightRequestValidationError{
			field:  "NumLicencesMaintainance",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetAvgMaintenanceUnitPrice() < 0 {
		return AcqRightRequestValidationError{
			field:  "AvgMaintenanceUnitPrice",
			reason: "value must be greater than or equal to 0",
		}
	}

	if utf8.RuneCountInString(m.GetLastPurchasedOrder()) > 16 {
		return AcqRightRequestValidationError{
			field:  "LastPurchasedOrder",
			reason: "value length must be at most 16 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSupportNumber()) > 16 {
		return AcqRightRequestValidationError{
			field:  "SupportNumber",
			reason: "value length must be at most 16 runes",
		}
	}

	if utf8.RuneCountInString(m.GetMaintenanceProvider()) > 16 {
		return AcqRightRequestValidationError{
			field:  "MaintenanceProvider",
			reason: "value length must be at most 16 runes",
		}
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		return AcqRightRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetComment()) > 100 {
		return AcqRightRequestValidationError{
			field:  "Comment",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for OrderingDate

	if utf8.RuneCountInString(m.GetCorporateSourcingContract()) > 16 {
		return AcqRightRequestValidationError{
			field:  "CorporateSourcingContract",
			reason: "value length must be at most 16 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSoftwareProvider()) > 16 {
		return AcqRightRequestValidationError{
			field:  "SoftwareProvider",
			reason: "value length must be at most 16 runes",
		}
	}

	// no validation rules for FileName

	// no validation rules for FileData

	// no validation rules for Repartition

	return nil
}

// AcqRightRequestValidationError is the validation error returned by
// AcqRightRequest.Validate if the designated constraints aren't met.
type AcqRightRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcqRightRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcqRightRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcqRightRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcqRightRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcqRightRequestValidationError) ErrorName() string { return "AcqRightRequestValidationError" }

// Error satisfies the builtin error interface
func (e AcqRightRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcqRightRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcqRightRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcqRightRequestValidationError{}

var _AcqRightRequest_Sku_Pattern = regexp.MustCompile("^[a-zA-Z0-9_.]+$")

var _AcqRightRequest_ProductName_Pattern = regexp.MustCompile("^[\\sa-zA-Z0-9().+-]+$")

var _AcqRightRequest_ProductEditor_Pattern = regexp.MustCompile("^[\\sa-zA-Z0-9.-]+$")

// Validate checks the field values on AcqRightResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AcqRightResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// AcqRightResponseValidationError is the validation error returned by
// AcqRightResponse.Validate if the designated constraints aren't met.
type AcqRightResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcqRightResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcqRightResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcqRightResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcqRightResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcqRightResponseValidationError) ErrorName() string { return "AcqRightResponseValidationError" }

// Error satisfies the builtin error interface
func (e AcqRightResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcqRightResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcqRightResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcqRightResponseValidationError{}

// Validate checks the field values on Aggregation with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Aggregation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for AggregationName

	if !_Aggregation_ProductEditor_Pattern.MatchString(m.GetProductEditor()) {
		return AggregationValidationError{
			field:  "ProductEditor",
			reason: "value does not match regex pattern \"^[\\\\sa-zA-Z0-9.-]+$\"",
		}
	}

	for idx, item := range m.GetProductNames() {
		_, _ = idx, item

		if !_Aggregation_ProductNames_Pattern.MatchString(item) {
			return AggregationValidationError{
				field:  fmt.Sprintf("ProductNames[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\sa-zA-Z0-9().+-]+$\"",
			}
		}

	}

	if len(m.GetSwidtags()) < 1 {
		return AggregationValidationError{
			field:  "Swidtags",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		return AggregationValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for EditorId

	for idx, item := range m.GetMapping() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return AggregationValidationError{
					field:  fmt.Sprintf("Mapping[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AggregationValidationError is the validation error returned by
// Aggregation.Validate if the designated constraints aren't met.
type AggregationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationValidationError) ErrorName() string { return "AggregationValidationError" }

// Error satisfies the builtin error interface
func (e AggregationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationValidationError{}

var _Aggregation_ProductEditor_Pattern = regexp.MustCompile("^[\\sa-zA-Z0-9.-]+$")

var _Aggregation_ProductNames_Pattern = regexp.MustCompile("^[\\sa-zA-Z0-9().+-]+$")

// Validate checks the field values on Mapping with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Mapping) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProductName

	// no validation rules for ProductVersion

	return nil
}

// MappingValidationError is the validation error returned by Mapping.Validate
// if the designated constraints aren't met.
type MappingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MappingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MappingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MappingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MappingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MappingValidationError) ErrorName() string { return "MappingValidationError" }

// Error satisfies the builtin error interface
func (e MappingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MappingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MappingValidationError{}

// Validate checks the field values on AggregationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AggregationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// AggregationResponseValidationError is the validation error returned by
// AggregationResponse.Validate if the designated constraints aren't met.
type AggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationResponseValidationError) ErrorName() string {
	return "AggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationResponseValidationError{}

// Validate checks the field values on AggregatedRightsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AggregatedRightsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_AggregatedRightsRequest_Sku_Pattern.MatchString(m.GetSku()) {
		return AggregatedRightsRequestValidationError{
			field:  "Sku",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_.]+$\"",
		}
	}

	// no validation rules for AggregationID

	if utf8.RuneCountInString(m.GetMetricName()) < 1 {
		return AggregatedRightsRequestValidationError{
			field:  "MetricName",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetNumLicensesAcquired() < 0 {
		return AggregatedRightsRequestValidationError{
			field:  "NumLicensesAcquired",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetAvgUnitPrice() < 0 {
		return AggregatedRightsRequestValidationError{
			field:  "AvgUnitPrice",
			reason: "value must be greater than or equal to 0",
		}
	}

	// no validation rules for StartOfMaintenance

	// no validation rules for EndOfMaintenance

	if utf8.RuneCountInString(m.GetLastPurchasedOrder()) > 16 {
		return AggregatedRightsRequestValidationError{
			field:  "LastPurchasedOrder",
			reason: "value length must be at most 16 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSupportNumber()) > 16 {
		return AggregatedRightsRequestValidationError{
			field:  "SupportNumber",
			reason: "value length must be at most 16 runes",
		}
	}

	if utf8.RuneCountInString(m.GetMaintenanceProvider()) > 16 {
		return AggregatedRightsRequestValidationError{
			field:  "MaintenanceProvider",
			reason: "value length must be at most 16 runes",
		}
	}

	if m.GetNumLicencesMaintenance() < 0 {
		return AggregatedRightsRequestValidationError{
			field:  "NumLicencesMaintenance",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetAvgMaintenanceUnitPrice() < 0 {
		return AggregatedRightsRequestValidationError{
			field:  "AvgMaintenanceUnitPrice",
			reason: "value must be greater than or equal to 0",
		}
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		return AggregatedRightsRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetComment()) > 100 {
		return AggregatedRightsRequestValidationError{
			field:  "Comment",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for OrderingDate

	if utf8.RuneCountInString(m.GetCorporateSourcingContract()) > 16 {
		return AggregatedRightsRequestValidationError{
			field:  "CorporateSourcingContract",
			reason: "value length must be at most 16 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSoftwareProvider()) > 16 {
		return AggregatedRightsRequestValidationError{
			field:  "SoftwareProvider",
			reason: "value length must be at most 16 runes",
		}
	}

	// no validation rules for FileName

	// no validation rules for FileData

	// no validation rules for Repartition

	return nil
}

// AggregatedRightsRequestValidationError is the validation error returned by
// AggregatedRightsRequest.Validate if the designated constraints aren't met.
type AggregatedRightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregatedRightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregatedRightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregatedRightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregatedRightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregatedRightsRequestValidationError) ErrorName() string {
	return "AggregatedRightsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AggregatedRightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregatedRightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregatedRightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregatedRightsRequestValidationError{}

var _AggregatedRightsRequest_Sku_Pattern = regexp.MustCompile("^[a-zA-Z0-9_.]+$")

// Validate checks the field values on AggregatedRightsView with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AggregatedRightsView) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for AggregationName

	if !_AggregatedRightsView_Sku_Pattern.MatchString(m.GetSku()) {
		return AggregatedRightsViewValidationError{
			field:  "Sku",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_.]+$\"",
		}
	}

	if !_AggregatedRightsView_ProductEditor_Pattern.MatchString(m.GetProductEditor()) {
		return AggregatedRightsViewValidationError{
			field:  "ProductEditor",
			reason: "value does not match regex pattern \"^[\\\\sa-zA-Z0-9.-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetMetricName()) < 1 {
		return AggregatedRightsViewValidationError{
			field:  "MetricName",
			reason: "value length must be at least 1 runes",
		}
	}

	for idx, item := range m.GetProductNames() {
		_, _ = idx, item

		if !_AggregatedRightsView_ProductNames_Pattern.MatchString(item) {
			return AggregatedRightsViewValidationError{
				field:  fmt.Sprintf("ProductNames[%v]", idx),
				reason: "value does not match regex pattern \"^[\\\\sa-zA-Z0-9().+-]+$\"",
			}
		}

	}

	if len(m.GetSwidtags()) < 1 {
		return AggregatedRightsViewValidationError{
			field:  "Swidtags",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if m.GetNumLicensesAcquired() < 0 {
		return AggregatedRightsViewValidationError{
			field:  "NumLicensesAcquired",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetAvgUnitPrice() < 0 {
		return AggregatedRightsViewValidationError{
			field:  "AvgUnitPrice",
			reason: "value must be greater than or equal to 0",
		}
	}

	// no validation rules for StartOfMaintenance

	// no validation rules for EndOfMaintenance

	if m.GetNumLicencesMaintenance() < 0 {
		return AggregatedRightsViewValidationError{
			field:  "NumLicencesMaintenance",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetAvgMaintenanceUnitPrice() < 0 {
		return AggregatedRightsViewValidationError{
			field:  "AvgMaintenanceUnitPrice",
			reason: "value must be greater than or equal to 0",
		}
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		return AggregatedRightsViewValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetComment()) > 100 {
		return AggregatedRightsViewValidationError{
			field:  "Comment",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for IsIndividualRightExists

	if m.GetTotalPurchaseCost() < 0 {
		return AggregatedRightsViewValidationError{
			field:  "TotalPurchaseCost",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetTotalCost() < 0 {
		return AggregatedRightsViewValidationError{
			field:  "TotalCost",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetTotalMaintenanceCost() < 0 {
		return AggregatedRightsViewValidationError{
			field:  "TotalMaintenanceCost",
			reason: "value must be greater than or equal to 0",
		}
	}

	// no validation rules for LicenceUnderMaintenance

	// no validation rules for OrderingDate

	// no validation rules for CorporateSourcingContract

	// no validation rules for SoftwareProvider

	// no validation rules for LastPurchasedOrder

	// no validation rules for SupportNumber

	// no validation rules for MaintenanceProvider

	// no validation rules for FileName

	// no validation rules for Repartition

	if m.GetSharedLicenses() < 0 {
		return AggregatedRightsViewValidationError{
			field:  "SharedLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetRecievedLicenses() < 0 {
		return AggregatedRightsViewValidationError{
			field:  "RecievedLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetAvailableLicenses() < 0 {
		return AggregatedRightsViewValidationError{
			field:  "AvailableLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	for idx, item := range m.GetSharedData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return AggregatedRightsViewValidationError{
					field:  fmt.Sprintf("SharedData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for EditorId

	for idx, item := range m.GetMapping() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return AggregatedRightsViewValidationError{
					field:  fmt.Sprintf("Mapping[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AggregatedRightsViewValidationError is the validation error returned by
// AggregatedRightsView.Validate if the designated constraints aren't met.
type AggregatedRightsViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregatedRightsViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregatedRightsViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregatedRightsViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregatedRightsViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregatedRightsViewValidationError) ErrorName() string {
	return "AggregatedRightsViewValidationError"
}

// Error satisfies the builtin error interface
func (e AggregatedRightsViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregatedRightsView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregatedRightsViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregatedRightsViewValidationError{}

var _AggregatedRightsView_Sku_Pattern = regexp.MustCompile("^[a-zA-Z0-9_.]+$")

var _AggregatedRightsView_ProductEditor_Pattern = regexp.MustCompile("^[\\sa-zA-Z0-9.-]+$")

var _AggregatedRightsView_ProductNames_Pattern = regexp.MustCompile("^[\\sa-zA-Z0-9().+-]+$")

// Validate checks the field values on AggregatedRightsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AggregatedRightsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// AggregatedRightsResponseValidationError is the validation error returned by
// AggregatedRightsResponse.Validate if the designated constraints aren't met.
type AggregatedRightsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregatedRightsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregatedRightsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregatedRightsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregatedRightsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregatedRightsResponseValidationError) ErrorName() string {
	return "AggregatedRightsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AggregatedRightsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregatedRightsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregatedRightsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregatedRightsResponseValidationError{}

// Validate checks the field values on OverviewProductQualityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OverviewProductQualityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_OverviewProductQualityRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return OverviewProductQualityRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// OverviewProductQualityRequestValidationError is the validation error
// returned by OverviewProductQualityRequest.Validate if the designated
// constraints aren't met.
type OverviewProductQualityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverviewProductQualityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverviewProductQualityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverviewProductQualityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverviewProductQualityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverviewProductQualityRequestValidationError) ErrorName() string {
	return "OverviewProductQualityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OverviewProductQualityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverviewProductQualityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverviewProductQualityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverviewProductQualityRequestValidationError{}

var _OverviewProductQualityRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on OverviewProductQualityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OverviewProductQualityResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NotAcquiredProducts

	// no validation rules for NotDeployedProducts

	// no validation rules for NotAcquiredProductsPercentage

	// no validation rules for NotDeployedProductsPercentage

	return nil
}

// OverviewProductQualityResponseValidationError is the validation error
// returned by OverviewProductQualityResponse.Validate if the designated
// constraints aren't met.
type OverviewProductQualityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverviewProductQualityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverviewProductQualityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverviewProductQualityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverviewProductQualityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverviewProductQualityResponseValidationError) ErrorName() string {
	return "OverviewProductQualityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OverviewProductQualityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverviewProductQualityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverviewProductQualityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverviewProductQualityResponseValidationError{}

// Validate checks the field values on ProductMaintenancePercRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductMaintenancePercRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ProductMaintenancePercRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ProductMaintenancePercRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ProductMaintenancePercRequestValidationError is the validation error
// returned by ProductMaintenancePercRequest.Validate if the designated
// constraints aren't met.
type ProductMaintenancePercRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductMaintenancePercRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductMaintenancePercRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductMaintenancePercRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductMaintenancePercRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductMaintenancePercRequestValidationError) ErrorName() string {
	return "ProductMaintenancePercRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductMaintenancePercRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductMaintenancePercRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductMaintenancePercRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductMaintenancePercRequestValidationError{}

var _ProductMaintenancePercRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductMaintenancePercResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductMaintenancePercResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProductWithMaintenancePercentage

	// no validation rules for ProductWithoutMaintenancePercentage

	for idx, item := range m.GetProductPerc() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ProductMaintenancePercResponseValidationError{
					field:  fmt.Sprintf("ProductPerc[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductMaintenancePercResponseValidationError is the validation error
// returned by ProductMaintenancePercResponse.Validate if the designated
// constraints aren't met.
type ProductMaintenancePercResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductMaintenancePercResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductMaintenancePercResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductMaintenancePercResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductMaintenancePercResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductMaintenancePercResponseValidationError) ErrorName() string {
	return "ProductMaintenancePercResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductMaintenancePercResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductMaintenancePercResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductMaintenancePercResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductMaintenancePercResponseValidationError{}

// Validate checks the field values on ProductPerc with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductPerc) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Swidtag

	// no validation rules for PrecentageCovered

	return nil
}

// ProductPercValidationError is the validation error returned by
// ProductPerc.Validate if the designated constraints aren't met.
type ProductPercValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductPercValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductPercValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductPercValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductPercValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductPercValidationError) ErrorName() string { return "ProductPercValidationError" }

// Error satisfies the builtin error interface
func (e ProductPercValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductPerc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductPercValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductPercValidationError{}

// Validate checks the field values on ProductNoMaintenanceDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ProductNoMaintenanceDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ProductNoMaintenanceDetailsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ProductNoMaintenanceDetailsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ProductNoMaintenanceDetailsRequestValidationError is the validation error
// returned by ProductNoMaintenanceDetailsRequest.Validate if the designated
// constraints aren't met.
type ProductNoMaintenanceDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductNoMaintenanceDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductNoMaintenanceDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductNoMaintenanceDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductNoMaintenanceDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductNoMaintenanceDetailsRequestValidationError) ErrorName() string {
	return "ProductNoMaintenanceDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductNoMaintenanceDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductNoMaintenanceDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductNoMaintenanceDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductNoMaintenanceDetailsRequestValidationError{}

var _ProductNoMaintenanceDetailsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductNoMaintenanceDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ProductNoMaintenanceDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalProducts

	for idx, item := range m.GetProductNoMain() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ProductNoMaintenanceDetailsResponseValidationError{
					field:  fmt.Sprintf("ProductNoMain[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductNoMaintenanceDetailsResponseValidationError is the validation error
// returned by ProductNoMaintenanceDetailsResponse.Validate if the designated
// constraints aren't met.
type ProductNoMaintenanceDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductNoMaintenanceDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductNoMaintenanceDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductNoMaintenanceDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductNoMaintenanceDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductNoMaintenanceDetailsResponseValidationError) ErrorName() string {
	return "ProductNoMaintenanceDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductNoMaintenanceDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductNoMaintenanceDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductNoMaintenanceDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductNoMaintenanceDetailsResponseValidationError{}

// Validate checks the field values on ProductNoMain with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductNoMain) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sku

	// no validation rules for ProductName

	// no validation rules for Version

	return nil
}

// ProductNoMainValidationError is the validation error returned by
// ProductNoMain.Validate if the designated constraints aren't met.
type ProductNoMainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductNoMainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductNoMainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductNoMainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductNoMainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductNoMainValidationError) ErrorName() string { return "ProductNoMainValidationError" }

// Error satisfies the builtin error interface
func (e ProductNoMainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductNoMain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductNoMainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductNoMainValidationError{}

// Validate checks the field values on ProductsPerEditorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsPerEditorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ProductsPerEditorRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ProductsPerEditorRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ProductsPerEditorRequestValidationError is the validation error returned by
// ProductsPerEditorRequest.Validate if the designated constraints aren't met.
type ProductsPerEditorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsPerEditorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsPerEditorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsPerEditorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsPerEditorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsPerEditorRequestValidationError) ErrorName() string {
	return "ProductsPerEditorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsPerEditorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsPerEditorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsPerEditorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsPerEditorRequestValidationError{}

var _ProductsPerEditorRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductsPerEditorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsPerEditorResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEditorsProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ProductsPerEditorResponseValidationError{
					field:  fmt.Sprintf("EditorsProducts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductsPerEditorResponseValidationError is the validation error returned by
// ProductsPerEditorResponse.Validate if the designated constraints aren't met.
type ProductsPerEditorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsPerEditorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsPerEditorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsPerEditorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsPerEditorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsPerEditorResponseValidationError) ErrorName() string {
	return "ProductsPerEditorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsPerEditorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsPerEditorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsPerEditorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsPerEditorResponseValidationError{}

// Validate checks the field values on GetRightsInfoByEditorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRightsInfoByEditorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetEditor()) < 1 {
		return GetRightsInfoByEditorRequestValidationError{
			field:  "Editor",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_GetRightsInfoByEditorRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetRightsInfoByEditorRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// GetRightsInfoByEditorRequestValidationError is the validation error returned
// by GetRightsInfoByEditorRequest.Validate if the designated constraints
// aren't met.
type GetRightsInfoByEditorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRightsInfoByEditorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRightsInfoByEditorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRightsInfoByEditorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRightsInfoByEditorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRightsInfoByEditorRequestValidationError) ErrorName() string {
	return "GetRightsInfoByEditorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRightsInfoByEditorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRightsInfoByEditorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRightsInfoByEditorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRightsInfoByEditorRequestValidationError{}

var _GetRightsInfoByEditorRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetRightsInfoByEditorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRightsInfoByEditorResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEditorRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return GetRightsInfoByEditorResponseValidationError{
					field:  fmt.Sprintf("EditorRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetRightsInfoByEditorResponseValidationError is the validation error
// returned by GetRightsInfoByEditorResponse.Validate if the designated
// constraints aren't met.
type GetRightsInfoByEditorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRightsInfoByEditorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRightsInfoByEditorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRightsInfoByEditorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRightsInfoByEditorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRightsInfoByEditorResponseValidationError) ErrorName() string {
	return "GetRightsInfoByEditorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRightsInfoByEditorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRightsInfoByEditorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRightsInfoByEditorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRightsInfoByEditorResponseValidationError{}

// Validate checks the field values on RightsInfoByEditor with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RightsInfoByEditor) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sku

	// no validation rules for Swidtag

	// no validation rules for AggregationName

	// no validation rules for MetricName

	// no validation rules for AvgUnitPrice

	// no validation rules for NumLicensesAcquired

	return nil
}

// RightsInfoByEditorValidationError is the validation error returned by
// RightsInfoByEditor.Validate if the designated constraints aren't met.
type RightsInfoByEditorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RightsInfoByEditorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RightsInfoByEditorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RightsInfoByEditorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RightsInfoByEditorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RightsInfoByEditorValidationError) ErrorName() string {
	return "RightsInfoByEditorValidationError"
}

// Error satisfies the builtin error interface
func (e RightsInfoByEditorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRightsInfoByEditor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RightsInfoByEditorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RightsInfoByEditorValidationError{}

// Validate checks the field values on EditorProducts with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EditorProducts) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Editor

	// no validation rules for NumProducts

	return nil
}

// EditorProductsValidationError is the validation error returned by
// EditorProducts.Validate if the designated constraints aren't met.
type EditorProductsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorProductsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorProductsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorProductsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorProductsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorProductsValidationError) ErrorName() string { return "EditorProductsValidationError" }

// Error satisfies the builtin error interface
func (e EditorProductsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditorProducts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorProductsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorProductsValidationError{}

// Validate checks the field values on AggregatedRightDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AggregatedRightDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if !_AggregatedRightDetailsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return AggregatedRightDetailsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// AggregatedRightDetailsRequestValidationError is the validation error
// returned by AggregatedRightDetailsRequest.Validate if the designated
// constraints aren't met.
type AggregatedRightDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregatedRightDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregatedRightDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregatedRightDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregatedRightDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregatedRightDetailsRequestValidationError) ErrorName() string {
	return "AggregatedRightDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AggregatedRightDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregatedRightDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregatedRightDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregatedRightDetailsRequestValidationError{}

var _AggregatedRightDetailsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on AggregatedRightDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AggregatedRightDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for NumApplications

	// no validation rules for NumEquipments

	// no validation rules for NotDeployed

	return nil
}

// AggregatedRightDetailsResponseValidationError is the validation error
// returned by AggregatedRightDetailsResponse.Validate if the designated
// constraints aren't met.
type AggregatedRightDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregatedRightDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregatedRightDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregatedRightDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregatedRightDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregatedRightDetailsResponseValidationError) ErrorName() string {
	return "AggregatedRightDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AggregatedRightDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregatedRightDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregatedRightDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregatedRightDetailsResponseValidationError{}

// Validate checks the field values on ListProductAggregationViewRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListProductAggregationViewRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListProductAggregationViewRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListProductAggregationViewRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	if _, ok := ListProductAggregationViewRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListProductAggregationViewRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListProductAggregationViewRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListProductAggregationViewRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListProductAggregationViewRequest_Scopes_Pattern.MatchString(item) {
			return ListProductAggregationViewRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListProductAggregationViewRequestValidationError is the validation error
// returned by ListProductAggregationViewRequest.Validate if the designated
// constraints aren't met.
type ListProductAggregationViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationViewRequestValidationError) ErrorName() string {
	return "ListProductAggregationViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationViewRequestValidationError{}

var _ListProductAggregationViewRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on
// ProductAggregationProductViewSearchParams with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductAggregationProductViewSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductAggregationProductViewSearchParamsValidationError{
				field:  "ProductName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProductAggregationProductViewSearchParamsValidationError is the validation
// error returned by ProductAggregationProductViewSearchParams.Validate if the
// designated constraints aren't met.
type ProductAggregationProductViewSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationProductViewSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationProductViewSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationProductViewSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationProductViewSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationProductViewSearchParamsValidationError) ErrorName() string {
	return "ProductAggregationProductViewSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationProductViewSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationProductViewSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationProductViewSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationProductViewSearchParamsValidationError{}

// Validate checks the field values on ListProductAggregationViewResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListProductAggregationViewResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAggregations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListProductAggregationViewResponseValidationError{
					field:  fmt.Sprintf("Aggregations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductAggregationViewResponseValidationError is the validation error
// returned by ListProductAggregationViewResponse.Validate if the designated
// constraints aren't met.
type ListProductAggregationViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationViewResponseValidationError) ErrorName() string {
	return "ListProductAggregationViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationViewResponseValidationError{}

// Validate checks the field values on ProductAggregationView with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAggregationView) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for AggregationName

	// no validation rules for Editor

	// no validation rules for NumApplications

	// no validation rules for NumEquipments

	// no validation rules for TotalCost

	// no validation rules for IndividualProductExists

	// no validation rules for UsersCount

	// no validation rules for EditorId

	// no validation rules for Location

	return nil
}

// ProductAggregationViewValidationError is the validation error returned by
// ProductAggregationView.Validate if the designated constraints aren't met.
type ProductAggregationViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationViewValidationError) ErrorName() string {
	return "ProductAggregationViewValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationViewValidationError{}

// Validate checks the field values on ProductAggRecord with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductAggRecord) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for Version

	// no validation rules for NumApplications

	// no validation rules for NumEquipments

	// no validation rules for TotalCost

	// no validation rules for AggregationName

	return nil
}

// ProductAggRecordValidationError is the validation error returned by
// ProductAggRecord.Validate if the designated constraints aren't met.
type ProductAggRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggRecordValidationError) ErrorName() string { return "ProductAggRecordValidationError" }

// Error satisfies the builtin error interface
func (e ProductAggRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggRecordValidationError{}

// Validate checks the field values on ListDeployedAndAcquiredEditorsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListDeployedAndAcquiredEditorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListDeployedAndAcquiredEditorsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListDeployedAndAcquiredEditorsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ListDeployedAndAcquiredEditorsRequestValidationError is the validation error
// returned by ListDeployedAndAcquiredEditorsRequest.Validate if the
// designated constraints aren't met.
type ListDeployedAndAcquiredEditorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeployedAndAcquiredEditorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeployedAndAcquiredEditorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeployedAndAcquiredEditorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeployedAndAcquiredEditorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeployedAndAcquiredEditorsRequestValidationError) ErrorName() string {
	return "ListDeployedAndAcquiredEditorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeployedAndAcquiredEditorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeployedAndAcquiredEditorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeployedAndAcquiredEditorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeployedAndAcquiredEditorsRequestValidationError{}

var _ListDeployedAndAcquiredEditorsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListEditorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListEditorsRequest_Scopes_Pattern.MatchString(item) {
			return ListEditorsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListEditorsRequestValidationError is the validation error returned by
// ListEditorsRequest.Validate if the designated constraints aren't met.
type ListEditorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorsRequestValidationError) ErrorName() string {
	return "ListEditorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorsRequestValidationError{}

var _ListEditorsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListEditorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListEditorsResponseValidationError is the validation error returned by
// ListEditorsResponse.Validate if the designated constraints aren't met.
type ListEditorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorsResponseValidationError) ErrorName() string {
	return "ListEditorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorsResponseValidationError{}

// Validate checks the field values on ListEditorProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Editor

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListEditorProductsRequest_Scopes_Pattern.MatchString(item) {
			return ListEditorProductsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	// no validation rules for ParkInventory

	return nil
}

// ListEditorProductsRequestValidationError is the validation error returned by
// ListEditorProductsRequest.Validate if the designated constraints aren't met.
type ListEditorProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorProductsRequestValidationError) ErrorName() string {
	return "ListEditorProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorProductsRequestValidationError{}

var _ListEditorProductsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListEditorProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListEditorProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEditorProductsResponseValidationError is the validation error returned
// by ListEditorProductsResponse.Validate if the designated constraints aren't met.
type ListEditorProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorProductsResponseValidationError) ErrorName() string {
	return "ListEditorProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorProductsResponseValidationError{}

// Validate checks the field values on Editor with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Editor) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// EditorValidationError is the validation error returned by Editor.Validate if
// the designated constraints aren't met.
type EditorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorValidationError) ErrorName() string { return "EditorValidationError" }

// Error satisfies the builtin error interface
func (e EditorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Product) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Category

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for TotalCost

	// no validation rules for NumOfApplications

	// no validation rules for NumofEquipments

	// no validation rules for AllocatedUser

	// no validation rules for AllocatedMetric

	// no validation rules for NumofUsers

	// no validation rules for Location

	// no validation rules for ProductSwidTag

	// no validation rules for VersionSwidTag

	// no validation rules for EditorId

	// no validation rules for ProductId

	return nil
}

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on ListProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductsResponseValidationError is the validation error returned by
// ListProductsResponse.Validate if the designated constraints aren't met.
type ListProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsResponseValidationError) ErrorName() string {
	return "ListProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsResponseValidationError{}

// Validate checks the field values on ListProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListProductsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListProductsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	if _, ok := _ListProductsRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return ListProductsRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [name swidtag version edition category editor totalCost numOfApplications numofEquipments location numofUsers]",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListProductsRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListProductsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListProductsRequest_Scopes_Pattern.MatchString(item) {
			return ListProductsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListProductsRequestValidationError is the validation error returned by
// ListProductsRequest.Validate if the designated constraints aren't met.
type ListProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsRequestValidationError) ErrorName() string {
	return "ListProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsRequestValidationError{}

var _ListProductsRequest_SortBy_InLookup = map[string]struct{}{
	"name":              {},
	"swidtag":           {},
	"version":           {},
	"edition":           {},
	"category":          {},
	"editor":            {},
	"totalCost":         {},
	"numOfApplications": {},
	"numofEquipments":   {},
	"location":          {},
	"numofUsers":        {},
}

var _ListProductsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetApplicationId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "ApplicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInstanceId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "InstanceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEquipmentId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "EquipmentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLocation()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProductSearchParamsValidationError is the validation error returned by
// ProductSearchParams.Validate if the designated constraints aren't met.
type ProductSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductSearchParamsValidationError) ErrorName() string {
	return "ProductSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ProductSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductSearchParamsValidationError{}

// Validate checks the field values on ProductRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	if !_ProductRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ProductRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ProductRequestValidationError is the validation error returned by
// ProductRequest.Validate if the designated constraints aren't met.
type ProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductRequestValidationError) ErrorName() string { return "ProductRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductRequestValidationError{}

var _ProductRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for ProductName

	// no validation rules for Editor

	// no validation rules for Version

	// no validation rules for NumApplications

	// no validation rules for NumEquipments

	// no validation rules for ProductSwidTag

	// no validation rules for VersionSwidTag

	// no validation rules for NotDeployed

	return nil
}

// ProductResponseValidationError is the validation error returned by
// ProductResponse.Validate if the designated constraints aren't met.
type ProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductResponseValidationError) ErrorName() string { return "ProductResponseValidationError" }

// Error satisfies the builtin error interface
func (e ProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductResponseValidationError{}

// Validate checks the field values on ProductOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductOptionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumOfOptions

	for idx, item := range m.GetOptioninfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ProductOptionsResponseValidationError{
					field:  fmt.Sprintf("Optioninfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductOptionsResponseValidationError is the validation error returned by
// ProductOptionsResponse.Validate if the designated constraints aren't met.
type ProductOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductOptionsResponseValidationError) ErrorName() string {
	return "ProductOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductOptionsResponseValidationError{}

// Validate checks the field values on OptionInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OptionInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for Version

	return nil
}

// OptionInfoValidationError is the validation error returned by
// OptionInfo.Validate if the designated constraints aren't met.
type OptionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OptionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OptionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OptionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OptionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OptionInfoValidationError) ErrorName() string { return "OptionInfoValidationError" }

// Error satisfies the builtin error interface
func (e OptionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOptionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OptionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OptionInfoValidationError{}

// Validate checks the field values on ProductExpand with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductExpand) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for Version

	// no validation rules for NumApplications

	// no validation rules for NumEquipments

	// no validation rules for TotalCost

	return nil
}

// ProductExpandValidationError is the validation error returned by
// ProductExpand.Validate if the designated constraints aren't met.
type ProductExpandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductExpandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductExpandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductExpandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductExpandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductExpandValidationError) ErrorName() string { return "ProductExpandValidationError" }

// Error satisfies the builtin error interface
func (e ProductExpandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductExpand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductExpandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductExpandValidationError{}

// Validate checks the field values on StringFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilteringOrder

	// no validation rules for Filteringkey

	// no validation rules for FilterType

	return nil
}

// StringFilterValidationError is the validation error returned by
// StringFilter.Validate if the designated constraints aren't met.
type StringFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFilterValidationError) ErrorName() string { return "StringFilterValidationError" }

// Error satisfies the builtin error interface
func (e StringFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFilterValidationError{}

// Validate checks the field values on UpsertProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Category

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for Version

	// no validation rules for OptionOf

	if !_UpsertProductRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return UpsertProductRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if v, ok := interface{}(m.GetApplications()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpsertProductRequestValidationError{
				field:  "Applications",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEquipments()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpsertProductRequestValidationError{
				field:  "Equipments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductType

	return nil
}

// UpsertProductRequestValidationError is the validation error returned by
// UpsertProductRequest.Validate if the designated constraints aren't met.
type UpsertProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestValidationError) ErrorName() string {
	return "UpsertProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestValidationError{}

var _UpsertProductRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on UpsertProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertProductResponseValidationError is the validation error returned by
// UpsertProductResponse.Validate if the designated constraints aren't met.
type UpsertProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductResponseValidationError) ErrorName() string {
	return "UpsertProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductResponseValidationError{}

// Validate checks the field values on ComplianceAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ComplianceAlertRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ComplianceAlertRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ComplianceAlertRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ComplianceAlertRequestValidationError is the validation error returned by
// ComplianceAlertRequest.Validate if the designated constraints aren't met.
type ComplianceAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComplianceAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComplianceAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComplianceAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComplianceAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComplianceAlertRequestValidationError) ErrorName() string {
	return "ComplianceAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ComplianceAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComplianceAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComplianceAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComplianceAlertRequestValidationError{}

var _ComplianceAlertRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ComplianceAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ComplianceAlertResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CounterfeitingPercentage

	// no validation rules for OverdeploymentPercentage

	return nil
}

// ComplianceAlertResponseValidationError is the validation error returned by
// ComplianceAlertResponse.Validate if the designated constraints aren't met.
type ComplianceAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComplianceAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComplianceAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComplianceAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComplianceAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComplianceAlertResponseValidationError) ErrorName() string {
	return "ComplianceAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ComplianceAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComplianceAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComplianceAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComplianceAlertResponseValidationError{}

// Validate checks the field values on OverdeployedProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OverdeployedProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_OverdeployedProductsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return OverdeployedProductsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Editor

	return nil
}

// OverdeployedProductsRequestValidationError is the validation error returned
// by OverdeployedProductsRequest.Validate if the designated constraints
// aren't met.
type OverdeployedProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverdeployedProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverdeployedProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverdeployedProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverdeployedProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverdeployedProductsRequestValidationError) ErrorName() string {
	return "OverdeployedProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OverdeployedProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverdeployedProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverdeployedProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverdeployedProductsRequestValidationError{}

var _OverdeployedProductsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on OverdeployedProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OverdeployedProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProductsLicenses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return OverdeployedProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsLicenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProductsCosts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return OverdeployedProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsCosts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OverdeployedProductsResponseValidationError is the validation error returned
// by OverdeployedProductsResponse.Validate if the designated constraints
// aren't met.
type OverdeployedProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverdeployedProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverdeployedProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverdeployedProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverdeployedProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverdeployedProductsResponseValidationError) ErrorName() string {
	return "OverdeployedProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OverdeployedProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverdeployedProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverdeployedProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverdeployedProductsResponseValidationError{}

// Validate checks the field values on SoftwareExpenditureByScopeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SoftwareExpenditureByScopeRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetScope() {
		_, _ = idx, item

		if !_SoftwareExpenditureByScopeRequest_Scope_Pattern.MatchString(item) {
			return SoftwareExpenditureByScopeRequestValidationError{
				field:  fmt.Sprintf("Scope[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// SoftwareExpenditureByScopeRequestValidationError is the validation error
// returned by SoftwareExpenditureByScopeRequest.Validate if the designated
// constraints aren't met.
type SoftwareExpenditureByScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SoftwareExpenditureByScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SoftwareExpenditureByScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SoftwareExpenditureByScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SoftwareExpenditureByScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SoftwareExpenditureByScopeRequestValidationError) ErrorName() string {
	return "SoftwareExpenditureByScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SoftwareExpenditureByScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSoftwareExpenditureByScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SoftwareExpenditureByScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SoftwareExpenditureByScopeRequestValidationError{}

var _SoftwareExpenditureByScopeRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on SoftwareExpenditureByScopeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SoftwareExpenditureByScopeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetExpensePercent() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return SoftwareExpenditureByScopeResponseValidationError{
					field:  fmt.Sprintf("ExpensePercent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalExpenditure

	// no validation rules for TotalCost

	return nil
}

// SoftwareExpenditureByScopeResponseValidationError is the validation error
// returned by SoftwareExpenditureByScopeResponse.Validate if the designated
// constraints aren't met.
type SoftwareExpenditureByScopeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SoftwareExpenditureByScopeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SoftwareExpenditureByScopeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SoftwareExpenditureByScopeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SoftwareExpenditureByScopeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SoftwareExpenditureByScopeResponseValidationError) ErrorName() string {
	return "SoftwareExpenditureByScopeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SoftwareExpenditureByScopeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSoftwareExpenditureByScopeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SoftwareExpenditureByScopeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SoftwareExpenditureByScopeResponseValidationError{}

// Validate checks the field values on DashboardQualityProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DashboardQualityProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DashboardQualityProductsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DashboardQualityProductsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DashboardQualityProductsRequestValidationError is the validation error
// returned by DashboardQualityProductsRequest.Validate if the designated
// constraints aren't met.
type DashboardQualityProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardQualityProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardQualityProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardQualityProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardQualityProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardQualityProductsRequestValidationError) ErrorName() string {
	return "DashboardQualityProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardQualityProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardQualityProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardQualityProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardQualityProductsRequestValidationError{}

var _DashboardQualityProductsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DashboardQualityProductsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DashboardQualityProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProductsNotDeployed() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return DashboardQualityProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsNotDeployed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProductsNotAcquired() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return DashboardQualityProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsNotAcquired[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DashboardQualityProductsResponseValidationError is the validation error
// returned by DashboardQualityProductsResponse.Validate if the designated
// constraints aren't met.
type DashboardQualityProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardQualityProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardQualityProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardQualityProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardQualityProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardQualityProductsResponseValidationError) ErrorName() string {
	return "DashboardQualityProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardQualityProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardQualityProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardQualityProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardQualityProductsResponseValidationError{}

// Validate checks the field values on DashboardQualityProducts with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DashboardQualityProducts) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for ProductName

	// no validation rules for Editor

	// no validation rules for Version

	// no validation rules for EditorId

	return nil
}

// DashboardQualityProductsValidationError is the validation error returned by
// DashboardQualityProducts.Validate if the designated constraints aren't met.
type DashboardQualityProductsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardQualityProductsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardQualityProductsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardQualityProductsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardQualityProductsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardQualityProductsValidationError) ErrorName() string {
	return "DashboardQualityProductsValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardQualityProductsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardQualityProducts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardQualityProductsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardQualityProductsValidationError{}

// Validate checks the field values on ProductsLicenses with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductsLicenses) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for ProductName

	// no validation rules for AggregationName

	// no validation rules for NumLicensesAcquired

	// no validation rules for NumLicensesComputed

	// no validation rules for Delta

	return nil
}

// ProductsLicensesValidationError is the validation error returned by
// ProductsLicenses.Validate if the designated constraints aren't met.
type ProductsLicensesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsLicensesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsLicensesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsLicensesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsLicensesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsLicensesValidationError) ErrorName() string { return "ProductsLicensesValidationError" }

// Error satisfies the builtin error interface
func (e ProductsLicensesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsLicenses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsLicensesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsLicensesValidationError{}

// Validate checks the field values on ProductsCosts with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductsCosts) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for ProductName

	// no validation rules for AggregationName

	// no validation rules for LicensesAcquiredCost

	// no validation rules for LicensesComputedCost

	// no validation rules for DeltaCost

	return nil
}

// ProductsCostsValidationError is the validation error returned by
// ProductsCosts.Validate if the designated constraints aren't met.
type ProductsCostsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsCostsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsCostsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsCostsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsCostsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsCostsValidationError) ErrorName() string { return "ProductsCostsValidationError" }

// Error satisfies the builtin error interface
func (e ProductsCostsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsCosts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsCostsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsCostsValidationError{}

// Validate checks the field values on SoftwareExpensePercent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SoftwareExpensePercent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Scope

	// no validation rules for Expenditure

	// no validation rules for TotalCost

	// no validation rules for ExpenditurePercent

	return nil
}

// SoftwareExpensePercentValidationError is the validation error returned by
// SoftwareExpensePercent.Validate if the designated constraints aren't met.
type SoftwareExpensePercentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SoftwareExpensePercentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SoftwareExpensePercentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SoftwareExpensePercentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SoftwareExpensePercentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SoftwareExpensePercentValidationError) ErrorName() string {
	return "SoftwareExpensePercentValidationError"
}

// Error satisfies the builtin error interface
func (e SoftwareExpensePercentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSoftwareExpensePercent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SoftwareExpensePercentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SoftwareExpensePercentValidationError{}

// Validate checks the field values on ProductsPerMetricTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsPerMetricTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ProductsPerMetricTypeRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ProductsPerMetricTypeRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ProductsPerMetricTypeRequestValidationError is the validation error returned
// by ProductsPerMetricTypeRequest.Validate if the designated constraints
// aren't met.
type ProductsPerMetricTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsPerMetricTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsPerMetricTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsPerMetricTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsPerMetricTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsPerMetricTypeRequestValidationError) ErrorName() string {
	return "ProductsPerMetricTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsPerMetricTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsPerMetricTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsPerMetricTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsPerMetricTypeRequestValidationError{}

var _ProductsPerMetricTypeRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on CounterfeitedProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CounterfeitedProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CounterfeitedProductsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return CounterfeitedProductsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Editor

	return nil
}

// CounterfeitedProductsRequestValidationError is the validation error returned
// by CounterfeitedProductsRequest.Validate if the designated constraints
// aren't met.
type CounterfeitedProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CounterfeitedProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CounterfeitedProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CounterfeitedProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CounterfeitedProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CounterfeitedProductsRequestValidationError) ErrorName() string {
	return "CounterfeitedProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CounterfeitedProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCounterfeitedProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CounterfeitedProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CounterfeitedProductsRequestValidationError{}

var _CounterfeitedProductsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on CounterfeitedProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CounterfeitedProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProductsLicenses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return CounterfeitedProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsLicenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProductsCosts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return CounterfeitedProductsResponseValidationError{
					field:  fmt.Sprintf("ProductsCosts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CounterfeitedProductsResponseValidationError is the validation error
// returned by CounterfeitedProductsResponse.Validate if the designated
// constraints aren't met.
type CounterfeitedProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CounterfeitedProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CounterfeitedProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CounterfeitedProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CounterfeitedProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CounterfeitedProductsResponseValidationError) ErrorName() string {
	return "CounterfeitedProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CounterfeitedProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCounterfeitedProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CounterfeitedProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CounterfeitedProductsResponseValidationError{}

// Validate checks the field values on ProductsPerMetricTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsPerMetricTypeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetricsProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ProductsPerMetricTypeResponseValidationError{
					field:  fmt.Sprintf("MetricsProducts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductsPerMetricTypeResponseValidationError is the validation error
// returned by ProductsPerMetricTypeResponse.Validate if the designated
// constraints aren't met.
type ProductsPerMetricTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsPerMetricTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsPerMetricTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsPerMetricTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsPerMetricTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsPerMetricTypeResponseValidationError) ErrorName() string {
	return "ProductsPerMetricTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsPerMetricTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsPerMetricTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsPerMetricTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsPerMetricTypeResponseValidationError{}

// Validate checks the field values on MetricProducts with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MetricProducts) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetricName

	// no validation rules for NumProducts

	return nil
}

// MetricProductsValidationError is the validation error returned by
// MetricProducts.Validate if the designated constraints aren't met.
type MetricProductsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricProductsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricProductsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricProductsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricProductsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricProductsValidationError) ErrorName() string { return "MetricProductsValidationError" }

// Error satisfies the builtin error interface
func (e MetricProductsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricProducts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricProductsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricProductsValidationError{}

// Validate checks the field values on DashboardOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DashboardOverviewRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DashboardOverviewRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DashboardOverviewRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DashboardOverviewRequestValidationError is the validation error returned by
// DashboardOverviewRequest.Validate if the designated constraints aren't met.
type DashboardOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardOverviewRequestValidationError) ErrorName() string {
	return "DashboardOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardOverviewRequestValidationError{}

var _DashboardOverviewRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DashboardOverviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DashboardOverviewResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalLicenseCost

	// no validation rules for TotalMaintenanceCost

	// no validation rules for NumEditors

	// no validation rules for NumProducts

	// no validation rules for TotalCounterfeitingAmount

	// no validation rules for TotalUnderusageAmount

	return nil
}

// DashboardOverviewResponseValidationError is the validation error returned by
// DashboardOverviewResponse.Validate if the designated constraints aren't met.
type DashboardOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardOverviewResponseValidationError) ErrorName() string {
	return "DashboardOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardOverviewResponseValidationError{}

// Validate checks the field values on UpsertAcqRightsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertAcqRightsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetSku()) < 1 {
		return UpsertAcqRightsRequestValidationError{
			field:  "Sku",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSwidtag()) < 1 {
		return UpsertAcqRightsRequestValidationError{
			field:  "Swidtag",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for ProductName

	// no validation rules for ProductEditor

	// no validation rules for MetricType

	// no validation rules for NumLicensesAcquired

	// no validation rules for AvgUnitPrice

	// no validation rules for AvgMaintenanceUnitPrice

	// no validation rules for TotalPurchaseCost

	// no validation rules for TotalMaintenanceCost

	// no validation rules for TotalCost

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		return UpsertAcqRightsRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for StartOfMaintenance

	// no validation rules for EndOfMaintenance

	// no validation rules for NumLicencesMaintainance

	// no validation rules for Version

	if utf8.RuneCountInString(m.GetCorporateSourcingContract()) > 16 {
		return UpsertAcqRightsRequestValidationError{
			field:  "CorporateSourcingContract",
			reason: "value length must be at most 16 runes",
		}
	}

	// no validation rules for OrderingDate

	if utf8.RuneCountInString(m.GetSoftwareProvider()) > 16 {
		return UpsertAcqRightsRequestValidationError{
			field:  "SoftwareProvider",
			reason: "value length must be at most 16 runes",
		}
	}

	if utf8.RuneCountInString(m.GetMaintenanceProvider()) > 100 {
		return UpsertAcqRightsRequestValidationError{
			field:  "MaintenanceProvider",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetLastPurchasedOrder()) > 16 {
		return UpsertAcqRightsRequestValidationError{
			field:  "LastPurchasedOrder",
			reason: "value length must be at most 16 runes",
		}
	}

	// no validation rules for SupportNumber

	// no validation rules for Repartition

	// no validation rules for Comment

	return nil
}

// UpsertAcqRightsRequestValidationError is the validation error returned by
// UpsertAcqRightsRequest.Validate if the designated constraints aren't met.
type UpsertAcqRightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAcqRightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAcqRightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAcqRightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAcqRightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAcqRightsRequestValidationError) ErrorName() string {
	return "UpsertAcqRightsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAcqRightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAcqRightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAcqRightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAcqRightsRequestValidationError{}

// Validate checks the field values on UpsertAcqRightsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertAcqRightsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertAcqRightsResponseValidationError is the validation error returned by
// UpsertAcqRightsResponse.Validate if the designated constraints aren't met.
type UpsertAcqRightsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAcqRightsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAcqRightsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAcqRightsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAcqRightsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAcqRightsResponseValidationError) ErrorName() string {
	return "UpsertAcqRightsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAcqRightsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAcqRightsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAcqRightsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAcqRightsResponseValidationError{}

// Validate checks the field values on ListAcqRightsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListAcqRightsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if m.GetPageSize() < 10 {
		return ListAcqRightsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 10",
		}
	}

	if _, ok := ListAcqRightsRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListAcqRightsRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for SortOrder

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListAcqRightsRequest_Scopes_Pattern.MatchString(item) {
			return ListAcqRightsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListAcqRightsRequestValidationError is the validation error returned by
// ListAcqRightsRequest.Validate if the designated constraints aren't met.
type ListAcqRightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsRequestValidationError) ErrorName() string {
	return "ListAcqRightsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsRequestValidationError{}

var _ListAcqRightsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on AcqRightsSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcqRightsSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSKU()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "SKU",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "ProductName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMetric()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSoftwareProvider()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "SoftwareProvider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderingDate()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsSearchParamsValidationError{
				field:  "OrderingDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AcqRightsSearchParamsValidationError is the validation error returned by
// AcqRightsSearchParams.Validate if the designated constraints aren't met.
type AcqRightsSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcqRightsSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcqRightsSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcqRightsSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcqRightsSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcqRightsSearchParamsValidationError) ErrorName() string {
	return "AcqRightsSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AcqRightsSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcqRightsSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcqRightsSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcqRightsSearchParamsValidationError{}

// Validate checks the field values on ListAcqRightsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcqRightsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAcquiredRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsResponseValidationError{
					field:  fmt.Sprintf("AcquiredRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsResponseValidationError is the validation error returned by
// ListAcqRightsResponse.Validate if the designated constraints aren't met.
type ListAcqRightsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsResponseValidationError) ErrorName() string {
	return "ListAcqRightsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsResponseValidationError{}

// Validate checks the field values on AcqRights with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AcqRights) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SKU

	// no validation rules for SwidTag

	// no validation rules for ProductName

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for AcquiredLicensesNumber

	// no validation rules for AvgLicenesUnitPrice

	// no validation rules for AvgMaintenanceUnitPrice

	// no validation rules for TotalPurchaseCost

	// no validation rules for TotalMaintenanceCost

	// no validation rules for TotalCost

	if v, ok := interface{}(m.GetStartOfMaintenance()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsValidationError{
				field:  "StartOfMaintenance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndOfMaintenance()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsValidationError{
				field:  "EndOfMaintenance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LicensesUnderMaintenance

	// no validation rules for LicensesUnderMaintenanceNumber

	// no validation rules for Version

	// no validation rules for Comment

	if v, ok := interface{}(m.GetOrderingDate()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AcqRightsValidationError{
				field:  "OrderingDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CorporateSourcingContract

	// no validation rules for SoftwareProvider

	// no validation rules for LastPurchasedOrder

	// no validation rules for SupportNumber

	// no validation rules for MaintenanceProvider

	// no validation rules for FileName

	// no validation rules for Repartition

	if m.GetSharedLicenses() < 0 {
		return AcqRightsValidationError{
			field:  "SharedLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetRecievedLicenses() < 0 {
		return AcqRightsValidationError{
			field:  "RecievedLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetAvailableLicenses() < 0 {
		return AcqRightsValidationError{
			field:  "AvailableLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	for idx, item := range m.GetSharedData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return AcqRightsValidationError{
					field:  fmt.Sprintf("SharedData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ProductSwidTag

	// no validation rules for VersionSwidTag

	// no validation rules for EditorId

	// no validation rules for ProductId

	return nil
}

// AcqRightsValidationError is the validation error returned by
// AcqRights.Validate if the designated constraints aren't met.
type AcqRightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcqRightsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcqRightsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcqRightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcqRightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcqRightsValidationError) ErrorName() string { return "AcqRightsValidationError" }

// Error satisfies the builtin error interface
func (e AcqRightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcqRights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcqRightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcqRightsValidationError{}

// Validate checks the field values on SharedData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SharedData) Validate() error {
	if m == nil {
		return nil
	}

	if !_SharedData_Scope_Pattern.MatchString(m.GetScope()) {
		return SharedDataValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if m.GetSharedLicenses() < 0 {
		return SharedDataValidationError{
			field:  "SharedLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetRecievedLicenses() < 0 {
		return SharedDataValidationError{
			field:  "RecievedLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// SharedDataValidationError is the validation error returned by
// SharedData.Validate if the designated constraints aren't met.
type SharedDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedDataValidationError) ErrorName() string { return "SharedDataValidationError" }

// Error satisfies the builtin error interface
func (e SharedDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedDataValidationError{}

var _SharedData_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAggregatedAcqRightsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAggregatedAcqRightsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListAggregatedAcqRightsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListAggregatedAcqRightsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	if _, ok := ListAggregatedAcqRightsRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListAggregatedAcqRightsRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for SortOrder

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAggregatedAcqRightsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_ListAggregatedAcqRightsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListAggregatedAcqRightsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ListAggregatedAcqRightsRequestValidationError is the validation error
// returned by ListAggregatedAcqRightsRequest.Validate if the designated
// constraints aren't met.
type ListAggregatedAcqRightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregatedAcqRightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregatedAcqRightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregatedAcqRightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregatedAcqRightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregatedAcqRightsRequestValidationError) ErrorName() string {
	return "ListAggregatedAcqRightsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregatedAcqRightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregatedAcqRightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregatedAcqRightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregatedAcqRightsRequestValidationError{}

var _ListAggregatedAcqRightsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAggregatedAcqRightsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAggregatedAcqRightsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAggregations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAggregatedAcqRightsResponseValidationError{
					field:  fmt.Sprintf("Aggregations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAggregatedAcqRightsResponseValidationError is the validation error
// returned by ListAggregatedAcqRightsResponse.Validate if the designated
// constraints aren't met.
type ListAggregatedAcqRightsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregatedAcqRightsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregatedAcqRightsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregatedAcqRightsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregatedAcqRightsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregatedAcqRightsResponseValidationError) ErrorName() string {
	return "ListAggregatedAcqRightsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregatedAcqRightsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregatedAcqRightsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregatedAcqRightsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregatedAcqRightsResponseValidationError{}

// Validate checks the field values on AcqRightsAggregation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcqRightsAggregation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Scope

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for TotalCost

	return nil
}

// AcqRightsAggregationValidationError is the validation error returned by
// AcqRightsAggregation.Validate if the designated constraints aren't met.
type AcqRightsAggregationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcqRightsAggregationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcqRightsAggregationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcqRightsAggregationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcqRightsAggregationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcqRightsAggregationValidationError) ErrorName() string {
	return "AcqRightsAggregationValidationError"
}

// Error satisfies the builtin error interface
func (e AcqRightsAggregationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcqRightsAggregation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcqRightsAggregationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcqRightsAggregationValidationError{}

// Validate checks the field values on ListAcqRightsAggregationSearchParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListAcqRightsAggregationSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSKU()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "SKU",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMetric()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderingDate()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "OrderingDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSoftwareProvider()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAcqRightsAggregationSearchParamsValidationError{
				field:  "SoftwareProvider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListAcqRightsAggregationSearchParamsValidationError is the validation error
// returned by ListAcqRightsAggregationSearchParams.Validate if the designated
// constraints aren't met.
type ListAcqRightsAggregationSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationSearchParamsValidationError) ErrorName() string {
	return "ListAcqRightsAggregationSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationSearchParamsValidationError{}

// Validate checks the field values on ListAcqRightsAggregationRecordsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListAcqRightsAggregationRecordsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AggregationId

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if !_ListAcqRightsAggregationRecordsRequest_Scopes_Pattern.MatchString(item) {
			return ListAcqRightsAggregationRecordsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
			}
		}

	}

	return nil
}

// ListAcqRightsAggregationRecordsRequestValidationError is the validation
// error returned by ListAcqRightsAggregationRecordsRequest.Validate if the
// designated constraints aren't met.
type ListAcqRightsAggregationRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationRecordsRequestValidationError) ErrorName() string {
	return "ListAcqRightsAggregationRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationRecordsRequestValidationError{}

var _ListAcqRightsAggregationRecordsRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAcqRightsAggregationRecordsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListAcqRightsAggregationRecordsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAcquiredRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsAggregationRecordsResponseValidationError{
					field:  fmt.Sprintf("AcquiredRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsAggregationRecordsResponseValidationError is the validation
// error returned by ListAcqRightsAggregationRecordsResponse.Validate if the
// designated constraints aren't met.
type ListAcqRightsAggregationRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsAggregationRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsAggregationRecordsResponseValidationError) ErrorName() string {
	return "ListAcqRightsAggregationRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsAggregationRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsAggregationRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsAggregationRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsAggregationRecordsResponseValidationError{}

// Validate checks the field values on DeleteAggregationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetID() < 0 {
		return DeleteAggregationRequestValidationError{
			field:  "ID",
			reason: "value must be greater than or equal to 0",
		}
	}

	if !_DeleteAggregationRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DeleteAggregationRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DeleteAggregationRequestValidationError is the validation error returned by
// DeleteAggregationRequest.Validate if the designated constraints aren't met.
type DeleteAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAggregationRequestValidationError) ErrorName() string {
	return "DeleteAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAggregationRequestValidationError{}

var _DeleteAggregationRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAggregationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAggregationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListAggregationsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListAggregationsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	if _, ok := ListAggregationsRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListAggregationsRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListAggregationsRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAggregationsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_ListAggregationsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListAggregationsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ListAggregationsRequestValidationError is the validation error returned by
// ListAggregationsRequest.Validate if the designated constraints aren't met.
type ListAggregationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregationsRequestValidationError) ErrorName() string {
	return "ListAggregationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregationsRequestValidationError{}

var _ListAggregationsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAggregationsSearchParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAggregationsSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAggregationName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAggregationsSearchParamsValidationError{
				field:  "AggregationName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductEditor()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListAggregationsSearchParamsValidationError{
				field:  "ProductEditor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListAggregationsSearchParamsValidationError is the validation error returned
// by ListAggregationsSearchParams.Validate if the designated constraints
// aren't met.
type ListAggregationsSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregationsSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregationsSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregationsSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregationsSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregationsSearchParamsValidationError) ErrorName() string {
	return "ListAggregationsSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregationsSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregationsSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregationsSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregationsSearchParamsValidationError{}

// Validate checks the field values on ListAggregationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAggregationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAggregations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAggregationsResponseValidationError{
					field:  fmt.Sprintf("Aggregations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAggregationsResponseValidationError is the validation error returned by
// ListAggregationsResponse.Validate if the designated constraints aren't met.
type ListAggregationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregationsResponseValidationError) ErrorName() string {
	return "ListAggregationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregationsResponseValidationError{}

// Validate checks the field values on ProductAggregationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAggregationMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if !_ProductAggregationMessage_Name_Pattern.MatchString(m.GetName()) {
		return ProductAggregationMessageValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
	}

	// no validation rules for Editor

	// no validation rules for Metric

	if !_ProductAggregationMessage_Scope_Pattern.MatchString(m.GetScope()) {
		return ProductAggregationMessageValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ProductAggregationMessageValidationError is the validation error returned by
// ProductAggregationMessage.Validate if the designated constraints aren't met.
type ProductAggregationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationMessageValidationError) ErrorName() string {
	return "ProductAggregationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationMessageValidationError{}

var _ProductAggregationMessage_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

var _ProductAggregationMessage_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductAggregation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAggregation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for Scope

	return nil
}

// ProductAggregationValidationError is the validation error returned by
// ProductAggregation.Validate if the designated constraints aren't met.
type ProductAggregationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationValidationError) ErrorName() string {
	return "ProductAggregationValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationValidationError{}

// Validate checks the field values on ListAggregationEditorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAggregationEditorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListAggregationEditorsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListAggregationEditorsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ListAggregationEditorsRequestValidationError is the validation error
// returned by ListAggregationEditorsRequest.Validate if the designated
// constraints aren't met.
type ListAggregationEditorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregationEditorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregationEditorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregationEditorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregationEditorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregationEditorsRequestValidationError) ErrorName() string {
	return "ListAggregationEditorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregationEditorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregationEditorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregationEditorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregationEditorsRequestValidationError{}

var _ListAggregationEditorsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAggregationEditorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAggregationEditorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListAggregationEditorsResponseValidationError is the validation error
// returned by ListAggregationEditorsResponse.Validate if the designated
// constraints aren't met.
type ListAggregationEditorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregationEditorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregationEditorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregationEditorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregationEditorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregationEditorsResponseValidationError) ErrorName() string {
	return "ListAggregationEditorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregationEditorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregationEditorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregationEditorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregationEditorsResponseValidationError{}

// Validate checks the field values on ListAggregationProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAggregationProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListAggregationProductsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListAggregationProductsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Editor

	if m.GetID() < 0 {
		return ListAggregationProductsRequestValidationError{
			field:  "ID",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// ListAggregationProductsRequestValidationError is the validation error
// returned by ListAggregationProductsRequest.Validate if the designated
// constraints aren't met.
type ListAggregationProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregationProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregationProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregationProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregationProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregationProductsRequestValidationError) ErrorName() string {
	return "ListAggregationProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregationProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregationProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregationProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregationProductsRequestValidationError{}

var _ListAggregationProductsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAggregationProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAggregationProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAggrightsProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAggregationProductsResponseValidationError{
					field:  fmt.Sprintf("AggrightsProducts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSelectedProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAggregationProductsResponseValidationError{
					field:  fmt.Sprintf("SelectedProducts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAggregationProductsResponseValidationError is the validation error
// returned by ListAggregationProductsResponse.Validate if the designated
// constraints aren't met.
type ListAggregationProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregationProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregationProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregationProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregationProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregationProductsResponseValidationError) ErrorName() string {
	return "ListAggregationProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregationProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregationProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregationProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregationProductsResponseValidationError{}

// Validate checks the field values on AggregationProducts with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AggregationProducts) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Swidtag

	// no validation rules for ProductName

	// no validation rules for Editor

	// no validation rules for ProductVersion

	return nil
}

// AggregationProductsValidationError is the validation error returned by
// AggregationProducts.Validate if the designated constraints aren't met.
type AggregationProductsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationProductsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationProductsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationProductsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationProductsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationProductsValidationError) ErrorName() string {
	return "AggregationProductsValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationProductsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationProducts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationProductsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationProductsValidationError{}

// Validate checks the field values on DropProductDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropProductDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DropProductDataRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DropProductDataRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if _, ok := _DropProductDataRequest_DeletionType_InLookup[m.GetDeletionType()]; !ok {
		return DropProductDataRequestValidationError{
			field:  "DeletionType",
			reason: "value must be in list [0 1 2]",
		}
	}

	return nil
}

// DropProductDataRequestValidationError is the validation error returned by
// DropProductDataRequest.Validate if the designated constraints aren't met.
type DropProductDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropProductDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropProductDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropProductDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropProductDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropProductDataRequestValidationError) ErrorName() string {
	return "DropProductDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropProductDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropProductDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropProductDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropProductDataRequestValidationError{}

var _DropProductDataRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

var _DropProductDataRequest_DeletionType_InLookup = map[DropProductDataRequestDeletionTypes]struct{}{
	0: {},
	1: {},
	2: {},
}

// Validate checks the field values on DropProductDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropProductDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DropProductDataResponseValidationError is the validation error returned by
// DropProductDataResponse.Validate if the designated constraints aren't met.
type DropProductDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropProductDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropProductDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropProductDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropProductDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropProductDataResponseValidationError) ErrorName() string {
	return "DropProductDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropProductDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropProductDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropProductDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropProductDataResponseValidationError{}

// Validate checks the field values on DropAggregationDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropAggregationDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DropAggregationDataRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DropAggregationDataRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DropAggregationDataRequestValidationError is the validation error returned
// by DropAggregationDataRequest.Validate if the designated constraints aren't met.
type DropAggregationDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropAggregationDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropAggregationDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropAggregationDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropAggregationDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropAggregationDataRequestValidationError) ErrorName() string {
	return "DropAggregationDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropAggregationDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropAggregationDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropAggregationDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropAggregationDataRequestValidationError{}

var _DropAggregationDataRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DropAggregationDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropAggregationDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DropAggregationDataResponseValidationError is the validation error returned
// by DropAggregationDataResponse.Validate if the designated constraints
// aren't met.
type DropAggregationDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropAggregationDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropAggregationDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropAggregationDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropAggregationDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropAggregationDataResponseValidationError) ErrorName() string {
	return "DropAggregationDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropAggregationDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropAggregationDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropAggregationDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropAggregationDataResponseValidationError{}

// Validate checks the field values on UpserNominativeUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpserNominativeUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Editor

	if !_UpserNominativeUserRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return UpserNominativeUserRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for ProductName

	// no validation rules for ProductVersion

	// no validation rules for AggregationId

	// no validation rules for FileName

	// no validation rules for SheetName

	for idx, item := range m.GetUserDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return UpserNominativeUserRequestValidationError{
					field:  fmt.Sprintf("UserDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UploadId

	return nil
}

// UpserNominativeUserRequestValidationError is the validation error returned
// by UpserNominativeUserRequest.Validate if the designated constraints aren't met.
type UpserNominativeUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpserNominativeUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpserNominativeUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpserNominativeUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpserNominativeUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpserNominativeUserRequestValidationError) ErrorName() string {
	return "UpserNominativeUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpserNominativeUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpserNominativeUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpserNominativeUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpserNominativeUserRequestValidationError{}

var _UpserNominativeUserRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on NominativeUserDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NominativeUserDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserName

	// no validation rules for FirstName

	// no validation rules for Email

	// no validation rules for Profile

	// no validation rules for ActivationDate

	// no validation rules for Comments

	return nil
}

// NominativeUserDetailsValidationError is the validation error returned by
// NominativeUserDetails.Validate if the designated constraints aren't met.
type NominativeUserDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NominativeUserDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NominativeUserDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NominativeUserDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NominativeUserDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NominativeUserDetailsValidationError) ErrorName() string {
	return "NominativeUserDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e NominativeUserDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNominativeUserDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NominativeUserDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NominativeUserDetailsValidationError{}

// Validate checks the field values on UpserNominativeUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpserNominativeUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	return nil
}

// UpserNominativeUserResponseValidationError is the validation error returned
// by UpserNominativeUserResponse.Validate if the designated constraints
// aren't met.
type UpserNominativeUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpserNominativeUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpserNominativeUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpserNominativeUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpserNominativeUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpserNominativeUserResponseValidationError) ErrorName() string {
	return "UpserNominativeUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpserNominativeUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpserNominativeUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpserNominativeUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpserNominativeUserResponseValidationError{}

// Validate checks the field values on ListNominativeUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNominativeUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 10000 {
		return ListNominativeUsersRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 10000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListNominativeUsersRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	if _, ok := _ListNominativeUsersRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return ListNominativeUsersRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [product_name aggregation_name product_version user_name first_name user_email profile activation_date editor]",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListNominativeUsersRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListNominativeUsersRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_ListNominativeUsersRequest_Scopes_Pattern.MatchString(m.GetScopes()) {
		return ListNominativeUsersRequestValidationError{
			field:  "Scopes",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for IsProduct

	return nil
}

// ListNominativeUsersRequestValidationError is the validation error returned
// by ListNominativeUsersRequest.Validate if the designated constraints aren't met.
type ListNominativeUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNominativeUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNominativeUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNominativeUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNominativeUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNominativeUsersRequestValidationError) ErrorName() string {
	return "ListNominativeUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNominativeUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNominativeUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNominativeUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNominativeUsersRequestValidationError{}

var _ListNominativeUsersRequest_SortBy_InLookup = map[string]struct{}{
	"product_name":     {},
	"aggregation_name": {},
	"product_version":  {},
	"user_name":        {},
	"first_name":       {},
	"user_email":       {},
	"profile":          {},
	"activation_date":  {},
	"editor":           {},
}

var _ListNominativeUsersRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on NominativeUserSearchParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NominativeUserSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProductName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return NominativeUserSearchParamsValidationError{
				field:  "ProductName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAggregationName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return NominativeUserSearchParamsValidationError{
				field:  "AggregationName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductVersion()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return NominativeUserSearchParamsValidationError{
				field:  "ProductVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUserName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return NominativeUserSearchParamsValidationError{
				field:  "UserName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFirstName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return NominativeUserSearchParamsValidationError{
				field:  "FirstName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUserEmail()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return NominativeUserSearchParamsValidationError{
				field:  "UserEmail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProfile()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return NominativeUserSearchParamsValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetActivationDate()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return NominativeUserSearchParamsValidationError{
				field:  "ActivationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return NominativeUserSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NominativeUserSearchParamsValidationError is the validation error returned
// by NominativeUserSearchParams.Validate if the designated constraints aren't met.
type NominativeUserSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NominativeUserSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NominativeUserSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NominativeUserSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NominativeUserSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NominativeUserSearchParamsValidationError) ErrorName() string {
	return "NominativeUserSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e NominativeUserSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNominativeUserSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NominativeUserSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NominativeUserSearchParamsValidationError{}

// Validate checks the field values on NominativeUsersExportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NominativeUsersExportRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _NominativeUsersExportRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return NominativeUsersExportRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [product_name aggregation_name product_version user_name first_name user_email profile activation_date]",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return NominativeUsersExportRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return NominativeUsersExportRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_NominativeUsersExportRequest_Scopes_Pattern.MatchString(m.GetScopes()) {
		return NominativeUsersExportRequestValidationError{
			field:  "Scopes",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for IsProduct

	return nil
}

// NominativeUsersExportRequestValidationError is the validation error returned
// by NominativeUsersExportRequest.Validate if the designated constraints
// aren't met.
type NominativeUsersExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NominativeUsersExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NominativeUsersExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NominativeUsersExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NominativeUsersExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NominativeUsersExportRequestValidationError) ErrorName() string {
	return "NominativeUsersExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NominativeUsersExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNominativeUsersExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NominativeUsersExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NominativeUsersExportRequestValidationError{}

var _NominativeUsersExportRequest_SortBy_InLookup = map[string]struct{}{
	"product_name":     {},
	"aggregation_name": {},
	"product_version":  {},
	"user_name":        {},
	"first_name":       {},
	"user_email":       {},
	"profile":          {},
	"activation_date":  {},
}

var _NominativeUsersExportRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListNominativeUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNominativeUsersResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetNominativeUser() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListNominativeUsersResponseValidationError{
					field:  fmt.Sprintf("NominativeUser[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListNominativeUsersResponseValidationError is the validation error returned
// by ListNominativeUsersResponse.Validate if the designated constraints
// aren't met.
type ListNominativeUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNominativeUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNominativeUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNominativeUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNominativeUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNominativeUsersResponseValidationError) ErrorName() string {
	return "ListNominativeUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNominativeUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNominativeUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNominativeUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNominativeUsersResponseValidationError{}

// Validate checks the field values on ListNominativeUsersExportResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListNominativeUsersExportResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetNominativeUser() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListNominativeUsersExportResponseValidationError{
					field:  fmt.Sprintf("NominativeUser[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListNominativeUsersExportResponseValidationError is the validation error
// returned by ListNominativeUsersExportResponse.Validate if the designated
// constraints aren't met.
type ListNominativeUsersExportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNominativeUsersExportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNominativeUsersExportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNominativeUsersExportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNominativeUsersExportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNominativeUsersExportResponseValidationError) ErrorName() string {
	return "ListNominativeUsersExportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNominativeUsersExportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNominativeUsersExportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNominativeUsersExportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNominativeUsersExportResponseValidationError{}

// Validate checks the field values on NominativeUserExport with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NominativeUserExport) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Editor

	// no validation rules for ProductName

	// no validation rules for AggregationName

	// no validation rules for ProductVersion

	// no validation rules for UserName

	// no validation rules for FirstName

	// no validation rules for UserEmail

	// no validation rules for Profile

	// no validation rules for ActivationDate

	// no validation rules for AggregationId

	// no validation rules for Id

	// no validation rules for Comment

	// no validation rules for ActivationDateString

	return nil
}

// NominativeUserExportValidationError is the validation error returned by
// NominativeUserExport.Validate if the designated constraints aren't met.
type NominativeUserExportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NominativeUserExportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NominativeUserExportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NominativeUserExportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NominativeUserExportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NominativeUserExportValidationError) ErrorName() string {
	return "NominativeUserExportValidationError"
}

// Error satisfies the builtin error interface
func (e NominativeUserExportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNominativeUserExport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NominativeUserExportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NominativeUserExportValidationError{}

// Validate checks the field values on NominativeUser with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NominativeUser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Editor

	// no validation rules for ProductName

	// no validation rules for AggregationName

	// no validation rules for ProductVersion

	// no validation rules for UserName

	// no validation rules for FirstName

	// no validation rules for UserEmail

	// no validation rules for Profile

	if v, ok := interface{}(m.GetActivationDate()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return NominativeUserValidationError{
				field:  "ActivationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AggregationId

	// no validation rules for Id

	// no validation rules for Comment

	// no validation rules for ActivationDateString

	return nil
}

// NominativeUserValidationError is the validation error returned by
// NominativeUser.Validate if the designated constraints aren't met.
type NominativeUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NominativeUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NominativeUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NominativeUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NominativeUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NominativeUserValidationError) ErrorName() string { return "NominativeUserValidationError" }

// Error satisfies the builtin error interface
func (e NominativeUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNominativeUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NominativeUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NominativeUserValidationError{}

// Validate checks the field values on ProductConcurrentUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductConcurrentUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ProductConcurrentUserRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ProductConcurrentUserRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for AggregationId

	// no validation rules for IsAggregations

	// no validation rules for Swidtag

	// no validation rules for ProductName

	// no validation rules for ProductEditor

	// no validation rules for ProductVersion

	if m.GetNumberOfUsers() <= 0 {
		return ProductConcurrentUserRequestValidationError{
			field:  "NumberOfUsers",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for ProfileUser

	// no validation rules for Team

	// no validation rules for Id

	return nil
}

// ProductConcurrentUserRequestValidationError is the validation error returned
// by ProductConcurrentUserRequest.Validate if the designated constraints
// aren't met.
type ProductConcurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductConcurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductConcurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductConcurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductConcurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductConcurrentUserRequestValidationError) ErrorName() string {
	return "ProductConcurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductConcurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductConcurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductConcurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductConcurrentUserRequestValidationError{}

var _ProductConcurrentUserRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductConcurrentUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductConcurrentUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// ProductConcurrentUserResponseValidationError is the validation error
// returned by ProductConcurrentUserResponse.Validate if the designated
// constraints aren't met.
type ProductConcurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductConcurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductConcurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductConcurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductConcurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductConcurrentUserResponseValidationError) ErrorName() string {
	return "ProductConcurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductConcurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductConcurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductConcurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductConcurrentUserResponseValidationError{}

// Validate checks the field values on ListConcurrentUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListConcurrentUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListConcurrentUsersRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListConcurrentUsersRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	if _, ok := _ListConcurrentUsersRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return ListConcurrentUsersRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [product_name aggregation_name product_version team profile_user purchase_date number_of_users product_editor]",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListConcurrentUsersRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListConcurrentUsersRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_ListConcurrentUsersRequest_Scopes_Pattern.MatchString(m.GetScopes()) {
		return ListConcurrentUsersRequestValidationError{
			field:  "Scopes",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for IsAggregation

	return nil
}

// ListConcurrentUsersRequestValidationError is the validation error returned
// by ListConcurrentUsersRequest.Validate if the designated constraints aren't met.
type ListConcurrentUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConcurrentUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConcurrentUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConcurrentUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConcurrentUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConcurrentUsersRequestValidationError) ErrorName() string {
	return "ListConcurrentUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConcurrentUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConcurrentUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConcurrentUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConcurrentUsersRequestValidationError{}

var _ListConcurrentUsersRequest_SortBy_InLookup = map[string]struct{}{
	"product_name":     {},
	"aggregation_name": {},
	"product_version":  {},
	"team":             {},
	"profile_user":     {},
	"purchase_date":    {},
	"number_of_users":  {},
	"product_editor":   {},
}

var _ListConcurrentUsersRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListConcurrentUsersExportRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListConcurrentUsersExportRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _ListConcurrentUsersExportRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return ListConcurrentUsersExportRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [product_name aggregation_name product_version team profile_user purchase_date]",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListConcurrentUsersExportRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListConcurrentUsersExportRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_ListConcurrentUsersExportRequest_Scopes_Pattern.MatchString(m.GetScopes()) {
		return ListConcurrentUsersExportRequestValidationError{
			field:  "Scopes",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for NumberOfUsers

	// no validation rules for IsAggregation

	return nil
}

// ListConcurrentUsersExportRequestValidationError is the validation error
// returned by ListConcurrentUsersExportRequest.Validate if the designated
// constraints aren't met.
type ListConcurrentUsersExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConcurrentUsersExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConcurrentUsersExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConcurrentUsersExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConcurrentUsersExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConcurrentUsersExportRequestValidationError) ErrorName() string {
	return "ListConcurrentUsersExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConcurrentUsersExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConcurrentUsersExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConcurrentUsersExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConcurrentUsersExportRequestValidationError{}

var _ListConcurrentUsersExportRequest_SortBy_InLookup = map[string]struct{}{
	"product_name":     {},
	"aggregation_name": {},
	"product_version":  {},
	"team":             {},
	"profile_user":     {},
	"purchase_date":    {},
}

var _ListConcurrentUsersExportRequest_Scopes_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ConcurrentUserSearchParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConcurrentUserSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProductName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConcurrentUserSearchParamsValidationError{
				field:  "ProductName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAggregationName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConcurrentUserSearchParamsValidationError{
				field:  "AggregationName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductVersion()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConcurrentUserSearchParamsValidationError{
				field:  "ProductVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTeam()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConcurrentUserSearchParamsValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProfileUser()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConcurrentUserSearchParamsValidationError{
				field:  "ProfileUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNumberOfUsers()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConcurrentUserSearchParamsValidationError{
				field:  "NumberOfUsers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductEditor()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConcurrentUserSearchParamsValidationError{
				field:  "ProductEditor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPurchaseDate()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConcurrentUserSearchParamsValidationError{
				field:  "PurchaseDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConcurrentUserSearchParamsValidationError is the validation error returned
// by ConcurrentUserSearchParams.Validate if the designated constraints aren't met.
type ConcurrentUserSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcurrentUserSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcurrentUserSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcurrentUserSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcurrentUserSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcurrentUserSearchParamsValidationError) ErrorName() string {
	return "ConcurrentUserSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ConcurrentUserSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcurrentUserSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcurrentUserSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcurrentUserSearchParamsValidationError{}

// Validate checks the field values on ListConcurrentUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListConcurrentUsersResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetConcurrentUser() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListConcurrentUsersResponseValidationError{
					field:  fmt.Sprintf("ConcurrentUser[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListConcurrentUsersResponseValidationError is the validation error returned
// by ListConcurrentUsersResponse.Validate if the designated constraints
// aren't met.
type ListConcurrentUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConcurrentUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConcurrentUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConcurrentUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConcurrentUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConcurrentUsersResponseValidationError) ErrorName() string {
	return "ListConcurrentUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConcurrentUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConcurrentUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConcurrentUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConcurrentUsersResponseValidationError{}

// Validate checks the field values on ConcurrentUser with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ConcurrentUser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProductName

	// no validation rules for AggregationName

	// no validation rules for ProductVersion

	// no validation rules for Team

	// no validation rules for ProfileUser

	// no validation rules for NumberOfUsers

	if v, ok := interface{}(m.GetPurchaseDate()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConcurrentUserValidationError{
				field:  "PurchaseDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AggregationId

	// no validation rules for Id

	// no validation rules for IsAggregation

	// no validation rules for ProductEditor

	return nil
}

// ConcurrentUserValidationError is the validation error returned by
// ConcurrentUser.Validate if the designated constraints aren't met.
type ConcurrentUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcurrentUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcurrentUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcurrentUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcurrentUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcurrentUserValidationError) ErrorName() string { return "ConcurrentUserValidationError" }

// Error satisfies the builtin error interface
func (e ConcurrentUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcurrentUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcurrentUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcurrentUserValidationError{}

// Validate checks the field values on DeleteConcurrentUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteConcurrentUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteConcurrentUsersRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DeleteConcurrentUsersRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Id

	return nil
}

// DeleteConcurrentUsersRequestValidationError is the validation error returned
// by DeleteConcurrentUsersRequest.Validate if the designated constraints
// aren't met.
type DeleteConcurrentUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConcurrentUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConcurrentUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConcurrentUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConcurrentUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConcurrentUsersRequestValidationError) ErrorName() string {
	return "DeleteConcurrentUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConcurrentUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConcurrentUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConcurrentUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConcurrentUsersRequestValidationError{}

var _DeleteConcurrentUsersRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DeleteConcurrentUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteConcurrentUsersResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteConcurrentUsersResponseValidationError is the validation error
// returned by DeleteConcurrentUsersResponse.Validate if the designated
// constraints aren't met.
type DeleteConcurrentUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConcurrentUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConcurrentUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConcurrentUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConcurrentUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConcurrentUsersResponseValidationError) ErrorName() string {
	return "DeleteConcurrentUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConcurrentUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConcurrentUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConcurrentUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConcurrentUsersResponseValidationError{}

// Validate checks the field values on DeleteNominativeUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNominativeUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteNominativeUserRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DeleteNominativeUserRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Id

	return nil
}

// DeleteNominativeUserRequestValidationError is the validation error returned
// by DeleteNominativeUserRequest.Validate if the designated constraints
// aren't met.
type DeleteNominativeUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNominativeUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNominativeUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNominativeUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNominativeUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNominativeUserRequestValidationError) ErrorName() string {
	return "DeleteNominativeUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNominativeUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNominativeUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNominativeUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNominativeUserRequestValidationError{}

var _DeleteNominativeUserRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DeleteNominativeUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNominativeUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteNominativeUserResponseValidationError is the validation error returned
// by DeleteNominativeUserResponse.Validate if the designated constraints
// aren't met.
type DeleteNominativeUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNominativeUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNominativeUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNominativeUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNominativeUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNominativeUserResponseValidationError) ErrorName() string {
	return "DeleteNominativeUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNominativeUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNominativeUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNominativeUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNominativeUserResponseValidationError{}

// Validate checks the field values on GetConcurrentUsersHistroyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetConcurrentUsersHistroyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetConcurrentUsersHistroyRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetConcurrentUsersHistroyRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Swidtag

	// no validation rules for AggID

	if m.GetStartDate() == nil {
		return GetConcurrentUsersHistroyRequestValidationError{
			field:  "StartDate",
			reason: "value is required",
		}
	}

	if m.GetEndDate() == nil {
		return GetConcurrentUsersHistroyRequestValidationError{
			field:  "EndDate",
			reason: "value is required",
		}
	}

	return nil
}

// GetConcurrentUsersHistroyRequestValidationError is the validation error
// returned by GetConcurrentUsersHistroyRequest.Validate if the designated
// constraints aren't met.
type GetConcurrentUsersHistroyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConcurrentUsersHistroyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConcurrentUsersHistroyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConcurrentUsersHistroyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConcurrentUsersHistroyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConcurrentUsersHistroyRequestValidationError) ErrorName() string {
	return "GetConcurrentUsersHistroyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConcurrentUsersHistroyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConcurrentUsersHistroyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConcurrentUsersHistroyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConcurrentUsersHistroyRequestValidationError{}

var _GetConcurrentUsersHistroyRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetConcurrentUsersHistroyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetConcurrentUsersHistroyResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetConcurrentUsersByDays() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return GetConcurrentUsersHistroyResponseValidationError{
					field:  fmt.Sprintf("ConcurrentUsersByDays[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConcurrentUsersByMonths() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return GetConcurrentUsersHistroyResponseValidationError{
					field:  fmt.Sprintf("ConcurrentUsersByMonths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetConcurrentUsersHistroyResponseValidationError is the validation error
// returned by GetConcurrentUsersHistroyResponse.Validate if the designated
// constraints aren't met.
type GetConcurrentUsersHistroyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConcurrentUsersHistroyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConcurrentUsersHistroyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConcurrentUsersHistroyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConcurrentUsersHistroyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConcurrentUsersHistroyResponseValidationError) ErrorName() string {
	return "GetConcurrentUsersHistroyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConcurrentUsersHistroyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConcurrentUsersHistroyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConcurrentUsersHistroyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConcurrentUsersHistroyResponseValidationError{}

// Validate checks the field values on ConcurrentUsersByDay with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConcurrentUsersByDay) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPurchaseDate()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ConcurrentUsersByDayValidationError{
				field:  "PurchaseDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConcurrentUsers

	return nil
}

// ConcurrentUsersByDayValidationError is the validation error returned by
// ConcurrentUsersByDay.Validate if the designated constraints aren't met.
type ConcurrentUsersByDayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcurrentUsersByDayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcurrentUsersByDayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcurrentUsersByDayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcurrentUsersByDayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcurrentUsersByDayValidationError) ErrorName() string {
	return "ConcurrentUsersByDayValidationError"
}

// Error satisfies the builtin error interface
func (e ConcurrentUsersByDayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcurrentUsersByDay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcurrentUsersByDayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcurrentUsersByDayValidationError{}

// Validate checks the field values on ConcurrentUsersByMonth with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConcurrentUsersByMonth) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PurchaseMonth

	// no validation rules for CouncurrentUsers

	return nil
}

// ConcurrentUsersByMonthValidationError is the validation error returned by
// ConcurrentUsersByMonth.Validate if the designated constraints aren't met.
type ConcurrentUsersByMonthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcurrentUsersByMonthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcurrentUsersByMonthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcurrentUsersByMonthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcurrentUsersByMonthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcurrentUsersByMonthValidationError) ErrorName() string {
	return "ConcurrentUsersByMonthValidationError"
}

// Error satisfies the builtin error interface
func (e ConcurrentUsersByMonthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcurrentUsersByMonth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcurrentUsersByMonthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcurrentUsersByMonthValidationError{}

// Validate checks the field values on GroupComplianceEditorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GroupComplianceEditorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetScopes()) < 1 {
		return GroupComplianceEditorRequestValidationError{
			field:  "Scopes",
			reason: "value must contain at least 1 item(s)",
		}
	}

	// no validation rules for Editor

	return nil
}

// GroupComplianceEditorRequestValidationError is the validation error returned
// by GroupComplianceEditorRequest.Validate if the designated constraints
// aren't met.
type GroupComplianceEditorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupComplianceEditorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupComplianceEditorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupComplianceEditorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupComplianceEditorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupComplianceEditorRequestValidationError) ErrorName() string {
	return "GroupComplianceEditorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupComplianceEditorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupComplianceEditorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupComplianceEditorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupComplianceEditorRequestValidationError{}

// Validate checks the field values on GroupComplianceEditorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GroupComplianceEditorResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCosts()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return GroupComplianceEditorResponseValidationError{
				field:  "Costs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupCounterFeitingCost

	// no validation rules for GroupUnderUsageCost

	// no validation rules for GroupTotalCost

	return nil
}

// GroupComplianceEditorResponseValidationError is the validation error
// returned by GroupComplianceEditorResponse.Validate if the designated
// constraints aren't met.
type GroupComplianceEditorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupComplianceEditorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupComplianceEditorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupComplianceEditorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupComplianceEditorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupComplianceEditorResponseValidationError) ErrorName() string {
	return "GroupComplianceEditorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupComplianceEditorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupComplianceEditorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupComplianceEditorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupComplianceEditorResponseValidationError{}

// Validate checks the field values on ScopesEditorCosts with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ScopesEditorCosts) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCounterFeiting() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ScopesEditorCostsValidationError{
					field:  fmt.Sprintf("CounterFeiting[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUnderUsage() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ScopesEditorCostsValidationError{
					field:  fmt.Sprintf("UnderUsage[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotal() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ScopesEditorCostsValidationError{
					field:  fmt.Sprintf("Total[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ScopesEditorCostsValidationError is the validation error returned by
// ScopesEditorCosts.Validate if the designated constraints aren't met.
type ScopesEditorCostsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopesEditorCostsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopesEditorCostsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopesEditorCostsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopesEditorCostsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopesEditorCostsValidationError) ErrorName() string {
	return "ScopesEditorCostsValidationError"
}

// Error satisfies the builtin error interface
func (e ScopesEditorCostsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopesEditorCosts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopesEditorCostsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopesEditorCostsValidationError{}

// Validate checks the field values on ScopeCost with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ScopeCost) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Scope

	// no validation rules for Cost

	return nil
}

// ScopeCostValidationError is the validation error returned by
// ScopeCost.Validate if the designated constraints aren't met.
type ScopeCostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeCostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeCostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeCostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeCostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeCostValidationError) ErrorName() string { return "ScopeCostValidationError" }

// Error satisfies the builtin error interface
func (e ScopeCostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeCost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeCostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeCostValidationError{}

// Validate checks the field values on GetUnderusageByEditorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUnderusageByEditorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _GetUnderusageByEditorRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return GetUnderusageByEditorRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [scope metrics delta_number]",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return GetUnderusageByEditorRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for Editor

	// no validation rules for ProductName

	return nil
}

// GetUnderusageByEditorRequestValidationError is the validation error returned
// by GetUnderusageByEditorRequest.Validate if the designated constraints
// aren't met.
type GetUnderusageByEditorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnderusageByEditorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnderusageByEditorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnderusageByEditorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnderusageByEditorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnderusageByEditorRequestValidationError) ErrorName() string {
	return "GetUnderusageByEditorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnderusageByEditorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnderusageByEditorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnderusageByEditorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnderusageByEditorRequestValidationError{}

var _GetUnderusageByEditorRequest_SortBy_InLookup = map[string]struct{}{
	"scope":        {},
	"metrics":      {},
	"delta_number": {},
}

// Validate checks the field values on GetUnderusageByEditorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUnderusageByEditorResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUnderusageByEditorData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return GetUnderusageByEditorResponseValidationError{
					field:  fmt.Sprintf("UnderusageByEditorData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetUnderusageByEditorResponseValidationError is the validation error
// returned by GetUnderusageByEditorResponse.Validate if the designated
// constraints aren't met.
type GetUnderusageByEditorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnderusageByEditorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnderusageByEditorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnderusageByEditorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnderusageByEditorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnderusageByEditorResponseValidationError) ErrorName() string {
	return "GetUnderusageByEditorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnderusageByEditorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnderusageByEditorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnderusageByEditorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnderusageByEditorResponseValidationError{}

// Validate checks the field values on UnderusageByEditorData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnderusageByEditorData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Scope

	// no validation rules for Metrics

	// no validation rules for DeltaNumber

	// no validation rules for ProductName

	// no validation rules for IsAggregation

	return nil
}

// UnderusageByEditorDataValidationError is the validation error returned by
// UnderusageByEditorData.Validate if the designated constraints aren't met.
type UnderusageByEditorDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnderusageByEditorDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnderusageByEditorDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnderusageByEditorDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnderusageByEditorDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnderusageByEditorDataValidationError) ErrorName() string {
	return "UnderusageByEditorDataValidationError"
}

// Error satisfies the builtin error interface
func (e UnderusageByEditorDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnderusageByEditorData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnderusageByEditorDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnderusageByEditorDataValidationError{}

// Validate checks the field values on ListNominativeUsersFileUploadRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListNominativeUsersFileUploadRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Scope

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListNominativeUsersFileUploadRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListNominativeUsersFileUploadRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	if _, ok := _ListNominativeUsersFileUploadRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return ListNominativeUsersFileUploadRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [fileName status editor name productVersion uploadedBy UploadedOn productType]",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListNominativeUsersFileUploadRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// ListNominativeUsersFileUploadRequestValidationError is the validation error
// returned by ListNominativeUsersFileUploadRequest.Validate if the designated
// constraints aren't met.
type ListNominativeUsersFileUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNominativeUsersFileUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNominativeUsersFileUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNominativeUsersFileUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNominativeUsersFileUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNominativeUsersFileUploadRequestValidationError) ErrorName() string {
	return "ListNominativeUsersFileUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNominativeUsersFileUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNominativeUsersFileUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNominativeUsersFileUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNominativeUsersFileUploadRequestValidationError{}

var _ListNominativeUsersFileUploadRequest_SortBy_InLookup = map[string]struct{}{
	"fileName":       {},
	"status":         {},
	"editor":         {},
	"name":           {},
	"productVersion": {},
	"uploadedBy":     {},
	"UploadedOn":     {},
	"productType":    {},
}

// Validate checks the field values on ListNominativeUsersFileUploadResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListNominativeUsersFileUploadResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetFileDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListNominativeUsersFileUploadResponseValidationError{
					field:  fmt.Sprintf("FileDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListNominativeUsersFileUploadResponseValidationError is the validation error
// returned by ListNominativeUsersFileUploadResponse.Validate if the
// designated constraints aren't met.
type ListNominativeUsersFileUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNominativeUsersFileUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNominativeUsersFileUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNominativeUsersFileUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNominativeUsersFileUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNominativeUsersFileUploadResponseValidationError) ErrorName() string {
	return "ListNominativeUsersFileUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNominativeUsersFileUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNominativeUsersFileUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNominativeUsersFileUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNominativeUsersFileUploadResponseValidationError{}

// Validate checks the field values on ListNominativeUsersFileUpload with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNominativeUsersFileUpload) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Scope

	// no validation rules for Swidtag

	// no validation rules for AggregationsId

	// no validation rules for ProductEditor

	// no validation rules for UploadedBy

	for idx, item := range m.GetNominativeUsersDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListNominativeUsersFileUploadValidationError{
					field:  fmt.Sprintf("NominativeUsersDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RecordSucceed

	// no validation rules for RecordFailed

	// no validation rules for FileName

	// no validation rules for SheetName

	// no validation rules for FileStatus

	if v, ok := interface{}(m.GetUploadedAt()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListNominativeUsersFileUploadValidationError{
				field:  "UploadedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UploadId

	// no validation rules for ProductName

	// no validation rules for ProductVersion

	// no validation rules for AggregationName

	// no validation rules for Name

	// no validation rules for Type

	return nil
}

// ListNominativeUsersFileUploadValidationError is the validation error
// returned by ListNominativeUsersFileUpload.Validate if the designated
// constraints aren't met.
type ListNominativeUsersFileUploadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNominativeUsersFileUploadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNominativeUsersFileUploadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNominativeUsersFileUploadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNominativeUsersFileUploadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNominativeUsersFileUploadValidationError) ErrorName() string {
	return "ListNominativeUsersFileUploadValidationError"
}

// Error satisfies the builtin error interface
func (e ListNominativeUsersFileUploadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNominativeUsersFileUpload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNominativeUsersFileUploadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNominativeUsersFileUploadValidationError{}

// Validate checks the field values on EditorExpensesByScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EditorExpensesByScopeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_EditorExpensesByScopeRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return EditorExpensesByScopeRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// EditorExpensesByScopeRequestValidationError is the validation error returned
// by EditorExpensesByScopeRequest.Validate if the designated constraints
// aren't met.
type EditorExpensesByScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorExpensesByScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorExpensesByScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorExpensesByScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorExpensesByScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorExpensesByScopeRequestValidationError) ErrorName() string {
	return "EditorExpensesByScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditorExpensesByScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditorExpensesByScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorExpensesByScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorExpensesByScopeRequestValidationError{}

var _EditorExpensesByScopeRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on EditorExpensesByScopeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EditorExpensesByScopeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEditorExpensesByScope() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return EditorExpensesByScopeResponseValidationError{
					field:  fmt.Sprintf("EditorExpensesByScope[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EditorExpensesByScopeResponseValidationError is the validation error
// returned by EditorExpensesByScopeResponse.Validate if the designated
// constraints aren't met.
type EditorExpensesByScopeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorExpensesByScopeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorExpensesByScopeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorExpensesByScopeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorExpensesByScopeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorExpensesByScopeResponseValidationError) ErrorName() string {
	return "EditorExpensesByScopeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditorExpensesByScopeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditorExpensesByScopeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorExpensesByScopeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorExpensesByScopeResponseValidationError{}

// Validate checks the field values on EditorExpensesByScopeData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EditorExpensesByScopeData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EditorName

	// no validation rules for TotalPurchaseCost

	// no validation rules for TotalMaintenanceCost

	// no validation rules for TotalCost

	return nil
}

// EditorExpensesByScopeDataValidationError is the validation error returned by
// EditorExpensesByScopeData.Validate if the designated constraints aren't met.
type EditorExpensesByScopeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorExpensesByScopeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorExpensesByScopeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorExpensesByScopeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorExpensesByScopeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorExpensesByScopeDataValidationError) ErrorName() string {
	return "EditorExpensesByScopeDataValidationError"
}

// Error satisfies the builtin error interface
func (e EditorExpensesByScopeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditorExpensesByScopeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorExpensesByScopeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorExpensesByScopeDataValidationError{}

// Validate checks the field values on EditorProductsExpensesByScopeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *EditorProductsExpensesByScopeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_EditorProductsExpensesByScopeRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return EditorProductsExpensesByScopeRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Editor

	return nil
}

// EditorProductsExpensesByScopeRequestValidationError is the validation error
// returned by EditorProductsExpensesByScopeRequest.Validate if the designated
// constraints aren't met.
type EditorProductsExpensesByScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorProductsExpensesByScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorProductsExpensesByScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorProductsExpensesByScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorProductsExpensesByScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorProductsExpensesByScopeRequestValidationError) ErrorName() string {
	return "EditorProductsExpensesByScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditorProductsExpensesByScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditorProductsExpensesByScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorProductsExpensesByScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorProductsExpensesByScopeRequestValidationError{}

var _EditorProductsExpensesByScopeRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on EditorProductExpensesByScopeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *EditorProductExpensesByScopeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEditorProductExpensesByScope() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return EditorProductExpensesByScopeResponseValidationError{
					field:  fmt.Sprintf("EditorProductExpensesByScope[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EditorProductExpensesByScopeResponseValidationError is the validation error
// returned by EditorProductExpensesByScopeResponse.Validate if the designated
// constraints aren't met.
type EditorProductExpensesByScopeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorProductExpensesByScopeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorProductExpensesByScopeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorProductExpensesByScopeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorProductExpensesByScopeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorProductExpensesByScopeResponseValidationError) ErrorName() string {
	return "EditorProductExpensesByScopeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditorProductExpensesByScopeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditorProductExpensesByScopeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorProductExpensesByScopeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorProductExpensesByScopeResponseValidationError{}

// Validate checks the field values on EditorProductExpensesByScopeData with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *EditorProductExpensesByScopeData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for TotalPurchaseCost

	// no validation rules for TotalMaintenanceCost

	// no validation rules for TotalCost

	// no validation rules for Type

	return nil
}

// EditorProductExpensesByScopeDataValidationError is the validation error
// returned by EditorProductExpensesByScopeData.Validate if the designated
// constraints aren't met.
type EditorProductExpensesByScopeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorProductExpensesByScopeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorProductExpensesByScopeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorProductExpensesByScopeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorProductExpensesByScopeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorProductExpensesByScopeDataValidationError) ErrorName() string {
	return "EditorProductExpensesByScopeDataValidationError"
}

// Error satisfies the builtin error interface
func (e EditorProductExpensesByScopeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditorProductExpensesByScopeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorProductExpensesByScopeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorProductExpensesByScopeDataValidationError{}

// Validate checks the field values on GetDeploymentTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDeploymentTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetDeploymentTypeRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetDeploymentTypeRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// GetDeploymentTypeRequestValidationError is the validation error returned by
// GetDeploymentTypeRequest.Validate if the designated constraints aren't met.
type GetDeploymentTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentTypeRequestValidationError) ErrorName() string {
	return "GetDeploymentTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentTypeRequestValidationError{}

var _GetDeploymentTypeRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetDeploymentTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDeploymentTypeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SaasPercentage

	// no validation rules for OnPremisePercentage

	return nil
}

// GetDeploymentTypeResponseValidationError is the validation error returned by
// GetDeploymentTypeResponse.Validate if the designated constraints aren't met.
type GetDeploymentTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentTypeResponseValidationError) ErrorName() string {
	return "GetDeploymentTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentTypeResponseValidationError{}

// Validate checks the field values on
// UpdateSharedLicensesRequest_SharedLicenses with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpdateSharedLicensesRequest_SharedLicenses) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateSharedLicensesRequest_SharedLicenses_RecieverScope_Pattern.MatchString(m.GetRecieverScope()) {
		return UpdateSharedLicensesRequest_SharedLicensesValidationError{
			field:  "RecieverScope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if m.GetSharedLicenses() < 0 {
		return UpdateSharedLicensesRequest_SharedLicensesValidationError{
			field:  "SharedLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// UpdateSharedLicensesRequest_SharedLicensesValidationError is the validation
// error returned by UpdateSharedLicensesRequest_SharedLicenses.Validate if
// the designated constraints aren't met.
type UpdateSharedLicensesRequest_SharedLicensesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSharedLicensesRequest_SharedLicensesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSharedLicensesRequest_SharedLicensesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSharedLicensesRequest_SharedLicensesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSharedLicensesRequest_SharedLicensesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSharedLicensesRequest_SharedLicensesValidationError) ErrorName() string {
	return "UpdateSharedLicensesRequest_SharedLicensesValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSharedLicensesRequest_SharedLicensesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSharedLicensesRequest_SharedLicenses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSharedLicensesRequest_SharedLicensesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSharedLicensesRequest_SharedLicensesValidationError{}

var _UpdateSharedLicensesRequest_SharedLicenses_RecieverScope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on
// UpdateAggrightsSharedLicensesRequest_SharedLicenses with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateAggrightsSharedLicensesRequest_SharedLicenses) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateAggrightsSharedLicensesRequest_SharedLicenses_RecieverScope_Pattern.MatchString(m.GetRecieverScope()) {
		return UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError{
			field:  "RecieverScope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	if m.GetSharedLicenses() < 0 {
		return UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError{
			field:  "SharedLicenses",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError is the
// validation error returned by
// UpdateAggrightsSharedLicensesRequest_SharedLicenses.Validate if the
// designated constraints aren't met.
type UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError) ErrorName() string {
	return "UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAggrightsSharedLicensesRequest_SharedLicenses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAggrightsSharedLicensesRequest_SharedLicensesValidationError{}

var _UpdateAggrightsSharedLicensesRequest_SharedLicenses_RecieverScope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetProductCountByAppResponseApplications
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetProductCountByAppResponseApplications) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for NumOfProducts

	return nil
}

// GetProductCountByAppResponseApplicationsValidationError is the validation
// error returned by GetProductCountByAppResponseApplications.Validate if the
// designated constraints aren't met.
type GetProductCountByAppResponseApplicationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCountByAppResponseApplicationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCountByAppResponseApplicationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCountByAppResponseApplicationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCountByAppResponseApplicationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCountByAppResponseApplicationsValidationError) ErrorName() string {
	return "GetProductCountByAppResponseApplicationsValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCountByAppResponseApplicationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCountByAppResponseApplications.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCountByAppResponseApplicationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCountByAppResponseApplicationsValidationError{}

// Validate checks the field values on UpsertProductRequestApplication with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductRequestApplication) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpsertProductRequestApplication_Operation_InLookup[m.GetOperation()]; !ok {
		return UpsertProductRequestApplicationValidationError{
			field:  "Operation",
			reason: "value must be in list [add delete]",
		}
	}

	return nil
}

// UpsertProductRequestApplicationValidationError is the validation error
// returned by UpsertProductRequestApplication.Validate if the designated
// constraints aren't met.
type UpsertProductRequestApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestApplicationValidationError) ErrorName() string {
	return "UpsertProductRequestApplicationValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequestApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestApplicationValidationError{}

var _UpsertProductRequestApplication_Operation_InLookup = map[string]struct{}{
	"add":    {},
	"delete": {},
}

// Validate checks the field values on UpsertProductRequestEquipment with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertProductRequestEquipment) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpsertProductRequestEquipment_Operation_InLookup[m.GetOperation()]; !ok {
		return UpsertProductRequestEquipmentValidationError{
			field:  "Operation",
			reason: "value must be in list [add delete]",
		}
	}

	for idx, item := range m.GetEquipmentusers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return UpsertProductRequestEquipmentValidationError{
					field:  fmt.Sprintf("Equipmentusers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpsertProductRequestEquipmentValidationError is the validation error
// returned by UpsertProductRequestEquipment.Validate if the designated
// constraints aren't met.
type UpsertProductRequestEquipmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestEquipmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestEquipmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestEquipmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestEquipmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestEquipmentValidationError) ErrorName() string {
	return "UpsertProductRequestEquipmentValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestEquipmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequestEquipment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestEquipmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestEquipmentValidationError{}

var _UpsertProductRequestEquipment_Operation_InLookup = map[string]struct{}{
	"add":    {},
	"delete": {},
}

// Validate checks the field values on
// UpsertProductRequestEquipmentEquipmentuser with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpsertProductRequestEquipmentEquipmentuser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EquipmentId

	// no validation rules for AllocatedMetrics

	// no validation rules for AllocatedUsers

	return nil
}

// UpsertProductRequestEquipmentEquipmentuserValidationError is the validation
// error returned by UpsertProductRequestEquipmentEquipmentuser.Validate if
// the designated constraints aren't met.
type UpsertProductRequestEquipmentEquipmentuserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) ErrorName() string {
	return "UpsertProductRequestEquipmentEquipmentuserValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertProductRequestEquipmentEquipmentuserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertProductRequestEquipmentEquipmentuser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertProductRequestEquipmentEquipmentuserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertProductRequestEquipmentEquipmentuserValidationError{}
