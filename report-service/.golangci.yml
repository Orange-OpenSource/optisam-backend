run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 20m
  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  skip-dirs:
    - api
  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1
  # include test files or not, default is true
  tests: false

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: code-climate




  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

linters:
  disable-all: true
  enable:
    ########## Security ################
    - gosec #(gas): Inspects source code for security problems

    ########## Code Formatting #########
    - gofmt

    ########## Code Complexity ##########
    - nakedret
    - gocyclo #Computes and checks the cyclomatic complexity of functions
    - funlen #Tool for detection of long functions    

    ########## Style and Pattern checking ################
    - goconst #Find in Go repeated strings that could be replaced by a constant.
    - golint
    - misspell
    - stylecheck
    - unconvert # Remove unnecessary type conversions

    ########## Unused Code ##########
    - unparam #Report unused function parameters.
    - unused #unused checks Go code for unused constants, variables, functions and types.
    - structcheck #unused struct fields
    - varcheck #Find unused global variables and constants
    - ineffassign #Detect when assignments to existing variables are not used.

    ########## Misc/Bugs ##############
    - govet
    - staticcheck
    - errcheck
    - gocritic

    ########## Performance ############
    - maligned #Tool to detect Go structs that would take less memory if their fields were sorted
    - prealloc # Finds slice declarations that could potentially be preallocated

linters-settings:
  govet:
    # report about shadowed variables
    check-shadowing: true
    disable:
      - copylocks
  golint:
    min-confidence: 0.1
  # unused:
  #     check-exported: true
  nakedret:
    max-func-lines: 30
  gocritic:
    disabled-checks:
      - ifElseChain
      - exitAfterDefer
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  prealloc:
    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20
  funlen:
    lines: 120
    statements: 80

issues:
  exclude-rules:
      # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - gosec
    - linters:
        - unparam
      text: "`ctx` is unused"
