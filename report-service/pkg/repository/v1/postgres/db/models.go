// Copyright (C) 2019 Orange
// 
// This software is distributed under the terms and conditions of the 'Apache License 2.0'
// license which can be found in the file 'License.txt' in this package distribution 
// or at 'http://www.apache.org/licenses/LICENSE-2.0'. 

// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"time"
)

type JobStatus string

const (
	JobStatusPENDING   JobStatus = "PENDING"
	JobStatusCOMPLETED JobStatus = "COMPLETED"
	JobStatusFAILED    JobStatus = "FAILED"
	JobStatusRETRY     JobStatus = "RETRY"
	JobStatusRUNNING   JobStatus = "RUNNING"
)

func (e *JobStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JobStatus(s)
	case string:
		*e = JobStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for JobStatus: %T", src)
	}
	return nil
}

type ReportStatus string

const (
	ReportStatusPENDING   ReportStatus = "PENDING"
	ReportStatusCOMPLETED ReportStatus = "COMPLETED"
	ReportStatusFAILED    ReportStatus = "FAILED"
	ReportStatusRUNNING   ReportStatus = "RUNNING"
)

func (e *ReportStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReportStatus(s)
	case string:
		*e = ReportStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReportStatus: %T", src)
	}
	return nil
}

type Job struct {
	JobID      int32           `json:"job_id"`
	Type       string          `json:"type"`
	Status     JobStatus       `json:"status"`
	Data       json.RawMessage `json:"data"`
	Comments   sql.NullString  `json:"comments"`
	StartTime  sql.NullTime    `json:"start_time"`
	EndTime    sql.NullTime    `json:"end_time"`
	CreatedAt  time.Time       `json:"created_at"`
	RetryCount sql.NullInt32   `json:"retry_count"`
}

type Report struct {
	ReportID       int32           `json:"report_id"`
	ReportTypeID   int32           `json:"report_type_id"`
	Scope          string          `json:"scope"`
	ReportMetadata json.RawMessage `json:"report_metadata"`
	ReportData     json.RawMessage `json:"report_data"`
	ReportStatus   ReportStatus    `json:"report_status"`
	CreatedBy      string          `json:"created_by"`
	CreatedOn      time.Time       `json:"created_on"`
}

type ReportType struct {
	ReportTypeID   int32  `json:"report_type_id"`
	ReportTypeName string `json:"report_type_name"`
}
