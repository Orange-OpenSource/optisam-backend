// Code generated by MockGen. DO NOT EDIT.
// Source: ../../thirdparty/report-service/pkg/api/v1/report_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "gitlab.tech.orange/optisam/optisam-it/optisam-services/account-service/thirdparty/report-service/pkg/api/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockReportServiceClient is a mock of ReportServiceClient interface
type MockReportServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockReportServiceClientMockRecorder
}

// MockReportServiceClientMockRecorder is the mock recorder for MockReportServiceClient
type MockReportServiceClientMockRecorder struct {
	mock *MockReportServiceClient
}

// NewMockReportServiceClient creates a new mock instance
func NewMockReportServiceClient(ctrl *gomock.Controller) *MockReportServiceClient {
	mock := &MockReportServiceClient{ctrl: ctrl}
	mock.recorder = &MockReportServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportServiceClient) EXPECT() *MockReportServiceClientMockRecorder {
	return m.recorder
}

// SubmitReport mocks base method
func (m *MockReportServiceClient) SubmitReport(ctx context.Context, in *v1.SubmitReportRequest, opts ...grpc.CallOption) (*v1.SubmitReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitReport", varargs...)
	ret0, _ := ret[0].(*v1.SubmitReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitReport indicates an expected call of SubmitReport
func (mr *MockReportServiceClientMockRecorder) SubmitReport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReport", reflect.TypeOf((*MockReportServiceClient)(nil).SubmitReport), varargs...)
}

// ListReport mocks base method
func (m *MockReportServiceClient) ListReport(ctx context.Context, in *v1.ListReportRequest, opts ...grpc.CallOption) (*v1.ListReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReport", varargs...)
	ret0, _ := ret[0].(*v1.ListReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReport indicates an expected call of ListReport
func (mr *MockReportServiceClientMockRecorder) ListReport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReport", reflect.TypeOf((*MockReportServiceClient)(nil).ListReport), varargs...)
}

// DownloadReport mocks base method
func (m *MockReportServiceClient) DownloadReport(ctx context.Context, in *v1.DownloadReportRequest, opts ...grpc.CallOption) (*v1.DownloadReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadReport", varargs...)
	ret0, _ := ret[0].(*v1.DownloadReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadReport indicates an expected call of DownloadReport
func (mr *MockReportServiceClientMockRecorder) DownloadReport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadReport", reflect.TypeOf((*MockReportServiceClient)(nil).DownloadReport), varargs...)
}

// ListReportType mocks base method
func (m *MockReportServiceClient) ListReportType(ctx context.Context, in *v1.ListReportTypeRequest, opts ...grpc.CallOption) (*v1.ListReportTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReportType", varargs...)
	ret0, _ := ret[0].(*v1.ListReportTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReportType indicates an expected call of ListReportType
func (mr *MockReportServiceClientMockRecorder) ListReportType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportType", reflect.TypeOf((*MockReportServiceClient)(nil).ListReportType), varargs...)
}

// DropReportData mocks base method
func (m *MockReportServiceClient) DropReportData(ctx context.Context, in *v1.DropReportDataRequest, opts ...grpc.CallOption) (*v1.DropReportDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropReportData", varargs...)
	ret0, _ := ret[0].(*v1.DropReportDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropReportData indicates an expected call of DropReportData
func (mr *MockReportServiceClientMockRecorder) DropReportData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropReportData", reflect.TypeOf((*MockReportServiceClient)(nil).DropReportData), varargs...)
}

// MockReportServiceServer is a mock of ReportServiceServer interface
type MockReportServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockReportServiceServerMockRecorder
}

// MockReportServiceServerMockRecorder is the mock recorder for MockReportServiceServer
type MockReportServiceServerMockRecorder struct {
	mock *MockReportServiceServer
}

// NewMockReportServiceServer creates a new mock instance
func NewMockReportServiceServer(ctrl *gomock.Controller) *MockReportServiceServer {
	mock := &MockReportServiceServer{ctrl: ctrl}
	mock.recorder = &MockReportServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportServiceServer) EXPECT() *MockReportServiceServerMockRecorder {
	return m.recorder
}

// SubmitReport mocks base method
func (m *MockReportServiceServer) SubmitReport(arg0 context.Context, arg1 *v1.SubmitReportRequest) (*v1.SubmitReportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReport", arg0, arg1)
	ret0, _ := ret[0].(*v1.SubmitReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitReport indicates an expected call of SubmitReport
func (mr *MockReportServiceServerMockRecorder) SubmitReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReport", reflect.TypeOf((*MockReportServiceServer)(nil).SubmitReport), arg0, arg1)
}

// ListReport mocks base method
func (m *MockReportServiceServer) ListReport(arg0 context.Context, arg1 *v1.ListReportRequest) (*v1.ListReportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReport", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReport indicates an expected call of ListReport
func (mr *MockReportServiceServerMockRecorder) ListReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReport", reflect.TypeOf((*MockReportServiceServer)(nil).ListReport), arg0, arg1)
}

// DownloadReport mocks base method
func (m *MockReportServiceServer) DownloadReport(arg0 context.Context, arg1 *v1.DownloadReportRequest) (*v1.DownloadReportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadReport", arg0, arg1)
	ret0, _ := ret[0].(*v1.DownloadReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadReport indicates an expected call of DownloadReport
func (mr *MockReportServiceServerMockRecorder) DownloadReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadReport", reflect.TypeOf((*MockReportServiceServer)(nil).DownloadReport), arg0, arg1)
}

// ListReportType mocks base method
func (m *MockReportServiceServer) ListReportType(arg0 context.Context, arg1 *v1.ListReportTypeRequest) (*v1.ListReportTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReportType", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListReportTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReportType indicates an expected call of ListReportType
func (mr *MockReportServiceServerMockRecorder) ListReportType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportType", reflect.TypeOf((*MockReportServiceServer)(nil).ListReportType), arg0, arg1)
}

// DropReportData mocks base method
func (m *MockReportServiceServer) DropReportData(arg0 context.Context, arg1 *v1.DropReportDataRequest) (*v1.DropReportDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropReportData", arg0, arg1)
	ret0, _ := ret[0].(*v1.DropReportDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropReportData indicates an expected call of DropReportData
func (mr *MockReportServiceServerMockRecorder) DropReportData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropReportData", reflect.TypeOf((*MockReportServiceServer)(nil).DropReportData), arg0, arg1)
}

// MockUnsafeReportServiceServer is a mock of UnsafeReportServiceServer interface
type MockUnsafeReportServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeReportServiceServerMockRecorder
}

// MockUnsafeReportServiceServerMockRecorder is the mock recorder for MockUnsafeReportServiceServer
type MockUnsafeReportServiceServerMockRecorder struct {
	mock *MockUnsafeReportServiceServer
}

// NewMockUnsafeReportServiceServer creates a new mock instance
func NewMockUnsafeReportServiceServer(ctrl *gomock.Controller) *MockUnsafeReportServiceServer {
	mock := &MockUnsafeReportServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeReportServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnsafeReportServiceServer) EXPECT() *MockUnsafeReportServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedReportServiceServer mocks base method
func (m *MockUnsafeReportServiceServer) mustEmbedUnimplementedReportServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedReportServiceServer")
}

// mustEmbedUnimplementedReportServiceServer indicates an expected call of mustEmbedUnimplementedReportServiceServer
func (mr *MockUnsafeReportServiceServerMockRecorder) mustEmbedUnimplementedReportServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedReportServiceServer", reflect.TypeOf((*MockUnsafeReportServiceServer)(nil).mustEmbedUnimplementedReportServiceServer))
}
