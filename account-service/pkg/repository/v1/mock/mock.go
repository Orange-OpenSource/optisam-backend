// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.tech.orange/optisam/optisam-it/optisam-services/account-service/pkg/repository/v1 (interfaces: Account)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	config "gitlab.tech.orange/optisam/optisam-it/optisam-services/account-service/pkg/config"
	v1 "gitlab.tech.orange/optisam/optisam-it/optisam-services/account-service/pkg/repository/v1"
	db "gitlab.tech.orange/optisam/optisam-it/optisam-services/account-service/pkg/repository/v1/postgres/db"
	helper "gitlab.tech.orange/optisam/optisam-it/optisam-services/common/optisam/helper"
	reflect "reflect"
)

// MockAccount is a mock of Account interface
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// AccountInfo mocks base method
func (m *MockAccount) AccountInfo(arg0 context.Context, arg1 string) (*v1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInfo", arg0, arg1)
	ret0, _ := ret[0].(*v1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo
func (mr *MockAccountMockRecorder) AccountInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockAccount)(nil).AccountInfo), arg0, arg1)
}

// AddGroupUsers mocks base method
func (m *MockAccount) AddGroupUsers(arg0 context.Context, arg1 int64, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroupUsers indicates an expected call of AddGroupUsers
func (mr *MockAccountMockRecorder) AddGroupUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupUsers", reflect.TypeOf((*MockAccount)(nil).AddGroupUsers), arg0, arg1, arg2)
}

// AdminUserForScope mocks base method
func (m *MockAccount) AdminUserForScope(arg0 context.Context, arg1 []string) ([]*v1.AdminUserForScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUserForScope", arg0, arg1)
	ret0, _ := ret[0].([]*v1.AdminUserForScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUserForScope indicates an expected call of AdminUserForScope
func (mr *MockAccountMockRecorder) AdminUserForScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUserForScope", reflect.TypeOf((*MockAccount)(nil).AdminUserForScope), arg0, arg1)
}

// ChangePassword mocks base method
func (m *MockAccount) ChangePassword(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockAccountMockRecorder) ChangePassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAccount)(nil).ChangePassword), arg0, arg1, arg2)
}

// ChangeUserFirstLogin mocks base method
func (m *MockAccount) ChangeUserFirstLogin(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserFirstLogin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserFirstLogin indicates an expected call of ChangeUserFirstLogin
func (mr *MockAccountMockRecorder) ChangeUserFirstLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserFirstLogin", reflect.TypeOf((*MockAccount)(nil).ChangeUserFirstLogin), arg0, arg1)
}

// ChildGroupsAll mocks base method
func (m *MockAccount) ChildGroupsAll(arg0 context.Context, arg1 int64, arg2 *v1.GroupQueryParams) ([]*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChildGroupsAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChildGroupsAll indicates an expected call of ChildGroupsAll
func (mr *MockAccountMockRecorder) ChildGroupsAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildGroupsAll", reflect.TypeOf((*MockAccount)(nil).ChildGroupsAll), arg0, arg1, arg2)
}

// ChildGroupsDirect mocks base method
func (m *MockAccount) ChildGroupsDirect(arg0 context.Context, arg1 int64, arg2 *v1.GroupQueryParams) ([]*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChildGroupsDirect", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChildGroupsDirect indicates an expected call of ChildGroupsDirect
func (mr *MockAccountMockRecorder) ChildGroupsDirect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildGroupsDirect", reflect.TypeOf((*MockAccount)(nil).ChildGroupsDirect), arg0, arg1, arg2)
}

// CreateAccount mocks base method
func (m *MockAccount) CreateAccount(arg0 context.Context, arg1 *v1.AccountInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockAccountMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccount)(nil).CreateAccount), arg0, arg1)
}

// CreateGroup mocks base method
func (m *MockAccount) CreateGroup(arg0 context.Context, arg1 string, arg2 *v1.Group) (*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockAccountMockRecorder) CreateGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockAccount)(nil).CreateGroup), arg0, arg1, arg2)
}

// CreateScope mocks base method
func (m *MockAccount) CreateScope(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScope", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateScope indicates an expected call of CreateScope
func (mr *MockAccountMockRecorder) CreateScope(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScope", reflect.TypeOf((*MockAccount)(nil).CreateScope), arg0, arg1, arg2, arg3, arg4)
}

// CreateToken mocks base method
func (m *MockAccount) CreateToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateToken indicates an expected call of CreateToken
func (mr *MockAccountMockRecorder) CreateToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAccount)(nil).CreateToken))
}

// DeleteGroup mocks base method
func (m *MockAccount) DeleteGroup(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockAccountMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockAccount)(nil).DeleteGroup), arg0, arg1)
}

// DeleteGroupUsers mocks base method
func (m *MockAccount) DeleteGroupUsers(arg0 context.Context, arg1 int64, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupUsers indicates an expected call of DeleteGroupUsers
func (mr *MockAccountMockRecorder) DeleteGroupUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupUsers", reflect.TypeOf((*MockAccount)(nil).DeleteGroupUsers), arg0, arg1, arg2)
}

// DeleteUser mocks base method
func (m *MockAccount) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockAccountMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAccount)(nil).DeleteUser), arg0, arg1)
}

// DropScope mocks base method
func (m *MockAccount) DropScope(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropScope", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropScope indicates an expected call of DropScope
func (mr *MockAccountMockRecorder) DropScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropScope", reflect.TypeOf((*MockAccount)(nil).DropScope), arg0, arg1)
}

// DropScopeTX mocks base method
func (m *MockAccount) DropScopeTX(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropScopeTX", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropScopeTX indicates an expected call of DropScopeTX
func (mr *MockAccountMockRecorder) DropScopeTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropScopeTX", reflect.TypeOf((*MockAccount)(nil).DropScopeTX), arg0, arg1)
}

// GenerateMailBody mocks base method
func (m *MockAccount) GenerateMailBody(arg0 helper.EmailParams, arg1 context.Context, arg2 config.Config) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMailBody", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMailBody indicates an expected call of GenerateMailBody
func (mr *MockAccountMockRecorder) GenerateMailBody(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMailBody", reflect.TypeOf((*MockAccount)(nil).GenerateMailBody), arg0, arg1, arg2)
}

// GenerateRandomPassword mocks base method
func (m *MockAccount) GenerateRandomPassword() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomPassword")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandomPassword indicates an expected call of GenerateRandomPassword
func (mr *MockAccountMockRecorder) GenerateRandomPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomPassword", reflect.TypeOf((*MockAccount)(nil).GenerateRandomPassword))
}

// GetComplienceGroups mocks base method
func (m *MockAccount) GetComplienceGroups(arg0 context.Context) ([]v1.GetComplienceGroups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplienceGroups", arg0)
	ret0, _ := ret[0].([]v1.GetComplienceGroups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplienceGroups indicates an expected call of GetComplienceGroups
func (mr *MockAccountMockRecorder) GetComplienceGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplienceGroups", reflect.TypeOf((*MockAccount)(nil).GetComplienceGroups), arg0)
}

// GetRootGroup mocks base method
func (m *MockAccount) GetRootGroup(arg0 context.Context) (*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootGroup", arg0)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootGroup indicates an expected call of GetRootGroup
func (mr *MockAccountMockRecorder) GetRootGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootGroup", reflect.TypeOf((*MockAccount)(nil).GetRootGroup), arg0)
}

// GetScopes mocks base method
func (m *MockAccount) GetScopes(arg0 context.Context, arg1 []string) ([]*v1.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopes", arg0, arg1)
	ret0, _ := ret[0].([]*v1.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopes indicates an expected call of GetScopes
func (mr *MockAccountMockRecorder) GetScopes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopes", reflect.TypeOf((*MockAccount)(nil).GetScopes), arg0, arg1)
}

// GroupExistsByFQN mocks base method
func (m *MockAccount) GroupExistsByFQN(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupExistsByFQN", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupExistsByFQN indicates an expected call of GroupExistsByFQN
func (mr *MockAccountMockRecorder) GroupExistsByFQN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupExistsByFQN", reflect.TypeOf((*MockAccount)(nil).GroupExistsByFQN), arg0, arg1)
}

// GroupInfo mocks base method
func (m *MockAccount) GroupInfo(arg0 context.Context, arg1 int64) (*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupInfo", arg0, arg1)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupInfo indicates an expected call of GroupInfo
func (mr *MockAccountMockRecorder) GroupInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupInfo", reflect.TypeOf((*MockAccount)(nil).GroupInfo), arg0, arg1)
}

// GroupUsers mocks base method
func (m *MockAccount) GroupUsers(arg0 context.Context, arg1 int64) ([]*v1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupUsers", arg0, arg1)
	ret0, _ := ret[0].([]*v1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupUsers indicates an expected call of GroupUsers
func (mr *MockAccountMockRecorder) GroupUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupUsers", reflect.TypeOf((*MockAccount)(nil).GroupUsers), arg0, arg1)
}

// InsertUserAudit mocks base method
func (m *MockAccount) InsertUserAudit(arg0 context.Context, arg1 db.InsertUserAuditParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserAudit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserAudit indicates an expected call of InsertUserAudit
func (mr *MockAccountMockRecorder) InsertUserAudit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserAudit", reflect.TypeOf((*MockAccount)(nil).InsertUserAudit), arg0, arg1)
}

// IsGroupRoot mocks base method
func (m *MockAccount) IsGroupRoot(arg0 context.Context, arg1 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGroupRoot", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsGroupRoot indicates an expected call of IsGroupRoot
func (mr *MockAccountMockRecorder) IsGroupRoot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGroupRoot", reflect.TypeOf((*MockAccount)(nil).IsGroupRoot), arg0, arg1)
}

// ListScopes mocks base method
func (m *MockAccount) ListScopes(arg0 context.Context, arg1 []string) ([]*v1.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScopes", arg0, arg1)
	ret0, _ := ret[0].([]*v1.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScopes indicates an expected call of ListScopes
func (mr *MockAccountMockRecorder) ListScopes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScopes", reflect.TypeOf((*MockAccount)(nil).ListScopes), arg0, arg1)
}

// ScopeByCode mocks base method
func (m *MockAccount) ScopeByCode(arg0 context.Context, arg1 string) (*v1.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScopeByCode", arg0, arg1)
	ret0, _ := ret[0].(*v1.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScopeByCode indicates an expected call of ScopeByCode
func (mr *MockAccountMockRecorder) ScopeByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScopeByCode", reflect.TypeOf((*MockAccount)(nil).ScopeByCode), arg0, arg1)
}

// ScopeExpensesByScopeCode mocks base method
func (m *MockAccount) ScopeExpensesByScopeCode(arg0 context.Context, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScopeExpensesByScopeCode", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScopeExpensesByScopeCode indicates an expected call of ScopeExpensesByScopeCode
func (mr *MockAccountMockRecorder) ScopeExpensesByScopeCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScopeExpensesByScopeCode", reflect.TypeOf((*MockAccount)(nil).ScopeExpensesByScopeCode), arg0, arg1)
}

// SetScope mocks base method
func (m *MockAccount) SetScope(arg0 context.Context, arg1 []*v1.Scope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetScope", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetScope indicates an expected call of SetScope
func (mr *MockAccountMockRecorder) SetScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScope", reflect.TypeOf((*MockAccount)(nil).SetScope), arg0, arg1)
}

// SetToken mocks base method
func (m *MockAccount) SetToken(arg0 helper.EmailParams, arg1 context.Context, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetToken indicates an expected call of SetToken
func (mr *MockAccountMockRecorder) SetToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockAccount)(nil).SetToken), arg0, arg1, arg2)
}

// UpdateAccount mocks base method
func (m *MockAccount) UpdateAccount(arg0 context.Context, arg1 string, arg2 *v1.UpdateAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockAccountMockRecorder) UpdateAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccount)(nil).UpdateAccount), arg0, arg1, arg2)
}

// UpdateGroup mocks base method
func (m *MockAccount) UpdateGroup(arg0 context.Context, arg1 int64, arg2 *v1.GroupUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup
func (mr *MockAccountMockRecorder) UpdateGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockAccount)(nil).UpdateGroup), arg0, arg1, arg2)
}

// UpdateUserAccount mocks base method
func (m *MockAccount) UpdateUserAccount(arg0 context.Context, arg1 string, arg2 *v1.UpdateUserAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserAccount indicates an expected call of UpdateUserAccount
func (mr *MockAccountMockRecorder) UpdateUserAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAccount", reflect.TypeOf((*MockAccount)(nil).UpdateUserAccount), arg0, arg1, arg2)
}

// UpsertScopeExpenses mocks base method
func (m *MockAccount) UpsertScopeExpenses(arg0 context.Context, arg1, arg2, arg3 string, arg4 float64, arg5 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertScopeExpenses", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertScopeExpenses indicates an expected call of UpsertScopeExpenses
func (mr *MockAccountMockRecorder) UpsertScopeExpenses(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScopeExpenses", reflect.TypeOf((*MockAccount)(nil).UpsertScopeExpenses), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UserBelongsToAdminGroup mocks base method
func (m *MockAccount) UserBelongsToAdminGroup(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBelongsToAdminGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserBelongsToAdminGroup indicates an expected call of UserBelongsToAdminGroup
func (mr *MockAccountMockRecorder) UserBelongsToAdminGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBelongsToAdminGroup", reflect.TypeOf((*MockAccount)(nil).UserBelongsToAdminGroup), arg0, arg1, arg2)
}

// UserExistsByID mocks base method
func (m *MockAccount) UserExistsByID(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExistsByID", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExistsByID indicates an expected call of UserExistsByID
func (mr *MockAccountMockRecorder) UserExistsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExistsByID", reflect.TypeOf((*MockAccount)(nil).UserExistsByID), arg0, arg1)
}

// UserOwnedGroups mocks base method
func (m *MockAccount) UserOwnedGroups(arg0 context.Context, arg1 string, arg2 *v1.GroupQueryParams) (int, []*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOwnedGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*v1.Group)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserOwnedGroups indicates an expected call of UserOwnedGroups
func (mr *MockAccountMockRecorder) UserOwnedGroups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOwnedGroups", reflect.TypeOf((*MockAccount)(nil).UserOwnedGroups), arg0, arg1, arg2)
}

// UserOwnedGroupsDirect mocks base method
func (m *MockAccount) UserOwnedGroupsDirect(arg0 context.Context, arg1 string, arg2 *v1.GroupQueryParams) ([]*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOwnedGroupsDirect", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOwnedGroupsDirect indicates an expected call of UserOwnedGroupsDirect
func (mr *MockAccountMockRecorder) UserOwnedGroupsDirect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOwnedGroupsDirect", reflect.TypeOf((*MockAccount)(nil).UserOwnedGroupsDirect), arg0, arg1, arg2)
}

// UserOwnsGroupByID mocks base method
func (m *MockAccount) UserOwnsGroupByID(arg0 context.Context, arg1 string, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOwnsGroupByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOwnsGroupByID indicates an expected call of UserOwnsGroupByID
func (mr *MockAccountMockRecorder) UserOwnsGroupByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOwnsGroupByID", reflect.TypeOf((*MockAccount)(nil).UserOwnsGroupByID), arg0, arg1, arg2)
}

// UsersAll mocks base method
func (m *MockAccount) UsersAll(arg0 context.Context, arg1 string) ([]*v1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAll", arg0, arg1)
	ret0, _ := ret[0].([]*v1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAll indicates an expected call of UsersAll
func (mr *MockAccountMockRecorder) UsersAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAll", reflect.TypeOf((*MockAccount)(nil).UsersAll), arg0, arg1)
}

// UsersWithUserSearchParams mocks base method
func (m *MockAccount) UsersWithUserSearchParams(arg0 context.Context, arg1 string, arg2 *v1.UserQueryParams) ([]*v1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersWithUserSearchParams", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersWithUserSearchParams indicates an expected call of UsersWithUserSearchParams
func (mr *MockAccountMockRecorder) UsersWithUserSearchParams(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersWithUserSearchParams", reflect.TypeOf((*MockAccount)(nil).UsersWithUserSearchParams), arg0, arg1, arg2)
}
