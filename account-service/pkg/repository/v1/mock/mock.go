// Code generated by MockGen. DO NOT EDIT.
// Source: optisam-backend/account-service/pkg/repository/v1 (interfaces: Account)

package mock

import (
	context "context"
	v1 "optisam-backend/account-service/pkg/repository/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccount is a mock of Account interface
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// AccountInfo mocks base method
func (m *MockAccount) AccountInfo(arg0 context.Context, arg1 string) (*v1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInfo", arg0, arg1)
	ret0, _ := ret[0].(*v1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo
func (mr *MockAccountMockRecorder) AccountInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockAccount)(nil).AccountInfo), arg0, arg1)
}

// AddGroupUsers mocks base method
func (m *MockAccount) AddGroupUsers(arg0 context.Context, arg1 int64, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroupUsers indicates an expected call of AddGroupUsers
func (mr *MockAccountMockRecorder) AddGroupUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupUsers", reflect.TypeOf((*MockAccount)(nil).AddGroupUsers), arg0, arg1, arg2)
}

// ChangePassword mocks base method
func (m *MockAccount) ChangePassword(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockAccountMockRecorder) ChangePassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAccount)(nil).ChangePassword), arg0, arg1, arg2)
}

// CheckPassword mocks base method
func (m *MockAccount) CheckPassword(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassword indicates an expected call of CheckPassword
func (mr *MockAccountMockRecorder) CheckPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockAccount)(nil).CheckPassword), arg0, arg1, arg2)
}

// ChildGroupsAll mocks base method
func (m *MockAccount) ChildGroupsAll(arg0 context.Context, arg1 int64, arg2 *v1.GroupQueryParams) ([]*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChildGroupsAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChildGroupsAll indicates an expected call of ChildGroupsAll
func (mr *MockAccountMockRecorder) ChildGroupsAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildGroupsAll", reflect.TypeOf((*MockAccount)(nil).ChildGroupsAll), arg0, arg1, arg2)
}

// ChildGroupsDirect mocks base method
func (m *MockAccount) ChildGroupsDirect(arg0 context.Context, arg1 int64, arg2 *v1.GroupQueryParams) ([]*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChildGroupsDirect", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChildGroupsDirect indicates an expected call of ChildGroupsDirect
func (mr *MockAccountMockRecorder) ChildGroupsDirect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildGroupsDirect", reflect.TypeOf((*MockAccount)(nil).ChildGroupsDirect), arg0, arg1, arg2)
}

// CreateAccount mocks base method
func (m *MockAccount) CreateAccount(arg0 context.Context, arg1 *v1.AccountInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockAccountMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccount)(nil).CreateAccount), arg0, arg1)
}

// CreateGroup mocks base method
func (m *MockAccount) CreateGroup(arg0 context.Context, arg1 string, arg2 *v1.Group) (*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockAccountMockRecorder) CreateGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockAccount)(nil).CreateGroup), arg0, arg1, arg2)
}

// DeleteGroup mocks base method
func (m *MockAccount) DeleteGroup(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockAccountMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockAccount)(nil).DeleteGroup), arg0, arg1)
}

// DeleteGroupUsers mocks base method
func (m *MockAccount) DeleteGroupUsers(arg0 context.Context, arg1 int64, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupUsers indicates an expected call of DeleteGroupUsers
func (mr *MockAccountMockRecorder) DeleteGroupUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupUsers", reflect.TypeOf((*MockAccount)(nil).DeleteGroupUsers), arg0, arg1, arg2)
}

// GroupExistsByFQN mocks base method
func (m *MockAccount) GroupExistsByFQN(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupExistsByFQN", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupExistsByFQN indicates an expected call of GroupExistsByFQN
func (mr *MockAccountMockRecorder) GroupExistsByFQN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupExistsByFQN", reflect.TypeOf((*MockAccount)(nil).GroupExistsByFQN), arg0, arg1)
}

// GroupInfo mocks base method
func (m *MockAccount) GroupInfo(arg0 context.Context, arg1 int64) (*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupInfo", arg0, arg1)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupInfo indicates an expected call of GroupInfo
func (mr *MockAccountMockRecorder) GroupInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupInfo", reflect.TypeOf((*MockAccount)(nil).GroupInfo), arg0, arg1)
}

// GroupUsers mocks base method
func (m *MockAccount) GroupUsers(arg0 context.Context, arg1 int64) ([]*v1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupUsers", arg0, arg1)
	ret0, _ := ret[0].([]*v1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupUsers indicates an expected call of GroupUsers
func (mr *MockAccountMockRecorder) GroupUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupUsers", reflect.TypeOf((*MockAccount)(nil).GroupUsers), arg0, arg1)
}

// IsGroupRoot mocks base method
func (m *MockAccount) IsGroupRoot(arg0 context.Context, arg1 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGroupRoot", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsGroupRoot indicates an expected call of IsGroupRoot
func (mr *MockAccountMockRecorder) IsGroupRoot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGroupRoot", reflect.TypeOf((*MockAccount)(nil).IsGroupRoot), arg0, arg1)
}

// UpdateAccount mocks base method
func (m *MockAccount) UpdateAccount(arg0 context.Context, arg1 string, arg2 *v1.UpdateAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockAccountMockRecorder) UpdateAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccount)(nil).UpdateAccount), arg0, arg1, arg2)
}

// UpdateGroup mocks base method
func (m *MockAccount) UpdateGroup(arg0 context.Context, arg1 int64, arg2 *v1.GroupUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup
func (mr *MockAccountMockRecorder) UpdateGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockAccount)(nil).UpdateGroup), arg0, arg1, arg2)
}

// UserExistsByID mocks base method
func (m *MockAccount) UserExistsByID(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExistsByID", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExistsByID indicates an expected call of UserExistsByID
func (mr *MockAccountMockRecorder) UserExistsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExistsByID", reflect.TypeOf((*MockAccount)(nil).UserExistsByID), arg0, arg1)
}

// UserOwnedGroups mocks base method
func (m *MockAccount) UserOwnedGroups(arg0 context.Context, arg1 string, arg2 *v1.GroupQueryParams) (int, []*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOwnedGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*v1.Group)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserOwnedGroups indicates an expected call of UserOwnedGroups
func (mr *MockAccountMockRecorder) UserOwnedGroups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOwnedGroups", reflect.TypeOf((*MockAccount)(nil).UserOwnedGroups), arg0, arg1, arg2)
}

// UserOwnedGroupsDirect mocks base method
func (m *MockAccount) UserOwnedGroupsDirect(arg0 context.Context, arg1 string, arg2 *v1.GroupQueryParams) ([]*v1.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOwnedGroupsDirect", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOwnedGroupsDirect indicates an expected call of UserOwnedGroupsDirect
func (mr *MockAccountMockRecorder) UserOwnedGroupsDirect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOwnedGroupsDirect", reflect.TypeOf((*MockAccount)(nil).UserOwnedGroupsDirect), arg0, arg1, arg2)
}

// UserOwnsGroupByID mocks base method
func (m *MockAccount) UserOwnsGroupByID(arg0 context.Context, arg1 string, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOwnsGroupByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOwnsGroupByID indicates an expected call of UserOwnsGroupByID
func (mr *MockAccountMockRecorder) UserOwnsGroupByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOwnsGroupByID", reflect.TypeOf((*MockAccount)(nil).UserOwnsGroupByID), arg0, arg1, arg2)
}

// UsersAll mocks base method
func (m *MockAccount) UsersAll(arg0 context.Context) ([]*v1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAll", arg0)
	ret0, _ := ret[0].([]*v1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAll indicates an expected call of UsersAll
func (mr *MockAccountMockRecorder) UsersAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAll", reflect.TypeOf((*MockAccount)(nil).UsersAll), arg0)
}
