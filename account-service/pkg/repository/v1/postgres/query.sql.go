// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const deleteGroupById = `-- name: DeleteGroupById :exec
Delete from groups where id = $1
`

func (q *Queries) DeleteGroupById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGroupById, id)
	return err
}

const deleteScope = `-- name: DeleteScope :exec
Delete from scopes where scope_code = $1
`

func (q *Queries) DeleteScope(ctx context.Context, scopeCode string) error {
	_, err := q.db.ExecContext(ctx, deleteScope, scopeCode)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getGroupsByScope = `-- name: GetGroupsByScope :many
Select id,scopes from groups where $1 = ANY(scopes::TEXT[])
`

type GetGroupsByScopeRow struct {
	ID     int32    `json:"id"`
	Scopes []string `json:"scopes"`
}

func (q *Queries) GetGroupsByScope(ctx context.Context, dollar_1 interface{}) ([]GetGroupsByScopeRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsByScope, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupsByScopeRow
	for rows.Next() {
		var i GetGroupsByScopeRow
		if err := rows.Scan(&i.ID, pq.Array(&i.Scopes)); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUserAudit = `-- name: InsertUserAudit :exec
INSERT INTO users_audit(
  username,first_name,last_name,role,locale,cont_failed_login,created_on,last_login,operation,updated_by)
  VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
`

type InsertUserAuditParams struct {
	Username        string          `json:"username"`
	FirstName       string          `json:"first_name"`
	LastName        string          `json:"last_name"`
	Role            string          `json:"role"`
	Locale          string          `json:"locale"`
	ContFailedLogin int16           `json:"cont_failed_login"`
	CreatedOn       time.Time       `json:"created_on"`
	LastLogin       sql.NullTime    `json:"last_login"`
	Operation       NullAuditStatus `json:"operation"`
	UpdatedBy       string          `json:"updated_by"`
}

func (q *Queries) InsertUserAudit(ctx context.Context, arg InsertUserAuditParams) error {
	_, err := q.db.ExecContext(ctx, insertUserAudit,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Role,
		arg.Locale,
		arg.ContFailedLogin,
		arg.CreatedOn,
		arg.LastLogin,
		arg.Operation,
		arg.UpdatedBy,
	)
	return err
}

const updateScopesInGroup = `-- name: UpdateScopesInGroup :exec
Update groups set scopes = $2 where id = $1
`

type UpdateScopesInGroupParams struct {
	ID     int32    `json:"id"`
	Scopes []string `json:"scopes"`
}

func (q *Queries) UpdateScopesInGroup(ctx context.Context, arg UpdateScopesInGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateScopesInGroup, arg.ID, pq.Array(arg.Scopes))
	return err
}
