// Code generated by MockGen. DO NOT EDIT.
// Source: optisam-backend/account-service/pkg/api/v1 (interfaces: AccountServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	v1 "optisam-backend/account-service/pkg/api/v1"
	reflect "reflect"
)

// MockAccountServiceClient is a mock of AccountServiceClient interface
type MockAccountServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceClientMockRecorder
}

// MockAccountServiceClientMockRecorder is the mock recorder for MockAccountServiceClient
type MockAccountServiceClientMockRecorder struct {
	mock *MockAccountServiceClient
}

// NewMockAccountServiceClient creates a new mock instance
func NewMockAccountServiceClient(ctrl *gomock.Controller) *MockAccountServiceClient {
	mock := &MockAccountServiceClient{ctrl: ctrl}
	mock.recorder = &MockAccountServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountServiceClient) EXPECT() *MockAccountServiceClientMockRecorder {
	return m.recorder
}

// AddGroupUser mocks base method
func (m *MockAccountServiceClient) AddGroupUser(arg0 context.Context, arg1 *v1.AddGroupUsersRequest, arg2 ...grpc.CallOption) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGroupUser", varargs...)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGroupUser indicates an expected call of AddGroupUser
func (mr *MockAccountServiceClientMockRecorder) AddGroupUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupUser", reflect.TypeOf((*MockAccountServiceClient)(nil).AddGroupUser), varargs...)
}

// ChangePassword mocks base method
func (m *MockAccountServiceClient) ChangePassword(arg0 context.Context, arg1 *v1.ChangePasswordRequest, arg2 ...grpc.CallOption) (*v1.ChangePasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePassword", varargs...)
	ret0, _ := ret[0].(*v1.ChangePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword
func (mr *MockAccountServiceClientMockRecorder) ChangePassword(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAccountServiceClient)(nil).ChangePassword), varargs...)
}

// CreateAccount mocks base method
func (m *MockAccountServiceClient) CreateAccount(arg0 context.Context, arg1 *v1.Account, arg2 ...grpc.CallOption) (*v1.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(*v1.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockAccountServiceClientMockRecorder) CreateAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountServiceClient)(nil).CreateAccount), varargs...)
}

// CreateGroup mocks base method
func (m *MockAccountServiceClient) CreateGroup(arg0 context.Context, arg1 *v1.Group, arg2 ...grpc.CallOption) (*v1.Group, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroup", varargs...)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockAccountServiceClientMockRecorder) CreateGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockAccountServiceClient)(nil).CreateGroup), varargs...)
}

// CreateScope mocks base method
func (m *MockAccountServiceClient) CreateScope(arg0 context.Context, arg1 *v1.CreateScopeRequest, arg2 ...grpc.CallOption) (*v1.CreateScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateScope", varargs...)
	ret0, _ := ret[0].(*v1.CreateScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScope indicates an expected call of CreateScope
func (mr *MockAccountServiceClientMockRecorder) CreateScope(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScope", reflect.TypeOf((*MockAccountServiceClient)(nil).CreateScope), varargs...)
}

// DeleteAccount mocks base method
func (m *MockAccountServiceClient) DeleteAccount(arg0 context.Context, arg1 *v1.DeleteAccountRequest, arg2 ...grpc.CallOption) (*v1.DeleteAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccount", varargs...)
	ret0, _ := ret[0].(*v1.DeleteAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount
func (mr *MockAccountServiceClientMockRecorder) DeleteAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountServiceClient)(nil).DeleteAccount), varargs...)
}

// DeleteGroup mocks base method
func (m *MockAccountServiceClient) DeleteGroup(arg0 context.Context, arg1 *v1.DeleteGroupRequest, arg2 ...grpc.CallOption) (*v1.DeleteGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroup", varargs...)
	ret0, _ := ret[0].(*v1.DeleteGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockAccountServiceClientMockRecorder) DeleteGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockAccountServiceClient)(nil).DeleteGroup), varargs...)
}

// DeleteGroupUser mocks base method
func (m *MockAccountServiceClient) DeleteGroupUser(arg0 context.Context, arg1 *v1.DeleteGroupUsersRequest, arg2 ...grpc.CallOption) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupUser", varargs...)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupUser indicates an expected call of DeleteGroupUser
func (mr *MockAccountServiceClientMockRecorder) DeleteGroupUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupUser", reflect.TypeOf((*MockAccountServiceClient)(nil).DeleteGroupUser), varargs...)
}

// DropScopeData mocks base method
func (m *MockAccountServiceClient) DropScopeData(arg0 context.Context, arg1 *v1.DropScopeDataRequest, arg2 ...grpc.CallOption) (*v1.DropScopeDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropScopeData", varargs...)
	ret0, _ := ret[0].(*v1.DropScopeDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropScopeData indicates an expected call of DropScopeData
func (mr *MockAccountServiceClientMockRecorder) DropScopeData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropScopeData", reflect.TypeOf((*MockAccountServiceClient)(nil).DropScopeData), varargs...)
}

// GetAccount mocks base method
func (m *MockAccountServiceClient) GetAccount(arg0 context.Context, arg1 *v1.GetAccountRequest, arg2 ...grpc.CallOption) (*v1.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*v1.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockAccountServiceClientMockRecorder) GetAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountServiceClient)(nil).GetAccount), varargs...)
}

// GetGroupUsers mocks base method
func (m *MockAccountServiceClient) GetGroupUsers(arg0 context.Context, arg1 *v1.GetGroupUsersRequest, arg2 ...grpc.CallOption) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupUsers", varargs...)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupUsers indicates an expected call of GetGroupUsers
func (mr *MockAccountServiceClientMockRecorder) GetGroupUsers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupUsers", reflect.TypeOf((*MockAccountServiceClient)(nil).GetGroupUsers), varargs...)
}

// GetScope mocks base method
func (m *MockAccountServiceClient) GetScope(arg0 context.Context, arg1 *v1.GetScopeRequest, arg2 ...grpc.CallOption) (*v1.Scope, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScope", varargs...)
	ret0, _ := ret[0].(*v1.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScope indicates an expected call of GetScope
func (mr *MockAccountServiceClientMockRecorder) GetScope(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScope", reflect.TypeOf((*MockAccountServiceClient)(nil).GetScope), varargs...)
}

// GetUsers mocks base method
func (m *MockAccountServiceClient) GetUsers(arg0 context.Context, arg1 *v1.GetUsersRequest, arg2 ...grpc.CallOption) (*v1.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(*v1.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockAccountServiceClientMockRecorder) GetUsers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAccountServiceClient)(nil).GetUsers), varargs...)
}

// ListChildGroups mocks base method
func (m *MockAccountServiceClient) ListChildGroups(arg0 context.Context, arg1 *v1.ListChildGroupsRequest, arg2 ...grpc.CallOption) (*v1.ListGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChildGroups", varargs...)
	ret0, _ := ret[0].(*v1.ListGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChildGroups indicates an expected call of ListChildGroups
func (mr *MockAccountServiceClientMockRecorder) ListChildGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChildGroups", reflect.TypeOf((*MockAccountServiceClient)(nil).ListChildGroups), varargs...)
}

// ListGroups mocks base method
func (m *MockAccountServiceClient) ListGroups(arg0 context.Context, arg1 *v1.ListGroupsRequest, arg2 ...grpc.CallOption) (*v1.ListGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroups", varargs...)
	ret0, _ := ret[0].(*v1.ListGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups
func (mr *MockAccountServiceClientMockRecorder) ListGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockAccountServiceClient)(nil).ListGroups), varargs...)
}

// ListScopes mocks base method
func (m *MockAccountServiceClient) ListScopes(arg0 context.Context, arg1 *v1.ListScopesRequest, arg2 ...grpc.CallOption) (*v1.ListScopesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScopes", varargs...)
	ret0, _ := ret[0].(*v1.ListScopesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScopes indicates an expected call of ListScopes
func (mr *MockAccountServiceClientMockRecorder) ListScopes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScopes", reflect.TypeOf((*MockAccountServiceClient)(nil).ListScopes), varargs...)
}

// ListUserGroups mocks base method
func (m *MockAccountServiceClient) ListUserGroups(arg0 context.Context, arg1 *v1.ListGroupsRequest, arg2 ...grpc.CallOption) (*v1.ListGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserGroups", varargs...)
	ret0, _ := ret[0].(*v1.ListGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserGroups indicates an expected call of ListUserGroups
func (mr *MockAccountServiceClientMockRecorder) ListUserGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserGroups", reflect.TypeOf((*MockAccountServiceClient)(nil).ListUserGroups), varargs...)
}

// UpdateAccount mocks base method
func (m *MockAccountServiceClient) UpdateAccount(arg0 context.Context, arg1 *v1.UpdateAccountRequest, arg2 ...grpc.CallOption) (*v1.UpdateAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccount", varargs...)
	ret0, _ := ret[0].(*v1.UpdateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockAccountServiceClientMockRecorder) UpdateAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountServiceClient)(nil).UpdateAccount), varargs...)
}

// UpdateGroup mocks base method
func (m *MockAccountServiceClient) UpdateGroup(arg0 context.Context, arg1 *v1.UpdateGroupRequest, arg2 ...grpc.CallOption) (*v1.Group, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroup", varargs...)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup
func (mr *MockAccountServiceClientMockRecorder) UpdateGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockAccountServiceClient)(nil).UpdateGroup), varargs...)
}
