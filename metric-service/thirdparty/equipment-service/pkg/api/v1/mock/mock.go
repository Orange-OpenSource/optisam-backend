// Code generated by MockGen. DO NOT EDIT.
// Source: ../../thirdparty/equipment-service/pkg/api/v1/equipment_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "gitlab.tech.orange/optisam/optisam-it/optisam-services/metric-service/thirdparty/equipment-service/pkg/api/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockEquipmentServiceClient is a mock of EquipmentServiceClient interface
type MockEquipmentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEquipmentServiceClientMockRecorder
}

// MockEquipmentServiceClientMockRecorder is the mock recorder for MockEquipmentServiceClient
type MockEquipmentServiceClientMockRecorder struct {
	mock *MockEquipmentServiceClient
}

// NewMockEquipmentServiceClient creates a new mock instance
func NewMockEquipmentServiceClient(ctrl *gomock.Controller) *MockEquipmentServiceClient {
	mock := &MockEquipmentServiceClient{ctrl: ctrl}
	mock.recorder = &MockEquipmentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEquipmentServiceClient) EXPECT() *MockEquipmentServiceClientMockRecorder {
	return m.recorder
}

// CreateGenericScopeEquipmentTypes mocks base method
func (m *MockEquipmentServiceClient) CreateGenericScopeEquipmentTypes(ctx context.Context, in *v1.CreateGenericScopeEquipmentTypesRequest, opts ...grpc.CallOption) (*v1.CreateGenericScopeEquipmentTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGenericScopeEquipmentTypes", varargs...)
	ret0, _ := ret[0].(*v1.CreateGenericScopeEquipmentTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenericScopeEquipmentTypes indicates an expected call of CreateGenericScopeEquipmentTypes
func (mr *MockEquipmentServiceClientMockRecorder) CreateGenericScopeEquipmentTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenericScopeEquipmentTypes", reflect.TypeOf((*MockEquipmentServiceClient)(nil).CreateGenericScopeEquipmentTypes), varargs...)
}

// UpsertMetadata mocks base method
func (m *MockEquipmentServiceClient) UpsertMetadata(ctx context.Context, in *v1.UpsertMetadataRequest, opts ...grpc.CallOption) (*v1.UpsertMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMetadata", varargs...)
	ret0, _ := ret[0].(*v1.UpsertMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertMetadata indicates an expected call of UpsertMetadata
func (mr *MockEquipmentServiceClientMockRecorder) UpsertMetadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMetadata", reflect.TypeOf((*MockEquipmentServiceClient)(nil).UpsertMetadata), varargs...)
}

// UpsertAllocMetricByFile mocks base method
func (m *MockEquipmentServiceClient) UpsertAllocMetricByFile(ctx context.Context, in *v1.UpsertAllocMetricByFileRequest, opts ...grpc.CallOption) (*v1.UpsertAllocMetricByFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAllocMetricByFile", varargs...)
	ret0, _ := ret[0].(*v1.UpsertAllocMetricByFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAllocMetricByFile indicates an expected call of UpsertAllocMetricByFile
func (mr *MockEquipmentServiceClientMockRecorder) UpsertAllocMetricByFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAllocMetricByFile", reflect.TypeOf((*MockEquipmentServiceClient)(nil).UpsertAllocMetricByFile), varargs...)
}

// UpdateAtrributeOldScope mocks base method
func (m *MockEquipmentServiceClient) UpdateAtrributeOldScope(ctx context.Context, in *v1.UpdateAtrributeOldScopeRequest, opts ...grpc.CallOption) (*v1.UpdateAtrributeOldScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAtrributeOldScope", varargs...)
	ret0, _ := ret[0].(*v1.UpdateAtrributeOldScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAtrributeOldScope indicates an expected call of UpdateAtrributeOldScope
func (mr *MockEquipmentServiceClientMockRecorder) UpdateAtrributeOldScope(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAtrributeOldScope", reflect.TypeOf((*MockEquipmentServiceClient)(nil).UpdateAtrributeOldScope), varargs...)
}

// EquipmentsPerEquipmentType mocks base method
func (m *MockEquipmentServiceClient) EquipmentsPerEquipmentType(ctx context.Context, in *v1.EquipmentsPerEquipmentTypeRequest, opts ...grpc.CallOption) (*v1.EquipmentsPerEquipmentTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EquipmentsPerEquipmentType", varargs...)
	ret0, _ := ret[0].(*v1.EquipmentsPerEquipmentTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EquipmentsPerEquipmentType indicates an expected call of EquipmentsPerEquipmentType
func (mr *MockEquipmentServiceClientMockRecorder) EquipmentsPerEquipmentType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentsPerEquipmentType", reflect.TypeOf((*MockEquipmentServiceClient)(nil).EquipmentsPerEquipmentType), varargs...)
}

// UpsertEquipment mocks base method
func (m *MockEquipmentServiceClient) UpsertEquipment(ctx context.Context, in *v1.UpsertEquipmentRequest, opts ...grpc.CallOption) (*v1.UpsertEquipmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertEquipment", varargs...)
	ret0, _ := ret[0].(*v1.UpsertEquipmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertEquipment indicates an expected call of UpsertEquipment
func (mr *MockEquipmentServiceClientMockRecorder) UpsertEquipment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEquipment", reflect.TypeOf((*MockEquipmentServiceClient)(nil).UpsertEquipment), varargs...)
}

// UpsertEquipmentAllocatedMetric mocks base method
func (m *MockEquipmentServiceClient) UpsertEquipmentAllocatedMetric(ctx context.Context, in *v1.UpsertEquipmentAllocatedMetricRequest, opts ...grpc.CallOption) (*v1.UpsertEquipmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertEquipmentAllocatedMetric", varargs...)
	ret0, _ := ret[0].(*v1.UpsertEquipmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertEquipmentAllocatedMetric indicates an expected call of UpsertEquipmentAllocatedMetric
func (mr *MockEquipmentServiceClientMockRecorder) UpsertEquipmentAllocatedMetric(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEquipmentAllocatedMetric", reflect.TypeOf((*MockEquipmentServiceClient)(nil).UpsertEquipmentAllocatedMetric), varargs...)
}

// DeleteEquipmentAllocatedMetric mocks base method
func (m *MockEquipmentServiceClient) DeleteEquipmentAllocatedMetric(ctx context.Context, in *v1.DeleteEquipmentAllocatedMetricRequest, opts ...grpc.CallOption) (*v1.UpsertEquipmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEquipmentAllocatedMetric", varargs...)
	ret0, _ := ret[0].(*v1.UpsertEquipmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEquipmentAllocatedMetric indicates an expected call of DeleteEquipmentAllocatedMetric
func (mr *MockEquipmentServiceClientMockRecorder) DeleteEquipmentAllocatedMetric(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEquipmentAllocatedMetric", reflect.TypeOf((*MockEquipmentServiceClient)(nil).DeleteEquipmentAllocatedMetric), varargs...)
}

// ListEquipmentsMetadata mocks base method
func (m *MockEquipmentServiceClient) ListEquipmentsMetadata(ctx context.Context, in *v1.ListEquipmentMetadataRequest, opts ...grpc.CallOption) (*v1.ListEquipmentMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEquipmentsMetadata", varargs...)
	ret0, _ := ret[0].(*v1.ListEquipmentMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentsMetadata indicates an expected call of ListEquipmentsMetadata
func (mr *MockEquipmentServiceClientMockRecorder) ListEquipmentsMetadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentsMetadata", reflect.TypeOf((*MockEquipmentServiceClient)(nil).ListEquipmentsMetadata), varargs...)
}

// GetEquipmentMetadata mocks base method
func (m *MockEquipmentServiceClient) GetEquipmentMetadata(ctx context.Context, in *v1.EquipmentMetadataRequest, opts ...grpc.CallOption) (*v1.EquipmentMetadata, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEquipmentMetadata", varargs...)
	ret0, _ := ret[0].(*v1.EquipmentMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEquipmentMetadata indicates an expected call of GetEquipmentMetadata
func (mr *MockEquipmentServiceClientMockRecorder) GetEquipmentMetadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEquipmentMetadata", reflect.TypeOf((*MockEquipmentServiceClient)(nil).GetEquipmentMetadata), varargs...)
}

// EquipmentsTypes mocks base method
func (m *MockEquipmentServiceClient) EquipmentsTypes(ctx context.Context, in *v1.EquipmentTypesRequest, opts ...grpc.CallOption) (*v1.EquipmentTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EquipmentsTypes", varargs...)
	ret0, _ := ret[0].(*v1.EquipmentTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EquipmentsTypes indicates an expected call of EquipmentsTypes
func (mr *MockEquipmentServiceClientMockRecorder) EquipmentsTypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentsTypes", reflect.TypeOf((*MockEquipmentServiceClient)(nil).EquipmentsTypes), varargs...)
}

// GetMetrics mocks base method
func (m *MockEquipmentServiceClient) GetMetrics(ctx context.Context, in *v1.GetMetricsRequest, opts ...grpc.CallOption) (*v1.GetMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetrics", varargs...)
	ret0, _ := ret[0].(*v1.GetMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics
func (mr *MockEquipmentServiceClientMockRecorder) GetMetrics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockEquipmentServiceClient)(nil).GetMetrics), varargs...)
}

// CreateEquipmentType mocks base method
func (m *MockEquipmentServiceClient) CreateEquipmentType(ctx context.Context, in *v1.EquipmentType, opts ...grpc.CallOption) (*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEquipmentType", varargs...)
	ret0, _ := ret[0].(*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEquipmentType indicates an expected call of CreateEquipmentType
func (mr *MockEquipmentServiceClientMockRecorder) CreateEquipmentType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEquipmentType", reflect.TypeOf((*MockEquipmentServiceClient)(nil).CreateEquipmentType), varargs...)
}

// DeleteEquipmentType mocks base method
func (m *MockEquipmentServiceClient) DeleteEquipmentType(ctx context.Context, in *v1.DeleteEquipmentTypeRequest, opts ...grpc.CallOption) (*v1.DeleteEquipmentTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEquipmentType", varargs...)
	ret0, _ := ret[0].(*v1.DeleteEquipmentTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEquipmentType indicates an expected call of DeleteEquipmentType
func (mr *MockEquipmentServiceClientMockRecorder) DeleteEquipmentType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEquipmentType", reflect.TypeOf((*MockEquipmentServiceClient)(nil).DeleteEquipmentType), varargs...)
}

// DeleteEquipmentTypeAttr mocks base method
func (m *MockEquipmentServiceClient) DeleteEquipmentTypeAttr(ctx context.Context, in *v1.DeleteEquipmentTypeAttrRequest, opts ...grpc.CallOption) (*v1.DeleteEquipmentTypeAttrResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEquipmentTypeAttr", varargs...)
	ret0, _ := ret[0].(*v1.DeleteEquipmentTypeAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEquipmentTypeAttr indicates an expected call of DeleteEquipmentTypeAttr
func (mr *MockEquipmentServiceClientMockRecorder) DeleteEquipmentTypeAttr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEquipmentTypeAttr", reflect.TypeOf((*MockEquipmentServiceClient)(nil).DeleteEquipmentTypeAttr), varargs...)
}

// UpdateEquipmentType mocks base method
func (m *MockEquipmentServiceClient) UpdateEquipmentType(ctx context.Context, in *v1.UpdateEquipmentTypeRequest, opts ...grpc.CallOption) (*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEquipmentType", varargs...)
	ret0, _ := ret[0].(*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEquipmentType indicates an expected call of UpdateEquipmentType
func (mr *MockEquipmentServiceClientMockRecorder) UpdateEquipmentType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEquipmentType", reflect.TypeOf((*MockEquipmentServiceClient)(nil).UpdateEquipmentType), varargs...)
}

// ListEquipments mocks base method
func (m *MockEquipmentServiceClient) ListEquipments(ctx context.Context, in *v1.ListEquipmentsRequest, opts ...grpc.CallOption) (*v1.ListEquipmentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEquipments", varargs...)
	ret0, _ := ret[0].(*v1.ListEquipmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipments indicates an expected call of ListEquipments
func (mr *MockEquipmentServiceClientMockRecorder) ListEquipments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipments", reflect.TypeOf((*MockEquipmentServiceClient)(nil).ListEquipments), varargs...)
}

// DropEquipmentData mocks base method
func (m *MockEquipmentServiceClient) DropEquipmentData(ctx context.Context, in *v1.DropEquipmentDataRequest, opts ...grpc.CallOption) (*v1.DropEquipmentDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropEquipmentData", varargs...)
	ret0, _ := ret[0].(*v1.DropEquipmentDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropEquipmentData indicates an expected call of DropEquipmentData
func (mr *MockEquipmentServiceClientMockRecorder) DropEquipmentData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropEquipmentData", reflect.TypeOf((*MockEquipmentServiceClient)(nil).DropEquipmentData), varargs...)
}

// GetEquipment mocks base method
func (m *MockEquipmentServiceClient) GetEquipment(ctx context.Context, in *v1.GetEquipmentRequest, opts ...grpc.CallOption) (*v1.GetEquipmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEquipment", varargs...)
	ret0, _ := ret[0].(*v1.GetEquipmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEquipment indicates an expected call of GetEquipment
func (mr *MockEquipmentServiceClientMockRecorder) GetEquipment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEquipment", reflect.TypeOf((*MockEquipmentServiceClient)(nil).GetEquipment), varargs...)
}

// ListEquipmentParents mocks base method
func (m *MockEquipmentServiceClient) ListEquipmentParents(ctx context.Context, in *v1.ListEquipmentParentsRequest, opts ...grpc.CallOption) (*v1.ListEquipmentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEquipmentParents", varargs...)
	ret0, _ := ret[0].(*v1.ListEquipmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentParents indicates an expected call of ListEquipmentParents
func (mr *MockEquipmentServiceClientMockRecorder) ListEquipmentParents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentParents", reflect.TypeOf((*MockEquipmentServiceClient)(nil).ListEquipmentParents), varargs...)
}

// ListEquipmentChildren mocks base method
func (m *MockEquipmentServiceClient) ListEquipmentChildren(ctx context.Context, in *v1.ListEquipmentChildrenRequest, opts ...grpc.CallOption) (*v1.ListEquipmentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEquipmentChildren", varargs...)
	ret0, _ := ret[0].(*v1.ListEquipmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentChildren indicates an expected call of ListEquipmentChildren
func (mr *MockEquipmentServiceClientMockRecorder) ListEquipmentChildren(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentChildren", reflect.TypeOf((*MockEquipmentServiceClient)(nil).ListEquipmentChildren), varargs...)
}

// ListEquipmentsForProductAggregation mocks base method
func (m *MockEquipmentServiceClient) ListEquipmentsForProductAggregation(ctx context.Context, in *v1.ListEquipmentsForProductAggregationRequest, opts ...grpc.CallOption) (*v1.ListEquipmentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEquipmentsForProductAggregation", varargs...)
	ret0, _ := ret[0].(*v1.ListEquipmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentsForProductAggregation indicates an expected call of ListEquipmentsForProductAggregation
func (mr *MockEquipmentServiceClientMockRecorder) ListEquipmentsForProductAggregation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentsForProductAggregation", reflect.TypeOf((*MockEquipmentServiceClient)(nil).ListEquipmentsForProductAggregation), varargs...)
}

// ListEquipmentsForProduct mocks base method
func (m *MockEquipmentServiceClient) ListEquipmentsForProduct(ctx context.Context, in *v1.ListEquipmentsForProductRequest, opts ...grpc.CallOption) (*v1.ListEquipmentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEquipmentsForProduct", varargs...)
	ret0, _ := ret[0].(*v1.ListEquipmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentsForProduct indicates an expected call of ListEquipmentsForProduct
func (mr *MockEquipmentServiceClientMockRecorder) ListEquipmentsForProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentsForProduct", reflect.TypeOf((*MockEquipmentServiceClient)(nil).ListEquipmentsForProduct), varargs...)
}

// DropMetaData mocks base method
func (m *MockEquipmentServiceClient) DropMetaData(ctx context.Context, in *v1.DropMetaDataRequest, opts ...grpc.CallOption) (*v1.DropMetaDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropMetaData", varargs...)
	ret0, _ := ret[0].(*v1.DropMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMetaData indicates an expected call of DropMetaData
func (mr *MockEquipmentServiceClientMockRecorder) DropMetaData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMetaData", reflect.TypeOf((*MockEquipmentServiceClient)(nil).DropMetaData), varargs...)
}

// MockEquipmentServiceServer is a mock of EquipmentServiceServer interface
type MockEquipmentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEquipmentServiceServerMockRecorder
}

// MockEquipmentServiceServerMockRecorder is the mock recorder for MockEquipmentServiceServer
type MockEquipmentServiceServerMockRecorder struct {
	mock *MockEquipmentServiceServer
}

// NewMockEquipmentServiceServer creates a new mock instance
func NewMockEquipmentServiceServer(ctrl *gomock.Controller) *MockEquipmentServiceServer {
	mock := &MockEquipmentServiceServer{ctrl: ctrl}
	mock.recorder = &MockEquipmentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEquipmentServiceServer) EXPECT() *MockEquipmentServiceServerMockRecorder {
	return m.recorder
}

// CreateGenericScopeEquipmentTypes mocks base method
func (m *MockEquipmentServiceServer) CreateGenericScopeEquipmentTypes(arg0 context.Context, arg1 *v1.CreateGenericScopeEquipmentTypesRequest) (*v1.CreateGenericScopeEquipmentTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenericScopeEquipmentTypes", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateGenericScopeEquipmentTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenericScopeEquipmentTypes indicates an expected call of CreateGenericScopeEquipmentTypes
func (mr *MockEquipmentServiceServerMockRecorder) CreateGenericScopeEquipmentTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenericScopeEquipmentTypes", reflect.TypeOf((*MockEquipmentServiceServer)(nil).CreateGenericScopeEquipmentTypes), arg0, arg1)
}

// UpsertMetadata mocks base method
func (m *MockEquipmentServiceServer) UpsertMetadata(arg0 context.Context, arg1 *v1.UpsertMetadataRequest) (*v1.UpsertMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMetadata", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpsertMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertMetadata indicates an expected call of UpsertMetadata
func (mr *MockEquipmentServiceServerMockRecorder) UpsertMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMetadata", reflect.TypeOf((*MockEquipmentServiceServer)(nil).UpsertMetadata), arg0, arg1)
}

// UpsertAllocMetricByFile mocks base method
func (m *MockEquipmentServiceServer) UpsertAllocMetricByFile(arg0 context.Context, arg1 *v1.UpsertAllocMetricByFileRequest) (*v1.UpsertAllocMetricByFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAllocMetricByFile", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpsertAllocMetricByFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAllocMetricByFile indicates an expected call of UpsertAllocMetricByFile
func (mr *MockEquipmentServiceServerMockRecorder) UpsertAllocMetricByFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAllocMetricByFile", reflect.TypeOf((*MockEquipmentServiceServer)(nil).UpsertAllocMetricByFile), arg0, arg1)
}

// UpdateAtrributeOldScope mocks base method
func (m *MockEquipmentServiceServer) UpdateAtrributeOldScope(arg0 context.Context, arg1 *v1.UpdateAtrributeOldScopeRequest) (*v1.UpdateAtrributeOldScopeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAtrributeOldScope", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateAtrributeOldScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAtrributeOldScope indicates an expected call of UpdateAtrributeOldScope
func (mr *MockEquipmentServiceServerMockRecorder) UpdateAtrributeOldScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAtrributeOldScope", reflect.TypeOf((*MockEquipmentServiceServer)(nil).UpdateAtrributeOldScope), arg0, arg1)
}

// EquipmentsPerEquipmentType mocks base method
func (m *MockEquipmentServiceServer) EquipmentsPerEquipmentType(arg0 context.Context, arg1 *v1.EquipmentsPerEquipmentTypeRequest) (*v1.EquipmentsPerEquipmentTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentsPerEquipmentType", arg0, arg1)
	ret0, _ := ret[0].(*v1.EquipmentsPerEquipmentTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EquipmentsPerEquipmentType indicates an expected call of EquipmentsPerEquipmentType
func (mr *MockEquipmentServiceServerMockRecorder) EquipmentsPerEquipmentType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentsPerEquipmentType", reflect.TypeOf((*MockEquipmentServiceServer)(nil).EquipmentsPerEquipmentType), arg0, arg1)
}

// UpsertEquipment mocks base method
func (m *MockEquipmentServiceServer) UpsertEquipment(arg0 context.Context, arg1 *v1.UpsertEquipmentRequest) (*v1.UpsertEquipmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEquipment", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpsertEquipmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertEquipment indicates an expected call of UpsertEquipment
func (mr *MockEquipmentServiceServerMockRecorder) UpsertEquipment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEquipment", reflect.TypeOf((*MockEquipmentServiceServer)(nil).UpsertEquipment), arg0, arg1)
}

// UpsertEquipmentAllocatedMetric mocks base method
func (m *MockEquipmentServiceServer) UpsertEquipmentAllocatedMetric(arg0 context.Context, arg1 *v1.UpsertEquipmentAllocatedMetricRequest) (*v1.UpsertEquipmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEquipmentAllocatedMetric", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpsertEquipmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertEquipmentAllocatedMetric indicates an expected call of UpsertEquipmentAllocatedMetric
func (mr *MockEquipmentServiceServerMockRecorder) UpsertEquipmentAllocatedMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEquipmentAllocatedMetric", reflect.TypeOf((*MockEquipmentServiceServer)(nil).UpsertEquipmentAllocatedMetric), arg0, arg1)
}

// DeleteEquipmentAllocatedMetric mocks base method
func (m *MockEquipmentServiceServer) DeleteEquipmentAllocatedMetric(arg0 context.Context, arg1 *v1.DeleteEquipmentAllocatedMetricRequest) (*v1.UpsertEquipmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEquipmentAllocatedMetric", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpsertEquipmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEquipmentAllocatedMetric indicates an expected call of DeleteEquipmentAllocatedMetric
func (mr *MockEquipmentServiceServerMockRecorder) DeleteEquipmentAllocatedMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEquipmentAllocatedMetric", reflect.TypeOf((*MockEquipmentServiceServer)(nil).DeleteEquipmentAllocatedMetric), arg0, arg1)
}

// ListEquipmentsMetadata mocks base method
func (m *MockEquipmentServiceServer) ListEquipmentsMetadata(arg0 context.Context, arg1 *v1.ListEquipmentMetadataRequest) (*v1.ListEquipmentMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEquipmentsMetadata", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListEquipmentMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentsMetadata indicates an expected call of ListEquipmentsMetadata
func (mr *MockEquipmentServiceServerMockRecorder) ListEquipmentsMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentsMetadata", reflect.TypeOf((*MockEquipmentServiceServer)(nil).ListEquipmentsMetadata), arg0, arg1)
}

// GetEquipmentMetadata mocks base method
func (m *MockEquipmentServiceServer) GetEquipmentMetadata(arg0 context.Context, arg1 *v1.EquipmentMetadataRequest) (*v1.EquipmentMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEquipmentMetadata", arg0, arg1)
	ret0, _ := ret[0].(*v1.EquipmentMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEquipmentMetadata indicates an expected call of GetEquipmentMetadata
func (mr *MockEquipmentServiceServerMockRecorder) GetEquipmentMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEquipmentMetadata", reflect.TypeOf((*MockEquipmentServiceServer)(nil).GetEquipmentMetadata), arg0, arg1)
}

// EquipmentsTypes mocks base method
func (m *MockEquipmentServiceServer) EquipmentsTypes(arg0 context.Context, arg1 *v1.EquipmentTypesRequest) (*v1.EquipmentTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentsTypes", arg0, arg1)
	ret0, _ := ret[0].(*v1.EquipmentTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EquipmentsTypes indicates an expected call of EquipmentsTypes
func (mr *MockEquipmentServiceServerMockRecorder) EquipmentsTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentsTypes", reflect.TypeOf((*MockEquipmentServiceServer)(nil).EquipmentsTypes), arg0, arg1)
}

// GetMetrics mocks base method
func (m *MockEquipmentServiceServer) GetMetrics(arg0 context.Context, arg1 *v1.GetMetricsRequest) (*v1.GetMetricsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics
func (mr *MockEquipmentServiceServerMockRecorder) GetMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockEquipmentServiceServer)(nil).GetMetrics), arg0, arg1)
}

// CreateEquipmentType mocks base method
func (m *MockEquipmentServiceServer) CreateEquipmentType(arg0 context.Context, arg1 *v1.EquipmentType) (*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEquipmentType", arg0, arg1)
	ret0, _ := ret[0].(*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEquipmentType indicates an expected call of CreateEquipmentType
func (mr *MockEquipmentServiceServerMockRecorder) CreateEquipmentType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEquipmentType", reflect.TypeOf((*MockEquipmentServiceServer)(nil).CreateEquipmentType), arg0, arg1)
}

// DeleteEquipmentType mocks base method
func (m *MockEquipmentServiceServer) DeleteEquipmentType(arg0 context.Context, arg1 *v1.DeleteEquipmentTypeRequest) (*v1.DeleteEquipmentTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEquipmentType", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteEquipmentTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEquipmentType indicates an expected call of DeleteEquipmentType
func (mr *MockEquipmentServiceServerMockRecorder) DeleteEquipmentType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEquipmentType", reflect.TypeOf((*MockEquipmentServiceServer)(nil).DeleteEquipmentType), arg0, arg1)
}

// DeleteEquipmentTypeAttr mocks base method
func (m *MockEquipmentServiceServer) DeleteEquipmentTypeAttr(arg0 context.Context, arg1 *v1.DeleteEquipmentTypeAttrRequest) (*v1.DeleteEquipmentTypeAttrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEquipmentTypeAttr", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteEquipmentTypeAttrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEquipmentTypeAttr indicates an expected call of DeleteEquipmentTypeAttr
func (mr *MockEquipmentServiceServerMockRecorder) DeleteEquipmentTypeAttr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEquipmentTypeAttr", reflect.TypeOf((*MockEquipmentServiceServer)(nil).DeleteEquipmentTypeAttr), arg0, arg1)
}

// UpdateEquipmentType mocks base method
func (m *MockEquipmentServiceServer) UpdateEquipmentType(arg0 context.Context, arg1 *v1.UpdateEquipmentTypeRequest) (*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEquipmentType", arg0, arg1)
	ret0, _ := ret[0].(*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEquipmentType indicates an expected call of UpdateEquipmentType
func (mr *MockEquipmentServiceServerMockRecorder) UpdateEquipmentType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEquipmentType", reflect.TypeOf((*MockEquipmentServiceServer)(nil).UpdateEquipmentType), arg0, arg1)
}

// ListEquipments mocks base method
func (m *MockEquipmentServiceServer) ListEquipments(arg0 context.Context, arg1 *v1.ListEquipmentsRequest) (*v1.ListEquipmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEquipments", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListEquipmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipments indicates an expected call of ListEquipments
func (mr *MockEquipmentServiceServerMockRecorder) ListEquipments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipments", reflect.TypeOf((*MockEquipmentServiceServer)(nil).ListEquipments), arg0, arg1)
}

// DropEquipmentData mocks base method
func (m *MockEquipmentServiceServer) DropEquipmentData(arg0 context.Context, arg1 *v1.DropEquipmentDataRequest) (*v1.DropEquipmentDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropEquipmentData", arg0, arg1)
	ret0, _ := ret[0].(*v1.DropEquipmentDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropEquipmentData indicates an expected call of DropEquipmentData
func (mr *MockEquipmentServiceServerMockRecorder) DropEquipmentData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropEquipmentData", reflect.TypeOf((*MockEquipmentServiceServer)(nil).DropEquipmentData), arg0, arg1)
}

// GetEquipment mocks base method
func (m *MockEquipmentServiceServer) GetEquipment(arg0 context.Context, arg1 *v1.GetEquipmentRequest) (*v1.GetEquipmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEquipment", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetEquipmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEquipment indicates an expected call of GetEquipment
func (mr *MockEquipmentServiceServerMockRecorder) GetEquipment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEquipment", reflect.TypeOf((*MockEquipmentServiceServer)(nil).GetEquipment), arg0, arg1)
}

// ListEquipmentParents mocks base method
func (m *MockEquipmentServiceServer) ListEquipmentParents(arg0 context.Context, arg1 *v1.ListEquipmentParentsRequest) (*v1.ListEquipmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEquipmentParents", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListEquipmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentParents indicates an expected call of ListEquipmentParents
func (mr *MockEquipmentServiceServerMockRecorder) ListEquipmentParents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentParents", reflect.TypeOf((*MockEquipmentServiceServer)(nil).ListEquipmentParents), arg0, arg1)
}

// ListEquipmentChildren mocks base method
func (m *MockEquipmentServiceServer) ListEquipmentChildren(arg0 context.Context, arg1 *v1.ListEquipmentChildrenRequest) (*v1.ListEquipmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEquipmentChildren", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListEquipmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentChildren indicates an expected call of ListEquipmentChildren
func (mr *MockEquipmentServiceServerMockRecorder) ListEquipmentChildren(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentChildren", reflect.TypeOf((*MockEquipmentServiceServer)(nil).ListEquipmentChildren), arg0, arg1)
}

// ListEquipmentsForProductAggregation mocks base method
func (m *MockEquipmentServiceServer) ListEquipmentsForProductAggregation(arg0 context.Context, arg1 *v1.ListEquipmentsForProductAggregationRequest) (*v1.ListEquipmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEquipmentsForProductAggregation", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListEquipmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentsForProductAggregation indicates an expected call of ListEquipmentsForProductAggregation
func (mr *MockEquipmentServiceServerMockRecorder) ListEquipmentsForProductAggregation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentsForProductAggregation", reflect.TypeOf((*MockEquipmentServiceServer)(nil).ListEquipmentsForProductAggregation), arg0, arg1)
}

// ListEquipmentsForProduct mocks base method
func (m *MockEquipmentServiceServer) ListEquipmentsForProduct(arg0 context.Context, arg1 *v1.ListEquipmentsForProductRequest) (*v1.ListEquipmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEquipmentsForProduct", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListEquipmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentsForProduct indicates an expected call of ListEquipmentsForProduct
func (mr *MockEquipmentServiceServerMockRecorder) ListEquipmentsForProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentsForProduct", reflect.TypeOf((*MockEquipmentServiceServer)(nil).ListEquipmentsForProduct), arg0, arg1)
}

// DropMetaData mocks base method
func (m *MockEquipmentServiceServer) DropMetaData(arg0 context.Context, arg1 *v1.DropMetaDataRequest) (*v1.DropMetaDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropMetaData", arg0, arg1)
	ret0, _ := ret[0].(*v1.DropMetaDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMetaData indicates an expected call of DropMetaData
func (mr *MockEquipmentServiceServerMockRecorder) DropMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMetaData", reflect.TypeOf((*MockEquipmentServiceServer)(nil).DropMetaData), arg0, arg1)
}

// MockUnsafeEquipmentServiceServer is a mock of UnsafeEquipmentServiceServer interface
type MockUnsafeEquipmentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEquipmentServiceServerMockRecorder
}

// MockUnsafeEquipmentServiceServerMockRecorder is the mock recorder for MockUnsafeEquipmentServiceServer
type MockUnsafeEquipmentServiceServerMockRecorder struct {
	mock *MockUnsafeEquipmentServiceServer
}

// NewMockUnsafeEquipmentServiceServer creates a new mock instance
func NewMockUnsafeEquipmentServiceServer(ctrl *gomock.Controller) *MockUnsafeEquipmentServiceServer {
	mock := &MockUnsafeEquipmentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEquipmentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnsafeEquipmentServiceServer) EXPECT() *MockUnsafeEquipmentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEquipmentServiceServer mocks base method
func (m *MockUnsafeEquipmentServiceServer) mustEmbedUnimplementedEquipmentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEquipmentServiceServer")
}

// mustEmbedUnimplementedEquipmentServiceServer indicates an expected call of mustEmbedUnimplementedEquipmentServiceServer
func (mr *MockUnsafeEquipmentServiceServerMockRecorder) mustEmbedUnimplementedEquipmentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEquipmentServiceServer", reflect.TypeOf((*MockUnsafeEquipmentServiceServer)(nil).mustEmbedUnimplementedEquipmentServiceServer))
}
