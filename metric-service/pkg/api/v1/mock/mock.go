// Code generated by MockGen. DO NOT EDIT.
// Source: optisam-backend/metric-service/pkg/api/v1 (interfaces: MetricServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	v1 "optisam-backend/metric-service/pkg/api/v1"
	reflect "reflect"
)

// MockMetricServiceClient is a mock of MetricServiceClient interface
type MockMetricServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceClientMockRecorder
}

// MockMetricServiceClientMockRecorder is the mock recorder for MockMetricServiceClient
type MockMetricServiceClientMockRecorder struct {
	mock *MockMetricServiceClient
}

// NewMockMetricServiceClient creates a new mock instance
func NewMockMetricServiceClient(ctrl *gomock.Controller) *MockMetricServiceClient {
	mock := &MockMetricServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetricServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricServiceClient) EXPECT() *MockMetricServiceClientMockRecorder {
	return m.recorder
}

// CreateMetricAttrCounterStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricAttrCounterStandard(arg0 context.Context, arg1 *v1.MetricACS, arg2 ...grpc.CallOption) (*v1.MetricACS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricAttrCounterStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricACS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricAttrCounterStandard indicates an expected call of CreateMetricAttrCounterStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricAttrCounterStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricAttrCounterStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricAttrCounterStandard), varargs...)
}

// CreateMetricAttrSumStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricAttrSumStandard(arg0 context.Context, arg1 *v1.MetricAttrSum, arg2 ...grpc.CallOption) (*v1.MetricAttrSum, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricAttrSumStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricAttrSum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricAttrSumStandard indicates an expected call of CreateMetricAttrSumStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricAttrSumStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricAttrSumStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricAttrSumStandard), varargs...)
}

// CreateMetricIBMPvuStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricIBMPvuStandard(arg0 context.Context, arg1 *v1.MetricIPS, arg2 ...grpc.CallOption) (*v1.MetricIPS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricIBMPvuStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricIPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricIBMPvuStandard indicates an expected call of CreateMetricIBMPvuStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricIBMPvuStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricIBMPvuStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricIBMPvuStandard), varargs...)
}

// CreateMetricInstanceNumberStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricInstanceNumberStandard(arg0 context.Context, arg1 *v1.MetricINM, arg2 ...grpc.CallOption) (*v1.MetricINM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricInstanceNumberStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricINM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricInstanceNumberStandard indicates an expected call of CreateMetricInstanceNumberStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricInstanceNumberStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricInstanceNumberStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricInstanceNumberStandard), varargs...)
}

// CreateMetricOracleNUPStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricOracleNUPStandard(arg0 context.Context, arg1 *v1.MetricNUP, arg2 ...grpc.CallOption) (*v1.MetricNUP, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricOracleNUPStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricNUP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricOracleNUPStandard indicates an expected call of CreateMetricOracleNUPStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricOracleNUPStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricOracleNUPStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricOracleNUPStandard), varargs...)
}

// CreateMetricOracleProcessorStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricOracleProcessorStandard(arg0 context.Context, arg1 *v1.MetricOPS, arg2 ...grpc.CallOption) (*v1.MetricOPS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricOracleProcessorStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricOPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricOracleProcessorStandard indicates an expected call of CreateMetricOracleProcessorStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricOracleProcessorStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricOracleProcessorStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricOracleProcessorStandard), varargs...)
}

// CreateMetricSAGProcessorStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricSAGProcessorStandard(arg0 context.Context, arg1 *v1.MetricSPS, arg2 ...grpc.CallOption) (*v1.MetricSPS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricSAGProcessorStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricSPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricSAGProcessorStandard indicates an expected call of CreateMetricSAGProcessorStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricSAGProcessorStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricSAGProcessorStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricSAGProcessorStandard), varargs...)
}

// CreateMetricUserSumStandard mocks base method
func (m *MockMetricServiceClient) CreateMetricUserSumStandard(arg0 context.Context, arg1 *v1.MetricUSS, arg2 ...grpc.CallOption) (*v1.MetricUSS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricUserSumStandard", varargs...)
	ret0, _ := ret[0].(*v1.MetricUSS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricUserSumStandard indicates an expected call of CreateMetricUserSumStandard
func (mr *MockMetricServiceClientMockRecorder) CreateMetricUserSumStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricUserSumStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).CreateMetricUserSumStandard), varargs...)
}

// DeleteMetric mocks base method
func (m *MockMetricServiceClient) DeleteMetric(arg0 context.Context, arg1 *v1.DeleteMetricRequest, arg2 ...grpc.CallOption) (*v1.DeleteMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMetric", varargs...)
	ret0, _ := ret[0].(*v1.DeleteMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMetric indicates an expected call of DeleteMetric
func (mr *MockMetricServiceClientMockRecorder) DeleteMetric(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetric", reflect.TypeOf((*MockMetricServiceClient)(nil).DeleteMetric), varargs...)
}

// DropMetricData mocks base method
func (m *MockMetricServiceClient) DropMetricData(arg0 context.Context, arg1 *v1.DropMetricDataRequest, arg2 ...grpc.CallOption) (*v1.DropMetricDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropMetricData", varargs...)
	ret0, _ := ret[0].(*v1.DropMetricDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMetricData indicates an expected call of DropMetricData
func (mr *MockMetricServiceClientMockRecorder) DropMetricData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMetricData", reflect.TypeOf((*MockMetricServiceClient)(nil).DropMetricData), varargs...)
}

// GetMetricConfiguration mocks base method
func (m *MockMetricServiceClient) GetMetricConfiguration(arg0 context.Context, arg1 *v1.GetMetricConfigurationRequest, arg2 ...grpc.CallOption) (*v1.GetMetricConfigurationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricConfiguration", varargs...)
	ret0, _ := ret[0].(*v1.GetMetricConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricConfiguration indicates an expected call of GetMetricConfiguration
func (mr *MockMetricServiceClientMockRecorder) GetMetricConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricConfiguration", reflect.TypeOf((*MockMetricServiceClient)(nil).GetMetricConfiguration), varargs...)
}

// ListMetricType mocks base method
func (m *MockMetricServiceClient) ListMetricType(arg0 context.Context, arg1 *v1.ListMetricTypeRequest, arg2 ...grpc.CallOption) (*v1.ListMetricTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetricType", varargs...)
	ret0, _ := ret[0].(*v1.ListMetricTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricType indicates an expected call of ListMetricType
func (mr *MockMetricServiceClientMockRecorder) ListMetricType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricType", reflect.TypeOf((*MockMetricServiceClient)(nil).ListMetricType), varargs...)
}

// ListMetrices mocks base method
func (m *MockMetricServiceClient) ListMetrices(arg0 context.Context, arg1 *v1.ListMetricRequest, arg2 ...grpc.CallOption) (*v1.ListMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetrices", varargs...)
	ret0, _ := ret[0].(*v1.ListMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetrices indicates an expected call of ListMetrices
func (mr *MockMetricServiceClientMockRecorder) ListMetrices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetrices", reflect.TypeOf((*MockMetricServiceClient)(nil).ListMetrices), varargs...)
}

// UpdateMetricAttrCounterStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricAttrCounterStandard(arg0 context.Context, arg1 *v1.MetricACS, arg2 ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricAttrCounterStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricAttrCounterStandard indicates an expected call of UpdateMetricAttrCounterStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricAttrCounterStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricAttrCounterStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricAttrCounterStandard), varargs...)
}

// UpdateMetricAttrSumStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricAttrSumStandard(arg0 context.Context, arg1 *v1.MetricAttrSum, arg2 ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricAttrSumStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricAttrSumStandard indicates an expected call of UpdateMetricAttrSumStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricAttrSumStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricAttrSumStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricAttrSumStandard), varargs...)
}

// UpdateMetricIBMPvuStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricIBMPvuStandard(arg0 context.Context, arg1 *v1.MetricIPS, arg2 ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricIBMPvuStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricIBMPvuStandard indicates an expected call of UpdateMetricIBMPvuStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricIBMPvuStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricIBMPvuStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricIBMPvuStandard), varargs...)
}

// UpdateMetricInstanceNumberStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricInstanceNumberStandard(arg0 context.Context, arg1 *v1.MetricINM, arg2 ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricInstanceNumberStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricInstanceNumberStandard indicates an expected call of UpdateMetricInstanceNumberStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricInstanceNumberStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricInstanceNumberStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricInstanceNumberStandard), varargs...)
}

// UpdateMetricOracleNUPStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricOracleNUPStandard(arg0 context.Context, arg1 *v1.MetricNUP, arg2 ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricOracleNUPStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricOracleNUPStandard indicates an expected call of UpdateMetricOracleNUPStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricOracleNUPStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricOracleNUPStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricOracleNUPStandard), varargs...)
}

// UpdateMetricOracleProcessorStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricOracleProcessorStandard(arg0 context.Context, arg1 *v1.MetricOPS, arg2 ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricOracleProcessorStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricOracleProcessorStandard indicates an expected call of UpdateMetricOracleProcessorStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricOracleProcessorStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricOracleProcessorStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricOracleProcessorStandard), varargs...)
}

// UpdateMetricSAGProcessorStandard mocks base method
func (m *MockMetricServiceClient) UpdateMetricSAGProcessorStandard(arg0 context.Context, arg1 *v1.MetricSPS, arg2 ...grpc.CallOption) (*v1.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricSAGProcessorStandard", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricSAGProcessorStandard indicates an expected call of UpdateMetricSAGProcessorStandard
func (mr *MockMetricServiceClientMockRecorder) UpdateMetricSAGProcessorStandard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricSAGProcessorStandard", reflect.TypeOf((*MockMetricServiceClient)(nil).UpdateMetricSAGProcessorStandard), varargs...)
}
