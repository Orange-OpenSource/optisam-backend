// Copyright (C) 2019 Orange
// 
// This software is distributed under the terms and conditions of the 'Apache License 2.0'
// license which can be found in the file 'License.txt' in this package distribution 
// or at 'http://www.apache.org/licenses/LICENSE-2.0'. 

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: metric.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on GetMetricConfigurationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMetricConfigurationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMetricInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetricConfigurationRequestValidationError{
				field:  "MetricInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMetricConfigurationRequestValidationError is the validation error
// returned by GetMetricConfigurationRequest.Validate if the designated
// constraints aren't met.
type GetMetricConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricConfigurationRequestValidationError) ErrorName() string {
	return "GetMetricConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricConfigurationRequestValidationError{}

// Validate checks the field values on GetMetricConfigurationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMetricConfigurationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetricConfig

	return nil
}

// GetMetricConfigurationResponseValidationError is the validation error
// returned by GetMetricConfigurationResponse.Validate if the designated
// constraints aren't met.
type GetMetricConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricConfigurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricConfigurationResponseValidationError) ErrorName() string {
	return "GetMetricConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricConfigurationResponseValidationError{}

// Validate checks the field values on CreateINM with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CreateINM) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Coefficient

	return nil
}

// CreateINMValidationError is the validation error returned by
// CreateINM.Validate if the designated constraints aren't met.
type CreateINMValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateINMValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateINMValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateINMValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateINMValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateINMValidationError) ErrorName() string { return "CreateINMValidationError" }

// Error satisfies the builtin error interface
func (e CreateINMValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateINM.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateINMValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateINMValidationError{}

// Validate checks the field values on CreateMetricIPS with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateMetricIPS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for NumCoreAttrId

	// no validation rules for CoreFactorAttrId

	// no validation rules for BaseEqTypeId

	return nil
}

// CreateMetricIPSValidationError is the validation error returned by
// CreateMetricIPS.Validate if the designated constraints aren't met.
type CreateMetricIPSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricIPSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricIPSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricIPSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricIPSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricIPSValidationError) ErrorName() string { return "CreateMetricIPSValidationError" }

// Error satisfies the builtin error interface
func (e CreateMetricIPSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricIPS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricIPSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricIPSValidationError{}

// Validate checks the field values on CreateMetricSPS with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateMetricSPS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for NumCoreAttrId

	// no validation rules for CoreFactorAttrId

	// no validation rules for BaseEqTypeId

	return nil
}

// CreateMetricSPSValidationError is the validation error returned by
// CreateMetricSPS.Validate if the designated constraints aren't met.
type CreateMetricSPSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricSPSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricSPSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricSPSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricSPSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricSPSValidationError) ErrorName() string { return "CreateMetricSPSValidationError" }

// Error satisfies the builtin error interface
func (e CreateMetricSPSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricSPS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricSPSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricSPSValidationError{}

// Validate checks the field values on CreateMetricACS with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateMetricACS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for EqType

	// no validation rules for AttributeName

	// no validation rules for Value

	return nil
}

// CreateMetricACSValidationError is the validation error returned by
// CreateMetricACS.Validate if the designated constraints aren't met.
type CreateMetricACSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricACSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricACSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricACSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricACSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricACSValidationError) ErrorName() string { return "CreateMetricACSValidationError" }

// Error satisfies the builtin error interface
func (e CreateMetricACSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricACS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricACSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricACSValidationError{}

// Validate checks the field values on ListMetricRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListMetricRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMetricRequestValidationError is the validation error returned by
// ListMetricRequest.Validate if the designated constraints aren't met.
type ListMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricRequestValidationError) ErrorName() string {
	return "ListMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricRequestValidationError{}

// Validate checks the field values on ListMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetrices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMetricResponseValidationError{
					field:  fmt.Sprintf("Metrices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMetricResponseValidationError is the validation error returned by
// ListMetricResponse.Validate if the designated constraints aren't met.
type ListMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricResponseValidationError) ErrorName() string {
	return "ListMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricResponseValidationError{}

// Validate checks the field values on Metric with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metric) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// MetricValidationError is the validation error returned by Metric.Validate if
// the designated constraints aren't met.
type MetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricValidationError) ErrorName() string { return "MetricValidationError" }

// Error satisfies the builtin error interface
func (e MetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricValidationError{}

// Validate checks the field values on ListMetricTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMetricTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMetricTypeRequestValidationError is the validation error returned by
// ListMetricTypeRequest.Validate if the designated constraints aren't met.
type ListMetricTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricTypeRequestValidationError) ErrorName() string {
	return "ListMetricTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricTypeRequestValidationError{}

// Validate checks the field values on ListMetricTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMetricTypeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMetricTypeResponseValidationError{
					field:  fmt.Sprintf("Types[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMetricTypeResponseValidationError is the validation error returned by
// ListMetricTypeResponse.Validate if the designated constraints aren't met.
type ListMetricTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricTypeResponseValidationError) ErrorName() string {
	return "ListMetricTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricTypeResponseValidationError{}

// Validate checks the field values on MetricType with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Href

	// no validation rules for TypeId

	return nil
}

// MetricTypeValidationError is the validation error returned by
// MetricType.Validate if the designated constraints aren't met.
type MetricTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricTypeValidationError) ErrorName() string { return "MetricTypeValidationError" }

// Error satisfies the builtin error interface
func (e MetricTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricTypeValidationError{}

// Validate checks the field values on CreateMetricOPS with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateMetricOPS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for NumCoreAttrId

	// no validation rules for NumCPUAttrId

	// no validation rules for CoreFactorAttrId

	// no validation rules for StartEqTypeId

	// no validation rules for BaseEqTypeId

	// no validation rules for AggerateLevelEqTypeId

	// no validation rules for EndEqTypeId

	return nil
}

// CreateMetricOPSValidationError is the validation error returned by
// CreateMetricOPS.Validate if the designated constraints aren't met.
type CreateMetricOPSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricOPSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricOPSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricOPSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricOPSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricOPSValidationError) ErrorName() string { return "CreateMetricOPSValidationError" }

// Error satisfies the builtin error interface
func (e CreateMetricOPSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricOPS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricOPSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricOPSValidationError{}

// Validate checks the field values on CreateMetricNUP with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateMetricNUP) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for NumCoreAttrId

	// no validation rules for NumCPUAttrId

	// no validation rules for CoreFactorAttrId

	// no validation rules for StartEqTypeId

	// no validation rules for BaseEqTypeId

	// no validation rules for AggerateLevelEqTypeId

	// no validation rules for EndEqTypeId

	// no validation rules for NumberOfUsers

	return nil
}

// CreateMetricNUPValidationError is the validation error returned by
// CreateMetricNUP.Validate if the designated constraints aren't met.
type CreateMetricNUPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricNUPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricNUPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricNUPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricNUPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricNUPValidationError) ErrorName() string { return "CreateMetricNUPValidationError" }

// Error satisfies the builtin error interface
func (e CreateMetricNUPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricNUP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricNUPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricNUPValidationError{}

// Validate checks the field values on ScopeFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ScopeFilter) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ScopeFilterValidationError is the validation error returned by
// ScopeFilter.Validate if the designated constraints aren't met.
type ScopeFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeFilterValidationError) ErrorName() string { return "ScopeFilterValidationError" }

// Error satisfies the builtin error interface
func (e ScopeFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeFilterValidationError{}

// Validate checks the field values on AggregationFilter with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AggregationFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NotForMetric

	return nil
}

// AggregationFilterValidationError is the validation error returned by
// AggregationFilter.Validate if the designated constraints aren't met.
type AggregationFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationFilterValidationError) ErrorName() string {
	return "AggregationFilterValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationFilterValidationError{}

// Validate checks the field values on StringFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilteringOrder

	// no validation rules for Filteringkey

	// no validation rules for FilterType

	return nil
}

// StringFilterValidationError is the validation error returned by
// StringFilter.Validate if the designated constraints aren't met.
type StringFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFilterValidationError) ErrorName() string { return "StringFilterValidationError" }

// Error satisfies the builtin error interface
func (e StringFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFilterValidationError{}
