// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: metric.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SortOrder int32

const (
	SortOrder_ASC  SortOrder = 0
	SortOrder_asc  SortOrder = 0
	SortOrder_DESC SortOrder = 1
	SortOrder_desc SortOrder = 1
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "ASC",
		// Duplicate value: 0: "asc",
		1: "DESC",
		// Duplicate value: 1: "desc",
	}
	SortOrder_value = map[string]int32{
		"ASC":  0,
		"asc":  0,
		"DESC": 1,
		"desc": 1,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_metric_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_metric_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{0}
}

type DataTypes int32

const (
	DataTypes_UNKNOWN DataTypes = 0
	DataTypes_STRING  DataTypes = 1
	DataTypes_INT     DataTypes = 2
	DataTypes_FLOAT   DataTypes = 3
)

// Enum value maps for DataTypes.
var (
	DataTypes_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "INT",
		3: "FLOAT",
	}
	DataTypes_value = map[string]int32{
		"UNKNOWN": 0,
		"STRING":  1,
		"INT":     2,
		"FLOAT":   3,
	}
)

func (x DataTypes) Enum() *DataTypes {
	p := new(DataTypes)
	*p = x
	return p
}

func (x DataTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_metric_proto_enumTypes[1].Descriptor()
}

func (DataTypes) Type() protoreflect.EnumType {
	return &file_metric_proto_enumTypes[1]
}

func (x DataTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTypes.Descriptor instead.
func (DataTypes) EnumDescriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{1}
}

type MetricType_Type int32

const (
	MetricType_Unknown          MetricType_Type = 0
	MetricType_Oracle_Processor MetricType_Type = 1
	MetricType_Oracle_NUP       MetricType_Type = 2
	MetricType_SAG_Processor    MetricType_Type = 3
	MetricType_IBM_PVU          MetricType_Type = 4
	MetricType_Attr_Counter     MetricType_Type = 5
	MetricType_Instance_Number  MetricType_Type = 6
	MetricType_Attr_Sum         MetricType_Type = 7
	MetricType_User_Sum         MetricType_Type = 8
	MetricType_Static_Standard  MetricType_Type = 9
	MetricType_Equip_Attr       MetricType_Type = 10
	MetricType_Nominative_User  MetricType_Type = 11
	MetricType_User_Concurent   MetricType_Type = 12
)

// Enum value maps for MetricType_Type.
var (
	MetricType_Type_name = map[int32]string{
		0:  "Unknown",
		1:  "Oracle_Processor",
		2:  "Oracle_NUP",
		3:  "SAG_Processor",
		4:  "IBM_PVU",
		5:  "Attr_Counter",
		6:  "Instance_Number",
		7:  "Attr_Sum",
		8:  "User_Sum",
		9:  "Static_Standard",
		10: "Equip_Attr",
		11: "Nominative_User",
		12: "User_Concurent",
	}
	MetricType_Type_value = map[string]int32{
		"Unknown":          0,
		"Oracle_Processor": 1,
		"Oracle_NUP":       2,
		"SAG_Processor":    3,
		"IBM_PVU":          4,
		"Attr_Counter":     5,
		"Instance_Number":  6,
		"Attr_Sum":         7,
		"User_Sum":         8,
		"Static_Standard":  9,
		"Equip_Attr":       10,
		"Nominative_User":  11,
		"User_Concurent":   12,
	}
)

func (x MetricType_Type) Enum() *MetricType_Type {
	p := new(MetricType_Type)
	*p = x
	return p
}

func (x MetricType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_metric_proto_enumTypes[2].Descriptor()
}

func (MetricType_Type) Type() protoreflect.EnumType {
	return &file_metric_proto_enumTypes[2]
}

func (x MetricType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType_Type.Descriptor instead.
func (MetricType_Type) EnumDescriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{24, 0}
}

type StringFilter_Type int32

const (
	StringFilter_REGEX StringFilter_Type = 0
	StringFilter_EQ    StringFilter_Type = 1
)

// Enum value maps for StringFilter_Type.
var (
	StringFilter_Type_name = map[int32]string{
		0: "REGEX",
		1: "EQ",
	}
	StringFilter_Type_value = map[string]int32{
		"REGEX": 0,
		"EQ":    1,
	}
)

func (x StringFilter_Type) Enum() *StringFilter_Type {
	p := new(StringFilter_Type)
	*p = x
	return p
}

func (x StringFilter_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringFilter_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_metric_proto_enumTypes[3].Descriptor()
}

func (StringFilter_Type) Type() protoreflect.EnumType {
	return &file_metric_proto_enumTypes[3]
}

func (x StringFilter_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StringFilter_Type.Descriptor instead.
func (StringFilter_Type) EnumDescriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{29, 0}
}

type DropMetricDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DropMetricDataRequest) Reset() {
	*x = DropMetricDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropMetricDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropMetricDataRequest) ProtoMessage() {}

func (x *DropMetricDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropMetricDataRequest.ProtoReflect.Descriptor instead.
func (*DropMetricDataRequest) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{0}
}

func (x *DropMetricDataRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DropMetricDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DropMetricDataResponse) Reset() {
	*x = DropMetricDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropMetricDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropMetricDataResponse) ProtoMessage() {}

func (x *DropMetricDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropMetricDataResponse.ProtoReflect.Descriptor instead.
func (*DropMetricDataResponse) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{1}
}

func (x *DropMetricDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName string `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Scope      string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *DeleteMetricRequest) Reset() {
	*x = DeleteMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMetricRequest) ProtoMessage() {}

func (x *DeleteMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMetricRequest.ProtoReflect.Descriptor instead.
func (*DeleteMetricRequest) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteMetricRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *DeleteMetricRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type DeleteMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteMetricResponse) Reset() {
	*x = DeleteMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMetricResponse) ProtoMessage() {}

func (x *DeleteMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMetricResponse.ProtoReflect.Descriptor instead.
func (*DeleteMetricResponse) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteMetricResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CreateMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric        *Metric `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	SenderScope   string  `protobuf:"bytes,2,opt,name=sender_scope,json=senderScope,proto3" json:"sender_scope,omitempty"`
	RecieverScope string  `protobuf:"bytes,3,opt,name=reciever_scope,json=recieverScope,proto3" json:"reciever_scope,omitempty"`
}

func (x *CreateMetricRequest) Reset() {
	*x = CreateMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMetricRequest) ProtoMessage() {}

func (x *CreateMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMetricRequest.ProtoReflect.Descriptor instead.
func (*CreateMetricRequest) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{4}
}

func (x *CreateMetricRequest) GetMetric() *Metric {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *CreateMetricRequest) GetSenderScope() string {
	if x != nil {
		return x.SenderScope
	}
	return ""
}

func (x *CreateMetricRequest) GetRecieverScope() string {
	if x != nil {
		return x.RecieverScope
	}
	return ""
}

type CreateMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CreateMetricResponse) Reset() {
	*x = CreateMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMetricResponse) ProtoMessage() {}

func (x *CreateMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMetricResponse.ProtoReflect.Descriptor instead.
func (*CreateMetricResponse) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{5}
}

func (x *CreateMetricResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetMetricConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricInfo *Metric  `protobuf:"bytes,1,opt,name=metric_info,json=metricInfo,proto3" json:"metric_info,omitempty"`
	GetID      bool     `protobuf:"varint,2,opt,name=GetID,proto3" json:"GetID,omitempty"`
	Scopes     []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *GetMetricConfigurationRequest) Reset() {
	*x = GetMetricConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricConfigurationRequest) ProtoMessage() {}

func (x *GetMetricConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetMetricConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{6}
}

func (x *GetMetricConfigurationRequest) GetMetricInfo() *Metric {
	if x != nil {
		return x.MetricInfo
	}
	return nil
}

func (x *GetMetricConfigurationRequest) GetGetID() bool {
	if x != nil {
		return x.GetID
	}
	return false
}

func (x *GetMetricConfigurationRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GetMetricConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricConfig string `protobuf:"bytes,1,opt,name=metric_config,json=metricConfig,proto3" json:"metric_config,omitempty"`
}

func (x *GetMetricConfigurationResponse) Reset() {
	*x = GetMetricConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricConfigurationResponse) ProtoMessage() {}

func (x *GetMetricConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetMetricConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{7}
}

func (x *GetMetricConfigurationResponse) GetMetricConfig() string {
	if x != nil {
		return x.MetricConfig
	}
	return ""
}

type MetricUSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID     string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name   string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Scopes []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MetricUSS) Reset() {
	*x = MetricUSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricUSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricUSS) ProtoMessage() {}

func (x *MetricUSS) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricUSS.ProtoReflect.Descriptor instead.
func (*MetricUSS) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{8}
}

func (x *MetricUSS) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricUSS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricUSS) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type MetricINM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID               string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name             string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	NumOfDeployments int32    `protobuf:"varint,3,opt,name=num_of_deployments,json=numOfDeployments,proto3" json:"num_of_deployments,omitempty"`
	Scopes           []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MetricINM) Reset() {
	*x = MetricINM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricINM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricINM) ProtoMessage() {}

func (x *MetricINM) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricINM.ProtoReflect.Descriptor instead.
func (*MetricINM) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{9}
}

func (x *MetricINM) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricINM) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricINM) GetNumOfDeployments() int32 {
	if x != nil {
		return x.NumOfDeployments
	}
	return 0
}

func (x *MetricINM) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type MetricSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID             string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ReferenceValue int32    `protobuf:"varint,3,opt,name=reference_value,json=referenceValue,proto3" json:"reference_value,omitempty"`
	Scopes         []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MetricSS) Reset() {
	*x = MetricSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSS) ProtoMessage() {}

func (x *MetricSS) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSS.ProtoReflect.Descriptor instead.
func (*MetricSS) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{10}
}

func (x *MetricSS) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricSS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricSS) GetReferenceValue() int32 {
	if x != nil {
		return x.ReferenceValue
	}
	return 0
}

func (x *MetricSS) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type UpdateMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateMetricResponse) Reset() {
	*x = UpdateMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetricResponse) ProtoMessage() {}

func (x *UpdateMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetricResponse.ProtoReflect.Descriptor instead.
func (*UpdateMetricResponse) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateMetricResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type MetricAttrSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID             string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EqType         string   `protobuf:"bytes,3,opt,name=eq_type,json=eqType,proto3" json:"eq_type,omitempty"`
	AttributeName  string   `protobuf:"bytes,4,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	ReferenceValue float64  `protobuf:"fixed64,5,opt,name=reference_value,json=referenceValue,proto3" json:"reference_value,omitempty"`
	Scopes         []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MetricAttrSum) Reset() {
	*x = MetricAttrSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricAttrSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricAttrSum) ProtoMessage() {}

func (x *MetricAttrSum) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricAttrSum.ProtoReflect.Descriptor instead.
func (*MetricAttrSum) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{12}
}

func (x *MetricAttrSum) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricAttrSum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricAttrSum) GetEqType() string {
	if x != nil {
		return x.EqType
	}
	return ""
}

func (x *MetricAttrSum) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *MetricAttrSum) GetReferenceValue() float64 {
	if x != nil {
		return x.ReferenceValue
	}
	return 0
}

func (x *MetricAttrSum) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type MetricEquipAtt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID            string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EqType        string   `protobuf:"bytes,3,opt,name=eq_type,json=eqType,proto3" json:"eq_type,omitempty"`
	AttributeName string   `protobuf:"bytes,4,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	Environment   string   `protobuf:"bytes,5,opt,name=environment,proto3" json:"environment,omitempty"`
	Value         int32    `protobuf:"varint,6,opt,name=value,proto3" json:"value,omitempty"`
	Scopes        []string `protobuf:"bytes,7,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MetricEquipAtt) Reset() {
	*x = MetricEquipAtt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricEquipAtt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricEquipAtt) ProtoMessage() {}

func (x *MetricEquipAtt) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricEquipAtt.ProtoReflect.Descriptor instead.
func (*MetricEquipAtt) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{13}
}

func (x *MetricEquipAtt) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricEquipAtt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricEquipAtt) GetEqType() string {
	if x != nil {
		return x.EqType
	}
	return ""
}

func (x *MetricEquipAtt) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *MetricEquipAtt) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *MetricEquipAtt) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MetricEquipAtt) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type MetricIPS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID               string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name             string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	NumCoreAttrId    string   `protobuf:"bytes,3,opt,name=num_core_attr_id,json=numCoreAttrId,proto3" json:"num_core_attr_id,omitempty"`
	NumCPUAttrId     string   `protobuf:"bytes,4,opt,name=numCPU_attr_id,json=numCPUAttrId,proto3" json:"numCPU_attr_id,omitempty"`
	CoreFactorAttrId string   `protobuf:"bytes,5,opt,name=core_factor_attr_id,json=coreFactorAttrId,proto3" json:"core_factor_attr_id,omitempty"`
	BaseEqTypeId     string   `protobuf:"bytes,6,opt,name=base_eq_type_id,json=baseEqTypeId,proto3" json:"base_eq_type_id,omitempty"`
	Scopes           []string `protobuf:"bytes,7,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MetricIPS) Reset() {
	*x = MetricIPS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricIPS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricIPS) ProtoMessage() {}

func (x *MetricIPS) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricIPS.ProtoReflect.Descriptor instead.
func (*MetricIPS) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{14}
}

func (x *MetricIPS) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricIPS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricIPS) GetNumCoreAttrId() string {
	if x != nil {
		return x.NumCoreAttrId
	}
	return ""
}

func (x *MetricIPS) GetNumCPUAttrId() string {
	if x != nil {
		return x.NumCPUAttrId
	}
	return ""
}

func (x *MetricIPS) GetCoreFactorAttrId() string {
	if x != nil {
		return x.CoreFactorAttrId
	}
	return ""
}

func (x *MetricIPS) GetBaseEqTypeId() string {
	if x != nil {
		return x.BaseEqTypeId
	}
	return ""
}

func (x *MetricIPS) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type MetricSPS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID               string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name             string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	NumCoreAttrId    string   `protobuf:"bytes,3,opt,name=num_core_attr_id,json=numCoreAttrId,proto3" json:"num_core_attr_id,omitempty"`
	NumCPUAttrId     string   `protobuf:"bytes,4,opt,name=numCPU_attr_id,json=numCPUAttrId,proto3" json:"numCPU_attr_id,omitempty"`
	CoreFactorAttrId string   `protobuf:"bytes,5,opt,name=core_factor_attr_id,json=coreFactorAttrId,proto3" json:"core_factor_attr_id,omitempty"`
	BaseEqTypeId     string   `protobuf:"bytes,6,opt,name=base_eq_type_id,json=baseEqTypeId,proto3" json:"base_eq_type_id,omitempty"`
	Scopes           []string `protobuf:"bytes,7,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MetricSPS) Reset() {
	*x = MetricSPS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSPS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSPS) ProtoMessage() {}

func (x *MetricSPS) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSPS.ProtoReflect.Descriptor instead.
func (*MetricSPS) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{15}
}

func (x *MetricSPS) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricSPS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricSPS) GetNumCoreAttrId() string {
	if x != nil {
		return x.NumCoreAttrId
	}
	return ""
}

func (x *MetricSPS) GetNumCPUAttrId() string {
	if x != nil {
		return x.NumCPUAttrId
	}
	return ""
}

func (x *MetricSPS) GetCoreFactorAttrId() string {
	if x != nil {
		return x.CoreFactorAttrId
	}
	return ""
}

func (x *MetricSPS) GetBaseEqTypeId() string {
	if x != nil {
		return x.BaseEqTypeId
	}
	return ""
}

func (x *MetricSPS) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type MetricACS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID            string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EqType        string   `protobuf:"bytes,3,opt,name=eq_type,json=eqType,proto3" json:"eq_type,omitempty"`
	AttributeName string   `protobuf:"bytes,4,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	Value         string   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Scopes        []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MetricACS) Reset() {
	*x = MetricACS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricACS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricACS) ProtoMessage() {}

func (x *MetricACS) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricACS.ProtoReflect.Descriptor instead.
func (*MetricACS) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{16}
}

func (x *MetricACS) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricACS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricACS) GetEqType() string {
	if x != nil {
		return x.EqType
	}
	return ""
}

func (x *MetricACS) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *MetricACS) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MetricACS) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type MetricUNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID      string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Profile string   `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	Scopes  []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MetricUNS) Reset() {
	*x = MetricUNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricUNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricUNS) ProtoMessage() {}

func (x *MetricUNS) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricUNS.ProtoReflect.Descriptor instead.
func (*MetricUNS) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{17}
}

func (x *MetricUNS) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricUNS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricUNS) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *MetricUNS) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type MetricUCS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID      string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Profile string   `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	Scopes  []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MetricUCS) Reset() {
	*x = MetricUCS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricUCS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricUCS) ProtoMessage() {}

func (x *MetricUCS) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricUCS.ProtoReflect.Descriptor instead.
func (*MetricUCS) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{18}
}

func (x *MetricUCS) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricUCS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricUCS) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *MetricUCS) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListMetricRequest) Reset() {
	*x = ListMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricRequest) ProtoMessage() {}

func (x *ListMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricRequest.ProtoReflect.Descriptor instead.
func (*ListMetricRequest) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{19}
}

func (x *ListMetricRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrices []*Metric `protobuf:"bytes,1,rep,name=metrices,proto3" json:"metrices,omitempty"`
}

func (x *ListMetricResponse) Reset() {
	*x = ListMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricResponse) ProtoMessage() {}

func (x *ListMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricResponse.ProtoReflect.Descriptor instead.
func (*ListMetricResponse) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{20}
}

func (x *ListMetricResponse) GetMetrices() []*Metric {
	if x != nil {
		return x.Metrices
	}
	return nil
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{21}
}

func (x *Metric) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ListMetricTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ListMetricTypeRequest) Reset() {
	*x = ListMetricTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricTypeRequest) ProtoMessage() {}

func (x *ListMetricTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricTypeRequest.ProtoReflect.Descriptor instead.
func (*ListMetricTypeRequest) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{22}
}

func (x *ListMetricTypeRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ListMetricTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []*MetricType `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *ListMetricTypeResponse) Reset() {
	*x = ListMetricTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricTypeResponse) ProtoMessage() {}

func (x *ListMetricTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricTypeResponse.ProtoReflect.Descriptor instead.
func (*ListMetricTypeResponse) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{23}
}

func (x *ListMetricTypeResponse) GetTypes() []*MetricType {
	if x != nil {
		return x.Types
	}
	return nil
}

type MetricType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Href        string          `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty"`
	TypeId      MetricType_Type `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3,enum=optisam.metric.v1.MetricType_Type" json:"type_id,omitempty"`
}

func (x *MetricType) Reset() {
	*x = MetricType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricType) ProtoMessage() {}

func (x *MetricType) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricType.ProtoReflect.Descriptor instead.
func (*MetricType) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{24}
}

func (x *MetricType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MetricType) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *MetricType) GetTypeId() MetricType_Type {
	if x != nil {
		return x.TypeId
	}
	return MetricType_Unknown
}

type MetricOPS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID                    string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                  string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	NumCoreAttrId         string   `protobuf:"bytes,3,opt,name=num_core_attr_id,json=numCoreAttrId,proto3" json:"num_core_attr_id,omitempty"`
	NumCPUAttrId          string   `protobuf:"bytes,4,opt,name=numCPU_attr_id,json=numCPUAttrId,proto3" json:"numCPU_attr_id,omitempty"`
	CoreFactorAttrId      string   `protobuf:"bytes,5,opt,name=core_factor_attr_id,json=coreFactorAttrId,proto3" json:"core_factor_attr_id,omitempty"`
	StartEqTypeId         string   `protobuf:"bytes,6,opt,name=start_eq_type_id,json=startEqTypeId,proto3" json:"start_eq_type_id,omitempty"`
	BaseEqTypeId          string   `protobuf:"bytes,7,opt,name=base_eq_type_id,json=baseEqTypeId,proto3" json:"base_eq_type_id,omitempty"`
	AggerateLevelEqTypeId string   `protobuf:"bytes,8,opt,name=aggerateLevel_eq_type_id,json=aggerateLevelEqTypeId,proto3" json:"aggerateLevel_eq_type_id,omitempty"`
	EndEqTypeId           string   `protobuf:"bytes,9,opt,name=end_eq_type_id,json=endEqTypeId,proto3" json:"end_eq_type_id,omitempty"`
	Scopes                []string `protobuf:"bytes,10,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *MetricOPS) Reset() {
	*x = MetricOPS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricOPS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricOPS) ProtoMessage() {}

func (x *MetricOPS) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricOPS.ProtoReflect.Descriptor instead.
func (*MetricOPS) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{25}
}

func (x *MetricOPS) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricOPS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricOPS) GetNumCoreAttrId() string {
	if x != nil {
		return x.NumCoreAttrId
	}
	return ""
}

func (x *MetricOPS) GetNumCPUAttrId() string {
	if x != nil {
		return x.NumCPUAttrId
	}
	return ""
}

func (x *MetricOPS) GetCoreFactorAttrId() string {
	if x != nil {
		return x.CoreFactorAttrId
	}
	return ""
}

func (x *MetricOPS) GetStartEqTypeId() string {
	if x != nil {
		return x.StartEqTypeId
	}
	return ""
}

func (x *MetricOPS) GetBaseEqTypeId() string {
	if x != nil {
		return x.BaseEqTypeId
	}
	return ""
}

func (x *MetricOPS) GetAggerateLevelEqTypeId() string {
	if x != nil {
		return x.AggerateLevelEqTypeId
	}
	return ""
}

func (x *MetricOPS) GetEndEqTypeId() string {
	if x != nil {
		return x.EndEqTypeId
	}
	return ""
}

func (x *MetricOPS) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type MetricNUP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is not required for creation
	ID                    string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                  string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	NumCoreAttrId         string   `protobuf:"bytes,3,opt,name=num_core_attr_id,json=numCoreAttrId,proto3" json:"num_core_attr_id,omitempty"`
	NumCPUAttrId          string   `protobuf:"bytes,4,opt,name=numCPU_attr_id,json=numCPUAttrId,proto3" json:"numCPU_attr_id,omitempty"`
	CoreFactorAttrId      string   `protobuf:"bytes,5,opt,name=core_factor_attr_id,json=coreFactorAttrId,proto3" json:"core_factor_attr_id,omitempty"`
	StartEqTypeId         string   `protobuf:"bytes,6,opt,name=start_eq_type_id,json=startEqTypeId,proto3" json:"start_eq_type_id,omitempty"`
	BaseEqTypeId          string   `protobuf:"bytes,7,opt,name=base_eq_type_id,json=baseEqTypeId,proto3" json:"base_eq_type_id,omitempty"`
	AggerateLevelEqTypeId string   `protobuf:"bytes,8,opt,name=aggerateLevel_eq_type_id,json=aggerateLevelEqTypeId,proto3" json:"aggerateLevel_eq_type_id,omitempty"`
	EndEqTypeId           string   `protobuf:"bytes,9,opt,name=end_eq_type_id,json=endEqTypeId,proto3" json:"end_eq_type_id,omitempty"`
	NumberOfUsers         uint32   `protobuf:"varint,10,opt,name=number_of_users,json=numberOfUsers,proto3" json:"number_of_users,omitempty"`
	Scopes                []string `protobuf:"bytes,11,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Transform             bool     `protobuf:"varint,12,opt,name=transform,proto3" json:"transform,omitempty"`
	TransformMetricName   string   `protobuf:"bytes,13,opt,name=transform_metric_name,json=transformMetricName,proto3" json:"transform_metric_name,omitempty"`
}

func (x *MetricNUP) Reset() {
	*x = MetricNUP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricNUP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricNUP) ProtoMessage() {}

func (x *MetricNUP) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricNUP.ProtoReflect.Descriptor instead.
func (*MetricNUP) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{26}
}

func (x *MetricNUP) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MetricNUP) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricNUP) GetNumCoreAttrId() string {
	if x != nil {
		return x.NumCoreAttrId
	}
	return ""
}

func (x *MetricNUP) GetNumCPUAttrId() string {
	if x != nil {
		return x.NumCPUAttrId
	}
	return ""
}

func (x *MetricNUP) GetCoreFactorAttrId() string {
	if x != nil {
		return x.CoreFactorAttrId
	}
	return ""
}

func (x *MetricNUP) GetStartEqTypeId() string {
	if x != nil {
		return x.StartEqTypeId
	}
	return ""
}

func (x *MetricNUP) GetBaseEqTypeId() string {
	if x != nil {
		return x.BaseEqTypeId
	}
	return ""
}

func (x *MetricNUP) GetAggerateLevelEqTypeId() string {
	if x != nil {
		return x.AggerateLevelEqTypeId
	}
	return ""
}

func (x *MetricNUP) GetEndEqTypeId() string {
	if x != nil {
		return x.EndEqTypeId
	}
	return ""
}

func (x *MetricNUP) GetNumberOfUsers() uint32 {
	if x != nil {
		return x.NumberOfUsers
	}
	return 0
}

func (x *MetricNUP) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *MetricNUP) GetTransform() bool {
	if x != nil {
		return x.Transform
	}
	return false
}

func (x *MetricNUP) GetTransformMetricName() string {
	if x != nil {
		return x.TransformMetricName
	}
	return ""
}

type ScopeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *ScopeFilter) Reset() {
	*x = ScopeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeFilter) ProtoMessage() {}

func (x *ScopeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeFilter.ProtoReflect.Descriptor instead.
func (*ScopeFilter) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{27}
}

func (x *ScopeFilter) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type AggregationFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not For metric means aggregation for a product should not exist for a given metric
	NotForMetric string `protobuf:"bytes,1,opt,name=NotForMetric,proto3" json:"NotForMetric,omitempty"`
}

func (x *AggregationFilter) Reset() {
	*x = AggregationFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationFilter) ProtoMessage() {}

func (x *AggregationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationFilter.ProtoReflect.Descriptor instead.
func (*AggregationFilter) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{28}
}

func (x *AggregationFilter) GetNotForMetric() string {
	if x != nil {
		return x.NotForMetric
	}
	return ""
}

type StringFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilteringOrder       int32             `protobuf:"varint,1,opt,name=filteringOrder,proto3" json:"filteringOrder,omitempty"`
	Filteringkey         string            `protobuf:"bytes,2,opt,name=filteringkey,proto3" json:"filteringkey,omitempty"`
	FilterType           StringFilter_Type `protobuf:"varint,3,opt,name=filter_type,json=filterType,proto3,enum=optisam.metric.v1.StringFilter_Type" json:"filter_type,omitempty"`
	FilteringkeyMultiple []string          `protobuf:"bytes,4,rep,name=filteringkey_multiple,json=filteringkeyMultiple,proto3" json:"filteringkey_multiple,omitempty"`
}

func (x *StringFilter) Reset() {
	*x = StringFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metric_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFilter) ProtoMessage() {}

func (x *StringFilter) ProtoReflect() protoreflect.Message {
	mi := &file_metric_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFilter.ProtoReflect.Descriptor instead.
func (*StringFilter) Descriptor() ([]byte, []int) {
	return file_metric_proto_rawDescGZIP(), []int{29}
}

func (x *StringFilter) GetFilteringOrder() int32 {
	if x != nil {
		return x.FilteringOrder
	}
	return 0
}

func (x *StringFilter) GetFilteringkey() string {
	if x != nil {
		return x.Filteringkey
	}
	return ""
}

func (x *StringFilter) GetFilterType() StringFilter_Type {
	if x != nil {
		return x.FilterType
	}
	return StringFilter_REGEX
}

func (x *StringFilter) GetFilteringkeyMultiple() []string {
	if x != nil {
		return x.FilteringkeyMultiple
	}
	return nil
}

var File_metric_proto protoreflect.FileDescriptor

var file_metric_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x15, 0x44, 0x72, 0x6f, 0x70,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x16,
	0x44, 0x72, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x7a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x72, 0x12, 0x32, 0x10, 0x5b, 0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x10, 0x03, 0x18, 0x03, 0x32, 0x08, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xbc,
	0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x7d, 0x5c, 0x62, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e,
	0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x30, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0xa2, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x47, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x47, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa,
	0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7b, 0x0a, 0x09, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x53, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x10, 0x01, 0x32,
	0x10, 0x5b, 0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b,
	0x24, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x49, 0x4e, 0x4d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x10, 0x01, 0x32, 0x10, 0x5b,
	0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x4f,
	0x66, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05,
	0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xac, 0x01,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x10,
	0x01, 0x32, 0x10, 0x5b, 0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x2b, 0x24, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72,
	0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf8,
	0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x53, 0x75, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0xfa, 0x42, 0x16, 0x72, 0x14, 0x10, 0x01, 0x32, 0x10, 0x5b, 0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x21,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01,
	0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x0e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x74, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72,
	0x14, 0x10, 0x01, 0x32, 0x10, 0x5b, 0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x71,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x10, 0x01, 0x32, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2c, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x49, 0x50, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x10, 0x01, 0x32, 0x10, 0x5b, 0x2e,
	0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x50, 0x55, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x43, 0x50, 0x55, 0x41, 0x74, 0x74,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x71, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x45, 0x71, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98,
	0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x09, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x50, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x10, 0x01, 0x32,
	0x10, 0x5b, 0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b,
	0x24, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x50, 0x55, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x43, 0x50, 0x55,
	0x41, 0x74, 0x74, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x71,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x45, 0x71, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05,
	0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xd1, 0x01,
	0x0a, 0x09, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x43, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14,
	0x10, 0x01, 0x32, 0x10, 0x5b, 0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x71,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x71, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92,
	0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x4e, 0x53, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x2d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa,
	0x42, 0x16, 0x72, 0x14, 0x10, 0x01, 0x32, 0x10, 0x5b, 0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01,
	0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x55, 0x43, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x10, 0x01, 0x32, 0x10,
	0x5b, 0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92,
	0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x22, 0x4d, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41,
	0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x22, 0x4b, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x52, 0x0a,
	0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x53, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e,
	0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x72,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x12, 0x3b,
	0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x5f, 0x4e, 0x55, 0x50, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x41, 0x47, 0x5f, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x42,
	0x4d, 0x5f, 0x50, 0x56, 0x55, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x72, 0x5f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x74, 0x74, 0x72, 0x5f, 0x53, 0x75, 0x6d, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x5f, 0x53, 0x75, 0x6d, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x10, 0x09, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x10, 0x0a, 0x12,
	0x13, 0x0a, 0x0f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x0c, 0x22, 0xa7, 0x03, 0x0a, 0x09, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4f, 0x50, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x10, 0x01, 0x32, 0x10, 0x5b,
	0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x50, 0x55, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x43, 0x50, 0x55, 0x41, 0x74,
	0x74, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x71, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x45, 0x71, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x67, 0x67, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x67, 0x67, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x45, 0x71, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0e,
	0x65, 0x6e, 0x64, 0x5f, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x71, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x17, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a,
	0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x22, 0xaa, 0x04, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x55, 0x50,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x2d, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0xfa, 0x42, 0x16, 0x72, 0x14, 0x10, 0x01, 0x32, 0x10, 0x5b, 0x2e, 0x2d, 0x5f, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x43, 0x6f,
	0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x43,
	0x50, 0x55, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x43, 0x50, 0x55, 0x41, 0x74, 0x74, 0x72, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x72,
	0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x71,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65,
	0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x45, 0x71, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x61, 0x67, 0x67, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65,
	0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x61, 0x67, 0x67, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x71,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x71,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x45, 0x71, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0d, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05,
	0x72, 0x03, 0x98, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x25, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22,
	0xf1, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x19, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x45,
	0x51, 0x10, 0x01, 0x2a, 0x35, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x73, 0x63,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x10, 0x03, 0x32, 0xf4, 0x20, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x85, 0x01, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x26, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x80, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x50, 0x53, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4f, 0x50, 0x53, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22,
	0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f,
	0x6f, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x1c,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x50, 0x53, 0x1a, 0x27, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x12, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x6f, 0x70,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x32, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x4e, 0x55, 0x50, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12,
	0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x55, 0x50, 0x1a, 0x1c, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x55, 0x50, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x70, 0x3a, 0x01,
	0x2a, 0x12, 0xac, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x4e, 0x55, 0x50, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x55,
	0x50, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3e, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x70, 0x3a, 0x01, 0x2a,
	0x5a, 0x1e, 0x32, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x70, 0x3a, 0x01, 0x2a,
	0x12, 0x7d, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x53, 0x41, 0x47, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x50, 0x53, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x50, 0x53,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x73, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xa1, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x53, 0x41, 0x47, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x50, 0x53, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x1a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2f, 0x73, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x32, 0x12, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x73, 0x70, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x49, 0x42, 0x4d, 0x50, 0x76, 0x75, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x50, 0x53, 0x1a,
	0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x50, 0x53, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x69, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9b, 0x01, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x42, 0x4d,
	0x50, 0x76, 0x75, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x50, 0x53, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x12, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x69, 0x70, 0x73, 0x3a, 0x01,
	0x2a, 0x5a, 0x17, 0x32, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2f, 0x69, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x43, 0x53, 0x1a, 0x1c, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x43, 0x53, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2f, 0x61, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x43, 0x53, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x12, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x61, 0x63, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x17, 0x32, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2f, 0x61, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x22, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x4e, 0x4d, 0x1a,
	0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x4e, 0x4d, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x69, 0x6e, 0x6d, 0x3a, 0x01, 0x2a, 0x12, 0xa3, 0x01, 0x0a,
	0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x4e,
	0x4d, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x1a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2f, 0x69, 0x6e, 0x6d, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x32, 0x12, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x69, 0x6e, 0x6d, 0x3a,
	0x01, 0x2a, 0x12, 0x74, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x53, 0x1a, 0x1b, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x53, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2f, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x53, 0x53, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x1a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x16, 0x32, 0x11, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x73, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x53, 0x53,
	0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x53, 0x53, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x75, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x85, 0x01,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x74,
	0x74, 0x72, 0x53, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x20, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x53, 0x75, 0x6d, 0x1a,
	0x20, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x53, 0x75,
	0x6d, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x73,
	0x75, 0x6d, 0x3a, 0x01, 0x2a, 0x12, 0xaa, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x53, 0x75, 0x6d, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x41, 0x74, 0x74, 0x72, 0x53, 0x75, 0x6d, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x1a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x73, 0x75,
	0x6d, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x32, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x3a,
	0x01, 0x2a, 0x12, 0x8b, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x74, 0x74, 0x72, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x41, 0x74, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x74, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x3a, 0x01, 0x2a,
	0x12, 0xb1, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x74, 0x74, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x41, 0x74, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x3a, 0x01, 0x2a, 0x5a, 0x1e, 0x32, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x4e, 0x53, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x55, 0x4e, 0x53, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x75,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa3, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x4e, 0x53, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x12, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x75, 0x6e, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x17, 0x32, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2f, 0x75, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x43, 0x53, 0x1a,
	0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x43, 0x53, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x3a,
	0x01, 0x2a, 0x12, 0xae, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73,
	0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x55, 0x43, 0x53, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x1a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x32, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x7d, 0x42, 0x2b, 0x5a, 0x29, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metric_proto_rawDescOnce sync.Once
	file_metric_proto_rawDescData = file_metric_proto_rawDesc
)

func file_metric_proto_rawDescGZIP() []byte {
	file_metric_proto_rawDescOnce.Do(func() {
		file_metric_proto_rawDescData = protoimpl.X.CompressGZIP(file_metric_proto_rawDescData)
	})
	return file_metric_proto_rawDescData
}

var file_metric_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_metric_proto_goTypes = []interface{}{
	(SortOrder)(0),                         // 0: optisam.metric.v1.SortOrder
	(DataTypes)(0),                         // 1: optisam.metric.v1.DataTypes
	(MetricType_Type)(0),                   // 2: optisam.metric.v1.MetricType.Type
	(StringFilter_Type)(0),                 // 3: optisam.metric.v1.StringFilter.Type
	(*DropMetricDataRequest)(nil),          // 4: optisam.metric.v1.DropMetricDataRequest
	(*DropMetricDataResponse)(nil),         // 5: optisam.metric.v1.DropMetricDataResponse
	(*DeleteMetricRequest)(nil),            // 6: optisam.metric.v1.DeleteMetricRequest
	(*DeleteMetricResponse)(nil),           // 7: optisam.metric.v1.DeleteMetricResponse
	(*CreateMetricRequest)(nil),            // 8: optisam.metric.v1.CreateMetricRequest
	(*CreateMetricResponse)(nil),           // 9: optisam.metric.v1.CreateMetricResponse
	(*GetMetricConfigurationRequest)(nil),  // 10: optisam.metric.v1.GetMetricConfigurationRequest
	(*GetMetricConfigurationResponse)(nil), // 11: optisam.metric.v1.GetMetricConfigurationResponse
	(*MetricUSS)(nil),                      // 12: optisam.metric.v1.MetricUSS
	(*MetricINM)(nil),                      // 13: optisam.metric.v1.MetricINM
	(*MetricSS)(nil),                       // 14: optisam.metric.v1.MetricSS
	(*UpdateMetricResponse)(nil),           // 15: optisam.metric.v1.UpdateMetricResponse
	(*MetricAttrSum)(nil),                  // 16: optisam.metric.v1.MetricAttrSum
	(*MetricEquipAtt)(nil),                 // 17: optisam.metric.v1.MetricEquipAtt
	(*MetricIPS)(nil),                      // 18: optisam.metric.v1.MetricIPS
	(*MetricSPS)(nil),                      // 19: optisam.metric.v1.MetricSPS
	(*MetricACS)(nil),                      // 20: optisam.metric.v1.MetricACS
	(*MetricUNS)(nil),                      // 21: optisam.metric.v1.MetricUNS
	(*MetricUCS)(nil),                      // 22: optisam.metric.v1.MetricUCS
	(*ListMetricRequest)(nil),              // 23: optisam.metric.v1.ListMetricRequest
	(*ListMetricResponse)(nil),             // 24: optisam.metric.v1.ListMetricResponse
	(*Metric)(nil),                         // 25: optisam.metric.v1.Metric
	(*ListMetricTypeRequest)(nil),          // 26: optisam.metric.v1.ListMetricTypeRequest
	(*ListMetricTypeResponse)(nil),         // 27: optisam.metric.v1.ListMetricTypeResponse
	(*MetricType)(nil),                     // 28: optisam.metric.v1.MetricType
	(*MetricOPS)(nil),                      // 29: optisam.metric.v1.MetricOPS
	(*MetricNUP)(nil),                      // 30: optisam.metric.v1.MetricNUP
	(*ScopeFilter)(nil),                    // 31: optisam.metric.v1.ScopeFilter
	(*AggregationFilter)(nil),              // 32: optisam.metric.v1.AggregationFilter
	(*StringFilter)(nil),                   // 33: optisam.metric.v1.StringFilter
}
var file_metric_proto_depIdxs = []int32{
	25, // 0: optisam.metric.v1.CreateMetricRequest.metric:type_name -> optisam.metric.v1.Metric
	25, // 1: optisam.metric.v1.GetMetricConfigurationRequest.metric_info:type_name -> optisam.metric.v1.Metric
	25, // 2: optisam.metric.v1.ListMetricResponse.metrices:type_name -> optisam.metric.v1.Metric
	28, // 3: optisam.metric.v1.ListMetricTypeResponse.types:type_name -> optisam.metric.v1.MetricType
	2,  // 4: optisam.metric.v1.MetricType.type_id:type_name -> optisam.metric.v1.MetricType.Type
	3,  // 5: optisam.metric.v1.StringFilter.filter_type:type_name -> optisam.metric.v1.StringFilter.Type
	23, // 6: optisam.metric.v1.MetricService.ListMetrices:input_type -> optisam.metric.v1.ListMetricRequest
	6,  // 7: optisam.metric.v1.MetricService.DeleteMetric:input_type -> optisam.metric.v1.DeleteMetricRequest
	26, // 8: optisam.metric.v1.MetricService.ListMetricType:input_type -> optisam.metric.v1.ListMetricTypeRequest
	8,  // 9: optisam.metric.v1.MetricService.CreateMetric:input_type -> optisam.metric.v1.CreateMetricRequest
	29, // 10: optisam.metric.v1.MetricService.CreateMetricOracleProcessorStandard:input_type -> optisam.metric.v1.MetricOPS
	29, // 11: optisam.metric.v1.MetricService.UpdateMetricOracleProcessorStandard:input_type -> optisam.metric.v1.MetricOPS
	30, // 12: optisam.metric.v1.MetricService.CreateMetricOracleNUPStandard:input_type -> optisam.metric.v1.MetricNUP
	30, // 13: optisam.metric.v1.MetricService.UpdateMetricOracleNUPStandard:input_type -> optisam.metric.v1.MetricNUP
	19, // 14: optisam.metric.v1.MetricService.CreateMetricSAGProcessorStandard:input_type -> optisam.metric.v1.MetricSPS
	19, // 15: optisam.metric.v1.MetricService.UpdateMetricSAGProcessorStandard:input_type -> optisam.metric.v1.MetricSPS
	18, // 16: optisam.metric.v1.MetricService.CreateMetricIBMPvuStandard:input_type -> optisam.metric.v1.MetricIPS
	18, // 17: optisam.metric.v1.MetricService.UpdateMetricIBMPvuStandard:input_type -> optisam.metric.v1.MetricIPS
	20, // 18: optisam.metric.v1.MetricService.CreateMetricAttrCounterStandard:input_type -> optisam.metric.v1.MetricACS
	20, // 19: optisam.metric.v1.MetricService.UpdateMetricAttrCounterStandard:input_type -> optisam.metric.v1.MetricACS
	13, // 20: optisam.metric.v1.MetricService.CreateMetricInstanceNumberStandard:input_type -> optisam.metric.v1.MetricINM
	13, // 21: optisam.metric.v1.MetricService.UpdateMetricInstanceNumberStandard:input_type -> optisam.metric.v1.MetricINM
	14, // 22: optisam.metric.v1.MetricService.CreateMetricStaticStandard:input_type -> optisam.metric.v1.MetricSS
	14, // 23: optisam.metric.v1.MetricService.UpdateMetricStaticStandard:input_type -> optisam.metric.v1.MetricSS
	12, // 24: optisam.metric.v1.MetricService.CreateMetricUserSumStandard:input_type -> optisam.metric.v1.MetricUSS
	16, // 25: optisam.metric.v1.MetricService.CreateMetricAttrSumStandard:input_type -> optisam.metric.v1.MetricAttrSum
	16, // 26: optisam.metric.v1.MetricService.UpdateMetricAttrSumStandard:input_type -> optisam.metric.v1.MetricAttrSum
	17, // 27: optisam.metric.v1.MetricService.CreateMetricEquipAttrStandard:input_type -> optisam.metric.v1.MetricEquipAtt
	17, // 28: optisam.metric.v1.MetricService.UpdateMetricEquipAttrStandard:input_type -> optisam.metric.v1.MetricEquipAtt
	21, // 29: optisam.metric.v1.MetricService.CreateMetricUserNominativeStandard:input_type -> optisam.metric.v1.MetricUNS
	21, // 30: optisam.metric.v1.MetricService.UpdateMetricUserNominativeStandard:input_type -> optisam.metric.v1.MetricUNS
	22, // 31: optisam.metric.v1.MetricService.CreateMetricUserConcurentStandard:input_type -> optisam.metric.v1.MetricUCS
	22, // 32: optisam.metric.v1.MetricService.UpdateMetricUserConcurentStandard:input_type -> optisam.metric.v1.MetricUCS
	10, // 33: optisam.metric.v1.MetricService.GetMetricConfiguration:input_type -> optisam.metric.v1.GetMetricConfigurationRequest
	4,  // 34: optisam.metric.v1.MetricService.DropMetricData:input_type -> optisam.metric.v1.DropMetricDataRequest
	24, // 35: optisam.metric.v1.MetricService.ListMetrices:output_type -> optisam.metric.v1.ListMetricResponse
	7,  // 36: optisam.metric.v1.MetricService.DeleteMetric:output_type -> optisam.metric.v1.DeleteMetricResponse
	27, // 37: optisam.metric.v1.MetricService.ListMetricType:output_type -> optisam.metric.v1.ListMetricTypeResponse
	9,  // 38: optisam.metric.v1.MetricService.CreateMetric:output_type -> optisam.metric.v1.CreateMetricResponse
	29, // 39: optisam.metric.v1.MetricService.CreateMetricOracleProcessorStandard:output_type -> optisam.metric.v1.MetricOPS
	15, // 40: optisam.metric.v1.MetricService.UpdateMetricOracleProcessorStandard:output_type -> optisam.metric.v1.UpdateMetricResponse
	30, // 41: optisam.metric.v1.MetricService.CreateMetricOracleNUPStandard:output_type -> optisam.metric.v1.MetricNUP
	15, // 42: optisam.metric.v1.MetricService.UpdateMetricOracleNUPStandard:output_type -> optisam.metric.v1.UpdateMetricResponse
	19, // 43: optisam.metric.v1.MetricService.CreateMetricSAGProcessorStandard:output_type -> optisam.metric.v1.MetricSPS
	15, // 44: optisam.metric.v1.MetricService.UpdateMetricSAGProcessorStandard:output_type -> optisam.metric.v1.UpdateMetricResponse
	18, // 45: optisam.metric.v1.MetricService.CreateMetricIBMPvuStandard:output_type -> optisam.metric.v1.MetricIPS
	15, // 46: optisam.metric.v1.MetricService.UpdateMetricIBMPvuStandard:output_type -> optisam.metric.v1.UpdateMetricResponse
	20, // 47: optisam.metric.v1.MetricService.CreateMetricAttrCounterStandard:output_type -> optisam.metric.v1.MetricACS
	15, // 48: optisam.metric.v1.MetricService.UpdateMetricAttrCounterStandard:output_type -> optisam.metric.v1.UpdateMetricResponse
	13, // 49: optisam.metric.v1.MetricService.CreateMetricInstanceNumberStandard:output_type -> optisam.metric.v1.MetricINM
	15, // 50: optisam.metric.v1.MetricService.UpdateMetricInstanceNumberStandard:output_type -> optisam.metric.v1.UpdateMetricResponse
	14, // 51: optisam.metric.v1.MetricService.CreateMetricStaticStandard:output_type -> optisam.metric.v1.MetricSS
	15, // 52: optisam.metric.v1.MetricService.UpdateMetricStaticStandard:output_type -> optisam.metric.v1.UpdateMetricResponse
	12, // 53: optisam.metric.v1.MetricService.CreateMetricUserSumStandard:output_type -> optisam.metric.v1.MetricUSS
	16, // 54: optisam.metric.v1.MetricService.CreateMetricAttrSumStandard:output_type -> optisam.metric.v1.MetricAttrSum
	15, // 55: optisam.metric.v1.MetricService.UpdateMetricAttrSumStandard:output_type -> optisam.metric.v1.UpdateMetricResponse
	17, // 56: optisam.metric.v1.MetricService.CreateMetricEquipAttrStandard:output_type -> optisam.metric.v1.MetricEquipAtt
	15, // 57: optisam.metric.v1.MetricService.UpdateMetricEquipAttrStandard:output_type -> optisam.metric.v1.UpdateMetricResponse
	21, // 58: optisam.metric.v1.MetricService.CreateMetricUserNominativeStandard:output_type -> optisam.metric.v1.MetricUNS
	15, // 59: optisam.metric.v1.MetricService.UpdateMetricUserNominativeStandard:output_type -> optisam.metric.v1.UpdateMetricResponse
	22, // 60: optisam.metric.v1.MetricService.CreateMetricUserConcurentStandard:output_type -> optisam.metric.v1.MetricUCS
	15, // 61: optisam.metric.v1.MetricService.UpdateMetricUserConcurentStandard:output_type -> optisam.metric.v1.UpdateMetricResponse
	11, // 62: optisam.metric.v1.MetricService.GetMetricConfiguration:output_type -> optisam.metric.v1.GetMetricConfigurationResponse
	5,  // 63: optisam.metric.v1.MetricService.DropMetricData:output_type -> optisam.metric.v1.DropMetricDataResponse
	35, // [35:64] is the sub-list for method output_type
	6,  // [6:35] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_metric_proto_init() }
func file_metric_proto_init() {
	if File_metric_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metric_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropMetricDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropMetricDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricUSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricINM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricAttrSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricEquipAtt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricIPS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSPS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricACS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricUNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricUCS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricOPS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricNUP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metric_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metric_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metric_proto_goTypes,
		DependencyIndexes: file_metric_proto_depIdxs,
		EnumInfos:         file_metric_proto_enumTypes,
		MessageInfos:      file_metric_proto_msgTypes,
	}.Build()
	File_metric_proto = out.File
	file_metric_proto_rawDesc = nil
	file_metric_proto_goTypes = nil
	file_metric_proto_depIdxs = nil
}
