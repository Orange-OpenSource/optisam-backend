// Code generated by MockGen. DO NOT EDIT.
// Source: ../../thirdparty/product-service/pkg/api/v1/product_grpc.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "gitlab.tech.orange/optisam/optisam-it/optisam-services/license-service/thirdparty/product-service/pkg/api/v1"
	grpc "google.golang.org/grpc"
)

// MockProductServiceClient is a mock of ProductServiceClient interface.
type MockProductServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceClientMockRecorder
}

// MockProductServiceClientMockRecorder is the mock recorder for MockProductServiceClient.
type MockProductServiceClientMockRecorder struct {
	mock *MockProductServiceClient
}

// NewMockProductServiceClient creates a new mock instance.
func NewMockProductServiceClient(ctrl *gomock.Controller) *MockProductServiceClient {
	mock := &MockProductServiceClient{ctrl: ctrl}
	mock.recorder = &MockProductServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductServiceClient) EXPECT() *MockProductServiceClientMockRecorder {
	return m.recorder
}

// AggregatedRightDetails mocks base method.
func (m *MockProductServiceClient) AggregatedRightDetails(ctx context.Context, in *v1.AggregatedRightDetailsRequest, opts ...grpc.CallOption) (*v1.AggregatedRightDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AggregatedRightDetails", varargs...)
	ret0, _ := ret[0].(*v1.AggregatedRightDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregatedRightDetails indicates an expected call of AggregatedRightDetails.
func (mr *MockProductServiceClientMockRecorder) AggregatedRightDetails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatedRightDetails", reflect.TypeOf((*MockProductServiceClient)(nil).AggregatedRightDetails), varargs...)
}

// ComplianceAlert mocks base method.
func (m *MockProductServiceClient) ComplianceAlert(ctx context.Context, in *v1.ComplianceAlertRequest, opts ...grpc.CallOption) (*v1.ComplianceAlertResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ComplianceAlert", varargs...)
	ret0, _ := ret[0].(*v1.ComplianceAlertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComplianceAlert indicates an expected call of ComplianceAlert.
func (mr *MockProductServiceClientMockRecorder) ComplianceAlert(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplianceAlert", reflect.TypeOf((*MockProductServiceClient)(nil).ComplianceAlert), varargs...)
}

// ConcurrentUserExport mocks base method.
func (m *MockProductServiceClient) ConcurrentUserExport(ctx context.Context, in *v1.ListConcurrentUsersExportRequest, opts ...grpc.CallOption) (*v1.ListConcurrentUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConcurrentUserExport", varargs...)
	ret0, _ := ret[0].(*v1.ListConcurrentUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConcurrentUserExport indicates an expected call of ConcurrentUserExport.
func (mr *MockProductServiceClientMockRecorder) ConcurrentUserExport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConcurrentUserExport", reflect.TypeOf((*MockProductServiceClient)(nil).ConcurrentUserExport), varargs...)
}

// CounterfeitedProducts mocks base method.
func (m *MockProductServiceClient) CounterfeitedProducts(ctx context.Context, in *v1.CounterfeitedProductsRequest, opts ...grpc.CallOption) (*v1.CounterfeitedProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CounterfeitedProducts", varargs...)
	ret0, _ := ret[0].(*v1.CounterfeitedProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CounterfeitedProducts indicates an expected call of CounterfeitedProducts.
func (mr *MockProductServiceClientMockRecorder) CounterfeitedProducts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterfeitedProducts", reflect.TypeOf((*MockProductServiceClient)(nil).CounterfeitedProducts), varargs...)
}

// CreateAcqRight mocks base method.
func (m *MockProductServiceClient) CreateAcqRight(ctx context.Context, in *v1.AcqRightRequest, opts ...grpc.CallOption) (*v1.AcqRightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAcqRight", varargs...)
	ret0, _ := ret[0].(*v1.AcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAcqRight indicates an expected call of CreateAcqRight.
func (mr *MockProductServiceClientMockRecorder) CreateAcqRight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcqRight", reflect.TypeOf((*MockProductServiceClient)(nil).CreateAcqRight), varargs...)
}

// CreateAggregatedRights mocks base method.
func (m *MockProductServiceClient) CreateAggregatedRights(ctx context.Context, in *v1.AggregatedRightsRequest, opts ...grpc.CallOption) (*v1.AggregatedRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAggregatedRights", varargs...)
	ret0, _ := ret[0].(*v1.AggregatedRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAggregatedRights indicates an expected call of CreateAggregatedRights.
func (mr *MockProductServiceClientMockRecorder) CreateAggregatedRights(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAggregatedRights", reflect.TypeOf((*MockProductServiceClient)(nil).CreateAggregatedRights), varargs...)
}

// CreateAggregation mocks base method.
func (m *MockProductServiceClient) CreateAggregation(ctx context.Context, in *v1.Aggregation, opts ...grpc.CallOption) (*v1.AggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAggregation", varargs...)
	ret0, _ := ret[0].(*v1.AggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAggregation indicates an expected call of CreateAggregation.
func (mr *MockProductServiceClientMockRecorder) CreateAggregation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).CreateAggregation), varargs...)
}

// CreateDashboardUpdateJob mocks base method.
func (m *MockProductServiceClient) CreateDashboardUpdateJob(ctx context.Context, in *v1.CreateDashboardUpdateJobRequest, opts ...grpc.CallOption) (*v1.CreateDashboardUpdateJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDashboardUpdateJob", varargs...)
	ret0, _ := ret[0].(*v1.CreateDashboardUpdateJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboardUpdateJob indicates an expected call of CreateDashboardUpdateJob.
func (mr *MockProductServiceClientMockRecorder) CreateDashboardUpdateJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboardUpdateJob", reflect.TypeOf((*MockProductServiceClient)(nil).CreateDashboardUpdateJob), varargs...)
}

// DashboardOverview mocks base method.
func (m *MockProductServiceClient) DashboardOverview(ctx context.Context, in *v1.DashboardOverviewRequest, opts ...grpc.CallOption) (*v1.DashboardOverviewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DashboardOverview", varargs...)
	ret0, _ := ret[0].(*v1.DashboardOverviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardOverview indicates an expected call of DashboardOverview.
func (mr *MockProductServiceClientMockRecorder) DashboardOverview(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardOverview", reflect.TypeOf((*MockProductServiceClient)(nil).DashboardOverview), varargs...)
}

// DashboardQualityProducts mocks base method.
func (m *MockProductServiceClient) DashboardQualityProducts(ctx context.Context, in *v1.DashboardQualityProductsRequest, opts ...grpc.CallOption) (*v1.DashboardQualityProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DashboardQualityProducts", varargs...)
	ret0, _ := ret[0].(*v1.DashboardQualityProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardQualityProducts indicates an expected call of DashboardQualityProducts.
func (mr *MockProductServiceClientMockRecorder) DashboardQualityProducts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardQualityProducts", reflect.TypeOf((*MockProductServiceClient)(nil).DashboardQualityProducts), varargs...)
}

// DeleteAcqRight mocks base method.
func (m *MockProductServiceClient) DeleteAcqRight(ctx context.Context, in *v1.DeleteAcqRightRequest, opts ...grpc.CallOption) (*v1.DeleteAcqRightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAcqRight", varargs...)
	ret0, _ := ret[0].(*v1.DeleteAcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAcqRight indicates an expected call of DeleteAcqRight.
func (mr *MockProductServiceClientMockRecorder) DeleteAcqRight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcqRight", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteAcqRight), varargs...)
}

// DeleteAggregatedRights mocks base method.
func (m *MockProductServiceClient) DeleteAggregatedRights(ctx context.Context, in *v1.DeleteAggregatedRightsRequest, opts ...grpc.CallOption) (*v1.DeleteAggregatedRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAggregatedRights", varargs...)
	ret0, _ := ret[0].(*v1.DeleteAggregatedRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAggregatedRights indicates an expected call of DeleteAggregatedRights.
func (mr *MockProductServiceClientMockRecorder) DeleteAggregatedRights(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAggregatedRights", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteAggregatedRights), varargs...)
}

// DeleteAggregation mocks base method.
func (m *MockProductServiceClient) DeleteAggregation(ctx context.Context, in *v1.DeleteAggregationRequest, opts ...grpc.CallOption) (*v1.AggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAggregation", varargs...)
	ret0, _ := ret[0].(*v1.AggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAggregation indicates an expected call of DeleteAggregation.
func (mr *MockProductServiceClientMockRecorder) DeleteAggregation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteAggregation), varargs...)
}

// DeleteAllocatedMetricEquipment mocks base method.
func (m *MockProductServiceClient) DeleteAllocatedMetricEquipment(ctx context.Context, in *v1.DropAllocateMetricEquipementRequest, opts ...grpc.CallOption) (*v1.UpsertAllocateMetricEquipementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllocatedMetricEquipment", varargs...)
	ret0, _ := ret[0].(*v1.UpsertAllocateMetricEquipementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllocatedMetricEquipment indicates an expected call of DeleteAllocatedMetricEquipment.
func (mr *MockProductServiceClientMockRecorder) DeleteAllocatedMetricEquipment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllocatedMetricEquipment", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteAllocatedMetricEquipment), varargs...)
}

// DeleteConcurrentUsers mocks base method.
func (m *MockProductServiceClient) DeleteConcurrentUsers(ctx context.Context, in *v1.DeleteConcurrentUsersRequest, opts ...grpc.CallOption) (*v1.DeleteConcurrentUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConcurrentUsers", varargs...)
	ret0, _ := ret[0].(*v1.DeleteConcurrentUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConcurrentUsers indicates an expected call of DeleteConcurrentUsers.
func (mr *MockProductServiceClientMockRecorder) DeleteConcurrentUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConcurrentUsers", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteConcurrentUsers), varargs...)
}

// DeleteNominativeUsers mocks base method.
func (m *MockProductServiceClient) DeleteNominativeUsers(ctx context.Context, in *v1.DeleteNominativeUserRequest, opts ...grpc.CallOption) (*v1.DeleteNominativeUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNominativeUsers", varargs...)
	ret0, _ := ret[0].(*v1.DeleteNominativeUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNominativeUsers indicates an expected call of DeleteNominativeUsers.
func (mr *MockProductServiceClientMockRecorder) DeleteNominativeUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNominativeUsers", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteNominativeUsers), varargs...)
}

// DeleteSharedLicenses mocks base method.
func (m *MockProductServiceClient) DeleteSharedLicenses(ctx context.Context, in *v1.DeleteSharedLicensesRequest, opts ...grpc.CallOption) (*v1.DeleteSharedLicensesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSharedLicenses", varargs...)
	ret0, _ := ret[0].(*v1.DeleteSharedLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSharedLicenses indicates an expected call of DeleteSharedLicenses.
func (mr *MockProductServiceClientMockRecorder) DeleteSharedLicenses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSharedLicenses", reflect.TypeOf((*MockProductServiceClient)(nil).DeleteSharedLicenses), varargs...)
}

// DownloadAcqRightFile mocks base method.
func (m *MockProductServiceClient) DownloadAcqRightFile(ctx context.Context, in *v1.DownloadAcqRightFileRequest, opts ...grpc.CallOption) (*v1.DownloadAcqRightFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadAcqRightFile", varargs...)
	ret0, _ := ret[0].(*v1.DownloadAcqRightFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAcqRightFile indicates an expected call of DownloadAcqRightFile.
func (mr *MockProductServiceClientMockRecorder) DownloadAcqRightFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAcqRightFile", reflect.TypeOf((*MockProductServiceClient)(nil).DownloadAcqRightFile), varargs...)
}

// DownloadAggregatedRightsFile mocks base method.
func (m *MockProductServiceClient) DownloadAggregatedRightsFile(ctx context.Context, in *v1.DownloadAggregatedRightsFileRequest, opts ...grpc.CallOption) (*v1.DownloadAggregatedRightsFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadAggregatedRightsFile", varargs...)
	ret0, _ := ret[0].(*v1.DownloadAggregatedRightsFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAggregatedRightsFile indicates an expected call of DownloadAggregatedRightsFile.
func (mr *MockProductServiceClientMockRecorder) DownloadAggregatedRightsFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAggregatedRightsFile", reflect.TypeOf((*MockProductServiceClient)(nil).DownloadAggregatedRightsFile), varargs...)
}

// DropAggregationData mocks base method.
func (m *MockProductServiceClient) DropAggregationData(ctx context.Context, in *v1.DropAggregationDataRequest, opts ...grpc.CallOption) (*v1.DropAggregationDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropAggregationData", varargs...)
	ret0, _ := ret[0].(*v1.DropAggregationDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropAggregationData indicates an expected call of DropAggregationData.
func (mr *MockProductServiceClientMockRecorder) DropAggregationData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAggregationData", reflect.TypeOf((*MockProductServiceClient)(nil).DropAggregationData), varargs...)
}

// DropProductData mocks base method.
func (m *MockProductServiceClient) DropProductData(ctx context.Context, in *v1.DropProductDataRequest, opts ...grpc.CallOption) (*v1.DropProductDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropProductData", varargs...)
	ret0, _ := ret[0].(*v1.DropProductDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropProductData indicates an expected call of DropProductData.
func (mr *MockProductServiceClientMockRecorder) DropProductData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropProductData", reflect.TypeOf((*MockProductServiceClient)(nil).DropProductData), varargs...)
}

// GetAggregationAcqrightsExpandedView mocks base method.
func (m *MockProductServiceClient) GetAggregationAcqrightsExpandedView(ctx context.Context, in *v1.GetAggregationAcqrightsExpandedViewRequest, opts ...grpc.CallOption) (*v1.GetAggregationAcqrightsExpandedViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregationAcqrightsExpandedView", varargs...)
	ret0, _ := ret[0].(*v1.GetAggregationAcqrightsExpandedViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregationAcqrightsExpandedView indicates an expected call of GetAggregationAcqrightsExpandedView.
func (mr *MockProductServiceClientMockRecorder) GetAggregationAcqrightsExpandedView(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregationAcqrightsExpandedView", reflect.TypeOf((*MockProductServiceClient)(nil).GetAggregationAcqrightsExpandedView), varargs...)
}

// GetAggregationProductsExpandedView mocks base method.
func (m *MockProductServiceClient) GetAggregationProductsExpandedView(ctx context.Context, in *v1.GetAggregationProductsExpandedViewRequest, opts ...grpc.CallOption) (*v1.GetAggregationProductsExpandedViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregationProductsExpandedView", varargs...)
	ret0, _ := ret[0].(*v1.GetAggregationProductsExpandedViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregationProductsExpandedView indicates an expected call of GetAggregationProductsExpandedView.
func (mr *MockProductServiceClientMockRecorder) GetAggregationProductsExpandedView(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregationProductsExpandedView", reflect.TypeOf((*MockProductServiceClient)(nil).GetAggregationProductsExpandedView), varargs...)
}

// GetAllEditorsCatalog mocks base method.
func (m *MockProductServiceClient) GetAllEditorsCatalog(ctx context.Context, in *v1.GetAllEditorsCatalogRequest, opts ...grpc.CallOption) (*v1.GetAllEditorsCatalogResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllEditorsCatalog", varargs...)
	ret0, _ := ret[0].(*v1.GetAllEditorsCatalogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEditorsCatalog indicates an expected call of GetAllEditorsCatalog.
func (mr *MockProductServiceClientMockRecorder) GetAllEditorsCatalog(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEditorsCatalog", reflect.TypeOf((*MockProductServiceClient)(nil).GetAllEditorsCatalog), varargs...)
}

// GetApplicationsByProduct mocks base method.
func (m *MockProductServiceClient) GetApplicationsByProduct(ctx context.Context, in *v1.GetApplicationsByProductRequest, opts ...grpc.CallOption) (*v1.GetApplicationsByProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationsByProduct", varargs...)
	ret0, _ := ret[0].(*v1.GetApplicationsByProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsByProduct indicates an expected call of GetApplicationsByProduct.
func (mr *MockProductServiceClientMockRecorder) GetApplicationsByProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsByProduct", reflect.TypeOf((*MockProductServiceClient)(nil).GetApplicationsByProduct), varargs...)
}

// GetAvailableLicenses mocks base method.
func (m *MockProductServiceClient) GetAvailableLicenses(ctx context.Context, in *v1.GetAvailableLicensesRequest, opts ...grpc.CallOption) (*v1.GetAvailableLicensesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvailableLicenses", varargs...)
	ret0, _ := ret[0].(*v1.GetAvailableLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableLicenses indicates an expected call of GetAvailableLicenses.
func (mr *MockProductServiceClientMockRecorder) GetAvailableLicenses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableLicenses", reflect.TypeOf((*MockProductServiceClient)(nil).GetAvailableLicenses), varargs...)
}

// GetBanner mocks base method.
func (m *MockProductServiceClient) GetBanner(ctx context.Context, in *v1.GetBannerRequest, opts ...grpc.CallOption) (*v1.GetBannerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBanner", varargs...)
	ret0, _ := ret[0].(*v1.GetBannerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanner indicates an expected call of GetBanner.
func (mr *MockProductServiceClientMockRecorder) GetBanner(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanner", reflect.TypeOf((*MockProductServiceClient)(nil).GetBanner), varargs...)
}

// GetConcurrentUsersHistroy mocks base method.
func (m *MockProductServiceClient) GetConcurrentUsersHistroy(ctx context.Context, in *v1.GetConcurrentUsersHistroyRequest, opts ...grpc.CallOption) (*v1.GetConcurrentUsersHistroyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConcurrentUsersHistroy", varargs...)
	ret0, _ := ret[0].(*v1.GetConcurrentUsersHistroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConcurrentUsersHistroy indicates an expected call of GetConcurrentUsersHistroy.
func (mr *MockProductServiceClientMockRecorder) GetConcurrentUsersHistroy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConcurrentUsersHistroy", reflect.TypeOf((*MockProductServiceClient)(nil).GetConcurrentUsersHistroy), varargs...)
}

// GetEditorExpensesByScope mocks base method.
func (m *MockProductServiceClient) GetEditorExpensesByScope(ctx context.Context, in *v1.EditorExpensesByScopeRequest, opts ...grpc.CallOption) (*v1.EditorExpensesByScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEditorExpensesByScope", varargs...)
	ret0, _ := ret[0].(*v1.EditorExpensesByScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorExpensesByScope indicates an expected call of GetEditorExpensesByScope.
func (mr *MockProductServiceClientMockRecorder) GetEditorExpensesByScope(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorExpensesByScope", reflect.TypeOf((*MockProductServiceClient)(nil).GetEditorExpensesByScope), varargs...)
}

// GetEditorProductExpensesByScope mocks base method.
func (m *MockProductServiceClient) GetEditorProductExpensesByScope(ctx context.Context, in *v1.EditorProductsExpensesByScopeRequest, opts ...grpc.CallOption) (*v1.EditorProductExpensesByScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEditorProductExpensesByScope", varargs...)
	ret0, _ := ret[0].(*v1.EditorProductExpensesByScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorProductExpensesByScope indicates an expected call of GetEditorProductExpensesByScope.
func (mr *MockProductServiceClientMockRecorder) GetEditorProductExpensesByScope(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorProductExpensesByScope", reflect.TypeOf((*MockProductServiceClient)(nil).GetEditorProductExpensesByScope), varargs...)
}

// GetEquipmentsByProduct mocks base method.
func (m *MockProductServiceClient) GetEquipmentsByProduct(ctx context.Context, in *v1.GetEquipmentsByProductRequest, opts ...grpc.CallOption) (*v1.GetEquipmentsByProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEquipmentsByProduct", varargs...)
	ret0, _ := ret[0].(*v1.GetEquipmentsByProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEquipmentsByProduct indicates an expected call of GetEquipmentsByProduct.
func (mr *MockProductServiceClientMockRecorder) GetEquipmentsByProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEquipmentsByProduct", reflect.TypeOf((*MockProductServiceClient)(nil).GetEquipmentsByProduct), varargs...)
}

// GetMaintenanceBySwidtag mocks base method.
func (m *MockProductServiceClient) GetMaintenanceBySwidtag(ctx context.Context, in *v1.GetMaintenanceBySwidtagRequest, opts ...grpc.CallOption) (*v1.GetMaintenanceBySwidtagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaintenanceBySwidtag", varargs...)
	ret0, _ := ret[0].(*v1.GetMaintenanceBySwidtagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaintenanceBySwidtag indicates an expected call of GetMaintenanceBySwidtag.
func (mr *MockProductServiceClientMockRecorder) GetMaintenanceBySwidtag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceBySwidtag", reflect.TypeOf((*MockProductServiceClient)(nil).GetMaintenanceBySwidtag), varargs...)
}

// GetMetric mocks base method.
func (m *MockProductServiceClient) GetMetric(ctx context.Context, in *v1.GetMetricRequest, opts ...grpc.CallOption) (*v1.GetMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetric", varargs...)
	ret0, _ := ret[0].(*v1.GetMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockProductServiceClientMockRecorder) GetMetric(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockProductServiceClient)(nil).GetMetric), varargs...)
}

// GetProductCountByApp mocks base method.
func (m *MockProductServiceClient) GetProductCountByApp(ctx context.Context, in *v1.GetProductCountByAppRequest, opts ...grpc.CallOption) (*v1.GetProductCountByAppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductCountByApp", varargs...)
	ret0, _ := ret[0].(*v1.GetProductCountByAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCountByApp indicates an expected call of GetProductCountByApp.
func (mr *MockProductServiceClientMockRecorder) GetProductCountByApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCountByApp", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductCountByApp), varargs...)
}

// GetProductDetail mocks base method.
func (m *MockProductServiceClient) GetProductDetail(ctx context.Context, in *v1.ProductRequest, opts ...grpc.CallOption) (*v1.ProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductDetail", varargs...)
	ret0, _ := ret[0].(*v1.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetail indicates an expected call of GetProductDetail.
func (mr *MockProductServiceClientMockRecorder) GetProductDetail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetail", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductDetail), varargs...)
}

// GetProductListByEditor mocks base method.
func (m *MockProductServiceClient) GetProductListByEditor(ctx context.Context, in *v1.GetProductListByEditorRequest, opts ...grpc.CallOption) (*v1.GetProductListByEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductListByEditor", varargs...)
	ret0, _ := ret[0].(*v1.GetProductListByEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductListByEditor indicates an expected call of GetProductListByEditor.
func (mr *MockProductServiceClientMockRecorder) GetProductListByEditor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductListByEditor", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductListByEditor), varargs...)
}

// GetProductOptions mocks base method.
func (m *MockProductServiceClient) GetProductOptions(ctx context.Context, in *v1.ProductRequest, opts ...grpc.CallOption) (*v1.ProductOptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductOptions", varargs...)
	ret0, _ := ret[0].(*v1.ProductOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductOptions indicates an expected call of GetProductOptions.
func (mr *MockProductServiceClientMockRecorder) GetProductOptions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductOptions", reflect.TypeOf((*MockProductServiceClient)(nil).GetProductOptions), varargs...)
}

// GetRightsInfoByEditor mocks base method.
func (m *MockProductServiceClient) GetRightsInfoByEditor(ctx context.Context, in *v1.GetRightsInfoByEditorRequest, opts ...grpc.CallOption) (*v1.GetRightsInfoByEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRightsInfoByEditor", varargs...)
	ret0, _ := ret[0].(*v1.GetRightsInfoByEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRightsInfoByEditor indicates an expected call of GetRightsInfoByEditor.
func (mr *MockProductServiceClientMockRecorder) GetRightsInfoByEditor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRightsInfoByEditor", reflect.TypeOf((*MockProductServiceClient)(nil).GetRightsInfoByEditor), varargs...)
}

// GetTotalSharedAmount mocks base method.
func (m *MockProductServiceClient) GetTotalSharedAmount(ctx context.Context, in *v1.GetTotalSharedAmountRequest, opts ...grpc.CallOption) (*v1.GetTotalSharedAmountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTotalSharedAmount", varargs...)
	ret0, _ := ret[0].(*v1.GetTotalSharedAmountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSharedAmount indicates an expected call of GetTotalSharedAmount.
func (mr *MockProductServiceClientMockRecorder) GetTotalSharedAmount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSharedAmount", reflect.TypeOf((*MockProductServiceClient)(nil).GetTotalSharedAmount), varargs...)
}

// GetTrueUpLicences mocks base method.
func (m *MockProductServiceClient) GetTrueUpLicences(ctx context.Context, in *v1.GetTrueUpLicencesRequest, opts ...grpc.CallOption) (*v1.GetTrueUpLicencesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrueUpLicences", varargs...)
	ret0, _ := ret[0].(*v1.GetTrueUpLicencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrueUpLicences indicates an expected call of GetTrueUpLicences.
func (mr *MockProductServiceClientMockRecorder) GetTrueUpLicences(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrueUpLicences", reflect.TypeOf((*MockProductServiceClient)(nil).GetTrueUpLicences), varargs...)
}

// GetUnderusageLicenceByEditorProduct mocks base method.
func (m *MockProductServiceClient) GetUnderusageLicenceByEditorProduct(ctx context.Context, in *v1.GetUnderusageByEditorRequest, opts ...grpc.CallOption) (*v1.GetUnderusageByEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUnderusageLicenceByEditorProduct", varargs...)
	ret0, _ := ret[0].(*v1.GetUnderusageByEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnderusageLicenceByEditorProduct indicates an expected call of GetUnderusageLicenceByEditorProduct.
func (mr *MockProductServiceClientMockRecorder) GetUnderusageLicenceByEditorProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnderusageLicenceByEditorProduct", reflect.TypeOf((*MockProductServiceClient)(nil).GetUnderusageLicenceByEditorProduct), varargs...)
}

// GetWasteUpLicences mocks base method.
func (m *MockProductServiceClient) GetWasteUpLicences(ctx context.Context, in *v1.GetWasteUpLicencesRequest, opts ...grpc.CallOption) (*v1.GetWasteUpLicencesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWasteUpLicences", varargs...)
	ret0, _ := ret[0].(*v1.GetWasteUpLicencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWasteUpLicences indicates an expected call of GetWasteUpLicences.
func (mr *MockProductServiceClientMockRecorder) GetWasteUpLicences(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWasteUpLicences", reflect.TypeOf((*MockProductServiceClient)(nil).GetWasteUpLicences), varargs...)
}

// GroupComplianceEditorCost mocks base method.
func (m *MockProductServiceClient) GroupComplianceEditorCost(ctx context.Context, in *v1.GroupComplianceEditorRequest, opts ...grpc.CallOption) (*v1.GroupComplianceEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupComplianceEditorCost", varargs...)
	ret0, _ := ret[0].(*v1.GroupComplianceEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupComplianceEditorCost indicates an expected call of GroupComplianceEditorCost.
func (mr *MockProductServiceClientMockRecorder) GroupComplianceEditorCost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupComplianceEditorCost", reflect.TypeOf((*MockProductServiceClient)(nil).GroupComplianceEditorCost), varargs...)
}

// GroupComplianceProduct mocks base method.
func (m *MockProductServiceClient) GroupComplianceProduct(ctx context.Context, in *v1.GroupComplianceProductRequest, opts ...grpc.CallOption) (*v1.GroupComplianceProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupComplianceProduct", varargs...)
	ret0, _ := ret[0].(*v1.GroupComplianceProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupComplianceProduct indicates an expected call of GroupComplianceProduct.
func (mr *MockProductServiceClientMockRecorder) GroupComplianceProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupComplianceProduct", reflect.TypeOf((*MockProductServiceClient)(nil).GroupComplianceProduct), varargs...)
}

// ListAcqRights mocks base method.
func (m *MockProductServiceClient) ListAcqRights(ctx context.Context, in *v1.ListAcqRightsRequest, opts ...grpc.CallOption) (*v1.ListAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRights", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRights indicates an expected call of ListAcqRights.
func (mr *MockProductServiceClientMockRecorder) ListAcqRights(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRights", reflect.TypeOf((*MockProductServiceClient)(nil).ListAcqRights), varargs...)
}

// ListAggregatedAcqRights mocks base method.
func (m *MockProductServiceClient) ListAggregatedAcqRights(ctx context.Context, in *v1.ListAggregatedAcqRightsRequest, opts ...grpc.CallOption) (*v1.ListAggregatedAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregatedAcqRights", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregatedAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregatedAcqRights indicates an expected call of ListAggregatedAcqRights.
func (mr *MockProductServiceClientMockRecorder) ListAggregatedAcqRights(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedAcqRights", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregatedAcqRights), varargs...)
}

// ListAggregationEditors mocks base method.
func (m *MockProductServiceClient) ListAggregationEditors(ctx context.Context, in *v1.ListAggregationEditorsRequest, opts ...grpc.CallOption) (*v1.ListAggregationEditorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregationEditors", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregationEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregationEditors indicates an expected call of ListAggregationEditors.
func (mr *MockProductServiceClientMockRecorder) ListAggregationEditors(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregationEditors", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregationEditors), varargs...)
}

// ListAggregationProducts mocks base method.
func (m *MockProductServiceClient) ListAggregationProducts(ctx context.Context, in *v1.ListAggregationProductsRequest, opts ...grpc.CallOption) (*v1.ListAggregationProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregationProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregationProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregationProducts indicates an expected call of ListAggregationProducts.
func (mr *MockProductServiceClientMockRecorder) ListAggregationProducts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregationProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregationProducts), varargs...)
}

// ListAggregations mocks base method.
func (m *MockProductServiceClient) ListAggregations(ctx context.Context, in *v1.ListAggregationsRequest, opts ...grpc.CallOption) (*v1.ListAggregationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregations", varargs...)
	ret0, _ := ret[0].(*v1.ListAggregationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregations indicates an expected call of ListAggregations.
func (mr *MockProductServiceClientMockRecorder) ListAggregations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregations", reflect.TypeOf((*MockProductServiceClient)(nil).ListAggregations), varargs...)
}

// ListConcurrentUsers mocks base method.
func (m *MockProductServiceClient) ListConcurrentUsers(ctx context.Context, in *v1.ListConcurrentUsersRequest, opts ...grpc.CallOption) (*v1.ListConcurrentUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConcurrentUsers", varargs...)
	ret0, _ := ret[0].(*v1.ListConcurrentUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConcurrentUsers indicates an expected call of ListConcurrentUsers.
func (mr *MockProductServiceClientMockRecorder) ListConcurrentUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConcurrentUsers", reflect.TypeOf((*MockProductServiceClient)(nil).ListConcurrentUsers), varargs...)
}

// ListDeployedAndAcquiredEditors mocks base method.
func (m *MockProductServiceClient) ListDeployedAndAcquiredEditors(ctx context.Context, in *v1.ListDeployedAndAcquiredEditorsRequest, opts ...grpc.CallOption) (*v1.ListEditorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeployedAndAcquiredEditors", varargs...)
	ret0, _ := ret[0].(*v1.ListEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployedAndAcquiredEditors indicates an expected call of ListDeployedAndAcquiredEditors.
func (mr *MockProductServiceClientMockRecorder) ListDeployedAndAcquiredEditors(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployedAndAcquiredEditors", reflect.TypeOf((*MockProductServiceClient)(nil).ListDeployedAndAcquiredEditors), varargs...)
}

// ListEditorProducts mocks base method.
func (m *MockProductServiceClient) ListEditorProducts(ctx context.Context, in *v1.ListEditorProductsRequest, opts ...grpc.CallOption) (*v1.ListEditorProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEditorProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListEditorProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditorProducts indicates an expected call of ListEditorProducts.
func (mr *MockProductServiceClientMockRecorder) ListEditorProducts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditorProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListEditorProducts), varargs...)
}

// ListEditors mocks base method.
func (m *MockProductServiceClient) ListEditors(ctx context.Context, in *v1.ListEditorsRequest, opts ...grpc.CallOption) (*v1.ListEditorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEditors", varargs...)
	ret0, _ := ret[0].(*v1.ListEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditors indicates an expected call of ListEditors.
func (mr *MockProductServiceClientMockRecorder) ListEditors(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditors", reflect.TypeOf((*MockProductServiceClient)(nil).ListEditors), varargs...)
}

// ListNominativeUser mocks base method.
func (m *MockProductServiceClient) ListNominativeUser(ctx context.Context, in *v1.ListNominativeUsersRequest, opts ...grpc.CallOption) (*v1.ListNominativeUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNominativeUser", varargs...)
	ret0, _ := ret[0].(*v1.ListNominativeUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNominativeUser indicates an expected call of ListNominativeUser.
func (mr *MockProductServiceClientMockRecorder) ListNominativeUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNominativeUser", reflect.TypeOf((*MockProductServiceClient)(nil).ListNominativeUser), varargs...)
}

// ListNominativeUserFileUpload mocks base method.
func (m *MockProductServiceClient) ListNominativeUserFileUpload(ctx context.Context, in *v1.ListNominativeUsersFileUploadRequest, opts ...grpc.CallOption) (*v1.ListNominativeUsersFileUploadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNominativeUserFileUpload", varargs...)
	ret0, _ := ret[0].(*v1.ListNominativeUsersFileUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNominativeUserFileUpload indicates an expected call of ListNominativeUserFileUpload.
func (mr *MockProductServiceClientMockRecorder) ListNominativeUserFileUpload(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNominativeUserFileUpload", reflect.TypeOf((*MockProductServiceClient)(nil).ListNominativeUserFileUpload), varargs...)
}

// ListProductAggregationView mocks base method.
func (m *MockProductServiceClient) ListProductAggregationView(ctx context.Context, in *v1.ListProductAggregationViewRequest, opts ...grpc.CallOption) (*v1.ListProductAggregationViewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProductAggregationView", varargs...)
	ret0, _ := ret[0].(*v1.ListProductAggregationViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductAggregationView indicates an expected call of ListProductAggregationView.
func (mr *MockProductServiceClientMockRecorder) ListProductAggregationView(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductAggregationView", reflect.TypeOf((*MockProductServiceClient)(nil).ListProductAggregationView), varargs...)
}

// ListProducts mocks base method.
func (m *MockProductServiceClient) ListProducts(ctx context.Context, in *v1.ListProductsRequest, opts ...grpc.CallOption) (*v1.ListProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProducts", varargs...)
	ret0, _ := ret[0].(*v1.ListProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockProductServiceClientMockRecorder) ListProducts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockProductServiceClient)(nil).ListProducts), varargs...)
}

// NominativeUserExport mocks base method.
func (m *MockProductServiceClient) NominativeUserExport(ctx context.Context, in *v1.NominativeUsersExportRequest, opts ...grpc.CallOption) (*v1.ListNominativeUsersExportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NominativeUserExport", varargs...)
	ret0, _ := ret[0].(*v1.ListNominativeUsersExportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NominativeUserExport indicates an expected call of NominativeUserExport.
func (mr *MockProductServiceClientMockRecorder) NominativeUserExport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NominativeUserExport", reflect.TypeOf((*MockProductServiceClient)(nil).NominativeUserExport), varargs...)
}

// OverdeployedProducts mocks base method.
func (m *MockProductServiceClient) OverdeployedProducts(ctx context.Context, in *v1.OverdeployedProductsRequest, opts ...grpc.CallOption) (*v1.OverdeployedProductsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OverdeployedProducts", varargs...)
	ret0, _ := ret[0].(*v1.OverdeployedProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverdeployedProducts indicates an expected call of OverdeployedProducts.
func (mr *MockProductServiceClientMockRecorder) OverdeployedProducts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverdeployedProducts", reflect.TypeOf((*MockProductServiceClient)(nil).OverdeployedProducts), varargs...)
}

// OverviewProductQuality mocks base method.
func (m *MockProductServiceClient) OverviewProductQuality(ctx context.Context, in *v1.OverviewProductQualityRequest, opts ...grpc.CallOption) (*v1.OverviewProductQualityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OverviewProductQuality", varargs...)
	ret0, _ := ret[0].(*v1.OverviewProductQualityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverviewProductQuality indicates an expected call of OverviewProductQuality.
func (mr *MockProductServiceClientMockRecorder) OverviewProductQuality(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverviewProductQuality", reflect.TypeOf((*MockProductServiceClient)(nil).OverviewProductQuality), varargs...)
}

// ProductLocationType mocks base method.
func (m *MockProductServiceClient) ProductLocationType(ctx context.Context, in *v1.GetDeploymentTypeRequest, opts ...grpc.CallOption) (*v1.GetDeploymentTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductLocationType", varargs...)
	ret0, _ := ret[0].(*v1.GetDeploymentTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductLocationType indicates an expected call of ProductLocationType.
func (mr *MockProductServiceClientMockRecorder) ProductLocationType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductLocationType", reflect.TypeOf((*MockProductServiceClient)(nil).ProductLocationType), varargs...)
}

// ProductMaintenancePerc mocks base method.
func (m *MockProductServiceClient) ProductMaintenancePerc(ctx context.Context, in *v1.ProductMaintenancePercRequest, opts ...grpc.CallOption) (*v1.ProductMaintenancePercResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductMaintenancePerc", varargs...)
	ret0, _ := ret[0].(*v1.ProductMaintenancePercResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductMaintenancePerc indicates an expected call of ProductMaintenancePerc.
func (mr *MockProductServiceClientMockRecorder) ProductMaintenancePerc(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductMaintenancePerc", reflect.TypeOf((*MockProductServiceClient)(nil).ProductMaintenancePerc), varargs...)
}

// ProductNoMaintenanceDetails mocks base method.
func (m *MockProductServiceClient) ProductNoMaintenanceDetails(ctx context.Context, in *v1.ProductNoMaintenanceDetailsRequest, opts ...grpc.CallOption) (*v1.ProductNoMaintenanceDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductNoMaintenanceDetails", varargs...)
	ret0, _ := ret[0].(*v1.ProductNoMaintenanceDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductNoMaintenanceDetails indicates an expected call of ProductNoMaintenanceDetails.
func (mr *MockProductServiceClientMockRecorder) ProductNoMaintenanceDetails(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductNoMaintenanceDetails", reflect.TypeOf((*MockProductServiceClient)(nil).ProductNoMaintenanceDetails), varargs...)
}

// ProductsPerEditor mocks base method.
func (m *MockProductServiceClient) ProductsPerEditor(ctx context.Context, in *v1.ProductsPerEditorRequest, opts ...grpc.CallOption) (*v1.ProductsPerEditorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductsPerEditor", varargs...)
	ret0, _ := ret[0].(*v1.ProductsPerEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPerEditor indicates an expected call of ProductsPerEditor.
func (mr *MockProductServiceClientMockRecorder) ProductsPerEditor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPerEditor", reflect.TypeOf((*MockProductServiceClient)(nil).ProductsPerEditor), varargs...)
}

// ProductsPerMetricType mocks base method.
func (m *MockProductServiceClient) ProductsPerMetricType(ctx context.Context, in *v1.ProductsPerMetricTypeRequest, opts ...grpc.CallOption) (*v1.ProductsPerMetricTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductsPerMetricType", varargs...)
	ret0, _ := ret[0].(*v1.ProductsPerMetricTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPerMetricType indicates an expected call of ProductsPerMetricType.
func (mr *MockProductServiceClientMockRecorder) ProductsPerMetricType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPerMetricType", reflect.TypeOf((*MockProductServiceClient)(nil).ProductsPerMetricType), varargs...)
}

// ProductsPercOpenClosedSource mocks base method.
func (m *MockProductServiceClient) ProductsPercOpenClosedSource(ctx context.Context, in *v1.ProductsPercOpenClosedSourceRequest, opts ...grpc.CallOption) (*v1.ProductsPercOpenClosedSourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductsPercOpenClosedSource", varargs...)
	ret0, _ := ret[0].(*v1.ProductsPercOpenClosedSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPercOpenClosedSource indicates an expected call of ProductsPercOpenClosedSource.
func (mr *MockProductServiceClientMockRecorder) ProductsPercOpenClosedSource(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPercOpenClosedSource", reflect.TypeOf((*MockProductServiceClient)(nil).ProductsPercOpenClosedSource), varargs...)
}

// SoftwareExpenditureByScope mocks base method.
func (m *MockProductServiceClient) SoftwareExpenditureByScope(ctx context.Context, in *v1.SoftwareExpenditureByScopeRequest, opts ...grpc.CallOption) (*v1.SoftwareExpenditureByScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SoftwareExpenditureByScope", varargs...)
	ret0, _ := ret[0].(*v1.SoftwareExpenditureByScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwareExpenditureByScope indicates an expected call of SoftwareExpenditureByScope.
func (mr *MockProductServiceClientMockRecorder) SoftwareExpenditureByScope(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwareExpenditureByScope", reflect.TypeOf((*MockProductServiceClient)(nil).SoftwareExpenditureByScope), varargs...)
}

// UpdateAcqRight mocks base method.
func (m *MockProductServiceClient) UpdateAcqRight(ctx context.Context, in *v1.AcqRightRequest, opts ...grpc.CallOption) (*v1.AcqRightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAcqRight", varargs...)
	ret0, _ := ret[0].(*v1.AcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcqRight indicates an expected call of UpdateAcqRight.
func (mr *MockProductServiceClientMockRecorder) UpdateAcqRight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcqRight", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAcqRight), varargs...)
}

// UpdateAcqrightsSharedLicenses mocks base method.
func (m *MockProductServiceClient) UpdateAcqrightsSharedLicenses(ctx context.Context, in *v1.UpdateSharedLicensesRequest, opts ...grpc.CallOption) (*v1.UpdateSharedLicensesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAcqrightsSharedLicenses", varargs...)
	ret0, _ := ret[0].(*v1.UpdateSharedLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcqrightsSharedLicenses indicates an expected call of UpdateAcqrightsSharedLicenses.
func (mr *MockProductServiceClientMockRecorder) UpdateAcqrightsSharedLicenses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcqrightsSharedLicenses", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAcqrightsSharedLicenses), varargs...)
}

// UpdateAggregatedRights mocks base method.
func (m *MockProductServiceClient) UpdateAggregatedRights(ctx context.Context, in *v1.AggregatedRightsRequest, opts ...grpc.CallOption) (*v1.AggregatedRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAggregatedRights", varargs...)
	ret0, _ := ret[0].(*v1.AggregatedRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAggregatedRights indicates an expected call of UpdateAggregatedRights.
func (mr *MockProductServiceClientMockRecorder) UpdateAggregatedRights(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAggregatedRights", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAggregatedRights), varargs...)
}

// UpdateAggregation mocks base method.
func (m *MockProductServiceClient) UpdateAggregation(ctx context.Context, in *v1.Aggregation, opts ...grpc.CallOption) (*v1.AggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAggregation", varargs...)
	ret0, _ := ret[0].(*v1.AggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAggregation indicates an expected call of UpdateAggregation.
func (mr *MockProductServiceClientMockRecorder) UpdateAggregation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAggregation", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAggregation), varargs...)
}

// UpdateAggrightsSharedLicenses mocks base method.
func (m *MockProductServiceClient) UpdateAggrightsSharedLicenses(ctx context.Context, in *v1.UpdateAggrightsSharedLicensesRequest, opts ...grpc.CallOption) (*v1.UpdateSharedLicensesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAggrightsSharedLicenses", varargs...)
	ret0, _ := ret[0].(*v1.UpdateSharedLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAggrightsSharedLicenses indicates an expected call of UpdateAggrightsSharedLicenses.
func (mr *MockProductServiceClientMockRecorder) UpdateAggrightsSharedLicenses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAggrightsSharedLicenses", reflect.TypeOf((*MockProductServiceClient)(nil).UpdateAggrightsSharedLicenses), varargs...)
}

// UpsertAcqRights mocks base method.
func (m *MockProductServiceClient) UpsertAcqRights(ctx context.Context, in *v1.UpsertAcqRightsRequest, opts ...grpc.CallOption) (*v1.UpsertAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAcqRights", varargs...)
	ret0, _ := ret[0].(*v1.UpsertAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAcqRights indicates an expected call of UpsertAcqRights.
func (mr *MockProductServiceClientMockRecorder) UpsertAcqRights(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAcqRights", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertAcqRights), varargs...)
}

// UpsertAllocatedMetricEquipment mocks base method.
func (m *MockProductServiceClient) UpsertAllocatedMetricEquipment(ctx context.Context, in *v1.UpsertAllocateMetricEquipementRequest, opts ...grpc.CallOption) (*v1.UpsertAllocateMetricEquipementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAllocatedMetricEquipment", varargs...)
	ret0, _ := ret[0].(*v1.UpsertAllocateMetricEquipementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAllocatedMetricEquipment indicates an expected call of UpsertAllocatedMetricEquipment.
func (mr *MockProductServiceClientMockRecorder) UpsertAllocatedMetricEquipment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAllocatedMetricEquipment", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertAllocatedMetricEquipment), varargs...)
}

// UpsertNominativeUser mocks base method.
func (m *MockProductServiceClient) UpsertNominativeUser(ctx context.Context, in *v1.UpserNominativeUserRequest, opts ...grpc.CallOption) (*v1.UpserNominativeUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertNominativeUser", varargs...)
	ret0, _ := ret[0].(*v1.UpserNominativeUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertNominativeUser indicates an expected call of UpsertNominativeUser.
func (mr *MockProductServiceClientMockRecorder) UpsertNominativeUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNominativeUser", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertNominativeUser), varargs...)
}

// UpsertProduct mocks base method.
func (m *MockProductServiceClient) UpsertProduct(ctx context.Context, in *v1.UpsertProductRequest, opts ...grpc.CallOption) (*v1.UpsertProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertProduct", varargs...)
	ret0, _ := ret[0].(*v1.UpsertProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProduct indicates an expected call of UpsertProduct.
func (mr *MockProductServiceClientMockRecorder) UpsertProduct(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProduct", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertProduct), varargs...)
}

// UpsertProductConcurrentUser mocks base method.
func (m *MockProductServiceClient) UpsertProductConcurrentUser(ctx context.Context, in *v1.ProductConcurrentUserRequest, opts ...grpc.CallOption) (*v1.ProductConcurrentUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertProductConcurrentUser", varargs...)
	ret0, _ := ret[0].(*v1.ProductConcurrentUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProductConcurrentUser indicates an expected call of UpsertProductConcurrentUser.
func (mr *MockProductServiceClientMockRecorder) UpsertProductConcurrentUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProductConcurrentUser", reflect.TypeOf((*MockProductServiceClient)(nil).UpsertProductConcurrentUser), varargs...)
}

// MockProductServiceServer is a mock of ProductServiceServer interface.
type MockProductServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceServerMockRecorder
}

// MockProductServiceServerMockRecorder is the mock recorder for MockProductServiceServer.
type MockProductServiceServerMockRecorder struct {
	mock *MockProductServiceServer
}

// NewMockProductServiceServer creates a new mock instance.
func NewMockProductServiceServer(ctrl *gomock.Controller) *MockProductServiceServer {
	mock := &MockProductServiceServer{ctrl: ctrl}
	mock.recorder = &MockProductServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductServiceServer) EXPECT() *MockProductServiceServerMockRecorder {
	return m.recorder
}

// AggregatedRightDetails mocks base method.
func (m *MockProductServiceServer) AggregatedRightDetails(arg0 context.Context, arg1 *v1.AggregatedRightDetailsRequest) (*v1.AggregatedRightDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregatedRightDetails", arg0, arg1)
	ret0, _ := ret[0].(*v1.AggregatedRightDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregatedRightDetails indicates an expected call of AggregatedRightDetails.
func (mr *MockProductServiceServerMockRecorder) AggregatedRightDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatedRightDetails", reflect.TypeOf((*MockProductServiceServer)(nil).AggregatedRightDetails), arg0, arg1)
}

// ComplianceAlert mocks base method.
func (m *MockProductServiceServer) ComplianceAlert(arg0 context.Context, arg1 *v1.ComplianceAlertRequest) (*v1.ComplianceAlertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComplianceAlert", arg0, arg1)
	ret0, _ := ret[0].(*v1.ComplianceAlertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComplianceAlert indicates an expected call of ComplianceAlert.
func (mr *MockProductServiceServerMockRecorder) ComplianceAlert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComplianceAlert", reflect.TypeOf((*MockProductServiceServer)(nil).ComplianceAlert), arg0, arg1)
}

// ConcurrentUserExport mocks base method.
func (m *MockProductServiceServer) ConcurrentUserExport(arg0 context.Context, arg1 *v1.ListConcurrentUsersExportRequest) (*v1.ListConcurrentUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConcurrentUserExport", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListConcurrentUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConcurrentUserExport indicates an expected call of ConcurrentUserExport.
func (mr *MockProductServiceServerMockRecorder) ConcurrentUserExport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConcurrentUserExport", reflect.TypeOf((*MockProductServiceServer)(nil).ConcurrentUserExport), arg0, arg1)
}

// CounterfeitedProducts mocks base method.
func (m *MockProductServiceServer) CounterfeitedProducts(arg0 context.Context, arg1 *v1.CounterfeitedProductsRequest) (*v1.CounterfeitedProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CounterfeitedProducts", arg0, arg1)
	ret0, _ := ret[0].(*v1.CounterfeitedProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CounterfeitedProducts indicates an expected call of CounterfeitedProducts.
func (mr *MockProductServiceServerMockRecorder) CounterfeitedProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterfeitedProducts", reflect.TypeOf((*MockProductServiceServer)(nil).CounterfeitedProducts), arg0, arg1)
}

// CreateAcqRight mocks base method.
func (m *MockProductServiceServer) CreateAcqRight(arg0 context.Context, arg1 *v1.AcqRightRequest) (*v1.AcqRightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAcqRight", arg0, arg1)
	ret0, _ := ret[0].(*v1.AcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAcqRight indicates an expected call of CreateAcqRight.
func (mr *MockProductServiceServerMockRecorder) CreateAcqRight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcqRight", reflect.TypeOf((*MockProductServiceServer)(nil).CreateAcqRight), arg0, arg1)
}

// CreateAggregatedRights mocks base method.
func (m *MockProductServiceServer) CreateAggregatedRights(arg0 context.Context, arg1 *v1.AggregatedRightsRequest) (*v1.AggregatedRightsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAggregatedRights", arg0, arg1)
	ret0, _ := ret[0].(*v1.AggregatedRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAggregatedRights indicates an expected call of CreateAggregatedRights.
func (mr *MockProductServiceServerMockRecorder) CreateAggregatedRights(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAggregatedRights", reflect.TypeOf((*MockProductServiceServer)(nil).CreateAggregatedRights), arg0, arg1)
}

// CreateAggregation mocks base method.
func (m *MockProductServiceServer) CreateAggregation(arg0 context.Context, arg1 *v1.Aggregation) (*v1.AggregationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAggregation", arg0, arg1)
	ret0, _ := ret[0].(*v1.AggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAggregation indicates an expected call of CreateAggregation.
func (mr *MockProductServiceServerMockRecorder) CreateAggregation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAggregation", reflect.TypeOf((*MockProductServiceServer)(nil).CreateAggregation), arg0, arg1)
}

// CreateDashboardUpdateJob mocks base method.
func (m *MockProductServiceServer) CreateDashboardUpdateJob(arg0 context.Context, arg1 *v1.CreateDashboardUpdateJobRequest) (*v1.CreateDashboardUpdateJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDashboardUpdateJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateDashboardUpdateJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboardUpdateJob indicates an expected call of CreateDashboardUpdateJob.
func (mr *MockProductServiceServerMockRecorder) CreateDashboardUpdateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboardUpdateJob", reflect.TypeOf((*MockProductServiceServer)(nil).CreateDashboardUpdateJob), arg0, arg1)
}

// DashboardOverview mocks base method.
func (m *MockProductServiceServer) DashboardOverview(arg0 context.Context, arg1 *v1.DashboardOverviewRequest) (*v1.DashboardOverviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardOverview", arg0, arg1)
	ret0, _ := ret[0].(*v1.DashboardOverviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardOverview indicates an expected call of DashboardOverview.
func (mr *MockProductServiceServerMockRecorder) DashboardOverview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardOverview", reflect.TypeOf((*MockProductServiceServer)(nil).DashboardOverview), arg0, arg1)
}

// DashboardQualityProducts mocks base method.
func (m *MockProductServiceServer) DashboardQualityProducts(arg0 context.Context, arg1 *v1.DashboardQualityProductsRequest) (*v1.DashboardQualityProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardQualityProducts", arg0, arg1)
	ret0, _ := ret[0].(*v1.DashboardQualityProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardQualityProducts indicates an expected call of DashboardQualityProducts.
func (mr *MockProductServiceServerMockRecorder) DashboardQualityProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardQualityProducts", reflect.TypeOf((*MockProductServiceServer)(nil).DashboardQualityProducts), arg0, arg1)
}

// DeleteAcqRight mocks base method.
func (m *MockProductServiceServer) DeleteAcqRight(arg0 context.Context, arg1 *v1.DeleteAcqRightRequest) (*v1.DeleteAcqRightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAcqRight", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteAcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAcqRight indicates an expected call of DeleteAcqRight.
func (mr *MockProductServiceServerMockRecorder) DeleteAcqRight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcqRight", reflect.TypeOf((*MockProductServiceServer)(nil).DeleteAcqRight), arg0, arg1)
}

// DeleteAggregatedRights mocks base method.
func (m *MockProductServiceServer) DeleteAggregatedRights(arg0 context.Context, arg1 *v1.DeleteAggregatedRightsRequest) (*v1.DeleteAggregatedRightsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAggregatedRights", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteAggregatedRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAggregatedRights indicates an expected call of DeleteAggregatedRights.
func (mr *MockProductServiceServerMockRecorder) DeleteAggregatedRights(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAggregatedRights", reflect.TypeOf((*MockProductServiceServer)(nil).DeleteAggregatedRights), arg0, arg1)
}

// DeleteAggregation mocks base method.
func (m *MockProductServiceServer) DeleteAggregation(arg0 context.Context, arg1 *v1.DeleteAggregationRequest) (*v1.AggregationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAggregation", arg0, arg1)
	ret0, _ := ret[0].(*v1.AggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAggregation indicates an expected call of DeleteAggregation.
func (mr *MockProductServiceServerMockRecorder) DeleteAggregation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAggregation", reflect.TypeOf((*MockProductServiceServer)(nil).DeleteAggregation), arg0, arg1)
}

// DeleteAllocatedMetricEquipment mocks base method.
func (m *MockProductServiceServer) DeleteAllocatedMetricEquipment(arg0 context.Context, arg1 *v1.DropAllocateMetricEquipementRequest) (*v1.UpsertAllocateMetricEquipementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllocatedMetricEquipment", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpsertAllocateMetricEquipementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllocatedMetricEquipment indicates an expected call of DeleteAllocatedMetricEquipment.
func (mr *MockProductServiceServerMockRecorder) DeleteAllocatedMetricEquipment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllocatedMetricEquipment", reflect.TypeOf((*MockProductServiceServer)(nil).DeleteAllocatedMetricEquipment), arg0, arg1)
}

// DeleteConcurrentUsers mocks base method.
func (m *MockProductServiceServer) DeleteConcurrentUsers(arg0 context.Context, arg1 *v1.DeleteConcurrentUsersRequest) (*v1.DeleteConcurrentUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConcurrentUsers", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteConcurrentUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConcurrentUsers indicates an expected call of DeleteConcurrentUsers.
func (mr *MockProductServiceServerMockRecorder) DeleteConcurrentUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConcurrentUsers", reflect.TypeOf((*MockProductServiceServer)(nil).DeleteConcurrentUsers), arg0, arg1)
}

// DeleteNominativeUsers mocks base method.
func (m *MockProductServiceServer) DeleteNominativeUsers(arg0 context.Context, arg1 *v1.DeleteNominativeUserRequest) (*v1.DeleteNominativeUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNominativeUsers", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteNominativeUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNominativeUsers indicates an expected call of DeleteNominativeUsers.
func (mr *MockProductServiceServerMockRecorder) DeleteNominativeUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNominativeUsers", reflect.TypeOf((*MockProductServiceServer)(nil).DeleteNominativeUsers), arg0, arg1)
}

// DeleteSharedLicenses mocks base method.
func (m *MockProductServiceServer) DeleteSharedLicenses(arg0 context.Context, arg1 *v1.DeleteSharedLicensesRequest) (*v1.DeleteSharedLicensesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSharedLicenses", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteSharedLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSharedLicenses indicates an expected call of DeleteSharedLicenses.
func (mr *MockProductServiceServerMockRecorder) DeleteSharedLicenses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSharedLicenses", reflect.TypeOf((*MockProductServiceServer)(nil).DeleteSharedLicenses), arg0, arg1)
}

// DownloadAcqRightFile mocks base method.
func (m *MockProductServiceServer) DownloadAcqRightFile(arg0 context.Context, arg1 *v1.DownloadAcqRightFileRequest) (*v1.DownloadAcqRightFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAcqRightFile", arg0, arg1)
	ret0, _ := ret[0].(*v1.DownloadAcqRightFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAcqRightFile indicates an expected call of DownloadAcqRightFile.
func (mr *MockProductServiceServerMockRecorder) DownloadAcqRightFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAcqRightFile", reflect.TypeOf((*MockProductServiceServer)(nil).DownloadAcqRightFile), arg0, arg1)
}

// DownloadAggregatedRightsFile mocks base method.
func (m *MockProductServiceServer) DownloadAggregatedRightsFile(arg0 context.Context, arg1 *v1.DownloadAggregatedRightsFileRequest) (*v1.DownloadAggregatedRightsFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAggregatedRightsFile", arg0, arg1)
	ret0, _ := ret[0].(*v1.DownloadAggregatedRightsFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAggregatedRightsFile indicates an expected call of DownloadAggregatedRightsFile.
func (mr *MockProductServiceServerMockRecorder) DownloadAggregatedRightsFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAggregatedRightsFile", reflect.TypeOf((*MockProductServiceServer)(nil).DownloadAggregatedRightsFile), arg0, arg1)
}

// DropAggregationData mocks base method.
func (m *MockProductServiceServer) DropAggregationData(arg0 context.Context, arg1 *v1.DropAggregationDataRequest) (*v1.DropAggregationDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropAggregationData", arg0, arg1)
	ret0, _ := ret[0].(*v1.DropAggregationDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropAggregationData indicates an expected call of DropAggregationData.
func (mr *MockProductServiceServerMockRecorder) DropAggregationData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAggregationData", reflect.TypeOf((*MockProductServiceServer)(nil).DropAggregationData), arg0, arg1)
}

// DropProductData mocks base method.
func (m *MockProductServiceServer) DropProductData(arg0 context.Context, arg1 *v1.DropProductDataRequest) (*v1.DropProductDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropProductData", arg0, arg1)
	ret0, _ := ret[0].(*v1.DropProductDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropProductData indicates an expected call of DropProductData.
func (mr *MockProductServiceServerMockRecorder) DropProductData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropProductData", reflect.TypeOf((*MockProductServiceServer)(nil).DropProductData), arg0, arg1)
}

// GetAggregationAcqrightsExpandedView mocks base method.
func (m *MockProductServiceServer) GetAggregationAcqrightsExpandedView(arg0 context.Context, arg1 *v1.GetAggregationAcqrightsExpandedViewRequest) (*v1.GetAggregationAcqrightsExpandedViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregationAcqrightsExpandedView", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetAggregationAcqrightsExpandedViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregationAcqrightsExpandedView indicates an expected call of GetAggregationAcqrightsExpandedView.
func (mr *MockProductServiceServerMockRecorder) GetAggregationAcqrightsExpandedView(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregationAcqrightsExpandedView", reflect.TypeOf((*MockProductServiceServer)(nil).GetAggregationAcqrightsExpandedView), arg0, arg1)
}

// GetAggregationProductsExpandedView mocks base method.
func (m *MockProductServiceServer) GetAggregationProductsExpandedView(arg0 context.Context, arg1 *v1.GetAggregationProductsExpandedViewRequest) (*v1.GetAggregationProductsExpandedViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregationProductsExpandedView", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetAggregationProductsExpandedViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregationProductsExpandedView indicates an expected call of GetAggregationProductsExpandedView.
func (mr *MockProductServiceServerMockRecorder) GetAggregationProductsExpandedView(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregationProductsExpandedView", reflect.TypeOf((*MockProductServiceServer)(nil).GetAggregationProductsExpandedView), arg0, arg1)
}

// GetAllEditorsCatalog mocks base method.
func (m *MockProductServiceServer) GetAllEditorsCatalog(arg0 context.Context, arg1 *v1.GetAllEditorsCatalogRequest) (*v1.GetAllEditorsCatalogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEditorsCatalog", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetAllEditorsCatalogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEditorsCatalog indicates an expected call of GetAllEditorsCatalog.
func (mr *MockProductServiceServerMockRecorder) GetAllEditorsCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEditorsCatalog", reflect.TypeOf((*MockProductServiceServer)(nil).GetAllEditorsCatalog), arg0, arg1)
}

// GetApplicationsByProduct mocks base method.
func (m *MockProductServiceServer) GetApplicationsByProduct(arg0 context.Context, arg1 *v1.GetApplicationsByProductRequest) (*v1.GetApplicationsByProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsByProduct", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetApplicationsByProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsByProduct indicates an expected call of GetApplicationsByProduct.
func (mr *MockProductServiceServerMockRecorder) GetApplicationsByProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsByProduct", reflect.TypeOf((*MockProductServiceServer)(nil).GetApplicationsByProduct), arg0, arg1)
}

// GetAvailableLicenses mocks base method.
func (m *MockProductServiceServer) GetAvailableLicenses(arg0 context.Context, arg1 *v1.GetAvailableLicensesRequest) (*v1.GetAvailableLicensesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableLicenses", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetAvailableLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableLicenses indicates an expected call of GetAvailableLicenses.
func (mr *MockProductServiceServerMockRecorder) GetAvailableLicenses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableLicenses", reflect.TypeOf((*MockProductServiceServer)(nil).GetAvailableLicenses), arg0, arg1)
}

// GetBanner mocks base method.
func (m *MockProductServiceServer) GetBanner(arg0 context.Context, arg1 *v1.GetBannerRequest) (*v1.GetBannerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanner", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetBannerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanner indicates an expected call of GetBanner.
func (mr *MockProductServiceServerMockRecorder) GetBanner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanner", reflect.TypeOf((*MockProductServiceServer)(nil).GetBanner), arg0, arg1)
}

// GetConcurrentUsersHistroy mocks base method.
func (m *MockProductServiceServer) GetConcurrentUsersHistroy(arg0 context.Context, arg1 *v1.GetConcurrentUsersHistroyRequest) (*v1.GetConcurrentUsersHistroyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConcurrentUsersHistroy", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetConcurrentUsersHistroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConcurrentUsersHistroy indicates an expected call of GetConcurrentUsersHistroy.
func (mr *MockProductServiceServerMockRecorder) GetConcurrentUsersHistroy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConcurrentUsersHistroy", reflect.TypeOf((*MockProductServiceServer)(nil).GetConcurrentUsersHistroy), arg0, arg1)
}

// GetEditorExpensesByScope mocks base method.
func (m *MockProductServiceServer) GetEditorExpensesByScope(arg0 context.Context, arg1 *v1.EditorExpensesByScopeRequest) (*v1.EditorExpensesByScopeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEditorExpensesByScope", arg0, arg1)
	ret0, _ := ret[0].(*v1.EditorExpensesByScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorExpensesByScope indicates an expected call of GetEditorExpensesByScope.
func (mr *MockProductServiceServerMockRecorder) GetEditorExpensesByScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorExpensesByScope", reflect.TypeOf((*MockProductServiceServer)(nil).GetEditorExpensesByScope), arg0, arg1)
}

// GetEditorProductExpensesByScope mocks base method.
func (m *MockProductServiceServer) GetEditorProductExpensesByScope(arg0 context.Context, arg1 *v1.EditorProductsExpensesByScopeRequest) (*v1.EditorProductExpensesByScopeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEditorProductExpensesByScope", arg0, arg1)
	ret0, _ := ret[0].(*v1.EditorProductExpensesByScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorProductExpensesByScope indicates an expected call of GetEditorProductExpensesByScope.
func (mr *MockProductServiceServerMockRecorder) GetEditorProductExpensesByScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorProductExpensesByScope", reflect.TypeOf((*MockProductServiceServer)(nil).GetEditorProductExpensesByScope), arg0, arg1)
}

// GetEquipmentsByProduct mocks base method.
func (m *MockProductServiceServer) GetEquipmentsByProduct(arg0 context.Context, arg1 *v1.GetEquipmentsByProductRequest) (*v1.GetEquipmentsByProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEquipmentsByProduct", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetEquipmentsByProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEquipmentsByProduct indicates an expected call of GetEquipmentsByProduct.
func (mr *MockProductServiceServerMockRecorder) GetEquipmentsByProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEquipmentsByProduct", reflect.TypeOf((*MockProductServiceServer)(nil).GetEquipmentsByProduct), arg0, arg1)
}

// GetMaintenanceBySwidtag mocks base method.
func (m *MockProductServiceServer) GetMaintenanceBySwidtag(arg0 context.Context, arg1 *v1.GetMaintenanceBySwidtagRequest) (*v1.GetMaintenanceBySwidtagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaintenanceBySwidtag", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetMaintenanceBySwidtagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaintenanceBySwidtag indicates an expected call of GetMaintenanceBySwidtag.
func (mr *MockProductServiceServerMockRecorder) GetMaintenanceBySwidtag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceBySwidtag", reflect.TypeOf((*MockProductServiceServer)(nil).GetMaintenanceBySwidtag), arg0, arg1)
}

// GetMetric mocks base method.
func (m *MockProductServiceServer) GetMetric(arg0 context.Context, arg1 *v1.GetMetricRequest) (*v1.GetMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockProductServiceServerMockRecorder) GetMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockProductServiceServer)(nil).GetMetric), arg0, arg1)
}

// GetProductCountByApp mocks base method.
func (m *MockProductServiceServer) GetProductCountByApp(arg0 context.Context, arg1 *v1.GetProductCountByAppRequest) (*v1.GetProductCountByAppResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCountByApp", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetProductCountByAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCountByApp indicates an expected call of GetProductCountByApp.
func (mr *MockProductServiceServerMockRecorder) GetProductCountByApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCountByApp", reflect.TypeOf((*MockProductServiceServer)(nil).GetProductCountByApp), arg0, arg1)
}

// GetProductDetail mocks base method.
func (m *MockProductServiceServer) GetProductDetail(arg0 context.Context, arg1 *v1.ProductRequest) (*v1.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductDetail", arg0, arg1)
	ret0, _ := ret[0].(*v1.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetail indicates an expected call of GetProductDetail.
func (mr *MockProductServiceServerMockRecorder) GetProductDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetail", reflect.TypeOf((*MockProductServiceServer)(nil).GetProductDetail), arg0, arg1)
}

// GetProductListByEditor mocks base method.
func (m *MockProductServiceServer) GetProductListByEditor(arg0 context.Context, arg1 *v1.GetProductListByEditorRequest) (*v1.GetProductListByEditorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductListByEditor", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetProductListByEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductListByEditor indicates an expected call of GetProductListByEditor.
func (mr *MockProductServiceServerMockRecorder) GetProductListByEditor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductListByEditor", reflect.TypeOf((*MockProductServiceServer)(nil).GetProductListByEditor), arg0, arg1)
}

// GetProductOptions mocks base method.
func (m *MockProductServiceServer) GetProductOptions(arg0 context.Context, arg1 *v1.ProductRequest) (*v1.ProductOptionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductOptions", arg0, arg1)
	ret0, _ := ret[0].(*v1.ProductOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductOptions indicates an expected call of GetProductOptions.
func (mr *MockProductServiceServerMockRecorder) GetProductOptions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductOptions", reflect.TypeOf((*MockProductServiceServer)(nil).GetProductOptions), arg0, arg1)
}

// GetRightsInfoByEditor mocks base method.
func (m *MockProductServiceServer) GetRightsInfoByEditor(arg0 context.Context, arg1 *v1.GetRightsInfoByEditorRequest) (*v1.GetRightsInfoByEditorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRightsInfoByEditor", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetRightsInfoByEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRightsInfoByEditor indicates an expected call of GetRightsInfoByEditor.
func (mr *MockProductServiceServerMockRecorder) GetRightsInfoByEditor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRightsInfoByEditor", reflect.TypeOf((*MockProductServiceServer)(nil).GetRightsInfoByEditor), arg0, arg1)
}

// GetTotalSharedAmount mocks base method.
func (m *MockProductServiceServer) GetTotalSharedAmount(arg0 context.Context, arg1 *v1.GetTotalSharedAmountRequest) (*v1.GetTotalSharedAmountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSharedAmount", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetTotalSharedAmountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSharedAmount indicates an expected call of GetTotalSharedAmount.
func (mr *MockProductServiceServerMockRecorder) GetTotalSharedAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSharedAmount", reflect.TypeOf((*MockProductServiceServer)(nil).GetTotalSharedAmount), arg0, arg1)
}

// GetTrueUpLicences mocks base method.
func (m *MockProductServiceServer) GetTrueUpLicences(arg0 context.Context, arg1 *v1.GetTrueUpLicencesRequest) (*v1.GetTrueUpLicencesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrueUpLicences", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetTrueUpLicencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrueUpLicences indicates an expected call of GetTrueUpLicences.
func (mr *MockProductServiceServerMockRecorder) GetTrueUpLicences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrueUpLicences", reflect.TypeOf((*MockProductServiceServer)(nil).GetTrueUpLicences), arg0, arg1)
}

// GetUnderusageLicenceByEditorProduct mocks base method.
func (m *MockProductServiceServer) GetUnderusageLicenceByEditorProduct(arg0 context.Context, arg1 *v1.GetUnderusageByEditorRequest) (*v1.GetUnderusageByEditorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnderusageLicenceByEditorProduct", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetUnderusageByEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnderusageLicenceByEditorProduct indicates an expected call of GetUnderusageLicenceByEditorProduct.
func (mr *MockProductServiceServerMockRecorder) GetUnderusageLicenceByEditorProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnderusageLicenceByEditorProduct", reflect.TypeOf((*MockProductServiceServer)(nil).GetUnderusageLicenceByEditorProduct), arg0, arg1)
}

// GetWasteUpLicences mocks base method.
func (m *MockProductServiceServer) GetWasteUpLicences(arg0 context.Context, arg1 *v1.GetWasteUpLicencesRequest) (*v1.GetWasteUpLicencesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWasteUpLicences", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetWasteUpLicencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWasteUpLicences indicates an expected call of GetWasteUpLicences.
func (mr *MockProductServiceServerMockRecorder) GetWasteUpLicences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWasteUpLicences", reflect.TypeOf((*MockProductServiceServer)(nil).GetWasteUpLicences), arg0, arg1)
}

// GroupComplianceEditorCost mocks base method.
func (m *MockProductServiceServer) GroupComplianceEditorCost(arg0 context.Context, arg1 *v1.GroupComplianceEditorRequest) (*v1.GroupComplianceEditorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupComplianceEditorCost", arg0, arg1)
	ret0, _ := ret[0].(*v1.GroupComplianceEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupComplianceEditorCost indicates an expected call of GroupComplianceEditorCost.
func (mr *MockProductServiceServerMockRecorder) GroupComplianceEditorCost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupComplianceEditorCost", reflect.TypeOf((*MockProductServiceServer)(nil).GroupComplianceEditorCost), arg0, arg1)
}

// GroupComplianceProduct mocks base method.
func (m *MockProductServiceServer) GroupComplianceProduct(arg0 context.Context, arg1 *v1.GroupComplianceProductRequest) (*v1.GroupComplianceProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupComplianceProduct", arg0, arg1)
	ret0, _ := ret[0].(*v1.GroupComplianceProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupComplianceProduct indicates an expected call of GroupComplianceProduct.
func (mr *MockProductServiceServerMockRecorder) GroupComplianceProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupComplianceProduct", reflect.TypeOf((*MockProductServiceServer)(nil).GroupComplianceProduct), arg0, arg1)
}

// ListAcqRights mocks base method.
func (m *MockProductServiceServer) ListAcqRights(arg0 context.Context, arg1 *v1.ListAcqRightsRequest) (*v1.ListAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAcqRights", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRights indicates an expected call of ListAcqRights.
func (mr *MockProductServiceServerMockRecorder) ListAcqRights(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRights", reflect.TypeOf((*MockProductServiceServer)(nil).ListAcqRights), arg0, arg1)
}

// ListAggregatedAcqRights mocks base method.
func (m *MockProductServiceServer) ListAggregatedAcqRights(arg0 context.Context, arg1 *v1.ListAggregatedAcqRightsRequest) (*v1.ListAggregatedAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAggregatedAcqRights", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListAggregatedAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregatedAcqRights indicates an expected call of ListAggregatedAcqRights.
func (mr *MockProductServiceServerMockRecorder) ListAggregatedAcqRights(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedAcqRights", reflect.TypeOf((*MockProductServiceServer)(nil).ListAggregatedAcqRights), arg0, arg1)
}

// ListAggregationEditors mocks base method.
func (m *MockProductServiceServer) ListAggregationEditors(arg0 context.Context, arg1 *v1.ListAggregationEditorsRequest) (*v1.ListAggregationEditorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAggregationEditors", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListAggregationEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregationEditors indicates an expected call of ListAggregationEditors.
func (mr *MockProductServiceServerMockRecorder) ListAggregationEditors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregationEditors", reflect.TypeOf((*MockProductServiceServer)(nil).ListAggregationEditors), arg0, arg1)
}

// ListAggregationProducts mocks base method.
func (m *MockProductServiceServer) ListAggregationProducts(arg0 context.Context, arg1 *v1.ListAggregationProductsRequest) (*v1.ListAggregationProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAggregationProducts", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListAggregationProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregationProducts indicates an expected call of ListAggregationProducts.
func (mr *MockProductServiceServerMockRecorder) ListAggregationProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregationProducts", reflect.TypeOf((*MockProductServiceServer)(nil).ListAggregationProducts), arg0, arg1)
}

// ListAggregations mocks base method.
func (m *MockProductServiceServer) ListAggregations(arg0 context.Context, arg1 *v1.ListAggregationsRequest) (*v1.ListAggregationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAggregations", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListAggregationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregations indicates an expected call of ListAggregations.
func (mr *MockProductServiceServerMockRecorder) ListAggregations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregations", reflect.TypeOf((*MockProductServiceServer)(nil).ListAggregations), arg0, arg1)
}

// ListConcurrentUsers mocks base method.
func (m *MockProductServiceServer) ListConcurrentUsers(arg0 context.Context, arg1 *v1.ListConcurrentUsersRequest) (*v1.ListConcurrentUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConcurrentUsers", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListConcurrentUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConcurrentUsers indicates an expected call of ListConcurrentUsers.
func (mr *MockProductServiceServerMockRecorder) ListConcurrentUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConcurrentUsers", reflect.TypeOf((*MockProductServiceServer)(nil).ListConcurrentUsers), arg0, arg1)
}

// ListDeployedAndAcquiredEditors mocks base method.
func (m *MockProductServiceServer) ListDeployedAndAcquiredEditors(arg0 context.Context, arg1 *v1.ListDeployedAndAcquiredEditorsRequest) (*v1.ListEditorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployedAndAcquiredEditors", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployedAndAcquiredEditors indicates an expected call of ListDeployedAndAcquiredEditors.
func (mr *MockProductServiceServerMockRecorder) ListDeployedAndAcquiredEditors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployedAndAcquiredEditors", reflect.TypeOf((*MockProductServiceServer)(nil).ListDeployedAndAcquiredEditors), arg0, arg1)
}

// ListEditorProducts mocks base method.
func (m *MockProductServiceServer) ListEditorProducts(arg0 context.Context, arg1 *v1.ListEditorProductsRequest) (*v1.ListEditorProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEditorProducts", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListEditorProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditorProducts indicates an expected call of ListEditorProducts.
func (mr *MockProductServiceServerMockRecorder) ListEditorProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditorProducts", reflect.TypeOf((*MockProductServiceServer)(nil).ListEditorProducts), arg0, arg1)
}

// ListEditors mocks base method.
func (m *MockProductServiceServer) ListEditors(arg0 context.Context, arg1 *v1.ListEditorsRequest) (*v1.ListEditorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEditors", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListEditorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditors indicates an expected call of ListEditors.
func (mr *MockProductServiceServerMockRecorder) ListEditors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditors", reflect.TypeOf((*MockProductServiceServer)(nil).ListEditors), arg0, arg1)
}

// ListNominativeUser mocks base method.
func (m *MockProductServiceServer) ListNominativeUser(arg0 context.Context, arg1 *v1.ListNominativeUsersRequest) (*v1.ListNominativeUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNominativeUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListNominativeUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNominativeUser indicates an expected call of ListNominativeUser.
func (mr *MockProductServiceServerMockRecorder) ListNominativeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNominativeUser", reflect.TypeOf((*MockProductServiceServer)(nil).ListNominativeUser), arg0, arg1)
}

// ListNominativeUserFileUpload mocks base method.
func (m *MockProductServiceServer) ListNominativeUserFileUpload(arg0 context.Context, arg1 *v1.ListNominativeUsersFileUploadRequest) (*v1.ListNominativeUsersFileUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNominativeUserFileUpload", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListNominativeUsersFileUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNominativeUserFileUpload indicates an expected call of ListNominativeUserFileUpload.
func (mr *MockProductServiceServerMockRecorder) ListNominativeUserFileUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNominativeUserFileUpload", reflect.TypeOf((*MockProductServiceServer)(nil).ListNominativeUserFileUpload), arg0, arg1)
}

// ListProductAggregationView mocks base method.
func (m *MockProductServiceServer) ListProductAggregationView(arg0 context.Context, arg1 *v1.ListProductAggregationViewRequest) (*v1.ListProductAggregationViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductAggregationView", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListProductAggregationViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductAggregationView indicates an expected call of ListProductAggregationView.
func (mr *MockProductServiceServerMockRecorder) ListProductAggregationView(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductAggregationView", reflect.TypeOf((*MockProductServiceServer)(nil).ListProductAggregationView), arg0, arg1)
}

// ListProducts mocks base method.
func (m *MockProductServiceServer) ListProducts(arg0 context.Context, arg1 *v1.ListProductsRequest) (*v1.ListProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockProductServiceServerMockRecorder) ListProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockProductServiceServer)(nil).ListProducts), arg0, arg1)
}

// NominativeUserExport mocks base method.
func (m *MockProductServiceServer) NominativeUserExport(arg0 context.Context, arg1 *v1.NominativeUsersExportRequest) (*v1.ListNominativeUsersExportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NominativeUserExport", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListNominativeUsersExportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NominativeUserExport indicates an expected call of NominativeUserExport.
func (mr *MockProductServiceServerMockRecorder) NominativeUserExport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NominativeUserExport", reflect.TypeOf((*MockProductServiceServer)(nil).NominativeUserExport), arg0, arg1)
}

// OverdeployedProducts mocks base method.
func (m *MockProductServiceServer) OverdeployedProducts(arg0 context.Context, arg1 *v1.OverdeployedProductsRequest) (*v1.OverdeployedProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OverdeployedProducts", arg0, arg1)
	ret0, _ := ret[0].(*v1.OverdeployedProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverdeployedProducts indicates an expected call of OverdeployedProducts.
func (mr *MockProductServiceServerMockRecorder) OverdeployedProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverdeployedProducts", reflect.TypeOf((*MockProductServiceServer)(nil).OverdeployedProducts), arg0, arg1)
}

// OverviewProductQuality mocks base method.
func (m *MockProductServiceServer) OverviewProductQuality(arg0 context.Context, arg1 *v1.OverviewProductQualityRequest) (*v1.OverviewProductQualityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OverviewProductQuality", arg0, arg1)
	ret0, _ := ret[0].(*v1.OverviewProductQualityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverviewProductQuality indicates an expected call of OverviewProductQuality.
func (mr *MockProductServiceServerMockRecorder) OverviewProductQuality(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverviewProductQuality", reflect.TypeOf((*MockProductServiceServer)(nil).OverviewProductQuality), arg0, arg1)
}

// ProductLocationType mocks base method.
func (m *MockProductServiceServer) ProductLocationType(arg0 context.Context, arg1 *v1.GetDeploymentTypeRequest) (*v1.GetDeploymentTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductLocationType", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetDeploymentTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductLocationType indicates an expected call of ProductLocationType.
func (mr *MockProductServiceServerMockRecorder) ProductLocationType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductLocationType", reflect.TypeOf((*MockProductServiceServer)(nil).ProductLocationType), arg0, arg1)
}

// ProductMaintenancePerc mocks base method.
func (m *MockProductServiceServer) ProductMaintenancePerc(arg0 context.Context, arg1 *v1.ProductMaintenancePercRequest) (*v1.ProductMaintenancePercResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductMaintenancePerc", arg0, arg1)
	ret0, _ := ret[0].(*v1.ProductMaintenancePercResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductMaintenancePerc indicates an expected call of ProductMaintenancePerc.
func (mr *MockProductServiceServerMockRecorder) ProductMaintenancePerc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductMaintenancePerc", reflect.TypeOf((*MockProductServiceServer)(nil).ProductMaintenancePerc), arg0, arg1)
}

// ProductNoMaintenanceDetails mocks base method.
func (m *MockProductServiceServer) ProductNoMaintenanceDetails(arg0 context.Context, arg1 *v1.ProductNoMaintenanceDetailsRequest) (*v1.ProductNoMaintenanceDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductNoMaintenanceDetails", arg0, arg1)
	ret0, _ := ret[0].(*v1.ProductNoMaintenanceDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductNoMaintenanceDetails indicates an expected call of ProductNoMaintenanceDetails.
func (mr *MockProductServiceServerMockRecorder) ProductNoMaintenanceDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductNoMaintenanceDetails", reflect.TypeOf((*MockProductServiceServer)(nil).ProductNoMaintenanceDetails), arg0, arg1)
}

// ProductsPerEditor mocks base method.
func (m *MockProductServiceServer) ProductsPerEditor(arg0 context.Context, arg1 *v1.ProductsPerEditorRequest) (*v1.ProductsPerEditorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductsPerEditor", arg0, arg1)
	ret0, _ := ret[0].(*v1.ProductsPerEditorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPerEditor indicates an expected call of ProductsPerEditor.
func (mr *MockProductServiceServerMockRecorder) ProductsPerEditor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPerEditor", reflect.TypeOf((*MockProductServiceServer)(nil).ProductsPerEditor), arg0, arg1)
}

// ProductsPerMetricType mocks base method.
func (m *MockProductServiceServer) ProductsPerMetricType(arg0 context.Context, arg1 *v1.ProductsPerMetricTypeRequest) (*v1.ProductsPerMetricTypeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductsPerMetricType", arg0, arg1)
	ret0, _ := ret[0].(*v1.ProductsPerMetricTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPerMetricType indicates an expected call of ProductsPerMetricType.
func (mr *MockProductServiceServerMockRecorder) ProductsPerMetricType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPerMetricType", reflect.TypeOf((*MockProductServiceServer)(nil).ProductsPerMetricType), arg0, arg1)
}

// ProductsPercOpenClosedSource mocks base method.
func (m *MockProductServiceServer) ProductsPercOpenClosedSource(arg0 context.Context, arg1 *v1.ProductsPercOpenClosedSourceRequest) (*v1.ProductsPercOpenClosedSourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductsPercOpenClosedSource", arg0, arg1)
	ret0, _ := ret[0].(*v1.ProductsPercOpenClosedSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsPercOpenClosedSource indicates an expected call of ProductsPercOpenClosedSource.
func (mr *MockProductServiceServerMockRecorder) ProductsPercOpenClosedSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsPercOpenClosedSource", reflect.TypeOf((*MockProductServiceServer)(nil).ProductsPercOpenClosedSource), arg0, arg1)
}

// SoftwareExpenditureByScope mocks base method.
func (m *MockProductServiceServer) SoftwareExpenditureByScope(arg0 context.Context, arg1 *v1.SoftwareExpenditureByScopeRequest) (*v1.SoftwareExpenditureByScopeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftwareExpenditureByScope", arg0, arg1)
	ret0, _ := ret[0].(*v1.SoftwareExpenditureByScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwareExpenditureByScope indicates an expected call of SoftwareExpenditureByScope.
func (mr *MockProductServiceServerMockRecorder) SoftwareExpenditureByScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwareExpenditureByScope", reflect.TypeOf((*MockProductServiceServer)(nil).SoftwareExpenditureByScope), arg0, arg1)
}

// UpdateAcqRight mocks base method.
func (m *MockProductServiceServer) UpdateAcqRight(arg0 context.Context, arg1 *v1.AcqRightRequest) (*v1.AcqRightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcqRight", arg0, arg1)
	ret0, _ := ret[0].(*v1.AcqRightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcqRight indicates an expected call of UpdateAcqRight.
func (mr *MockProductServiceServerMockRecorder) UpdateAcqRight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcqRight", reflect.TypeOf((*MockProductServiceServer)(nil).UpdateAcqRight), arg0, arg1)
}

// UpdateAcqrightsSharedLicenses mocks base method.
func (m *MockProductServiceServer) UpdateAcqrightsSharedLicenses(arg0 context.Context, arg1 *v1.UpdateSharedLicensesRequest) (*v1.UpdateSharedLicensesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcqrightsSharedLicenses", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateSharedLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcqrightsSharedLicenses indicates an expected call of UpdateAcqrightsSharedLicenses.
func (mr *MockProductServiceServerMockRecorder) UpdateAcqrightsSharedLicenses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcqrightsSharedLicenses", reflect.TypeOf((*MockProductServiceServer)(nil).UpdateAcqrightsSharedLicenses), arg0, arg1)
}

// UpdateAggregatedRights mocks base method.
func (m *MockProductServiceServer) UpdateAggregatedRights(arg0 context.Context, arg1 *v1.AggregatedRightsRequest) (*v1.AggregatedRightsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAggregatedRights", arg0, arg1)
	ret0, _ := ret[0].(*v1.AggregatedRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAggregatedRights indicates an expected call of UpdateAggregatedRights.
func (mr *MockProductServiceServerMockRecorder) UpdateAggregatedRights(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAggregatedRights", reflect.TypeOf((*MockProductServiceServer)(nil).UpdateAggregatedRights), arg0, arg1)
}

// UpdateAggregation mocks base method.
func (m *MockProductServiceServer) UpdateAggregation(arg0 context.Context, arg1 *v1.Aggregation) (*v1.AggregationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAggregation", arg0, arg1)
	ret0, _ := ret[0].(*v1.AggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAggregation indicates an expected call of UpdateAggregation.
func (mr *MockProductServiceServerMockRecorder) UpdateAggregation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAggregation", reflect.TypeOf((*MockProductServiceServer)(nil).UpdateAggregation), arg0, arg1)
}

// UpdateAggrightsSharedLicenses mocks base method.
func (m *MockProductServiceServer) UpdateAggrightsSharedLicenses(arg0 context.Context, arg1 *v1.UpdateAggrightsSharedLicensesRequest) (*v1.UpdateSharedLicensesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAggrightsSharedLicenses", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateSharedLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAggrightsSharedLicenses indicates an expected call of UpdateAggrightsSharedLicenses.
func (mr *MockProductServiceServerMockRecorder) UpdateAggrightsSharedLicenses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAggrightsSharedLicenses", reflect.TypeOf((*MockProductServiceServer)(nil).UpdateAggrightsSharedLicenses), arg0, arg1)
}

// UpsertAcqRights mocks base method.
func (m *MockProductServiceServer) UpsertAcqRights(arg0 context.Context, arg1 *v1.UpsertAcqRightsRequest) (*v1.UpsertAcqRightsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAcqRights", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpsertAcqRightsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAcqRights indicates an expected call of UpsertAcqRights.
func (mr *MockProductServiceServerMockRecorder) UpsertAcqRights(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAcqRights", reflect.TypeOf((*MockProductServiceServer)(nil).UpsertAcqRights), arg0, arg1)
}

// UpsertAllocatedMetricEquipment mocks base method.
func (m *MockProductServiceServer) UpsertAllocatedMetricEquipment(arg0 context.Context, arg1 *v1.UpsertAllocateMetricEquipementRequest) (*v1.UpsertAllocateMetricEquipementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAllocatedMetricEquipment", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpsertAllocateMetricEquipementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAllocatedMetricEquipment indicates an expected call of UpsertAllocatedMetricEquipment.
func (mr *MockProductServiceServerMockRecorder) UpsertAllocatedMetricEquipment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAllocatedMetricEquipment", reflect.TypeOf((*MockProductServiceServer)(nil).UpsertAllocatedMetricEquipment), arg0, arg1)
}

// UpsertNominativeUser mocks base method.
func (m *MockProductServiceServer) UpsertNominativeUser(arg0 context.Context, arg1 *v1.UpserNominativeUserRequest) (*v1.UpserNominativeUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNominativeUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpserNominativeUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertNominativeUser indicates an expected call of UpsertNominativeUser.
func (mr *MockProductServiceServerMockRecorder) UpsertNominativeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNominativeUser", reflect.TypeOf((*MockProductServiceServer)(nil).UpsertNominativeUser), arg0, arg1)
}

// UpsertProduct mocks base method.
func (m *MockProductServiceServer) UpsertProduct(arg0 context.Context, arg1 *v1.UpsertProductRequest) (*v1.UpsertProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertProduct", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpsertProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProduct indicates an expected call of UpsertProduct.
func (mr *MockProductServiceServerMockRecorder) UpsertProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProduct", reflect.TypeOf((*MockProductServiceServer)(nil).UpsertProduct), arg0, arg1)
}

// UpsertProductConcurrentUser mocks base method.
func (m *MockProductServiceServer) UpsertProductConcurrentUser(arg0 context.Context, arg1 *v1.ProductConcurrentUserRequest) (*v1.ProductConcurrentUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertProductConcurrentUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.ProductConcurrentUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProductConcurrentUser indicates an expected call of UpsertProductConcurrentUser.
func (mr *MockProductServiceServerMockRecorder) UpsertProductConcurrentUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProductConcurrentUser", reflect.TypeOf((*MockProductServiceServer)(nil).UpsertProductConcurrentUser), arg0, arg1)
}

// MockUnsafeProductServiceServer is a mock of UnsafeProductServiceServer interface.
type MockUnsafeProductServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProductServiceServerMockRecorder
}

// MockUnsafeProductServiceServerMockRecorder is the mock recorder for MockUnsafeProductServiceServer.
type MockUnsafeProductServiceServerMockRecorder struct {
	mock *MockUnsafeProductServiceServer
}

// NewMockUnsafeProductServiceServer creates a new mock instance.
func NewMockUnsafeProductServiceServer(ctrl *gomock.Controller) *MockUnsafeProductServiceServer {
	mock := &MockUnsafeProductServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProductServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProductServiceServer) EXPECT() *MockUnsafeProductServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProductServiceServer mocks base method.
func (m *MockUnsafeProductServiceServer) mustEmbedUnimplementedProductServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProductServiceServer")
}

// mustEmbedUnimplementedProductServiceServer indicates an expected call of mustEmbedUnimplementedProductServiceServer.
func (mr *MockUnsafeProductServiceServerMockRecorder) mustEmbedUnimplementedProductServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProductServiceServer", reflect.TypeOf((*MockUnsafeProductServiceServer)(nil).mustEmbedUnimplementedProductServiceServer))
}
