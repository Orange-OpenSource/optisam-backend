syntax = "proto3";

option go_package = "v1";

package v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

service LicenseService {

  rpc ListAcqRightsForProduct(ListAcquiredRightsForProductRequest)
      returns (ListAcquiredRightsForProductResponse) {
    option (google.api.http) = {
      get : "/api/v1/product/{swid_tag}/acquiredrights"
    };
  }

  rpc ListAcqRightsForApplicationsProduct(
      ListAcqRightsForApplicationsProductRequest)
      returns (ListAcqRightsForApplicationsProductResponse) {
    option (google.api.http) = {
      get : "/api/v1/licenses/applications/{app_id}/products/{prod_id}"
    };
  }

  rpc CreateProductAggregation(ProductAggregation)
      returns (ProductAggregation) {
    option (google.api.http) = {
      post : "/api/v1/products/aggregations"
      body : "*"
    };
  }


  rpc ListAcqRightsForProductAggregation(
      ListAcqRightsForProductAggregationRequest)
      returns (ListAcqRightsForProductAggregationResponse) {
    option (google.api.http) = {
      get : "/api/v1/products/aggregations/productview/{ID}/acquiredrights"
    };
  }

  rpc ProductLicensesForMetric(ProductLicensesForMetricRequest)
      returns (ProductLicensesForMetricResponse) {
    option (google.api.http) = {
      post : "/api/v1/product/{swid_tag}/metric/{metric_name}"
      body : "*"
    };
  }

  rpc LicensesForEquipAndMetric(LicensesForEquipAndMetricRequest)
      returns (LicensesForEquipAndMetricResponse) {
    option (google.api.http) = {
      post : "/api/v1/equipments/types/{equip_type}/{equip_id}/metric/types/"
             "{metric_type}/{metric_name}"
      body : "*"
    };
  }
}

message ListAcqRightsForApplicationsProductRequest {
  string app_id = 1;
  string prod_id = 2;
  string scope = 3 [ (validate.rules).string.pattern = "\\b[A-Z]{3}\\b" ];
}

message ListAcqRightsForApplicationsProductResponse {
  repeated ProductAcquiredRights acq_rights = 1;
}

message LicensesForEquipAndMetricRequest {
  string equip_type = 1;
  string equip_id = 2;
  string metric_type = 3;
  string metric_name = 4;
  repeated Attribute attributes = 5;
  string scope = 6 [ (validate.rules).string.pattern = "\\b[A-Z]{3}\\b" ];
}

message LicensesForEquipAndMetricResponse {
  repeated ProductLicenseForEquipAndMetric licenses = 1;
}

message ProductLicenseForEquipAndMetric {
  string metric_name = 1;
  int64 old_licences = 2;
  int64 new_licenses = 3;
  int64 delta = 4;
  Product product = 5;
}

message ProductLicensesForMetricRequest {
  string swid_tag = 1;
  string metric_name = 2;
  double unit_cost = 3;
  string scope = 4 [ (validate.rules).string.pattern = "\\b[A-Z]{3}\\b" ];
}

message ProductLicensesForMetricResponse {
  uint64 numCptLicences = 1;
  double total_cost = 2;
  string metric_name = 3;
}

message ListAcqRightsForProductAggregationRequest {
  string ID = 1;
  string scope = 2 [ (validate.rules).string.pattern = "\\b[A-Z]{3}\\b" ];
}

message ListAcqRightsForProductAggregationResponse {
  repeated ProductAcquiredRights acq_rights = 1;
}

message UpdateProductAggregationRequest {
  string name = 1;
  UpdateAggregation aggregation = 2;
}

message UpdateAggregation {
  string name = 1;
  repeated string added_products = 2;
  repeated string removed_products = 3;
  repeated string product_names = 4;
}

message DeleteProductAggregationRequest { string ID = 1; }

message ListProductAggregationResponse {
  repeated ProductAggregation aggregations = 1;
}

message ProductAggregation {
  string ID = 1;
  string name = 2;
  string editor = 3;
  repeated string product_names = 4;
  string metric = 5;
  repeated string products = 6;
  repeated Product products_full = 7;
}

message ListMetricResponse { repeated Metric metrices = 1; }

message Metric {
  string type = 1;
  string name = 2;
  string description = 3;
}

message ListAcquiredRightsForProductRequest {
  string swid_tag = 1;
  string scope = 2 [ (validate.rules).string.pattern = "\\b[A-Z]{3}\\b" ];
}

message ListAcquiredRightsForProductResponse {
  repeated ProductAcquiredRights acq_rights = 1;
}

message Product {
  string swidTag = 1;
  string name = 2;
  string version = 3;
  string category = 4;
  string editor = 5;
  string metric = 6;
  int32 numCptLicences = 7;
  int32 numAcqLicences = 8;
  double totalCost = 9;
  int32 deltaNumber = 10;
  double deltaCost = 11;
  int32 numOfApplications = 12;
  int32 numofEquipments = 13;
}

message Application {
  string applicationId = 1;
  string name = 2;
  string application_owner = 3;
  int32 numOfInstances = 4;
  int32 numofProducts = 5;
  double totalCost = 6;
}

message ProductAcquiredRights {
  string SKU = 1;
  string swidTag = 2;
  string metric = 3;
  int32 numCptLicences = 4;
  int32 numAcqLicences = 5;
  double totalCost = 6;
  int32 deltaNumber = 7;
  double deltaCost = 8;
  double avgUnitPrice = 9;
}

message Attribute {
  string ID = 1;
  string name = 2 [ (validate.rules).string.pattern = "^[-_A-Za-z0-9]+$" ];
  DataTypes data_type = 3 [ (validate.rules).enum = {in : [ 1, 2, 3 ]} ];
  bool primary_key = 4;
  bool displayed = 5;
  bool searchable = 6;
  bool parent_identifier = 7;
  string mapped_to = 8;
  bool simulated = 9;

  oneof val {
    int32 int_val = 10;
    float float_val = 11;
    string string_val = 12;
  }

  oneof old_val {
    int32 int_val_old = 13;
    float float_val_old = 14;
    string string_val_old = 15;
  }
}

enum DataTypes {
  UNKNOWN = 0;
  STRING = 1;
  INT = 2;
  FLOAT = 3;
}
