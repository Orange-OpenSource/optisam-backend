// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: license.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ListEditorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListEditorsRequestValidationError is the validation error returned by
// ListEditorsRequest.Validate if the designated constraints aren't met.
type ListEditorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorsRequestValidationError) ErrorName() string {
	return "ListEditorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorsRequestValidationError{}

// Validate checks the field values on ListEditorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEditorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEditors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEditorsResponseValidationError{
					field:  fmt.Sprintf("Editors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEditorsResponseValidationError is the validation error returned by
// ListEditorsResponse.Validate if the designated constraints aren't met.
type ListEditorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEditorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEditorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEditorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEditorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEditorsResponseValidationError) ErrorName() string {
	return "ListEditorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEditorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEditorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEditorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEditorsResponseValidationError{}

// Validate checks the field values on Editor with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Editor) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	return nil
}

// EditorValidationError is the validation error returned by Editor.Validate if
// the designated constraints aren't met.
type EditorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorValidationError) ErrorName() string { return "EditorValidationError" }

// Error satisfies the builtin error interface
func (e EditorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorValidationError{}

// Validate checks the field values on DeleteProductAggregationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProductAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	return nil
}

// DeleteProductAggregationRequestValidationError is the validation error
// returned by DeleteProductAggregationRequest.Validate if the designated
// constraints aren't met.
type DeleteProductAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductAggregationRequestValidationError) ErrorName() string {
	return "DeleteProductAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductAggregationRequestValidationError{}

// Validate checks the field values on ListProductAggregationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductAggregationResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAggregations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductAggregationResponseValidationError{
					field:  fmt.Sprintf("Aggregations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductAggregationResponseValidationError is the validation error
// returned by ListProductAggregationResponse.Validate if the designated
// constraints aren't met.
type ListProductAggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationResponseValidationError) ErrorName() string {
	return "ListProductAggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationResponseValidationError{}

// Validate checks the field values on ListProductAggregationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListProductAggregationRequestValidationError is the validation error
// returned by ListProductAggregationRequest.Validate if the designated
// constraints aren't met.
type ListProductAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductAggregationRequestValidationError) ErrorName() string {
	return "ListProductAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductAggregationRequestValidationError{}

// Validate checks the field values on ProductAggregation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAggregation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for Product

	// no validation rules for Metric

	return nil
}

// ProductAggregationValidationError is the validation error returned by
// ProductAggregation.Validate if the designated constraints aren't met.
type ProductAggregationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAggregationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAggregationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAggregationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAggregationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAggregationValidationError) ErrorName() string {
	return "ProductAggregationValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAggregationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAggregation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAggregationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAggregationValidationError{}

// Validate checks the field values on CreateMetricIPS with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateMetricIPS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for NumCoreAttrId

	// no validation rules for CoreFactorAttrId

	// no validation rules for BaseEqTypeId

	return nil
}

// CreateMetricIPSValidationError is the validation error returned by
// CreateMetricIPS.Validate if the designated constraints aren't met.
type CreateMetricIPSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricIPSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricIPSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricIPSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricIPSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricIPSValidationError) ErrorName() string { return "CreateMetricIPSValidationError" }

// Error satisfies the builtin error interface
func (e CreateMetricIPSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricIPS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricIPSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricIPSValidationError{}

// Validate checks the field values on CreateMetricSPS with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateMetricSPS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for NumCoreAttrId

	// no validation rules for CoreFactorAttrId

	// no validation rules for BaseEqTypeId

	return nil
}

// CreateMetricSPSValidationError is the validation error returned by
// CreateMetricSPS.Validate if the designated constraints aren't met.
type CreateMetricSPSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricSPSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricSPSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricSPSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricSPSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricSPSValidationError) ErrorName() string { return "CreateMetricSPSValidationError" }

// Error satisfies the builtin error interface
func (e CreateMetricSPSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricSPS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricSPSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricSPSValidationError{}

// Validate checks the field values on ListEquipmentsForProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentsForProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for EqTypeId

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListEquipmentsForProductRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val >= 100 {
		return ListEquipmentsForProductRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 100)",
		}
	}

	// no validation rules for SortBy

	// no validation rules for SortOrder

	// no validation rules for SearchParams

	return nil
}

// ListEquipmentsForProductRequestValidationError is the validation error
// returned by ListEquipmentsForProductRequest.Validate if the designated
// constraints aren't met.
type ListEquipmentsForProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentsForProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentsForProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentsForProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentsForProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentsForProductRequestValidationError) ErrorName() string {
	return "ListEquipmentsForProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentsForProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentsForProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentsForProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentsForProductRequestValidationError{}

// Validate checks the field values on ListMetricRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListMetricRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMetricRequestValidationError is the validation error returned by
// ListMetricRequest.Validate if the designated constraints aren't met.
type ListMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricRequestValidationError) ErrorName() string {
	return "ListMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricRequestValidationError{}

// Validate checks the field values on ListMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetrices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMetricResponseValidationError{
					field:  fmt.Sprintf("Metrices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMetricResponseValidationError is the validation error returned by
// ListMetricResponse.Validate if the designated constraints aren't met.
type ListMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricResponseValidationError) ErrorName() string {
	return "ListMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricResponseValidationError{}

// Validate checks the field values on Metric with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metric) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// MetricValidationError is the validation error returned by Metric.Validate if
// the designated constraints aren't met.
type MetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricValidationError) ErrorName() string { return "MetricValidationError" }

// Error satisfies the builtin error interface
func (e MetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricValidationError{}

// Validate checks the field values on ListMetricTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMetricTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMetricTypeRequestValidationError is the validation error returned by
// ListMetricTypeRequest.Validate if the designated constraints aren't met.
type ListMetricTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricTypeRequestValidationError) ErrorName() string {
	return "ListMetricTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricTypeRequestValidationError{}

// Validate checks the field values on ListMetricTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMetricTypeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMetricTypeResponseValidationError{
					field:  fmt.Sprintf("Types[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMetricTypeResponseValidationError is the validation error returned by
// ListMetricTypeResponse.Validate if the designated constraints aren't met.
type ListMetricTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricTypeResponseValidationError) ErrorName() string {
	return "ListMetricTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricTypeResponseValidationError{}

// Validate checks the field values on MetricType with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MetricType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Href

	// no validation rules for TypeId

	return nil
}

// MetricTypeValidationError is the validation error returned by
// MetricType.Validate if the designated constraints aren't met.
type MetricTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricTypeValidationError) ErrorName() string { return "MetricTypeValidationError" }

// Error satisfies the builtin error interface
func (e MetricTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricTypeValidationError{}

// Validate checks the field values on ListAcquiredRightsForProductRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListAcquiredRightsForProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	return nil
}

// ListAcquiredRightsForProductRequestValidationError is the validation error
// returned by ListAcquiredRightsForProductRequest.Validate if the designated
// constraints aren't met.
type ListAcquiredRightsForProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcquiredRightsForProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcquiredRightsForProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcquiredRightsForProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcquiredRightsForProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcquiredRightsForProductRequestValidationError) ErrorName() string {
	return "ListAcquiredRightsForProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcquiredRightsForProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcquiredRightsForProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcquiredRightsForProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcquiredRightsForProductRequestValidationError{}

// Validate checks the field values on ListAcquiredRightsForProductResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListAcquiredRightsForProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAcqRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAcquiredRightsForProductResponseValidationError{
					field:  fmt.Sprintf("AcqRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcquiredRightsForProductResponseValidationError is the validation error
// returned by ListAcquiredRightsForProductResponse.Validate if the designated
// constraints aren't met.
type ListAcquiredRightsForProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcquiredRightsForProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcquiredRightsForProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcquiredRightsForProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcquiredRightsForProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcquiredRightsForProductResponseValidationError) ErrorName() string {
	return "ListAcquiredRightsForProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcquiredRightsForProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcquiredRightsForProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcquiredRightsForProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcquiredRightsForProductResponseValidationError{}

// Validate checks the field values on CreateMetricOPS with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateMetricOPS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for NumCoreAttrId

	// no validation rules for NumCPUAttrId

	// no validation rules for CoreFactorAttrId

	// no validation rules for StartEqTypeId

	// no validation rules for BaseEqTypeId

	// no validation rules for AggerateLevelEqTypeId

	// no validation rules for EndEqTypeId

	return nil
}

// CreateMetricOPSValidationError is the validation error returned by
// CreateMetricOPS.Validate if the designated constraints aren't met.
type CreateMetricOPSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricOPSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricOPSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricOPSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricOPSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricOPSValidationError) ErrorName() string { return "CreateMetricOPSValidationError" }

// Error satisfies the builtin error interface
func (e CreateMetricOPSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricOPS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricOPSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricOPSValidationError{}

// Validate checks the field values on ListEquipmentProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEquipmentProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEquipmentProductsResponseValidationError is the validation error
// returned by ListEquipmentProductsResponse.Validate if the designated
// constraints aren't met.
type ListEquipmentProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentProductsResponseValidationError) ErrorName() string {
	return "ListEquipmentProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentProductsResponseValidationError{}

// Validate checks the field values on EquipmentProduct with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EquipmentProduct) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for Version

	return nil
}

// EquipmentProductValidationError is the validation error returned by
// EquipmentProduct.Validate if the designated constraints aren't met.
type EquipmentProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentProductValidationError) ErrorName() string { return "EquipmentProductValidationError" }

// Error satisfies the builtin error interface
func (e EquipmentProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentProductValidationError{}

// Validate checks the field values on ListEquipmentProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TypeId

	// no validation rules for EquipId

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListEquipmentProductsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val >= 100 {
		return ListEquipmentProductsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 100)",
		}
	}

	// no validation rules for SortBy

	// no validation rules for SortOrder

	if v, ok := interface{}(m.GetSearchParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEquipmentProductsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListEquipmentProductsRequestValidationError is the validation error returned
// by ListEquipmentProductsRequest.Validate if the designated constraints
// aren't met.
type ListEquipmentProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentProductsRequestValidationError) ErrorName() string {
	return "ListEquipmentProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentProductsRequestValidationError{}

// Validate checks the field values on EquipmentProductSearchParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EquipmentProductSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentProductSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentProductSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentProductSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EquipmentProductSearchParamsValidationError is the validation error returned
// by EquipmentProductSearchParams.Validate if the designated constraints
// aren't met.
type EquipmentProductSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentProductSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentProductSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentProductSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentProductSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentProductSearchParamsValidationError) ErrorName() string {
	return "EquipmentProductSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentProductSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentProductSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentProductSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentProductSearchParamsValidationError{}

// Validate checks the field values on ListEquipmentChildrenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentChildrenRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TypeId

	// no validation rules for EquipId

	// no validation rules for ChildrenTypeId

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListEquipmentChildrenRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val >= 100 {
		return ListEquipmentChildrenRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 100)",
		}
	}

	// no validation rules for SortBy

	// no validation rules for SortOrder

	// no validation rules for SearchParams

	return nil
}

// ListEquipmentChildrenRequestValidationError is the validation error returned
// by ListEquipmentChildrenRequest.Validate if the designated constraints
// aren't met.
type ListEquipmentChildrenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentChildrenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentChildrenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentChildrenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentChildrenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentChildrenRequestValidationError) ErrorName() string {
	return "ListEquipmentChildrenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentChildrenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentChildrenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentChildrenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentChildrenRequestValidationError{}

// Validate checks the field values on ListEquipmentParentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentParentsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TypeId

	// no validation rules for EquipId

	return nil
}

// ListEquipmentParentsRequestValidationError is the validation error returned
// by ListEquipmentParentsRequest.Validate if the designated constraints
// aren't met.
type ListEquipmentParentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentParentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentParentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentParentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentParentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentParentsRequestValidationError) ErrorName() string {
	return "ListEquipmentParentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentParentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentParentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentParentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentParentsRequestValidationError{}

// Validate checks the field values on GetEquipmentParentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEquipmentParentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Equipments

	return nil
}

// GetEquipmentParentsResponseValidationError is the validation error returned
// by GetEquipmentParentsResponse.Validate if the designated constraints
// aren't met.
type GetEquipmentParentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEquipmentParentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEquipmentParentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEquipmentParentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEquipmentParentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEquipmentParentsResponseValidationError) ErrorName() string {
	return "GetEquipmentParentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEquipmentParentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEquipmentParentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEquipmentParentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEquipmentParentsResponseValidationError{}

// Validate checks the field values on GetEquipmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEquipmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TypeId

	// no validation rules for EquipId

	return nil
}

// GetEquipmentRequestValidationError is the validation error returned by
// GetEquipmentRequest.Validate if the designated constraints aren't met.
type GetEquipmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEquipmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEquipmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEquipmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEquipmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEquipmentRequestValidationError) ErrorName() string {
	return "GetEquipmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEquipmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEquipmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEquipmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEquipmentRequestValidationError{}

// Validate checks the field values on GetEquipmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEquipmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Equipment

	return nil
}

// GetEquipmentResponseValidationError is the validation error returned by
// GetEquipmentResponse.Validate if the designated constraints aren't met.
type GetEquipmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEquipmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEquipmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEquipmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEquipmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEquipmentResponseValidationError) ErrorName() string {
	return "GetEquipmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEquipmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEquipmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEquipmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEquipmentResponseValidationError{}

// Validate checks the field values on ListEquipmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TypeId

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListEquipmentsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val >= 100 {
		return ListEquipmentsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 100)",
		}
	}

	// no validation rules for SortBy

	// no validation rules for SortOrder

	// no validation rules for SearchParams

	return nil
}

// ListEquipmentsRequestValidationError is the validation error returned by
// ListEquipmentsRequest.Validate if the designated constraints aren't met.
type ListEquipmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentsRequestValidationError) ErrorName() string {
	return "ListEquipmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentsRequestValidationError{}

// Validate checks the field values on ListEquipmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	// no validation rules for Equipments

	return nil
}

// ListEquipmentsResponseValidationError is the validation error returned by
// ListEquipmentsResponse.Validate if the designated constraints aren't met.
type ListEquipmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentsResponseValidationError) ErrorName() string {
	return "ListEquipmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentsResponseValidationError{}

// Validate checks the field values on UpdateEquipmentTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEquipmentTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for ParentId

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateEquipmentTypeRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdateEquipmentTypeRequestValidationError is the validation error returned
// by UpdateEquipmentTypeRequest.Validate if the designated constraints aren't met.
type UpdateEquipmentTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEquipmentTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEquipmentTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEquipmentTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEquipmentTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEquipmentTypeRequestValidationError) ErrorName() string {
	return "UpdateEquipmentTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEquipmentTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEquipmentTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEquipmentTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEquipmentTypeRequestValidationError{}

// Validate checks the field values on EquipmentMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EquipmentMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if _, ok := EquipmentMetadataRequest_Attributes_name[int32(m.GetAttributes())]; !ok {
		return EquipmentMetadataRequestValidationError{
			field:  "Attributes",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// EquipmentMetadataRequestValidationError is the validation error returned by
// EquipmentMetadataRequest.Validate if the designated constraints aren't met.
type EquipmentMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentMetadataRequestValidationError) ErrorName() string {
	return "EquipmentMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentMetadataRequestValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Product) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Category

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for NumCptLicences

	// no validation rules for NumAcqLicences

	// no validation rules for TotalCost

	// no validation rules for DeltaNumber

	// no validation rules for DeltaCost

	// no validation rules for NumOfApplications

	// no validation rules for NumofEquipments

	return nil
}

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on ProductForApplication with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductForApplication) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Editor

	// no validation rules for Edition

	// no validation rules for Version

	// no validation rules for TotalCost

	// no validation rules for NumOfInstances

	// no validation rules for NumofEquipments

	return nil
}

// ProductForApplicationValidationError is the validation error returned by
// ProductForApplication.Validate if the designated constraints aren't met.
type ProductForApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductForApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductForApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductForApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductForApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductForApplicationValidationError) ErrorName() string {
	return "ProductForApplicationValidationError"
}

// Error satisfies the builtin error interface
func (e ProductForApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductForApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductForApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductForApplicationValidationError{}

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Application) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for Name

	// no validation rules for ApplicationOwner

	// no validation rules for NumOfInstances

	// no validation rules for NumofProducts

	// no validation rules for TotalCost

	return nil
}

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

// Validate checks the field values on ListProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductsResponseValidationError is the validation error returned by
// ListProductsResponse.Validate if the designated constraints aren't met.
type ListProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsResponseValidationError) ErrorName() string {
	return "ListProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsResponseValidationError{}

// Validate checks the field values on ListProductsForApplicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListProductsForApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductsForApplicationResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductsForApplicationResponseValidationError is the validation error
// returned by ListProductsForApplicationResponse.Validate if the designated
// constraints aren't met.
type ListProductsForApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsForApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsForApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsForApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsForApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsForApplicationResponseValidationError) ErrorName() string {
	return "ListProductsForApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsForApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsForApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsForApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsForApplicationResponseValidationError{}

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationsResponseValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on ListProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListProductsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if m.GetPageSize() < 10 {
		return ListProductsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 10",
		}
	}

	if _, ok := _ListProductsRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return ListProductsRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [name swidtag version category editor metric numCptLicences numAcqLicences totalCost deltaNumber deltaCost numOfApplications numofEquipments]",
		}
	}

	if _, ok := _ListProductsRequest_SortOrder_InLookup[m.GetSortOrder()]; !ok {
		return ListProductsRequestValidationError{
			field:  "SortOrder",
			reason: "value must be in list [asc desc]",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProductsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListProductsRequestValidationError is the validation error returned by
// ListProductsRequest.Validate if the designated constraints aren't met.
type ListProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsRequestValidationError) ErrorName() string {
	return "ListProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsRequestValidationError{}

var _ListProductsRequest_SortBy_InLookup = map[string]struct{}{
	"name":              {},
	"swidtag":           {},
	"version":           {},
	"category":          {},
	"editor":            {},
	"metric":            {},
	"numCptLicences":    {},
	"numAcqLicences":    {},
	"totalCost":         {},
	"deltaNumber":       {},
	"deltaCost":         {},
	"numOfApplications": {},
	"numofEquipments":   {},
}

var _ListProductsRequest_SortOrder_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on ProductSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEdition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "Edition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAgFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductSearchParamsValidationError{
				field:  "AgFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProductSearchParamsValidationError is the validation error returned by
// ProductSearchParams.Validate if the designated constraints aren't met.
type ProductSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductSearchParamsValidationError) ErrorName() string {
	return "ProductSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ProductSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductSearchParamsValidationError{}

// Validate checks the field values on AggregationFilter with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AggregationFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NotForMetric

	return nil
}

// AggregationFilterValidationError is the validation error returned by
// AggregationFilter.Validate if the designated constraints aren't met.
type AggregationFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationFilterValidationError) ErrorName() string {
	return "AggregationFilterValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationFilterValidationError{}

// Validate checks the field values on ListApplicationsForProductRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListApplicationsForProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListApplicationsForProductRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val >= 100 {
		return ListApplicationsForProductRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 100)",
		}
	}

	if _, ok := _ListApplicationsForProductRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return ListApplicationsForProductRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [name application_owner numOfInstances numofEquipments]",
		}
	}

	if _, ok := _ListApplicationsForProductRequest_SortOrder_InLookup[m.GetSortOrder()]; !ok {
		return ListApplicationsForProductRequestValidationError{
			field:  "SortOrder",
			reason: "value must be in list [asc desc]",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationsForProductRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListApplicationsForProductRequestValidationError is the validation error
// returned by ListApplicationsForProductRequest.Validate if the designated
// constraints aren't met.
type ListApplicationsForProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsForProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsForProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsForProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsForProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsForProductRequestValidationError) ErrorName() string {
	return "ListApplicationsForProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsForProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsForProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsForProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsForProductRequestValidationError{}

var _ListApplicationsForProductRequest_SortBy_InLookup = map[string]struct{}{
	"name":              {},
	"application_owner": {},
	"numOfInstances":    {},
	"numofEquipments":   {},
}

var _ListApplicationsForProductRequest_SortOrder_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on ListApplicationsForProductResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListApplicationsForProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationsForProductResponseValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListApplicationsForProductResponseValidationError is the validation error
// returned by ListApplicationsForProductResponse.Validate if the designated
// constraints aren't met.
type ListApplicationsForProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsForProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsForProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsForProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsForProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsForProductResponseValidationError) ErrorName() string {
	return "ListApplicationsForProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsForProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsForProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsForProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsForProductResponseValidationError{}

// Validate checks the field values on ApplicationForProduct with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationForProduct) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for Name

	// no validation rules for AppOwner

	// no validation rules for NumOfInstances

	// no validation rules for NumofEquipments

	return nil
}

// ApplicationForProductValidationError is the validation error returned by
// ApplicationForProduct.Validate if the designated constraints aren't met.
type ApplicationForProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationForProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationForProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationForProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationForProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationForProductValidationError) ErrorName() string {
	return "ApplicationForProductValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationForProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationForProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationForProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationForProductValidationError{}

// Validate checks the field values on
// ListInstancesForApplicationProductRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListInstancesForApplicationProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for ApplicationId

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListInstancesForApplicationProductRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val >= 100 {
		return ListInstancesForApplicationProductRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 100)",
		}
	}

	if _, ok := ListInstancesForApplicationProductRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListInstancesForApplicationProductRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for SortOrder

	return nil
}

// ListInstancesForApplicationProductRequestValidationError is the validation
// error returned by ListInstancesForApplicationProductRequest.Validate if the
// designated constraints aren't met.
type ListInstancesForApplicationProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesForApplicationProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesForApplicationProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesForApplicationProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesForApplicationProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesForApplicationProductRequestValidationError) ErrorName() string {
	return "ListInstancesForApplicationProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesForApplicationProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesForApplicationProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesForApplicationProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesForApplicationProductRequestValidationError{}

// Validate checks the field values on
// ListInstancesForApplicationProductResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListInstancesForApplicationProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesForApplicationProductResponseValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListInstancesForApplicationProductResponseValidationError is the validation
// error returned by ListInstancesForApplicationProductResponse.Validate if
// the designated constraints aren't met.
type ListInstancesForApplicationProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesForApplicationProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesForApplicationProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesForApplicationProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesForApplicationProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesForApplicationProductResponseValidationError) ErrorName() string {
	return "ListInstancesForApplicationProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesForApplicationProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesForApplicationProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesForApplicationProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesForApplicationProductResponseValidationError{}

// Validate checks the field values on InstancesForApplicationProduct with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InstancesForApplicationProduct) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Environment

	// no validation rules for NumofEquipments

	// no validation rules for NumofProducts

	return nil
}

// InstancesForApplicationProductValidationError is the validation error
// returned by InstancesForApplicationProduct.Validate if the designated
// constraints aren't met.
type InstancesForApplicationProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstancesForApplicationProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstancesForApplicationProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstancesForApplicationProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstancesForApplicationProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstancesForApplicationProductValidationError) ErrorName() string {
	return "InstancesForApplicationProductValidationError"
}

// Error satisfies the builtin error interface
func (e InstancesForApplicationProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstancesForApplicationProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstancesForApplicationProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstancesForApplicationProductValidationError{}

// Validate checks the field values on ListProductsForApplicationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListProductsForApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	return nil
}

// ListProductsForApplicationRequestValidationError is the validation error
// returned by ListProductsForApplicationRequest.Validate if the designated
// constraints aren't met.
type ListProductsForApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsForApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsForApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsForApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsForApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsForApplicationRequestValidationError) ErrorName() string {
	return "ListProductsForApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsForApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsForApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsForApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsForApplicationRequestValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListApplicationsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val >= 100 {
		return ListApplicationsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 100)",
		}
	}

	if _, ok := _ListApplicationsRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		return ListApplicationsRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [applicationId name application_owner numOfInstances numofProducts totalCost]",
		}
	}

	if _, ok := _ListApplicationsRequest_SortOrder_InLookup[m.GetSortOrder()]; !ok {
		return ListApplicationsRequestValidationError{
			field:  "SortOrder",
			reason: "value must be in list [asc desc]",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

var _ListApplicationsRequest_SortBy_InLookup = map[string]struct{}{
	"applicationId":     {},
	"name":              {},
	"application_owner": {},
	"numOfInstances":    {},
	"numofProducts":     {},
	"totalCost":         {},
}

var _ListApplicationsRequest_SortOrder_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on ApplicationSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetApplicationOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSearchParamsValidationError{
				field:  "ApplicationOwner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplicationSearchParamsValidationError is the validation error returned by
// ApplicationSearchParams.Validate if the designated constraints aren't met.
type ApplicationSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationSearchParamsValidationError) ErrorName() string {
	return "ApplicationSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationSearchParamsValidationError{}

// Validate checks the field values on ProductRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	return nil
}

// ProductRequestValidationError is the validation error returned by
// ProductRequest.Validate if the designated constraints aren't met.
type ProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductRequestValidationError) ErrorName() string { return "ProductRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductRequestValidationError{}

// Validate checks the field values on ApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	return nil
}

// ApplicationRequestValidationError is the validation error returned by
// ApplicationRequest.Validate if the designated constraints aren't met.
type ApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationRequestValidationError) ErrorName() string {
	return "ApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationRequestValidationError{}

// Validate checks the field values on ProductResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProductInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductResponseValidationError{
				field:  "ProductInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductResponseValidationError{
				field:  "ProductOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProductResponseValidationError is the validation error returned by
// ProductResponse.Validate if the designated constraints aren't met.
type ProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductResponseValidationError) ErrorName() string { return "ProductResponseValidationError" }

// Error satisfies the builtin error interface
func (e ProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductResponseValidationError{}

// Validate checks the field values on ApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for NumOfInstances

	return nil
}

// ApplicationResponseValidationError is the validation error returned by
// ApplicationResponse.Validate if the designated constraints aren't met.
type ApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationResponseValidationError) ErrorName() string {
	return "ApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationResponseValidationError{}

// Validate checks the field values on ProductInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Editor

	// no validation rules for Edition

	// no validation rules for Release

	// no validation rules for Metric

	// no validation rules for NumOfApplications

	// no validation rules for NumofEquipments

	return nil
}

// ProductInfoValidationError is the validation error returned by
// ProductInfo.Validate if the designated constraints aren't met.
type ProductInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductInfoValidationError) ErrorName() string { return "ProductInfoValidationError" }

// Error satisfies the builtin error interface
func (e ProductInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductInfoValidationError{}

// Validate checks the field values on ProductOptions with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductOptions) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumOfOptions

	for idx, item := range m.GetOptioninfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductOptionsValidationError{
					field:  fmt.Sprintf("Optioninfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductOptionsValidationError is the validation error returned by
// ProductOptions.Validate if the designated constraints aren't met.
type ProductOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductOptionsValidationError) ErrorName() string { return "ProductOptionsValidationError" }

// Error satisfies the builtin error interface
func (e ProductOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductOptionsValidationError{}

// Validate checks the field values on OptionInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OptionInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for Version

	// no validation rules for Metric

	return nil
}

// OptionInfoValidationError is the validation error returned by
// OptionInfo.Validate if the designated constraints aren't met.
type OptionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OptionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OptionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OptionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OptionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OptionInfoValidationError) ErrorName() string { return "OptionInfoValidationError" }

// Error satisfies the builtin error interface
func (e OptionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOptionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OptionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OptionInfoValidationError{}

// Validate checks the field values on ProductAcquiredRights with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAcquiredRights) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SKU

	// no validation rules for SwidTag

	// no validation rules for Metric

	// no validation rules for NumCptLicences

	// no validation rules for NumAcqLicences

	// no validation rules for TotalCost

	// no validation rules for DeltaNumber

	// no validation rules for DeltaCost

	return nil
}

// ProductAcquiredRightsValidationError is the validation error returned by
// ProductAcquiredRights.Validate if the designated constraints aren't met.
type ProductAcquiredRightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAcquiredRightsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAcquiredRightsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAcquiredRightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAcquiredRightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAcquiredRightsValidationError) ErrorName() string {
	return "ProductAcquiredRightsValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAcquiredRightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAcquiredRights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAcquiredRightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAcquiredRightsValidationError{}

// Validate checks the field values on ListEquipmentMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := ListEquipmentMetadataRequest_Type_name[int32(m.GetType())]; !ok {
		return ListEquipmentMetadataRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// ListEquipmentMetadataRequestValidationError is the validation error returned
// by ListEquipmentMetadataRequest.Validate if the designated constraints
// aren't met.
type ListEquipmentMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentMetadataRequestValidationError) ErrorName() string {
	return "ListEquipmentMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentMetadataRequestValidationError{}

// Validate checks the field values on ListEquipmentMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEquipmentMetadataResponseValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEquipmentMetadataResponseValidationError is the validation error
// returned by ListEquipmentMetadataResponse.Validate if the designated
// constraints aren't met.
type ListEquipmentMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentMetadataResponseValidationError) ErrorName() string {
	return "ListEquipmentMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentMetadataResponseValidationError{}

// Validate checks the field values on EquipmentMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EquipmentMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	return nil
}

// EquipmentMetadataValidationError is the validation error returned by
// EquipmentMetadata.Validate if the designated constraints aren't met.
type EquipmentMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentMetadataValidationError) ErrorName() string {
	return "EquipmentMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentMetadataValidationError{}

// Validate checks the field values on EquipmentTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EquipmentTypesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EquipmentTypesRequestValidationError is the validation error returned by
// EquipmentTypesRequest.Validate if the designated constraints aren't met.
type EquipmentTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentTypesRequestValidationError) ErrorName() string {
	return "EquipmentTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentTypesRequestValidationError{}

// Validate checks the field values on EquipmentTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EquipmentTypesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEquipmentTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EquipmentTypesResponseValidationError{
					field:  fmt.Sprintf("EquipmentTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EquipmentTypesResponseValidationError is the validation error returned by
// EquipmentTypesResponse.Validate if the designated constraints aren't met.
type EquipmentTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentTypesResponseValidationError) ErrorName() string {
	return "EquipmentTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentTypesResponseValidationError{}

// Validate checks the field values on EquipmentType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EquipmentType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if !_EquipmentType_Type_Pattern.MatchString(m.GetType()) {
		return EquipmentTypeValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for ParentId

	// no validation rules for ParentType

	// no validation rules for MetadataId

	// no validation rules for MetadataSource

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EquipmentTypeValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EquipmentTypeValidationError is the validation error returned by
// EquipmentType.Validate if the designated constraints aren't met.
type EquipmentTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentTypeValidationError) ErrorName() string { return "EquipmentTypeValidationError" }

// Error satisfies the builtin error interface
func (e EquipmentTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentTypeValidationError{}

var _EquipmentType_Type_Pattern = regexp.MustCompile("^[-_A-Za-z0-9]+$")

// Validate checks the field values on Attribute with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Attribute) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if !_Attribute_Name_Pattern.MatchString(m.GetName()) {
		return AttributeValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[-_A-Za-z0-9]+$\"",
		}
	}

	if _, ok := _Attribute_DataType_InLookup[m.GetDataType()]; !ok {
		return AttributeValidationError{
			field:  "DataType",
			reason: "value must be in list [1 2 3]",
		}
	}

	// no validation rules for PrimaryKey

	// no validation rules for Displayed

	// no validation rules for Searchable

	// no validation rules for ParentIdentifier

	// no validation rules for MappedTo

	return nil
}

// AttributeValidationError is the validation error returned by
// Attribute.Validate if the designated constraints aren't met.
type AttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValidationError) ErrorName() string { return "AttributeValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValidationError{}

var _Attribute_Name_Pattern = regexp.MustCompile("^[-_A-Za-z0-9]+$")

var _Attribute_DataType_InLookup = map[DataTypes]struct{}{
	1: {},
	2: {},
	3: {},
}

// Validate checks the field values on ListAcquiredRightsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcquiredRightsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListAcquiredRightsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val >= 100 {
		return ListAcquiredRightsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 100)",
		}
	}

	if _, ok := ListAcquiredRightsRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListAcquiredRightsRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for SortOrder

	if v, ok := interface{}(m.GetSearchParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAcquiredRightsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListAcquiredRightsRequestValidationError is the validation error returned by
// ListAcquiredRightsRequest.Validate if the designated constraints aren't met.
type ListAcquiredRightsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcquiredRightsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcquiredRightsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcquiredRightsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcquiredRightsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcquiredRightsRequestValidationError) ErrorName() string {
	return "ListAcquiredRightsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcquiredRightsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcquiredRightsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcquiredRightsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcquiredRightsRequestValidationError{}

// Validate checks the field values on AcquiredRightsSearchParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcquiredRightsSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSwidTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcquiredRightsSearchParamsValidationError{
				field:  "SwidTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSKU()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcquiredRightsSearchParamsValidationError{
				field:  "SKU",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcquiredRightsSearchParamsValidationError{
				field:  "Editor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcquiredRightsSearchParamsValidationError{
				field:  "ProductName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcquiredRightsSearchParamsValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AcquiredRightsSearchParamsValidationError is the validation error returned
// by AcquiredRightsSearchParams.Validate if the designated constraints aren't met.
type AcquiredRightsSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcquiredRightsSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcquiredRightsSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcquiredRightsSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcquiredRightsSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcquiredRightsSearchParamsValidationError) ErrorName() string {
	return "AcquiredRightsSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e AcquiredRightsSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcquiredRightsSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcquiredRightsSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcquiredRightsSearchParamsValidationError{}

// Validate checks the field values on ListAcquiredRightsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAcquiredRightsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetAcquiredRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAcquiredRightsResponseValidationError{
					field:  fmt.Sprintf("AcquiredRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcquiredRightsResponseValidationError is the validation error returned
// by ListAcquiredRightsResponse.Validate if the designated constraints aren't met.
type ListAcquiredRightsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcquiredRightsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcquiredRightsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcquiredRightsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcquiredRightsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcquiredRightsResponseValidationError) ErrorName() string {
	return "ListAcquiredRightsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcquiredRightsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcquiredRightsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcquiredRightsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcquiredRightsResponseValidationError{}

// Validate checks the field values on AcquiredRights with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AcquiredRights) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Entity

	// no validation rules for SKU

	// no validation rules for SwidTag

	// no validation rules for ProductName

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for AcquiredLicensesNumber

	// no validation rules for LicensesUnderMaintenanceNumber

	// no validation rules for AvgLicenesUnitPrice

	// no validation rules for AvgMaintenanceUnitPrice

	// no validation rules for TotalPurchaseCost

	// no validation rules for TotalMaintenanceCost

	// no validation rules for TotalCost

	return nil
}

// AcquiredRightsValidationError is the validation error returned by
// AcquiredRights.Validate if the designated constraints aren't met.
type AcquiredRightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcquiredRightsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcquiredRightsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcquiredRightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcquiredRightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcquiredRightsValidationError) ErrorName() string { return "AcquiredRightsValidationError" }

// Error satisfies the builtin error interface
func (e AcquiredRightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcquiredRights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcquiredRightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcquiredRightsValidationError{}

// Validate checks the field values on StringFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilteringOrder

	// no validation rules for Filteringkey

	return nil
}

// StringFilterValidationError is the validation error returned by
// StringFilter.Validate if the designated constraints aren't met.
type StringFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFilterValidationError) ErrorName() string { return "StringFilterValidationError" }

// Error satisfies the builtin error interface
func (e StringFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFilterValidationError{}
