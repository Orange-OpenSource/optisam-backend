// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: license.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _license_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetOverAllComplianceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOverAllComplianceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetOverAllComplianceRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetOverAllComplianceRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Editor

	// no validation rules for Simulation

	return nil
}

// GetOverAllComplianceRequestValidationError is the validation error returned
// by GetOverAllComplianceRequest.Validate if the designated constraints
// aren't met.
type GetOverAllComplianceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverAllComplianceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverAllComplianceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverAllComplianceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverAllComplianceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverAllComplianceRequestValidationError) ErrorName() string {
	return "GetOverAllComplianceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverAllComplianceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverAllComplianceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverAllComplianceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverAllComplianceRequestValidationError{}

var _GetOverAllComplianceRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetOverAllComplianceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOverAllComplianceResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAcqRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return GetOverAllComplianceResponseValidationError{
					field:  fmt.Sprintf("AcqRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetOverAllComplianceResponseValidationError is the validation error returned
// by GetOverAllComplianceResponse.Validate if the designated constraints
// aren't met.
type GetOverAllComplianceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverAllComplianceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverAllComplianceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverAllComplianceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverAllComplianceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverAllComplianceResponseValidationError) ErrorName() string {
	return "GetOverAllComplianceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverAllComplianceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverAllComplianceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverAllComplianceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverAllComplianceResponseValidationError{}

// Validate checks the field values on ListComputationDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListComputationDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	if !_ListComputationDetailsRequest_Sku_Pattern.MatchString(m.GetSku()) {
		return ListComputationDetailsRequestValidationError{
			field:  "Sku",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_.]+$\"",
		}
	}

	if !_ListComputationDetailsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListComputationDetailsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for AggName

	return nil
}

// ListComputationDetailsRequestValidationError is the validation error
// returned by ListComputationDetailsRequest.Validate if the designated
// constraints aren't met.
type ListComputationDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComputationDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComputationDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComputationDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComputationDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComputationDetailsRequestValidationError) ErrorName() string {
	return "ListComputationDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListComputationDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComputationDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComputationDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComputationDetailsRequestValidationError{}

var _ListComputationDetailsRequest_Sku_Pattern = regexp.MustCompile("^[a-zA-Z0-9_.]+$")

var _ListComputationDetailsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListComputationDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListComputationDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetComputedDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListComputationDetailsResponseValidationError{
					field:  fmt.Sprintf("ComputedDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListComputationDetailsResponseValidationError is the validation error
// returned by ListComputationDetailsResponse.Validate if the designated
// constraints aren't met.
type ListComputationDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComputationDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComputationDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComputationDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComputationDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComputationDetailsResponseValidationError) ErrorName() string {
	return "ListComputationDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListComputationDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComputationDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComputationDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComputationDetailsResponseValidationError{}

// Validate checks the field values on ComputedDetails with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ComputedDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetricName

	// no validation rules for NumCptLicences

	// no validation rules for ComputedDetails

	// no validation rules for NumAcqLicences

	// no validation rules for DeltaNumber

	// no validation rules for DeltaCost

	return nil
}

// ComputedDetailsValidationError is the validation error returned by
// ComputedDetails.Validate if the designated constraints aren't met.
type ComputedDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComputedDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComputedDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComputedDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComputedDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComputedDetailsValidationError) ErrorName() string { return "ComputedDetailsValidationError" }

// Error satisfies the builtin error interface
func (e ComputedDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComputedDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComputedDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComputedDetailsValidationError{}

// Validate checks the field values on
// ListAcqRightsForApplicationsProductRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListAcqRightsForApplicationsProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	// no validation rules for ProdId

	if !_ListAcqRightsForApplicationsProductRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListAcqRightsForApplicationsProductRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ListAcqRightsForApplicationsProductRequestValidationError is the validation
// error returned by ListAcqRightsForApplicationsProductRequest.Validate if
// the designated constraints aren't met.
type ListAcqRightsForApplicationsProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsForApplicationsProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsForApplicationsProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsForApplicationsProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsForApplicationsProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsForApplicationsProductRequestValidationError) ErrorName() string {
	return "ListAcqRightsForApplicationsProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsForApplicationsProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsForApplicationsProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsForApplicationsProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsForApplicationsProductRequestValidationError{}

var _ListAcqRightsForApplicationsProductRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on
// ListAcqRightsForApplicationsProductResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListAcqRightsForApplicationsProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAcqRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsForApplicationsProductResponseValidationError{
					field:  fmt.Sprintf("AcqRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsForApplicationsProductResponseValidationError is the validation
// error returned by ListAcqRightsForApplicationsProductResponse.Validate if
// the designated constraints aren't met.
type ListAcqRightsForApplicationsProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsForApplicationsProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsForApplicationsProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsForApplicationsProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsForApplicationsProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsForApplicationsProductResponseValidationError) ErrorName() string {
	return "ListAcqRightsForApplicationsProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsForApplicationsProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsForApplicationsProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsForApplicationsProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsForApplicationsProductResponseValidationError{}

// Validate checks the field values on LicensesForEquipAndMetricRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *LicensesForEquipAndMetricRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EquipType

	// no validation rules for EquipId

	// no validation rules for MetricName

	// no validation rules for MetricType

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return LicensesForEquipAndMetricRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if !_LicensesForEquipAndMetricRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return LicensesForEquipAndMetricRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// LicensesForEquipAndMetricRequestValidationError is the validation error
// returned by LicensesForEquipAndMetricRequest.Validate if the designated
// constraints aren't met.
type LicensesForEquipAndMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicensesForEquipAndMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicensesForEquipAndMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicensesForEquipAndMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicensesForEquipAndMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicensesForEquipAndMetricRequestValidationError) ErrorName() string {
	return "LicensesForEquipAndMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LicensesForEquipAndMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicensesForEquipAndMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicensesForEquipAndMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicensesForEquipAndMetricRequestValidationError{}

var _LicensesForEquipAndMetricRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on LicensesForEquipAndMetricResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *LicensesForEquipAndMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLicenses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return LicensesForEquipAndMetricResponseValidationError{
					field:  fmt.Sprintf("Licenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LicensesForEquipAndMetricResponseValidationError is the validation error
// returned by LicensesForEquipAndMetricResponse.Validate if the designated
// constraints aren't met.
type LicensesForEquipAndMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicensesForEquipAndMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicensesForEquipAndMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicensesForEquipAndMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicensesForEquipAndMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicensesForEquipAndMetricResponseValidationError) ErrorName() string {
	return "LicensesForEquipAndMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LicensesForEquipAndMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicensesForEquipAndMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicensesForEquipAndMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicensesForEquipAndMetricResponseValidationError{}

// Validate checks the field values on ProductLicenseForEquipAndMetric with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductLicenseForEquipAndMetric) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for AggregationName

	// no validation rules for Editor

	// no validation rules for MetricName

	// no validation rules for MetricType

	// no validation rules for OldLicences

	// no validation rules for NewLicenses

	// no validation rules for Delta

	return nil
}

// ProductLicenseForEquipAndMetricValidationError is the validation error
// returned by ProductLicenseForEquipAndMetric.Validate if the designated
// constraints aren't met.
type ProductLicenseForEquipAndMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductLicenseForEquipAndMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductLicenseForEquipAndMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductLicenseForEquipAndMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductLicenseForEquipAndMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductLicenseForEquipAndMetricValidationError) ErrorName() string {
	return "ProductLicenseForEquipAndMetricValidationError"
}

// Error satisfies the builtin error interface
func (e ProductLicenseForEquipAndMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductLicenseForEquipAndMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductLicenseForEquipAndMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductLicenseForEquipAndMetricValidationError{}

// Validate checks the field values on ProductLicensesForMetricRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductLicensesForMetricRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for AggregationName

	// no validation rules for MetricName

	// no validation rules for UnitCost

	if !_ProductLicensesForMetricRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ProductLicensesForMetricRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ProductLicensesForMetricRequestValidationError is the validation error
// returned by ProductLicensesForMetricRequest.Validate if the designated
// constraints aren't met.
type ProductLicensesForMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductLicensesForMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductLicensesForMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductLicensesForMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductLicensesForMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductLicensesForMetricRequestValidationError) ErrorName() string {
	return "ProductLicensesForMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductLicensesForMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductLicensesForMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductLicensesForMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductLicensesForMetricRequestValidationError{}

var _ProductLicensesForMetricRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ProductLicensesForMetricResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ProductLicensesForMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumCptLicences

	// no validation rules for TotalCost

	// no validation rules for MetricName

	return nil
}

// ProductLicensesForMetricResponseValidationError is the validation error
// returned by ProductLicensesForMetricResponse.Validate if the designated
// constraints aren't met.
type ProductLicensesForMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductLicensesForMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductLicensesForMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductLicensesForMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductLicensesForMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductLicensesForMetricResponseValidationError) ErrorName() string {
	return "ProductLicensesForMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductLicensesForMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductLicensesForMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductLicensesForMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductLicensesForMetricResponseValidationError{}

// Validate checks the field values on ListAcqRightsForAggregationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListAcqRightsForAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if !_ListAcqRightsForAggregationRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListAcqRightsForAggregationRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Simulation

	return nil
}

// ListAcqRightsForAggregationRequestValidationError is the validation error
// returned by ListAcqRightsForAggregationRequest.Validate if the designated
// constraints aren't met.
type ListAcqRightsForAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsForAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsForAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsForAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsForAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsForAggregationRequestValidationError) ErrorName() string {
	return "ListAcqRightsForAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsForAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsForAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsForAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsForAggregationRequestValidationError{}

var _ListAcqRightsForAggregationRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAcqRightsForAggregationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListAcqRightsForAggregationResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAcqRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAcqRightsForAggregationResponseValidationError{
					field:  fmt.Sprintf("AcqRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAcqRightsForAggregationResponseValidationError is the validation error
// returned by ListAcqRightsForAggregationResponse.Validate if the designated
// constraints aren't met.
type ListAcqRightsForAggregationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcqRightsForAggregationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcqRightsForAggregationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcqRightsForAggregationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcqRightsForAggregationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcqRightsForAggregationResponseValidationError) ErrorName() string {
	return "ListAcqRightsForAggregationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcqRightsForAggregationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcqRightsForAggregationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcqRightsForAggregationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcqRightsForAggregationResponseValidationError{}

// Validate checks the field values on DeleteAggregationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	return nil
}

// DeleteAggregationRequestValidationError is the validation error returned by
// DeleteAggregationRequest.Validate if the designated constraints aren't met.
type DeleteAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAggregationRequestValidationError) ErrorName() string {
	return "DeleteAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAggregationRequestValidationError{}

// Validate checks the field values on ListMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMetricResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetrices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListMetricResponseValidationError{
					field:  fmt.Sprintf("Metrices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMetricResponseValidationError is the validation error returned by
// ListMetricResponse.Validate if the designated constraints aren't met.
type ListMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricResponseValidationError) ErrorName() string {
	return "ListMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricResponseValidationError{}

// Validate checks the field values on Metric with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metric) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// MetricValidationError is the validation error returned by Metric.Validate if
// the designated constraints aren't met.
type MetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricValidationError) ErrorName() string { return "MetricValidationError" }

// Error satisfies the builtin error interface
func (e MetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricValidationError{}

// Validate checks the field values on ListAcquiredRightsForProductRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListAcquiredRightsForProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	if !_ListAcquiredRightsForProductRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ListAcquiredRightsForProductRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for Simulation

	return nil
}

// ListAcquiredRightsForProductRequestValidationError is the validation error
// returned by ListAcquiredRightsForProductRequest.Validate if the designated
// constraints aren't met.
type ListAcquiredRightsForProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcquiredRightsForProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcquiredRightsForProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcquiredRightsForProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcquiredRightsForProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcquiredRightsForProductRequestValidationError) ErrorName() string {
	return "ListAcquiredRightsForProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcquiredRightsForProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcquiredRightsForProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcquiredRightsForProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcquiredRightsForProductRequestValidationError{}

var _ListAcquiredRightsForProductRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ListAcquiredRightsForProductResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListAcquiredRightsForProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAcqRights() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListAcquiredRightsForProductResponseValidationError{
					field:  fmt.Sprintf("AcqRights[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AggregationName

	return nil
}

// ListAcquiredRightsForProductResponseValidationError is the validation error
// returned by ListAcquiredRightsForProductResponse.Validate if the designated
// constraints aren't met.
type ListAcquiredRightsForProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAcquiredRightsForProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAcquiredRightsForProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAcquiredRightsForProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAcquiredRightsForProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAcquiredRightsForProductResponseValidationError) ErrorName() string {
	return "ListAcquiredRightsForProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAcquiredRightsForProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAcquiredRightsForProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAcquiredRightsForProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAcquiredRightsForProductResponseValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Product) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Category

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for NumCptLicences

	// no validation rules for NumAcqLicences

	// no validation rules for TotalCost

	// no validation rules for DeltaNumber

	// no validation rules for DeltaCost

	// no validation rules for NumOfApplications

	// no validation rules for NumofEquipments

	return nil
}

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Application) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for Name

	// no validation rules for ApplicationOwner

	// no validation rules for NumOfInstances

	// no validation rules for NumofProducts

	// no validation rules for TotalCost

	return nil
}

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

// Validate checks the field values on ProductAcquiredRights with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductAcquiredRights) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SKU

	// no validation rules for SwidTag

	// no validation rules for Metric

	// no validation rules for NumCptLicences

	// no validation rules for NumAcqLicences

	// no validation rules for TotalCost

	// no validation rules for DeltaNumber

	// no validation rules for DeltaCost

	// no validation rules for AvgUnitPrice

	// no validation rules for ComputedDetails

	// no validation rules for MetricNotDefined

	// no validation rules for NotDeployed

	// no validation rules for ProductName

	// no validation rules for PurchaseCost

	// no validation rules for ComputedCost

	// no validation rules for CostOptimization

	return nil
}

// ProductAcquiredRightsValidationError is the validation error returned by
// ProductAcquiredRights.Validate if the designated constraints aren't met.
type ProductAcquiredRightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAcquiredRightsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAcquiredRightsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAcquiredRightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAcquiredRightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAcquiredRightsValidationError) ErrorName() string {
	return "ProductAcquiredRightsValidationError"
}

// Error satisfies the builtin error interface
func (e ProductAcquiredRightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAcquiredRights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAcquiredRightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAcquiredRightsValidationError{}

// Validate checks the field values on AggregationAcquiredRights with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AggregationAcquiredRights) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SKU

	// no validation rules for AggregationName

	// no validation rules for SwidTags

	// no validation rules for Metric

	// no validation rules for NumCptLicences

	// no validation rules for NumAcqLicences

	// no validation rules for TotalCost

	// no validation rules for DeltaNumber

	// no validation rules for DeltaCost

	// no validation rules for AvgUnitPrice

	// no validation rules for ComputedDetails

	// no validation rules for MetricNotDefined

	// no validation rules for NotDeployed

	// no validation rules for ProductNames

	// no validation rules for PurchaseCost

	// no validation rules for ComputedCost

	// no validation rules for CostOptimization

	return nil
}

// AggregationAcquiredRightsValidationError is the validation error returned by
// AggregationAcquiredRights.Validate if the designated constraints aren't met.
type AggregationAcquiredRightsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregationAcquiredRightsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregationAcquiredRightsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregationAcquiredRightsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregationAcquiredRightsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregationAcquiredRightsValidationError) ErrorName() string {
	return "AggregationAcquiredRightsValidationError"
}

// Error satisfies the builtin error interface
func (e AggregationAcquiredRightsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregationAcquiredRights.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregationAcquiredRightsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregationAcquiredRightsValidationError{}

// Validate checks the field values on Attribute with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Attribute) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if !_Attribute_Name_Pattern.MatchString(m.GetName()) {
		return AttributeValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[-_A-Za-z0-9]+$\"",
		}
	}

	if _, ok := _Attribute_DataType_InLookup[m.GetDataType()]; !ok {
		return AttributeValidationError{
			field:  "DataType",
			reason: "value must be in list [1 2 3]",
		}
	}

	// no validation rules for PrimaryKey

	// no validation rules for Displayed

	// no validation rules for Searchable

	// no validation rules for ParentIdentifier

	// no validation rules for MappedTo

	// no validation rules for Simulated

	switch m.Val.(type) {

	case *Attribute_IntVal:
		// no validation rules for IntVal

	case *Attribute_FloatVal:
		// no validation rules for FloatVal

	case *Attribute_StringVal:
		// no validation rules for StringVal

	}

	switch m.OldVal.(type) {

	case *Attribute_IntValOld:
		// no validation rules for IntValOld

	case *Attribute_FloatValOld:
		// no validation rules for FloatValOld

	case *Attribute_StringValOld:
		// no validation rules for StringValOld

	}

	return nil
}

// AttributeValidationError is the validation error returned by
// Attribute.Validate if the designated constraints aren't met.
type AttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValidationError) ErrorName() string { return "AttributeValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValidationError{}

var _Attribute_Name_Pattern = regexp.MustCompile("^[-_A-Za-z0-9]+$")

var _Attribute_DataType_InLookup = map[DataTypes]struct{}{
	1: {},
	2: {},
	3: {},
}
