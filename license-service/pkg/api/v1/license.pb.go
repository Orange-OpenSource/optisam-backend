// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: license.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DataTypes int32

const (
	DataTypes_UNKNOWN DataTypes = 0
	DataTypes_STRING  DataTypes = 1
	DataTypes_INT     DataTypes = 2
	DataTypes_FLOAT   DataTypes = 3
)

// Enum value maps for DataTypes.
var (
	DataTypes_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "INT",
		3: "FLOAT",
	}
	DataTypes_value = map[string]int32{
		"UNKNOWN": 0,
		"STRING":  1,
		"INT":     2,
		"FLOAT":   3,
	}
)

func (x DataTypes) Enum() *DataTypes {
	p := new(DataTypes)
	*p = x
	return p
}

func (x DataTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[0].Descriptor()
}

func (DataTypes) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[0]
}

func (x DataTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTypes.Descriptor instead.
func (DataTypes) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{0}
}

type ListComputationDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag string `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	//repeated string metric_name = 2 [(validate.rules).repeated = {min_items: 1}];
	Sku   string `protobuf:"bytes,3,opt,name=sku,proto3" json:"sku,omitempty"`
	Scope string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListComputationDetailsRequest) Reset() {
	*x = ListComputationDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComputationDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComputationDetailsRequest) ProtoMessage() {}

func (x *ListComputationDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComputationDetailsRequest.ProtoReflect.Descriptor instead.
func (*ListComputationDetailsRequest) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{0}
}

func (x *ListComputationDetailsRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ListComputationDetailsRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ListComputationDetailsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListComputationDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputedDetails []*ComputedDetails `protobuf:"bytes,1,rep,name=computed_details,json=computedDetails,proto3" json:"computed_details,omitempty"`
}

func (x *ListComputationDetailsResponse) Reset() {
	*x = ListComputationDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComputationDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComputationDetailsResponse) ProtoMessage() {}

func (x *ListComputationDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComputationDetailsResponse.ProtoReflect.Descriptor instead.
func (*ListComputationDetailsResponse) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1}
}

func (x *ListComputationDetailsResponse) GetComputedDetails() []*ComputedDetails {
	if x != nil {
		return x.ComputedDetails
	}
	return nil
}

type ComputedDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName      string  `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	NumCptLicences  int32   `protobuf:"varint,2,opt,name=numCptLicences,proto3" json:"numCptLicences,omitempty"`
	ComputedDetails string  `protobuf:"bytes,3,opt,name=computedDetails,proto3" json:"computedDetails,omitempty"`
	NumAcqLicences  int32   `protobuf:"varint,4,opt,name=numAcqLicences,proto3" json:"numAcqLicences,omitempty"`
	DeltaNumber     int32   `protobuf:"varint,5,opt,name=deltaNumber,proto3" json:"deltaNumber,omitempty"`
	DeltaCost       float64 `protobuf:"fixed64,6,opt,name=deltaCost,proto3" json:"deltaCost,omitempty"`
}

func (x *ComputedDetails) Reset() {
	*x = ComputedDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputedDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputedDetails) ProtoMessage() {}

func (x *ComputedDetails) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputedDetails.ProtoReflect.Descriptor instead.
func (*ComputedDetails) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2}
}

func (x *ComputedDetails) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *ComputedDetails) GetNumCptLicences() int32 {
	if x != nil {
		return x.NumCptLicences
	}
	return 0
}

func (x *ComputedDetails) GetComputedDetails() string {
	if x != nil {
		return x.ComputedDetails
	}
	return ""
}

func (x *ComputedDetails) GetNumAcqLicences() int32 {
	if x != nil {
		return x.NumAcqLicences
	}
	return 0
}

func (x *ComputedDetails) GetDeltaNumber() int32 {
	if x != nil {
		return x.DeltaNumber
	}
	return 0
}

func (x *ComputedDetails) GetDeltaCost() float64 {
	if x != nil {
		return x.DeltaCost
	}
	return 0
}

type ListAcqRightsForApplicationsProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId  string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProdId string `protobuf:"bytes,2,opt,name=prod_id,json=prodId,proto3" json:"prod_id,omitempty"`
	Scope  string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListAcqRightsForApplicationsProductRequest) Reset() {
	*x = ListAcqRightsForApplicationsProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsForApplicationsProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsForApplicationsProductRequest) ProtoMessage() {}

func (x *ListAcqRightsForApplicationsProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsForApplicationsProductRequest.ProtoReflect.Descriptor instead.
func (*ListAcqRightsForApplicationsProductRequest) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{3}
}

func (x *ListAcqRightsForApplicationsProductRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ListAcqRightsForApplicationsProductRequest) GetProdId() string {
	if x != nil {
		return x.ProdId
	}
	return ""
}

func (x *ListAcqRightsForApplicationsProductRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListAcqRightsForApplicationsProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcqRights []*ProductAcquiredRights `protobuf:"bytes,1,rep,name=acq_rights,json=acqRights,proto3" json:"acq_rights,omitempty"`
}

func (x *ListAcqRightsForApplicationsProductResponse) Reset() {
	*x = ListAcqRightsForApplicationsProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsForApplicationsProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsForApplicationsProductResponse) ProtoMessage() {}

func (x *ListAcqRightsForApplicationsProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsForApplicationsProductResponse.ProtoReflect.Descriptor instead.
func (*ListAcqRightsForApplicationsProductResponse) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{4}
}

func (x *ListAcqRightsForApplicationsProductResponse) GetAcqRights() []*ProductAcquiredRights {
	if x != nil {
		return x.AcqRights
	}
	return nil
}

type LicensesForEquipAndMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipType  string       `protobuf:"bytes,1,opt,name=equip_type,json=equipType,proto3" json:"equip_type,omitempty"`
	EquipId    string       `protobuf:"bytes,2,opt,name=equip_id,json=equipId,proto3" json:"equip_id,omitempty"`
	MetricType string       `protobuf:"bytes,3,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	MetricName string       `protobuf:"bytes,4,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Scope      string       `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *LicensesForEquipAndMetricRequest) Reset() {
	*x = LicensesForEquipAndMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicensesForEquipAndMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicensesForEquipAndMetricRequest) ProtoMessage() {}

func (x *LicensesForEquipAndMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicensesForEquipAndMetricRequest.ProtoReflect.Descriptor instead.
func (*LicensesForEquipAndMetricRequest) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{5}
}

func (x *LicensesForEquipAndMetricRequest) GetEquipType() string {
	if x != nil {
		return x.EquipType
	}
	return ""
}

func (x *LicensesForEquipAndMetricRequest) GetEquipId() string {
	if x != nil {
		return x.EquipId
	}
	return ""
}

func (x *LicensesForEquipAndMetricRequest) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

func (x *LicensesForEquipAndMetricRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *LicensesForEquipAndMetricRequest) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *LicensesForEquipAndMetricRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type LicensesForEquipAndMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Licenses []*ProductLicenseForEquipAndMetric `protobuf:"bytes,1,rep,name=licenses,proto3" json:"licenses,omitempty"`
}

func (x *LicensesForEquipAndMetricResponse) Reset() {
	*x = LicensesForEquipAndMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicensesForEquipAndMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicensesForEquipAndMetricResponse) ProtoMessage() {}

func (x *LicensesForEquipAndMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicensesForEquipAndMetricResponse.ProtoReflect.Descriptor instead.
func (*LicensesForEquipAndMetricResponse) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{6}
}

func (x *LicensesForEquipAndMetricResponse) GetLicenses() []*ProductLicenseForEquipAndMetric {
	if x != nil {
		return x.Licenses
	}
	return nil
}

type ProductLicenseForEquipAndMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName  string   `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	OldLicences int64    `protobuf:"varint,2,opt,name=old_licences,json=oldLicences,proto3" json:"old_licences,omitempty"`
	NewLicenses int64    `protobuf:"varint,3,opt,name=new_licenses,json=newLicenses,proto3" json:"new_licenses,omitempty"`
	Delta       int64    `protobuf:"varint,4,opt,name=delta,proto3" json:"delta,omitempty"`
	Product     *Product `protobuf:"bytes,5,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *ProductLicenseForEquipAndMetric) Reset() {
	*x = ProductLicenseForEquipAndMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductLicenseForEquipAndMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductLicenseForEquipAndMetric) ProtoMessage() {}

func (x *ProductLicenseForEquipAndMetric) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductLicenseForEquipAndMetric.ProtoReflect.Descriptor instead.
func (*ProductLicenseForEquipAndMetric) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{7}
}

func (x *ProductLicenseForEquipAndMetric) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *ProductLicenseForEquipAndMetric) GetOldLicences() int64 {
	if x != nil {
		return x.OldLicences
	}
	return 0
}

func (x *ProductLicenseForEquipAndMetric) GetNewLicenses() int64 {
	if x != nil {
		return x.NewLicenses
	}
	return 0
}

func (x *ProductLicenseForEquipAndMetric) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *ProductLicenseForEquipAndMetric) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

type ProductLicensesForMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag    string  `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	MetricName string  `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	UnitCost   float64 `protobuf:"fixed64,3,opt,name=unit_cost,json=unitCost,proto3" json:"unit_cost,omitempty"`
	Scope      string  `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ProductLicensesForMetricRequest) Reset() {
	*x = ProductLicensesForMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductLicensesForMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductLicensesForMetricRequest) ProtoMessage() {}

func (x *ProductLicensesForMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductLicensesForMetricRequest.ProtoReflect.Descriptor instead.
func (*ProductLicensesForMetricRequest) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{8}
}

func (x *ProductLicensesForMetricRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductLicensesForMetricRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *ProductLicensesForMetricRequest) GetUnitCost() float64 {
	if x != nil {
		return x.UnitCost
	}
	return 0
}

func (x *ProductLicensesForMetricRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ProductLicensesForMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumCptLicences uint64  `protobuf:"varint,1,opt,name=numCptLicences,proto3" json:"numCptLicences,omitempty"`
	TotalCost      float64 `protobuf:"fixed64,2,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	MetricName     string  `protobuf:"bytes,3,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
}

func (x *ProductLicensesForMetricResponse) Reset() {
	*x = ProductLicensesForMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductLicensesForMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductLicensesForMetricResponse) ProtoMessage() {}

func (x *ProductLicensesForMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductLicensesForMetricResponse.ProtoReflect.Descriptor instead.
func (*ProductLicensesForMetricResponse) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{9}
}

func (x *ProductLicensesForMetricResponse) GetNumCptLicences() uint64 {
	if x != nil {
		return x.NumCptLicences
	}
	return 0
}

func (x *ProductLicensesForMetricResponse) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *ProductLicensesForMetricResponse) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

type ListAcqRightsForAggregationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListAcqRightsForAggregationRequest) Reset() {
	*x = ListAcqRightsForAggregationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsForAggregationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsForAggregationRequest) ProtoMessage() {}

func (x *ListAcqRightsForAggregationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsForAggregationRequest.ProtoReflect.Descriptor instead.
func (*ListAcqRightsForAggregationRequest) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{10}
}

func (x *ListAcqRightsForAggregationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListAcqRightsForAggregationRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListAcqRightsForAggregationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcqRights []*AggregationAcquiredRights `protobuf:"bytes,1,rep,name=acq_rights,json=acqRights,proto3" json:"acq_rights,omitempty"`
}

func (x *ListAcqRightsForAggregationResponse) Reset() {
	*x = ListAcqRightsForAggregationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcqRightsForAggregationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcqRightsForAggregationResponse) ProtoMessage() {}

func (x *ListAcqRightsForAggregationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcqRightsForAggregationResponse.ProtoReflect.Descriptor instead.
func (*ListAcqRightsForAggregationResponse) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{11}
}

func (x *ListAcqRightsForAggregationResponse) GetAcqRights() []*AggregationAcquiredRights {
	if x != nil {
		return x.AcqRights
	}
	return nil
}

type DeleteAggregationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteAggregationRequest) Reset() {
	*x = DeleteAggregationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAggregationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAggregationRequest) ProtoMessage() {}

func (x *DeleteAggregationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAggregationRequest.ProtoReflect.Descriptor instead.
func (*DeleteAggregationRequest) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteAggregationRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ListMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrices []*Metric `protobuf:"bytes,1,rep,name=metrices,proto3" json:"metrices,omitempty"`
}

func (x *ListMetricResponse) Reset() {
	*x = ListMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricResponse) ProtoMessage() {}

func (x *ListMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricResponse.ProtoReflect.Descriptor instead.
func (*ListMetricResponse) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{13}
}

func (x *ListMetricResponse) GetMetrices() []*Metric {
	if x != nil {
		return x.Metrices
	}
	return nil
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{14}
}

func (x *Metric) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ListAcquiredRightsForProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag string `protobuf:"bytes,1,opt,name=swid_tag,json=swidTag,proto3" json:"swid_tag,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListAcquiredRightsForProductRequest) Reset() {
	*x = ListAcquiredRightsForProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcquiredRightsForProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcquiredRightsForProductRequest) ProtoMessage() {}

func (x *ListAcquiredRightsForProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcquiredRightsForProductRequest.ProtoReflect.Descriptor instead.
func (*ListAcquiredRightsForProductRequest) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{15}
}

func (x *ListAcquiredRightsForProductRequest) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ListAcquiredRightsForProductRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListAcquiredRightsForProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcqRights       []*ProductAcquiredRights `protobuf:"bytes,1,rep,name=acq_rights,json=acqRights,proto3" json:"acq_rights,omitempty"`
	AggregationName string                   `protobuf:"bytes,2,opt,name=aggregation_name,json=aggregationName,proto3" json:"aggregation_name,omitempty"`
}

func (x *ListAcquiredRightsForProductResponse) Reset() {
	*x = ListAcquiredRightsForProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcquiredRightsForProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcquiredRightsForProductResponse) ProtoMessage() {}

func (x *ListAcquiredRightsForProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcquiredRightsForProductResponse.ProtoReflect.Descriptor instead.
func (*ListAcquiredRightsForProductResponse) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{16}
}

func (x *ListAcquiredRightsForProductResponse) GetAcqRights() []*ProductAcquiredRights {
	if x != nil {
		return x.AcqRights
	}
	return nil
}

func (x *ListAcquiredRightsForProductResponse) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwidTag           string  `protobuf:"bytes,1,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version           string  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Category          string  `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Editor            string  `protobuf:"bytes,5,opt,name=editor,proto3" json:"editor,omitempty"`
	Metric            string  `protobuf:"bytes,6,opt,name=metric,proto3" json:"metric,omitempty"`
	NumCptLicences    int32   `protobuf:"varint,7,opt,name=numCptLicences,proto3" json:"numCptLicences,omitempty"`
	NumAcqLicences    int32   `protobuf:"varint,8,opt,name=numAcqLicences,proto3" json:"numAcqLicences,omitempty"`
	TotalCost         float64 `protobuf:"fixed64,9,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	DeltaNumber       int32   `protobuf:"varint,10,opt,name=deltaNumber,proto3" json:"deltaNumber,omitempty"`
	DeltaCost         float64 `protobuf:"fixed64,11,opt,name=deltaCost,proto3" json:"deltaCost,omitempty"`
	NumOfApplications int32   `protobuf:"varint,12,opt,name=numOfApplications,proto3" json:"numOfApplications,omitempty"`
	NumofEquipments   int32   `protobuf:"varint,13,opt,name=numofEquipments,proto3" json:"numofEquipments,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{17}
}

func (x *Product) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Product) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Product) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *Product) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *Product) GetNumCptLicences() int32 {
	if x != nil {
		return x.NumCptLicences
	}
	return 0
}

func (x *Product) GetNumAcqLicences() int32 {
	if x != nil {
		return x.NumAcqLicences
	}
	return 0
}

func (x *Product) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *Product) GetDeltaNumber() int32 {
	if x != nil {
		return x.DeltaNumber
	}
	return 0
}

func (x *Product) GetDeltaCost() float64 {
	if x != nil {
		return x.DeltaCost
	}
	return 0
}

func (x *Product) GetNumOfApplications() int32 {
	if x != nil {
		return x.NumOfApplications
	}
	return 0
}

func (x *Product) GetNumofEquipments() int32 {
	if x != nil {
		return x.NumofEquipments
	}
	return 0
}

type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId    string  `protobuf:"bytes,1,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ApplicationOwner string  `protobuf:"bytes,3,opt,name=application_owner,json=applicationOwner,proto3" json:"application_owner,omitempty"`
	NumOfInstances   int32   `protobuf:"varint,4,opt,name=numOfInstances,proto3" json:"numOfInstances,omitempty"`
	NumofProducts    int32   `protobuf:"varint,5,opt,name=numofProducts,proto3" json:"numofProducts,omitempty"`
	TotalCost        float64 `protobuf:"fixed64,6,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{18}
}

func (x *Application) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetApplicationOwner() string {
	if x != nil {
		return x.ApplicationOwner
	}
	return ""
}

func (x *Application) GetNumOfInstances() int32 {
	if x != nil {
		return x.NumOfInstances
	}
	return 0
}

func (x *Application) GetNumofProducts() int32 {
	if x != nil {
		return x.NumofProducts
	}
	return 0
}

func (x *Application) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

type ProductAcquiredRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SKU              string  `protobuf:"bytes,1,opt,name=SKU,proto3" json:"SKU,omitempty"`
	SwidTag          string  `protobuf:"bytes,2,opt,name=swidTag,proto3" json:"swidTag,omitempty"`
	Metric           string  `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"`
	NumCptLicences   int32   `protobuf:"varint,4,opt,name=numCptLicences,proto3" json:"numCptLicences,omitempty"`
	NumAcqLicences   int32   `protobuf:"varint,5,opt,name=numAcqLicences,proto3" json:"numAcqLicences,omitempty"`
	TotalCost        float64 `protobuf:"fixed64,6,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	DeltaNumber      int32   `protobuf:"varint,7,opt,name=deltaNumber,proto3" json:"deltaNumber,omitempty"`
	DeltaCost        float64 `protobuf:"fixed64,8,opt,name=deltaCost,proto3" json:"deltaCost,omitempty"`
	AvgUnitPrice     float64 `protobuf:"fixed64,9,opt,name=avgUnitPrice,proto3" json:"avgUnitPrice,omitempty"`
	ComputedDetails  string  `protobuf:"bytes,10,opt,name=computedDetails,proto3" json:"computedDetails,omitempty"`
	MetricNotDefined bool    `protobuf:"varint,11,opt,name=metricNotDefined,proto3" json:"metricNotDefined,omitempty"`
}

func (x *ProductAcquiredRights) Reset() {
	*x = ProductAcquiredRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAcquiredRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAcquiredRights) ProtoMessage() {}

func (x *ProductAcquiredRights) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAcquiredRights.ProtoReflect.Descriptor instead.
func (*ProductAcquiredRights) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{19}
}

func (x *ProductAcquiredRights) GetSKU() string {
	if x != nil {
		return x.SKU
	}
	return ""
}

func (x *ProductAcquiredRights) GetSwidTag() string {
	if x != nil {
		return x.SwidTag
	}
	return ""
}

func (x *ProductAcquiredRights) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *ProductAcquiredRights) GetNumCptLicences() int32 {
	if x != nil {
		return x.NumCptLicences
	}
	return 0
}

func (x *ProductAcquiredRights) GetNumAcqLicences() int32 {
	if x != nil {
		return x.NumAcqLicences
	}
	return 0
}

func (x *ProductAcquiredRights) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *ProductAcquiredRights) GetDeltaNumber() int32 {
	if x != nil {
		return x.DeltaNumber
	}
	return 0
}

func (x *ProductAcquiredRights) GetDeltaCost() float64 {
	if x != nil {
		return x.DeltaCost
	}
	return 0
}

func (x *ProductAcquiredRights) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *ProductAcquiredRights) GetComputedDetails() string {
	if x != nil {
		return x.ComputedDetails
	}
	return ""
}

func (x *ProductAcquiredRights) GetMetricNotDefined() bool {
	if x != nil {
		return x.MetricNotDefined
	}
	return false
}

type AggregationAcquiredRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SKU              string  `protobuf:"bytes,1,opt,name=SKU,proto3" json:"SKU,omitempty"`
	AggregationName  string  `protobuf:"bytes,2,opt,name=aggregationName,proto3" json:"aggregationName,omitempty"`
	SwidTags         string  `protobuf:"bytes,3,opt,name=swidTags,proto3" json:"swidTags,omitempty"`
	Metric           string  `protobuf:"bytes,4,opt,name=metric,proto3" json:"metric,omitempty"`
	NumCptLicences   int32   `protobuf:"varint,5,opt,name=numCptLicences,proto3" json:"numCptLicences,omitempty"`
	NumAcqLicences   int32   `protobuf:"varint,6,opt,name=numAcqLicences,proto3" json:"numAcqLicences,omitempty"`
	TotalCost        float64 `protobuf:"fixed64,7,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	DeltaNumber      int32   `protobuf:"varint,8,opt,name=deltaNumber,proto3" json:"deltaNumber,omitempty"`
	DeltaCost        float64 `protobuf:"fixed64,9,opt,name=deltaCost,proto3" json:"deltaCost,omitempty"`
	AvgUnitPrice     float64 `protobuf:"fixed64,10,opt,name=avgUnitPrice,proto3" json:"avgUnitPrice,omitempty"`
	ComputedDetails  string  `protobuf:"bytes,11,opt,name=computedDetails,proto3" json:"computedDetails,omitempty"`
	MetricNotDefined bool    `protobuf:"varint,12,opt,name=metricNotDefined,proto3" json:"metricNotDefined,omitempty"`
}

func (x *AggregationAcquiredRights) Reset() {
	*x = AggregationAcquiredRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationAcquiredRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationAcquiredRights) ProtoMessage() {}

func (x *AggregationAcquiredRights) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationAcquiredRights.ProtoReflect.Descriptor instead.
func (*AggregationAcquiredRights) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{20}
}

func (x *AggregationAcquiredRights) GetSKU() string {
	if x != nil {
		return x.SKU
	}
	return ""
}

func (x *AggregationAcquiredRights) GetAggregationName() string {
	if x != nil {
		return x.AggregationName
	}
	return ""
}

func (x *AggregationAcquiredRights) GetSwidTags() string {
	if x != nil {
		return x.SwidTags
	}
	return ""
}

func (x *AggregationAcquiredRights) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *AggregationAcquiredRights) GetNumCptLicences() int32 {
	if x != nil {
		return x.NumCptLicences
	}
	return 0
}

func (x *AggregationAcquiredRights) GetNumAcqLicences() int32 {
	if x != nil {
		return x.NumAcqLicences
	}
	return 0
}

func (x *AggregationAcquiredRights) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *AggregationAcquiredRights) GetDeltaNumber() int32 {
	if x != nil {
		return x.DeltaNumber
	}
	return 0
}

func (x *AggregationAcquiredRights) GetDeltaCost() float64 {
	if x != nil {
		return x.DeltaCost
	}
	return 0
}

func (x *AggregationAcquiredRights) GetAvgUnitPrice() float64 {
	if x != nil {
		return x.AvgUnitPrice
	}
	return 0
}

func (x *AggregationAcquiredRights) GetComputedDetails() string {
	if x != nil {
		return x.ComputedDetails
	}
	return ""
}

func (x *AggregationAcquiredRights) GetMetricNotDefined() bool {
	if x != nil {
		return x.MetricNotDefined
	}
	return false
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name             string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DataType         DataTypes `protobuf:"varint,3,opt,name=data_type,json=dataType,proto3,enum=optisam.license.v1.DataTypes" json:"data_type,omitempty"`
	PrimaryKey       bool      `protobuf:"varint,4,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	Displayed        bool      `protobuf:"varint,5,opt,name=displayed,proto3" json:"displayed,omitempty"`
	Searchable       bool      `protobuf:"varint,6,opt,name=searchable,proto3" json:"searchable,omitempty"`
	ParentIdentifier bool      `protobuf:"varint,7,opt,name=parent_identifier,json=parentIdentifier,proto3" json:"parent_identifier,omitempty"`
	MappedTo         string    `protobuf:"bytes,8,opt,name=mapped_to,json=mappedTo,proto3" json:"mapped_to,omitempty"`
	Simulated        bool      `protobuf:"varint,9,opt,name=simulated,proto3" json:"simulated,omitempty"`
	// Types that are assignable to Val:
	//	*Attribute_IntVal
	//	*Attribute_FloatVal
	//	*Attribute_StringVal
	Val isAttribute_Val `protobuf_oneof:"val"`
	// Types that are assignable to OldVal:
	//	*Attribute_IntValOld
	//	*Attribute_FloatValOld
	//	*Attribute_StringValOld
	OldVal isAttribute_OldVal `protobuf_oneof:"old_val"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{21}
}

func (x *Attribute) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attribute) GetDataType() DataTypes {
	if x != nil {
		return x.DataType
	}
	return DataTypes_UNKNOWN
}

func (x *Attribute) GetPrimaryKey() bool {
	if x != nil {
		return x.PrimaryKey
	}
	return false
}

func (x *Attribute) GetDisplayed() bool {
	if x != nil {
		return x.Displayed
	}
	return false
}

func (x *Attribute) GetSearchable() bool {
	if x != nil {
		return x.Searchable
	}
	return false
}

func (x *Attribute) GetParentIdentifier() bool {
	if x != nil {
		return x.ParentIdentifier
	}
	return false
}

func (x *Attribute) GetMappedTo() string {
	if x != nil {
		return x.MappedTo
	}
	return ""
}

func (x *Attribute) GetSimulated() bool {
	if x != nil {
		return x.Simulated
	}
	return false
}

func (m *Attribute) GetVal() isAttribute_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *Attribute) GetIntVal() int32 {
	if x, ok := x.GetVal().(*Attribute_IntVal); ok {
		return x.IntVal
	}
	return 0
}

func (x *Attribute) GetFloatVal() float32 {
	if x, ok := x.GetVal().(*Attribute_FloatVal); ok {
		return x.FloatVal
	}
	return 0
}

func (x *Attribute) GetStringVal() string {
	if x, ok := x.GetVal().(*Attribute_StringVal); ok {
		return x.StringVal
	}
	return ""
}

func (m *Attribute) GetOldVal() isAttribute_OldVal {
	if m != nil {
		return m.OldVal
	}
	return nil
}

func (x *Attribute) GetIntValOld() int32 {
	if x, ok := x.GetOldVal().(*Attribute_IntValOld); ok {
		return x.IntValOld
	}
	return 0
}

func (x *Attribute) GetFloatValOld() float32 {
	if x, ok := x.GetOldVal().(*Attribute_FloatValOld); ok {
		return x.FloatValOld
	}
	return 0
}

func (x *Attribute) GetStringValOld() string {
	if x, ok := x.GetOldVal().(*Attribute_StringValOld); ok {
		return x.StringValOld
	}
	return ""
}

type isAttribute_Val interface {
	isAttribute_Val()
}

type Attribute_IntVal struct {
	IntVal int32 `protobuf:"varint,10,opt,name=int_val,json=intVal,proto3,oneof"`
}

type Attribute_FloatVal struct {
	FloatVal float32 `protobuf:"fixed32,11,opt,name=float_val,json=floatVal,proto3,oneof"`
}

type Attribute_StringVal struct {
	StringVal string `protobuf:"bytes,12,opt,name=string_val,json=stringVal,proto3,oneof"`
}

func (*Attribute_IntVal) isAttribute_Val() {}

func (*Attribute_FloatVal) isAttribute_Val() {}

func (*Attribute_StringVal) isAttribute_Val() {}

type isAttribute_OldVal interface {
	isAttribute_OldVal()
}

type Attribute_IntValOld struct {
	IntValOld int32 `protobuf:"varint,13,opt,name=int_val_old,json=intValOld,proto3,oneof"`
}

type Attribute_FloatValOld struct {
	FloatValOld float32 `protobuf:"fixed32,14,opt,name=float_val_old,json=floatValOld,proto3,oneof"`
}

type Attribute_StringValOld struct {
	StringValOld string `protobuf:"bytes,15,opt,name=string_val_old,json=stringValOld,proto3,oneof"`
}

func (*Attribute_IntValOld) isAttribute_OldVal() {}

func (*Attribute_FloatValOld) isAttribute_OldVal() {}

func (*Attribute_StringValOld) isAttribute_OldVal() {}

var File_license_proto protoreflect.FileDescriptor

var file_license_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73,
	0x6b, 0x75, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a,
	0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x70, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0xec, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75,
	0x6d, 0x43, 0x70, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x71,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6e, 0x75, 0x6d, 0x41, 0x63, 0x71, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x87,
	0x01, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42,
	0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c,
	0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x77, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x61, 0x63, 0x71, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x09, 0x61, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x22, 0x88, 0x02, 0x0a, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x71, 0x75, 0x69, 0x70, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d,
	0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d,
	0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x21,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x41, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41,
	0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x6e, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x6c, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65,
	0x77, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x1f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5c,
	0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x70,
	0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x63, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32,
	0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x22, 0x73, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x61,
	0x63, 0x71, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x09,
	0x61, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x32,
	0x0c, 0x5c, 0x62, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x5c, 0x62, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x0a, 0x61, 0x63, 0x71, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x09, 0x61, 0x63,
	0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x43,
	0x70, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75,
	0x6d, 0x41, 0x63, 0x71, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x71, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d,
	0x4f, 0x66, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x6f, 0x66,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6e, 0x75, 0x6d, 0x6f, 0x66, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x83, 0x03, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x4b, 0x55, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x53, 0x4b, 0x55, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x69, 0x64, 0x54, 0x61,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d,
	0x43, 0x70, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x71, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x41, 0x63,
	0x71, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61,
	0x76, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e,
	0x6f, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x22, 0xb3, 0x03, 0x0a, 0x19, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x53, 0x4b, 0x55, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x4b,
	0x55, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x77, 0x69, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x74, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x41, 0x63,
	0x71, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x71, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x76, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x6f, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0xb6, 0x04, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x2d, 0x5f,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x82, 0x01, 0x06, 0x18, 0x01, 0x18, 0x02,
	0x18, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x4f, 0x6c, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x6f, 0x6c,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x4f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x4f, 0x6c, 0x64, 0x42, 0x05,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x2a, 0x38, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x32, 0x97, 0x0a, 0x0a, 0x0e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc7, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x7b, 0x73,
	0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x7d, 0x2f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0xe8, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x3e, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x7b, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x7d,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x71, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0xc9, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x33, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22,
	0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x7b, 0x73, 0x77, 0x69, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xf6, 0x01, 0x0a, 0x19,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x41, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41,
	0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x22, 0x61,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x7b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x3a, 0x01, 0x2a, 0x42, 0x2c, 0x5a, 0x2a, 0x6f, 0x70, 0x74, 0x69, 0x73, 0x61, 0x6d, 0x2d,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_license_proto_rawDescOnce sync.Once
	file_license_proto_rawDescData = file_license_proto_rawDesc
)

func file_license_proto_rawDescGZIP() []byte {
	file_license_proto_rawDescOnce.Do(func() {
		file_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_license_proto_rawDescData)
	})
	return file_license_proto_rawDescData
}

var file_license_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_license_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_license_proto_goTypes = []interface{}{
	(DataTypes)(0),                                      // 0: optisam.license.v1.DataTypes
	(*ListComputationDetailsRequest)(nil),               // 1: optisam.license.v1.ListComputationDetailsRequest
	(*ListComputationDetailsResponse)(nil),              // 2: optisam.license.v1.ListComputationDetailsResponse
	(*ComputedDetails)(nil),                             // 3: optisam.license.v1.ComputedDetails
	(*ListAcqRightsForApplicationsProductRequest)(nil),  // 4: optisam.license.v1.ListAcqRightsForApplicationsProductRequest
	(*ListAcqRightsForApplicationsProductResponse)(nil), // 5: optisam.license.v1.ListAcqRightsForApplicationsProductResponse
	(*LicensesForEquipAndMetricRequest)(nil),            // 6: optisam.license.v1.LicensesForEquipAndMetricRequest
	(*LicensesForEquipAndMetricResponse)(nil),           // 7: optisam.license.v1.LicensesForEquipAndMetricResponse
	(*ProductLicenseForEquipAndMetric)(nil),             // 8: optisam.license.v1.ProductLicenseForEquipAndMetric
	(*ProductLicensesForMetricRequest)(nil),             // 9: optisam.license.v1.ProductLicensesForMetricRequest
	(*ProductLicensesForMetricResponse)(nil),            // 10: optisam.license.v1.ProductLicensesForMetricResponse
	(*ListAcqRightsForAggregationRequest)(nil),          // 11: optisam.license.v1.ListAcqRightsForAggregationRequest
	(*ListAcqRightsForAggregationResponse)(nil),         // 12: optisam.license.v1.ListAcqRightsForAggregationResponse
	(*DeleteAggregationRequest)(nil),                    // 13: optisam.license.v1.DeleteAggregationRequest
	(*ListMetricResponse)(nil),                          // 14: optisam.license.v1.ListMetricResponse
	(*Metric)(nil),                                      // 15: optisam.license.v1.Metric
	(*ListAcquiredRightsForProductRequest)(nil),         // 16: optisam.license.v1.ListAcquiredRightsForProductRequest
	(*ListAcquiredRightsForProductResponse)(nil),        // 17: optisam.license.v1.ListAcquiredRightsForProductResponse
	(*Product)(nil),                                     // 18: optisam.license.v1.Product
	(*Application)(nil),                                 // 19: optisam.license.v1.Application
	(*ProductAcquiredRights)(nil),                       // 20: optisam.license.v1.ProductAcquiredRights
	(*AggregationAcquiredRights)(nil),                   // 21: optisam.license.v1.AggregationAcquiredRights
	(*Attribute)(nil),                                   // 22: optisam.license.v1.Attribute
}
var file_license_proto_depIdxs = []int32{
	3,  // 0: optisam.license.v1.ListComputationDetailsResponse.computed_details:type_name -> optisam.license.v1.ComputedDetails
	20, // 1: optisam.license.v1.ListAcqRightsForApplicationsProductResponse.acq_rights:type_name -> optisam.license.v1.ProductAcquiredRights
	22, // 2: optisam.license.v1.LicensesForEquipAndMetricRequest.attributes:type_name -> optisam.license.v1.Attribute
	8,  // 3: optisam.license.v1.LicensesForEquipAndMetricResponse.licenses:type_name -> optisam.license.v1.ProductLicenseForEquipAndMetric
	18, // 4: optisam.license.v1.ProductLicenseForEquipAndMetric.product:type_name -> optisam.license.v1.Product
	21, // 5: optisam.license.v1.ListAcqRightsForAggregationResponse.acq_rights:type_name -> optisam.license.v1.AggregationAcquiredRights
	15, // 6: optisam.license.v1.ListMetricResponse.metrices:type_name -> optisam.license.v1.Metric
	20, // 7: optisam.license.v1.ListAcquiredRightsForProductResponse.acq_rights:type_name -> optisam.license.v1.ProductAcquiredRights
	0,  // 8: optisam.license.v1.Attribute.data_type:type_name -> optisam.license.v1.DataTypes
	16, // 9: optisam.license.v1.LicenseService.ListAcqRightsForProduct:input_type -> optisam.license.v1.ListAcquiredRightsForProductRequest
	4,  // 10: optisam.license.v1.LicenseService.ListAcqRightsForApplicationsProduct:input_type -> optisam.license.v1.ListAcqRightsForApplicationsProductRequest
	1,  // 11: optisam.license.v1.LicenseService.ListComputationDetails:input_type -> optisam.license.v1.ListComputationDetailsRequest
	11, // 12: optisam.license.v1.LicenseService.ListAcqRightsForAggregation:input_type -> optisam.license.v1.ListAcqRightsForAggregationRequest
	9,  // 13: optisam.license.v1.LicenseService.ProductLicensesForMetric:input_type -> optisam.license.v1.ProductLicensesForMetricRequest
	6,  // 14: optisam.license.v1.LicenseService.LicensesForEquipAndMetric:input_type -> optisam.license.v1.LicensesForEquipAndMetricRequest
	17, // 15: optisam.license.v1.LicenseService.ListAcqRightsForProduct:output_type -> optisam.license.v1.ListAcquiredRightsForProductResponse
	5,  // 16: optisam.license.v1.LicenseService.ListAcqRightsForApplicationsProduct:output_type -> optisam.license.v1.ListAcqRightsForApplicationsProductResponse
	2,  // 17: optisam.license.v1.LicenseService.ListComputationDetails:output_type -> optisam.license.v1.ListComputationDetailsResponse
	12, // 18: optisam.license.v1.LicenseService.ListAcqRightsForAggregation:output_type -> optisam.license.v1.ListAcqRightsForAggregationResponse
	10, // 19: optisam.license.v1.LicenseService.ProductLicensesForMetric:output_type -> optisam.license.v1.ProductLicensesForMetricResponse
	7,  // 20: optisam.license.v1.LicenseService.LicensesForEquipAndMetric:output_type -> optisam.license.v1.LicensesForEquipAndMetricResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_license_proto_init() }
func file_license_proto_init() {
	if File_license_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_license_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComputationDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComputationDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputedDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsForApplicationsProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsForApplicationsProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicensesForEquipAndMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicensesForEquipAndMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductLicenseForEquipAndMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductLicensesForMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductLicensesForMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsForAggregationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcqRightsForAggregationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAggregationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcquiredRightsForProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcquiredRightsForProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAcquiredRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationAcquiredRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_license_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Attribute_IntVal)(nil),
		(*Attribute_FloatVal)(nil),
		(*Attribute_StringVal)(nil),
		(*Attribute_IntValOld)(nil),
		(*Attribute_FloatValOld)(nil),
		(*Attribute_StringValOld)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_license_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_license_proto_goTypes,
		DependencyIndexes: file_license_proto_depIdxs,
		EnumInfos:         file_license_proto_enumTypes,
		MessageInfos:      file_license_proto_msgTypes,
	}.Build()
	File_license_proto = out.File
	file_license_proto_rawDesc = nil
	file_license_proto_goTypes = nil
	file_license_proto_depIdxs = nil
}
