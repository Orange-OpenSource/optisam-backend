// Code generated by MockGen. DO NOT EDIT.
// Source: optisam-backend/license-service/pkg/api/v1 (interfaces: LicenseServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	v1 "optisam-backend/license-service/pkg/api/v1"
	reflect "reflect"
)

// MockLicenseServiceClient is a mock of LicenseServiceClient interface
type MockLicenseServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseServiceClientMockRecorder
}

// MockLicenseServiceClientMockRecorder is the mock recorder for MockLicenseServiceClient
type MockLicenseServiceClientMockRecorder struct {
	mock *MockLicenseServiceClient
}

// NewMockLicenseServiceClient creates a new mock instance
func NewMockLicenseServiceClient(ctrl *gomock.Controller) *MockLicenseServiceClient {
	mock := &MockLicenseServiceClient{ctrl: ctrl}
	mock.recorder = &MockLicenseServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLicenseServiceClient) EXPECT() *MockLicenseServiceClientMockRecorder {
	return m.recorder
}

// GetOverAllCompliance mocks base method
func (m *MockLicenseServiceClient) GetOverAllCompliance(arg0 context.Context, arg1 *v1.GetOverAllComplianceRequest, arg2 ...grpc.CallOption) (*v1.GetOverAllComplianceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOverAllCompliance", varargs...)
	ret0, _ := ret[0].(*v1.GetOverAllComplianceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverAllCompliance indicates an expected call of GetOverAllCompliance
func (mr *MockLicenseServiceClientMockRecorder) GetOverAllCompliance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverAllCompliance", reflect.TypeOf((*MockLicenseServiceClient)(nil).GetOverAllCompliance), varargs...)
}

// LicensesForEquipAndMetric mocks base method
func (m *MockLicenseServiceClient) LicensesForEquipAndMetric(arg0 context.Context, arg1 *v1.LicensesForEquipAndMetricRequest, arg2 ...grpc.CallOption) (*v1.LicensesForEquipAndMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LicensesForEquipAndMetric", varargs...)
	ret0, _ := ret[0].(*v1.LicensesForEquipAndMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LicensesForEquipAndMetric indicates an expected call of LicensesForEquipAndMetric
func (mr *MockLicenseServiceClientMockRecorder) LicensesForEquipAndMetric(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LicensesForEquipAndMetric", reflect.TypeOf((*MockLicenseServiceClient)(nil).LicensesForEquipAndMetric), varargs...)
}

// ListAcqRightsForAggregation mocks base method
func (m *MockLicenseServiceClient) ListAcqRightsForAggregation(arg0 context.Context, arg1 *v1.ListAcqRightsForAggregationRequest, arg2 ...grpc.CallOption) (*v1.ListAcqRightsForAggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRightsForAggregation", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsForAggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRightsForAggregation indicates an expected call of ListAcqRightsForAggregation
func (mr *MockLicenseServiceClientMockRecorder) ListAcqRightsForAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRightsForAggregation", reflect.TypeOf((*MockLicenseServiceClient)(nil).ListAcqRightsForAggregation), varargs...)
}

// ListAcqRightsForApplicationsProduct mocks base method
func (m *MockLicenseServiceClient) ListAcqRightsForApplicationsProduct(arg0 context.Context, arg1 *v1.ListAcqRightsForApplicationsProductRequest, arg2 ...grpc.CallOption) (*v1.ListAcqRightsForApplicationsProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRightsForApplicationsProduct", varargs...)
	ret0, _ := ret[0].(*v1.ListAcqRightsForApplicationsProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRightsForApplicationsProduct indicates an expected call of ListAcqRightsForApplicationsProduct
func (mr *MockLicenseServiceClientMockRecorder) ListAcqRightsForApplicationsProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRightsForApplicationsProduct", reflect.TypeOf((*MockLicenseServiceClient)(nil).ListAcqRightsForApplicationsProduct), varargs...)
}

// ListAcqRightsForProduct mocks base method
func (m *MockLicenseServiceClient) ListAcqRightsForProduct(arg0 context.Context, arg1 *v1.ListAcquiredRightsForProductRequest, arg2 ...grpc.CallOption) (*v1.ListAcquiredRightsForProductResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcqRightsForProduct", varargs...)
	ret0, _ := ret[0].(*v1.ListAcquiredRightsForProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcqRightsForProduct indicates an expected call of ListAcqRightsForProduct
func (mr *MockLicenseServiceClientMockRecorder) ListAcqRightsForProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcqRightsForProduct", reflect.TypeOf((*MockLicenseServiceClient)(nil).ListAcqRightsForProduct), varargs...)
}

// ListComputationDetails mocks base method
func (m *MockLicenseServiceClient) ListComputationDetails(arg0 context.Context, arg1 *v1.ListComputationDetailsRequest, arg2 ...grpc.CallOption) (*v1.ListComputationDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListComputationDetails", varargs...)
	ret0, _ := ret[0].(*v1.ListComputationDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComputationDetails indicates an expected call of ListComputationDetails
func (mr *MockLicenseServiceClientMockRecorder) ListComputationDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComputationDetails", reflect.TypeOf((*MockLicenseServiceClient)(nil).ListComputationDetails), varargs...)
}

// ProductLicensesForMetric mocks base method
func (m *MockLicenseServiceClient) ProductLicensesForMetric(arg0 context.Context, arg1 *v1.ProductLicensesForMetricRequest, arg2 ...grpc.CallOption) (*v1.ProductLicensesForMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductLicensesForMetric", varargs...)
	ret0, _ := ret[0].(*v1.ProductLicensesForMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductLicensesForMetric indicates an expected call of ProductLicensesForMetric
func (mr *MockLicenseServiceClientMockRecorder) ProductLicensesForMetric(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductLicensesForMetric", reflect.TypeOf((*MockLicenseServiceClient)(nil).ProductLicensesForMetric), varargs...)
}
