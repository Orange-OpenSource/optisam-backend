// Code generated by MockGen. DO NOT EDIT.
// Source: optisam-backend/license-service/pkg/repository/v1 (interfaces: License)

package mock

import (
	context "context"
	json "encoding/json"
	v1 "optisam-backend/license-service/pkg/repository/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLicense is a mock of License interface
type MockLicense struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseMockRecorder
}

// MockLicenseMockRecorder is the mock recorder for MockLicense
type MockLicenseMockRecorder struct {
	mock *MockLicense
}

// NewMockLicense creates a new mock instance
func NewMockLicense(ctrl *gomock.Controller) *MockLicense {
	mock := &MockLicense{ctrl: ctrl}
	mock.recorder = &MockLicenseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLicense) EXPECT() *MockLicenseMockRecorder {
	return m.recorder
}

// AcquiredRights mocks base method
func (m *MockLicense) AcquiredRights(arg0 context.Context, arg1 *v1.QueryAcquiredRights, arg2 []string) (int32, []*v1.AcquiredRights, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquiredRights", arg0, arg1, arg2)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].([]*v1.AcquiredRights)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AcquiredRights indicates an expected call of AcquiredRights
func (mr *MockLicenseMockRecorder) AcquiredRights(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquiredRights", reflect.TypeOf((*MockLicense)(nil).AcquiredRights), arg0, arg1, arg2)
}

// CreateEquipmentType mocks base method
func (m *MockLicense) CreateEquipmentType(arg0 context.Context, arg1 *v1.EquipmentType, arg2 []string) (*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEquipmentType", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEquipmentType indicates an expected call of CreateEquipmentType
func (mr *MockLicenseMockRecorder) CreateEquipmentType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEquipmentType", reflect.TypeOf((*MockLicense)(nil).CreateEquipmentType), arg0, arg1, arg2)
}

// CreateMetricIPS mocks base method
func (m *MockLicense) CreateMetricIPS(arg0 context.Context, arg1 *v1.MetricIPS, arg2 []string) (*v1.MetricIPS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricIPS", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.MetricIPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricIPS indicates an expected call of CreateMetricIPS
func (mr *MockLicenseMockRecorder) CreateMetricIPS(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricIPS", reflect.TypeOf((*MockLicense)(nil).CreateMetricIPS), arg0, arg1, arg2)
}

// CreateMetricOPS mocks base method
func (m *MockLicense) CreateMetricOPS(arg0 context.Context, arg1 *v1.MetricOPS, arg2 []string) (*v1.MetricOPS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricOPS", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.MetricOPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricOPS indicates an expected call of CreateMetricOPS
func (mr *MockLicenseMockRecorder) CreateMetricOPS(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricOPS", reflect.TypeOf((*MockLicense)(nil).CreateMetricOPS), arg0, arg1, arg2)
}

// CreateMetricSPS mocks base method
func (m *MockLicense) CreateMetricSPS(arg0 context.Context, arg1 *v1.MetricSPS, arg2 []string) (*v1.MetricSPS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricSPS", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.MetricSPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricSPS indicates an expected call of CreateMetricSPS
func (mr *MockLicenseMockRecorder) CreateMetricSPS(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricSPS", reflect.TypeOf((*MockLicense)(nil).CreateMetricSPS), arg0, arg1, arg2)
}

// CreateProductAggregation mocks base method
func (m *MockLicense) CreateProductAggregation(arg0 context.Context, arg1 *v1.ProductAggregation, arg2 []string) (*v1.ProductAggregation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductAggregation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ProductAggregation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductAggregation indicates an expected call of CreateProductAggregation
func (mr *MockLicenseMockRecorder) CreateProductAggregation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductAggregation", reflect.TypeOf((*MockLicense)(nil).CreateProductAggregation), arg0, arg1, arg2)
}

// DeleteProductAggregation mocks base method
func (m *MockLicense) DeleteProductAggregation(arg0 context.Context, arg1 string, arg2 []string) ([]*v1.ProductAggregation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductAggregation", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.ProductAggregation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductAggregation indicates an expected call of DeleteProductAggregation
func (mr *MockLicenseMockRecorder) DeleteProductAggregation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductAggregation", reflect.TypeOf((*MockLicense)(nil).DeleteProductAggregation), arg0, arg1, arg2)
}

// Equipment mocks base method
func (m *MockLicense) Equipment(arg0 context.Context, arg1 *v1.EquipmentType, arg2 string, arg3 []string) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equipment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Equipment indicates an expected call of Equipment
func (mr *MockLicenseMockRecorder) Equipment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equipment", reflect.TypeOf((*MockLicense)(nil).Equipment), arg0, arg1, arg2, arg3)
}

// EquipmentChildren mocks base method
func (m *MockLicense) EquipmentChildren(arg0 context.Context, arg1, arg2 *v1.EquipmentType, arg3 string, arg4 *v1.QueryEquipments, arg5 []string) (int32, json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentChildren", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(json.RawMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EquipmentChildren indicates an expected call of EquipmentChildren
func (mr *MockLicenseMockRecorder) EquipmentChildren(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentChildren", reflect.TypeOf((*MockLicense)(nil).EquipmentChildren), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EquipmentParents mocks base method
func (m *MockLicense) EquipmentParents(arg0 context.Context, arg1, arg2 *v1.EquipmentType, arg3 string, arg4 []string) (int32, json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentParents", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(json.RawMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EquipmentParents indicates an expected call of EquipmentParents
func (mr *MockLicenseMockRecorder) EquipmentParents(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentParents", reflect.TypeOf((*MockLicense)(nil).EquipmentParents), arg0, arg1, arg2, arg3, arg4)
}

// EquipmentProducts mocks base method
func (m *MockLicense) EquipmentProducts(arg0 context.Context, arg1 *v1.EquipmentType, arg2 string, arg3 *v1.QueryEquipmentProduct, arg4 []string) (int32, []*v1.EquipmentProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentProducts", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].([]*v1.EquipmentProduct)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EquipmentProducts indicates an expected call of EquipmentProducts
func (mr *MockLicenseMockRecorder) EquipmentProducts(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentProducts", reflect.TypeOf((*MockLicense)(nil).EquipmentProducts), arg0, arg1, arg2, arg3, arg4)
}

// EquipmentTypes mocks base method
func (m *MockLicense) EquipmentTypes(arg0 context.Context, arg1 []string) ([]*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentTypes", arg0, arg1)
	ret0, _ := ret[0].([]*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EquipmentTypes indicates an expected call of EquipmentTypes
func (mr *MockLicenseMockRecorder) EquipmentTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentTypes", reflect.TypeOf((*MockLicense)(nil).EquipmentTypes), arg0, arg1)
}

// EquipmentWithID mocks base method
func (m *MockLicense) EquipmentWithID(arg0 context.Context, arg1 string, arg2 []string) (*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentWithID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EquipmentWithID indicates an expected call of EquipmentWithID
func (mr *MockLicenseMockRecorder) EquipmentWithID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentWithID", reflect.TypeOf((*MockLicense)(nil).EquipmentWithID), arg0, arg1, arg2)
}

// Equipments mocks base method
func (m *MockLicense) Equipments(arg0 context.Context, arg1 *v1.EquipmentType, arg2 *v1.QueryEquipments, arg3 []string) (int32, json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equipments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(json.RawMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Equipments indicates an expected call of Equipments
func (mr *MockLicenseMockRecorder) Equipments(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equipments", reflect.TypeOf((*MockLicense)(nil).Equipments), arg0, arg1, arg2, arg3)
}

// GetApplication mocks base method
func (m *MockLicense) GetApplication(arg0 context.Context, arg1 string, arg2 []string) (*v1.ApplicationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ApplicationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockLicenseMockRecorder) GetApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockLicense)(nil).GetApplication), arg0, arg1, arg2)
}

// GetApplications mocks base method
func (m *MockLicense) GetApplications(arg0 context.Context, arg1 *v1.QueryApplications, arg2 []string) (*v1.ApplicationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplications", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ApplicationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplications indicates an expected call of GetApplications
func (mr *MockLicenseMockRecorder) GetApplications(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplications", reflect.TypeOf((*MockLicense)(nil).GetApplications), arg0, arg1, arg2)
}

// GetApplicationsForProduct mocks base method
func (m *MockLicense) GetApplicationsForProduct(arg0 context.Context, arg1 *v1.QueryApplicationsForProduct, arg2 []string) (*v1.ApplicationsForProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsForProduct", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ApplicationsForProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsForProduct indicates an expected call of GetApplicationsForProduct
func (mr *MockLicenseMockRecorder) GetApplicationsForProduct(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsForProduct", reflect.TypeOf((*MockLicense)(nil).GetApplicationsForProduct), arg0, arg1, arg2)
}

// GetInstancesForApplicationsProduct mocks base method
func (m *MockLicense) GetInstancesForApplicationsProduct(arg0 context.Context, arg1 *v1.QueryInstancesForApplicationProduct, arg2 []string) (*v1.InstancesForApplicationProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesForApplicationsProduct", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.InstancesForApplicationProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesForApplicationsProduct indicates an expected call of GetInstancesForApplicationsProduct
func (mr *MockLicenseMockRecorder) GetInstancesForApplicationsProduct(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesForApplicationsProduct", reflect.TypeOf((*MockLicense)(nil).GetInstancesForApplicationsProduct), arg0, arg1, arg2)
}

// GetProductInformation mocks base method
func (m *MockLicense) GetProductInformation(arg0 context.Context, arg1 string, arg2 []string) (*v1.ProductAdditionalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductInformation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ProductAdditionalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductInformation indicates an expected call of GetProductInformation
func (mr *MockLicenseMockRecorder) GetProductInformation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductInformation", reflect.TypeOf((*MockLicense)(nil).GetProductInformation), arg0, arg1, arg2)
}

// GetProducts mocks base method
func (m *MockLicense) GetProducts(arg0 context.Context, arg1 *v1.QueryProducts, arg2 []string) (*v1.ProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts
func (mr *MockLicenseMockRecorder) GetProducts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockLicense)(nil).GetProducts), arg0, arg1, arg2)
}

// GetProductsForApplication mocks base method
func (m *MockLicense) GetProductsForApplication(arg0 context.Context, arg1 string, arg2 []string) (*v1.ProductsForApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsForApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ProductsForApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsForApplication indicates an expected call of GetProductsForApplication
func (mr *MockLicenseMockRecorder) GetProductsForApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsForApplication", reflect.TypeOf((*MockLicense)(nil).GetProductsForApplication), arg0, arg1, arg2)
}

// ListEditors mocks base method
func (m *MockLicense) ListEditors(arg0 context.Context, arg1 *v1.EditorQueryParams, arg2 []string) ([]*v1.Editor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEditors", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditors indicates an expected call of ListEditors
func (mr *MockLicenseMockRecorder) ListEditors(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditors", reflect.TypeOf((*MockLicense)(nil).ListEditors), arg0, arg1, arg2)
}

// ListMetricIPS mocks base method
func (m *MockLicense) ListMetricIPS(arg0 context.Context, arg1 []string) ([]*v1.MetricIPS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricIPS", arg0, arg1)
	ret0, _ := ret[0].([]*v1.MetricIPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricIPS indicates an expected call of ListMetricIPS
func (mr *MockLicenseMockRecorder) ListMetricIPS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricIPS", reflect.TypeOf((*MockLicense)(nil).ListMetricIPS), arg0, arg1)
}

// ListMetricOPS mocks base method
func (m *MockLicense) ListMetricOPS(arg0 context.Context, arg1 []string) ([]*v1.MetricOPS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricOPS", arg0, arg1)
	ret0, _ := ret[0].([]*v1.MetricOPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricOPS indicates an expected call of ListMetricOPS
func (mr *MockLicenseMockRecorder) ListMetricOPS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricOPS", reflect.TypeOf((*MockLicense)(nil).ListMetricOPS), arg0, arg1)
}

// ListMetricSPS mocks base method
func (m *MockLicense) ListMetricSPS(arg0 context.Context, arg1 []string) ([]*v1.MetricSPS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricSPS", arg0, arg1)
	ret0, _ := ret[0].([]*v1.MetricSPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricSPS indicates an expected call of ListMetricSPS
func (mr *MockLicenseMockRecorder) ListMetricSPS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricSPS", reflect.TypeOf((*MockLicense)(nil).ListMetricSPS), arg0, arg1)
}

// ListMetricTypeInfo mocks base method
func (m *MockLicense) ListMetricTypeInfo(arg0 context.Context, arg1 []string) ([]*v1.MetricTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricTypeInfo", arg0, arg1)
	ret0, _ := ret[0].([]*v1.MetricTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricTypeInfo indicates an expected call of ListMetricTypeInfo
func (mr *MockLicenseMockRecorder) ListMetricTypeInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricTypeInfo", reflect.TypeOf((*MockLicense)(nil).ListMetricTypeInfo), arg0, arg1)
}

// ListMetrices mocks base method
func (m *MockLicense) ListMetrices(arg0 context.Context, arg1 []string) ([]*v1.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetrices", arg0, arg1)
	ret0, _ := ret[0].([]*v1.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetrices indicates an expected call of ListMetrices
func (mr *MockLicenseMockRecorder) ListMetrices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetrices", reflect.TypeOf((*MockLicense)(nil).ListMetrices), arg0, arg1)
}

// ListProductAggregations mocks base method
func (m *MockLicense) ListProductAggregations(arg0 context.Context, arg1 []string) ([]*v1.ProductAggregation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductAggregations", arg0, arg1)
	ret0, _ := ret[0].([]*v1.ProductAggregation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductAggregations indicates an expected call of ListProductAggregations
func (mr *MockLicenseMockRecorder) ListProductAggregations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductAggregations", reflect.TypeOf((*MockLicense)(nil).ListProductAggregations), arg0, arg1)
}

// MetadataAllWithType mocks base method
func (m *MockLicense) MetadataAllWithType(arg0 context.Context, arg1 v1.MetadataType, arg2 []string) ([]*v1.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetadataAllWithType", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetadataAllWithType indicates an expected call of MetadataAllWithType
func (mr *MockLicenseMockRecorder) MetadataAllWithType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetadataAllWithType", reflect.TypeOf((*MockLicense)(nil).MetadataAllWithType), arg0, arg1, arg2)
}

// MetadataWithID mocks base method
func (m *MockLicense) MetadataWithID(arg0 context.Context, arg1 string, arg2 []string) (*v1.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetadataWithID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetadataWithID indicates an expected call of MetadataWithID
func (mr *MockLicenseMockRecorder) MetadataWithID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetadataWithID", reflect.TypeOf((*MockLicense)(nil).MetadataWithID), arg0, arg1, arg2)
}

// MetricIPSComputedLicenses mocks base method
func (m *MockLicense) MetricIPSComputedLicenses(arg0 context.Context, arg1 string, arg2 *v1.MetricIPSComputed, arg3 []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricIPSComputedLicenses", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricIPSComputedLicenses indicates an expected call of MetricIPSComputedLicenses
func (mr *MockLicenseMockRecorder) MetricIPSComputedLicenses(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricIPSComputedLicenses", reflect.TypeOf((*MockLicense)(nil).MetricIPSComputedLicenses), arg0, arg1, arg2, arg3)
}

// MetricOPSComputedLicenses mocks base method
func (m *MockLicense) MetricOPSComputedLicenses(arg0 context.Context, arg1 string, arg2 *v1.MetricOPSComputed, arg3 []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricOPSComputedLicenses", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricOPSComputedLicenses indicates an expected call of MetricOPSComputedLicenses
func (mr *MockLicenseMockRecorder) MetricOPSComputedLicenses(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricOPSComputedLicenses", reflect.TypeOf((*MockLicense)(nil).MetricOPSComputedLicenses), arg0, arg1, arg2, arg3)
}

// MetricSPSComputedLicenses mocks base method
func (m *MockLicense) MetricSPSComputedLicenses(arg0 context.Context, arg1 string, arg2 *v1.MetricSPSComputed, arg3 []string) (uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricSPSComputedLicenses", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MetricSPSComputedLicenses indicates an expected call of MetricSPSComputedLicenses
func (mr *MockLicenseMockRecorder) MetricSPSComputedLicenses(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricSPSComputedLicenses", reflect.TypeOf((*MockLicense)(nil).MetricSPSComputedLicenses), arg0, arg1, arg2, arg3)
}

// ProductAcquiredRights mocks base method
func (m *MockLicense) ProductAcquiredRights(arg0 context.Context, arg1 string, arg2 []string) (string, []*v1.ProductAcquiredRight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductAcquiredRights", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]*v1.ProductAcquiredRight)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProductAcquiredRights indicates an expected call of ProductAcquiredRights
func (mr *MockLicenseMockRecorder) ProductAcquiredRights(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductAcquiredRights", reflect.TypeOf((*MockLicense)(nil).ProductAcquiredRights), arg0, arg1, arg2)
}

// ProductAggregationsByName mocks base method
func (m *MockLicense) ProductAggregationsByName(arg0 context.Context, arg1 string, arg2 []string) (*v1.ProductAggregation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductAggregationsByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ProductAggregation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductAggregationsByName indicates an expected call of ProductAggregationsByName
func (mr *MockLicenseMockRecorder) ProductAggregationsByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductAggregationsByName", reflect.TypeOf((*MockLicense)(nil).ProductAggregationsByName), arg0, arg1, arg2)
}

// ProductEquipments mocks base method
func (m *MockLicense) ProductEquipments(arg0 context.Context, arg1 string, arg2 *v1.EquipmentType, arg3 *v1.QueryEquipments, arg4 []string) (int32, json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductEquipments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(json.RawMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProductEquipments indicates an expected call of ProductEquipments
func (mr *MockLicenseMockRecorder) ProductEquipments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductEquipments", reflect.TypeOf((*MockLicense)(nil).ProductEquipments), arg0, arg1, arg2, arg3, arg4)
}

// ProductIDForSwidtag mocks base method
func (m *MockLicense) ProductIDForSwidtag(arg0 context.Context, arg1 string, arg2 *v1.QueryProducts, arg3 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductIDForSwidtag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductIDForSwidtag indicates an expected call of ProductIDForSwidtag
func (mr *MockLicenseMockRecorder) ProductIDForSwidtag(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductIDForSwidtag", reflect.TypeOf((*MockLicense)(nil).ProductIDForSwidtag), arg0, arg1, arg2, arg3)
}

// UpdateEquipmentType mocks base method
func (m *MockLicense) UpdateEquipmentType(arg0 context.Context, arg1, arg2 string, arg3 *v1.UpdateEquipmentRequest, arg4 []string) ([]*v1.Attribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEquipmentType", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*v1.Attribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEquipmentType indicates an expected call of UpdateEquipmentType
func (mr *MockLicenseMockRecorder) UpdateEquipmentType(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEquipmentType", reflect.TypeOf((*MockLicense)(nil).UpdateEquipmentType), arg0, arg1, arg2, arg3, arg4)
}
