.dataloader-template:
  before_script:
    - ls -lrt
    - chmod 777 shared-vars.sh
    - . ./shared-vars.sh
    - cd license-service
  tags:
    - rsc
    - docker-privileged
    - shared    
  only: &changes
    changes:
      - license-service/pkg/repository/v1/dgraph/**/*

# .dataloader-lint:
#   extends: .dataloader-template
#   image: ${DOCKER_PROXY_HOST}/golangci/golangci-lint:latest
#   artifacts:
#     paths:
#       - ${CI_PROJECT_DIR}/license-service/lint-results.xml
#     expire_in: 3d
#   script:
#     - export GOPATH="${CI_PROJECT_DIR}/license_service"
#     - export GO111MODULE="on"
#     - export GOPROXY="${GOPROXY}"
#     - golangci-lint run > lint-results.xml
#   allow_failure: true    

# .dataloader-test:
#   extends: .license-template
#   services:
#     - dockerproxy-iva.si.francetelecom.fr/docker:$DOCKER_VERSION-dind
#   image: ${DOCKER_PROXY_HOST}/golang:${GO_VERSION}
#   artifacts:
#     paths:
#       - ${CI_PROJECT_DIR}/license-service/build/tests/test-results.xml
#       - ${CI_PROJECT_DIR}/license-service/build/tests/cover.out
#     reports:
#       junit: ${CI_PROJECT_DIR}/license-service/build/tests/test-results.xml
#     expire_in: 3d
#   script:
#     - export GOPATH="${CI_PROJECT_DIR}/license_service"
#     - export GOGC=off
#     - export GO111MODULE="on"
#     - export GOPROXY="${GOPROXY}"
#     - go get gotest.tools/gotestsum
#     - mkdir -p build/tests
#     - cd pkg/service
#     - ../../../license_service/bin/gotestsum --junitfile ../../build/tests/test-results.xml -- -coverprofile=../../build/tests/cover.out ./...
#     - ls -alSh ../../build/tests/
#   allow_failure: true    

# .dataloader-pages:
#   extends: .license-template
#   artifacts:
#     paths:
#       - public
#   script:
#     - mkdir .public
#     - ls -lrt ${CI_PROJECT_DIR}/license-service/build/tests/
#     - cp -r ${CI_PROJECT_DIR}/license-service/build/tests/test-results.xml .public
#     - mv .public ../public
#   allow_failure: true  

# .dataloader-sonar:
#   extends: .license-template
#   image: ${DOCKER_PROXY_HOST}/ciricihq/gitlab-sonar-scanner
#   script:
#   - chmod 777 ../common/third_party/sonar-scanner-3.3.0.1492/bin/sonar-scanner
#   - ./../common/third_party/sonar-scanner-3.3.0.1492/bin/sonar-scanner -Dproject.settings=sonar-project.properties -X
#   allow_failure: true  

.dataloader-build:
  extends: .dataloader-template
  image: ${DOCKER_PROXY_HOST}/golang:${GO_VERSION}-alpine
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/dataloader_service/bin/
    expire_in: 3d
  script:
    - export GOPATH="${CI_PROJECT_DIR}/dataloader_service"
    - export GOGC=off
    - export GO111MODULE="on"
    - export GOPROXY="${GOPROXY}"
    - export CI_BUILD_DATE=$(date +%FT%T%z)
    - (cd pkg/repository/v1/dgraph/dataloader; go install -v -ldflags="-X main.version=${CI_COMMIT_SHA} -X main.commitHash=${CI_COMMIT_SHA} -X main.buildDate=${CI_BUILD_DATE}" .)
    - ls -alSh ../dataloader_service/bin/

.dataloader-package:
  extends: .dataloader-template
  image: ${DOCKER_PROXY_HOST}/docker:$DOCKER_VERSION
  services:
    - ${DOCKER_PROXY_HOST}/docker:$DOCKER_VERSION-dind
  script:
    - env
    - cd ..
    - ls -lrt
    - docker login ${DOCKER_REGISTRY} --username $ARTIFACTORY_USERNAME --password $ARTIFACTORY_PASSWORD  
    - docker build --pull -t ${DOCKER_REGISTRY}/optisam/dataloader-service:$TAG -f Dockerfile_data_process .
    - docker push ${DOCKER_REGISTRY}/optisam/dataloader-service:$TAG
    - docker history ${DOCKER_REGISTRY}/optisam/dataloader-service:$TAG
    - docker images ${DOCKER_REGISTRY}/optisam/dataloader-service:$TAG

.dataloader-deploy_job_noprod:
  when: manual
  extends: .dataloader-template
  image: registry.forge.orange-labs.fr/kermit/tooling/oc:latest
  script:
    - echo "Creating Openshift Resources"
    - cd pkg/repository/v1/dgraph/dataloader
    - oc login ${OCP_URL}  --token=${OCP_TOKEN}   --insecure-skip-tls-verify
    - oc project ${OCP_PROJECT}
    - oc delete cm/config-dataloader-$ENV
    - oc create configmap config-dataloader-$ENV --from-file=config-$ENV.toml
    - oc delete job optisam-dataloader-job
    - oc process -f dataloader-service-job.yml -p TAG=$TAG -p ENV=$ENV -p DOCKER_REGISTRY=$DOCKER_REGISTRY| oc apply -f -
  except:
      - master

.dataloader-deploy_cronjob_noprod:
  extends: .dataloader-template
  image: registry.forge.orange-labs.fr/kermit/tooling/oc:latest
  script:
    - echo "Creating Openshift Resources"
    - cd pkg/repository/v1/dgraph/dataloader
    - oc login ${OCP_URL}  --token=${OCP_TOKEN}   --insecure-skip-tls-verify
    - oc project ${OCP_PROJECT}
    - oc delete cm/config-dataloader-$ENV
    - oc create configmap config-dataloader-$ENV --from-file=config-$ENV.toml
    - oc delete cronjob optisam-dataloader-cronjob
    - oc process -f dataloader-service-cronjob.yml -p TAG=$TAG -p ENV=$ENV -p DOCKER_REGISTRY=$DOCKER_REGISTRY| oc apply -f -
  except:
      - master

.dataloader-deploy_job_pprod:
  when: manual
  extends: .dataloader-template
  image: registry.forge.orange-labs.fr/kermit/tooling/oc:latest
  script:
    - echo "Creating Openshift Resources"
    - cd pkg/repository/v1/dgraph/dataloader
    - oc login ${OCP_URL}  --token=${OCP_TOKEN}   --insecure-skip-tls-verify
    - oc project ${OCP_PROJECT}
    - oc create configmap config-dataloader-$ENV --from-file=config-$ENV.toml -o yaml --dry-run | oc replace -f -
    - oc process -f dataloader-service-job.yml -p TAG=$TAG -p ENV=$ENV -p DOCKER_REGISTRY=$DOCKER_REGISTRY| oc apply -f -
  only:
      - master

.dataloader-deploy_cronjob_pprod:
  extends: .dataloader-template
  image: registry.forge.orange-labs.fr/kermit/tooling/oc:latest
  script:
    - echo "Creating Openshift Resources"
    - cd pkg/repository/v1/dgraph/dataloader
    - oc login ${OCP_URL}  --token=${OCP_TOKEN}   --insecure-skip-tls-verify
    - oc project ${OCP_PROJECT}
    - oc create configmap config-dataloader-$ENV --from-file=config-$ENV.toml -o yaml --dry-run | oc replace -f -
    - oc process -f dataloader-service-cronjob.yml -p TAG=$TAG -p ENV=$ENV -p DOCKER_REGISTRY=$DOCKER_REGISTRY| oc apply -f -
  only:
      - master

.dataloader-deploy_job_prod:
  when: manual
  extends: .dataloader-template
  image: registry.forge.orange-labs.fr/kermit/tooling/oc:latest
  script:
    - echo "Creating Openshift Resources"
    - cd pkg/repository/v1/dgraph/dataloader
    - oc login ${OCP_URL_PROD}  --token=${OCP_TOKEN_PROD}   --insecure-skip-tls-verify
    - oc project ${OCP_PROJECT_PROD}
    - oc create configmap config-dataloader-prod --from-file=config-prod.toml -o yaml --dry-run | oc replace -f -
    - oc process -f dataloader-service-job.yml -p TAG=$TAG -p ENV=prod -p DOCKER_REGISTRY=$DOCKER_REGISTRY| oc apply -f -
  only:
      - master

.dataloader-deploy_cronjob_prod:
  extends: .dataloader-template
  image: registry.forge.orange-labs.fr/kermit/tooling/oc:latest
  script:
    - echo "Creating Openshift Resources"
    - cd pkg/repository/v1/dgraph/dataloader
    - oc login ${OCP_URL_PROD}  --token=${OCP_TOKEN_PROD}   --insecure-skip-tls-verify
    - oc project ${OCP_PROJECT_PROD}
    - oc create configmap config-dataloader-prod --from-file=config-prod.toml -o yaml --dry-run | oc replace -f -
    - oc process -f dataloader-service-cronjob.yml -p TAG=$TAG -p ENV=prod -p DOCKER_REGISTRY=$DOCKER_REGISTRY| oc apply -f -
  only:
      - master