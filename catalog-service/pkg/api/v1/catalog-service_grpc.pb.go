// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProductCatalogClient is the client API for ProductCatalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCatalogClient interface {
	InsertProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error)
	CreateEditor(ctx context.Context, in *CreateEditorRequest, opts ...grpc.CallOption) (*Editor, error)
	GetEditor(ctx context.Context, in *GetEditorRequest, opts ...grpc.CallOption) (*Editor, error)
	UpdateEditor(ctx context.Context, in *Editor, opts ...grpc.CallOption) (*Editor, error)
	DeleteProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	BulkFileUpload(ctx context.Context, in *UploadRecords, opts ...grpc.CallOption) (*UploadResponse, error)
	DeleteEditor(ctx context.Context, in *GetEditorRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	BulkFileUploadLogs(ctx context.Context, in *UploadCatalogDataLogsRequest, opts ...grpc.CallOption) (*UploadCatalogDataLogsResponse, error)
}

type productCatalogClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCatalogClient(cc grpc.ClientConnInterface) ProductCatalogClient {
	return &productCatalogClient{cc}
}

func (c *productCatalogClient) InsertProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/optisam.productcatalog.v1.ProductCatalog/InsertProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/optisam.productcatalog.v1.ProductCatalog/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogClient) CreateEditor(ctx context.Context, in *CreateEditorRequest, opts ...grpc.CallOption) (*Editor, error) {
	out := new(Editor)
	err := c.cc.Invoke(ctx, "/optisam.productcatalog.v1.ProductCatalog/CreateEditor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogClient) GetEditor(ctx context.Context, in *GetEditorRequest, opts ...grpc.CallOption) (*Editor, error) {
	out := new(Editor)
	err := c.cc.Invoke(ctx, "/optisam.productcatalog.v1.ProductCatalog/GetEditor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogClient) UpdateEditor(ctx context.Context, in *Editor, opts ...grpc.CallOption) (*Editor, error) {
	out := new(Editor)
	err := c.cc.Invoke(ctx, "/optisam.productcatalog.v1.ProductCatalog/UpdateEditor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogClient) DeleteProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/optisam.productcatalog.v1.ProductCatalog/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/optisam.productcatalog.v1.ProductCatalog/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogClient) BulkFileUpload(ctx context.Context, in *UploadRecords, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/optisam.productcatalog.v1.ProductCatalog/BulkFileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogClient) DeleteEditor(ctx context.Context, in *GetEditorRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/optisam.productcatalog.v1.ProductCatalog/DeleteEditor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogClient) BulkFileUploadLogs(ctx context.Context, in *UploadCatalogDataLogsRequest, opts ...grpc.CallOption) (*UploadCatalogDataLogsResponse, error) {
	out := new(UploadCatalogDataLogsResponse)
	err := c.cc.Invoke(ctx, "/optisam.productcatalog.v1.ProductCatalog/BulkFileUploadLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCatalogServer is the server API for ProductCatalog service.
// All implementations should embed UnimplementedProductCatalogServer
// for forward compatibility
type ProductCatalogServer interface {
	InsertProduct(context.Context, *Product) (*Product, error)
	GetProduct(context.Context, *GetProductRequest) (*Product, error)
	CreateEditor(context.Context, *CreateEditorRequest) (*Editor, error)
	GetEditor(context.Context, *GetEditorRequest) (*Editor, error)
	UpdateEditor(context.Context, *Editor) (*Editor, error)
	DeleteProduct(context.Context, *GetProductRequest) (*DeleteResponse, error)
	UpdateProduct(context.Context, *Product) (*Product, error)
	BulkFileUpload(context.Context, *UploadRecords) (*UploadResponse, error)
	DeleteEditor(context.Context, *GetEditorRequest) (*DeleteResponse, error)
	BulkFileUploadLogs(context.Context, *UploadCatalogDataLogsRequest) (*UploadCatalogDataLogsResponse, error)
}

// UnimplementedProductCatalogServer should be embedded to have forward compatible implementations.
type UnimplementedProductCatalogServer struct {
}

func (UnimplementedProductCatalogServer) InsertProduct(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertProduct not implemented")
}
func (UnimplementedProductCatalogServer) GetProduct(context.Context, *GetProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductCatalogServer) CreateEditor(context.Context, *CreateEditorRequest) (*Editor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEditor not implemented")
}
func (UnimplementedProductCatalogServer) GetEditor(context.Context, *GetEditorRequest) (*Editor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEditor not implemented")
}
func (UnimplementedProductCatalogServer) UpdateEditor(context.Context, *Editor) (*Editor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEditor not implemented")
}
func (UnimplementedProductCatalogServer) DeleteProduct(context.Context, *GetProductRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductCatalogServer) UpdateProduct(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductCatalogServer) BulkFileUpload(context.Context, *UploadRecords) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkFileUpload not implemented")
}
func (UnimplementedProductCatalogServer) DeleteEditor(context.Context, *GetEditorRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEditor not implemented")
}
func (UnimplementedProductCatalogServer) BulkFileUploadLogs(context.Context, *UploadCatalogDataLogsRequest) (*UploadCatalogDataLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkFileUploadLogs not implemented")
}

// UnsafeProductCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCatalogServer will
// result in compilation errors.
type UnsafeProductCatalogServer interface {
	mustEmbedUnimplementedProductCatalogServer()
}

func RegisterProductCatalogServer(s grpc.ServiceRegistrar, srv ProductCatalogServer) {
	s.RegisterService(&_ProductCatalog_serviceDesc, srv)
}

func _ProductCatalog_InsertProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServer).InsertProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.productcatalog.v1.ProductCatalog/InsertProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServer).InsertProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalog_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.productcatalog.v1.ProductCatalog/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalog_CreateEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServer).CreateEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.productcatalog.v1.ProductCatalog/CreateEditor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServer).CreateEditor(ctx, req.(*CreateEditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalog_GetEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServer).GetEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.productcatalog.v1.ProductCatalog/GetEditor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServer).GetEditor(ctx, req.(*GetEditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalog_UpdateEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Editor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServer).UpdateEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.productcatalog.v1.ProductCatalog/UpdateEditor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServer).UpdateEditor(ctx, req.(*Editor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalog_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.productcatalog.v1.ProductCatalog/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServer).DeleteProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalog_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.productcatalog.v1.ProductCatalog/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalog_BulkFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServer).BulkFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.productcatalog.v1.ProductCatalog/BulkFileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServer).BulkFileUpload(ctx, req.(*UploadRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalog_DeleteEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServer).DeleteEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.productcatalog.v1.ProductCatalog/DeleteEditor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServer).DeleteEditor(ctx, req.(*GetEditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCatalog_BulkFileUploadLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCatalogDataLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogServer).BulkFileUploadLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.productcatalog.v1.ProductCatalog/BulkFileUploadLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogServer).BulkFileUploadLogs(ctx, req.(*UploadCatalogDataLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductCatalog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "optisam.productcatalog.v1.ProductCatalog",
	HandlerType: (*ProductCatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertProduct",
			Handler:    _ProductCatalog_InsertProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductCatalog_GetProduct_Handler,
		},
		{
			MethodName: "CreateEditor",
			Handler:    _ProductCatalog_CreateEditor_Handler,
		},
		{
			MethodName: "GetEditor",
			Handler:    _ProductCatalog_GetEditor_Handler,
		},
		{
			MethodName: "UpdateEditor",
			Handler:    _ProductCatalog_UpdateEditor_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductCatalog_DeleteProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductCatalog_UpdateProduct_Handler,
		},
		{
			MethodName: "BulkFileUpload",
			Handler:    _ProductCatalog_BulkFileUpload_Handler,
		},
		{
			MethodName: "DeleteEditor",
			Handler:    _ProductCatalog_DeleteEditor_Handler,
		},
		{
			MethodName: "BulkFileUploadLogs",
			Handler:    _ProductCatalog_BulkFileUploadLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog-service.proto",
}
