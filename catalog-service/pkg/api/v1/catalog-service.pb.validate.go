// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: catalog-service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _catalog_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UploadCatalogDataLogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UploadCatalogDataLogsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UploadCatalogDataLogsRequestValidationError is the validation error returned
// by UploadCatalogDataLogsRequest.Validate if the designated constraints
// aren't met.
type UploadCatalogDataLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadCatalogDataLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadCatalogDataLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadCatalogDataLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadCatalogDataLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadCatalogDataLogsRequestValidationError) ErrorName() string {
	return "UploadCatalogDataLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadCatalogDataLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadCatalogDataLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadCatalogDataLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadCatalogDataLogsRequestValidationError{}

// Validate checks the field values on UploadCatalogDataLogs with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UploadCatalogDataLogs) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Filename

	if v, ok := interface{}(m.GetUploadedOn()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UploadCatalogDataLogsValidationError{
				field:  "UploadedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UploadCatalogDataLogsValidationError is the validation error returned by
// UploadCatalogDataLogs.Validate if the designated constraints aren't met.
type UploadCatalogDataLogsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadCatalogDataLogsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadCatalogDataLogsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadCatalogDataLogsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadCatalogDataLogsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadCatalogDataLogsValidationError) ErrorName() string {
	return "UploadCatalogDataLogsValidationError"
}

// Error satisfies the builtin error interface
func (e UploadCatalogDataLogsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadCatalogDataLogs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadCatalogDataLogsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadCatalogDataLogsValidationError{}

// Validate checks the field values on UploadCatalogDataLogsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UploadCatalogDataLogsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUploadCatalogDataLogs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return UploadCatalogDataLogsResponseValidationError{
					field:  fmt.Sprintf("UploadCatalogDataLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UploadCatalogDataLogsResponseValidationError is the validation error
// returned by UploadCatalogDataLogsResponse.Validate if the designated
// constraints aren't met.
type UploadCatalogDataLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadCatalogDataLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadCatalogDataLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadCatalogDataLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadCatalogDataLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadCatalogDataLogsResponseValidationError) ErrorName() string {
	return "UploadCatalogDataLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadCatalogDataLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadCatalogDataLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadCatalogDataLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadCatalogDataLogsResponseValidationError{}

// Validate checks the field values on UploadRecords with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UploadRecords) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return UploadRecordsValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for FileName

	return nil
}

// UploadRecordsValidationError is the validation error returned by
// UploadRecords.Validate if the designated constraints aren't met.
type UploadRecordsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRecordsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRecordsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRecordsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRecordsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRecordsValidationError) ErrorName() string { return "UploadRecordsValidationError" }

// Error satisfies the builtin error interface
func (e UploadRecordsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRecords.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRecordsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRecordsValidationError{}

// Validate checks the field values on Upload with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Upload) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Editor

	// no validation rules for Name

	// no validation rules for Licensing

	// no validation rules for Version

	// no validation rules for GenearlInformation

	if v, ok := interface{}(m.GetEndOfLife()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UploadValidationError{
				field:  "EndOfLife",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndOfSupport()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UploadValidationError{
				field:  "EndOfSupport",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Origin

	// no validation rules for Recommendation

	return nil
}

// UploadValidationError is the validation error returned by Upload.Validate if
// the designated constraints aren't met.
type UploadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadValidationError) ErrorName() string { return "UploadValidationError" }

// Error satisfies the builtin error interface
func (e UploadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadValidationError{}

// Validate checks the field values on UploadResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UploadResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// UploadResponseValidationError is the validation error returned by
// UploadResponse.Validate if the designated constraints aren't met.
type UploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadResponseValidationError) ErrorName() string { return "UploadResponseValidationError" }

// Error satisfies the builtin error interface
func (e UploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadResponseValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Product) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if err := m._validateUuid(m.GetEditorID()); err != nil {
		return ProductValidationError{
			field:  "EditorID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if len(m.GetName()) > 200 {
		return ProductValidationError{
			field:  "Name",
			reason: "value length must be at most 200 bytes",
		}
	}

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if len(item) > 200 {
			return ProductValidationError{
				field:  fmt.Sprintf("Metrics[%v]", idx),
				reason: "value length must be at most 200 bytes",
			}
		}

	}

	if len(m.GetGenearlInformation()) > 1000 {
		return ProductValidationError{
			field:  "GenearlInformation",
			reason: "value length must be at most 1000 bytes",
		}
	}

	if len(m.GetContracttTips()) > 200 {
		return ProductValidationError{
			field:  "ContracttTips",
			reason: "value length must be at most 200 bytes",
		}
	}

	if _, ok := _Product_LocationType_InLookup[m.GetLocationType()]; !ok {
		return ProductValidationError{
			field:  "LocationType",
			reason: "value must be in list [NONE SAAS On Premise]",
		}
	}

	if v, ok := interface{}(m.GetOpenSource()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "OpenSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Product_Licensing_InLookup[m.GetLicensing()]; !ok {
		return ProductValidationError{
			field:  "Licensing",
			reason: "value must be in list [NONE CLOSEDSOURCE OPENSOURCE]",
		}
	}

	for idx, item := range m.GetVersion() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ProductValidationError{
					field:  fmt.Sprintf("Version[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _, ok := _Product_Recommendation_InLookup[m.GetRecommendation()]; !ok {
		return ProductValidationError{
			field:  "Recommendation",
			reason: "value must be in list [NONE AUTHORIZED BLACKLISTED RECOMMENDED]",
		}
	}

	for idx, item := range m.GetSupportVendors() {
		_, _ = idx, item

		if len(item) > 200 {
			return ProductValidationError{
				field:  fmt.Sprintf("SupportVendors[%v]", idx),
				reason: "value length must be at most 200 bytes",
			}
		}

	}

	if v, ok := interface{}(m.GetCreatedOn()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedOn()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetSwidtagProduct()) > 200 {
		return ProductValidationError{
			field:  "SwidtagProduct",
			reason: "value length must be at most 200 bytes",
		}
	}

	// no validation rules for EditorName

	return nil
}

func (m *Product) _validateUuid(uuid string) error {
	if matched := _catalog_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

var _Product_LocationType_InLookup = map[string]struct{}{
	"NONE":       {},
	"SAAS":       {},
	"On Premise": {},
}

var _Product_Licensing_InLookup = map[string]struct{}{
	"NONE":         {},
	"CLOSEDSOURCE": {},
	"OPENSOURCE":   {},
}

var _Product_Recommendation_InLookup = map[string]struct{}{
	"NONE":        {},
	"AUTHORIZED":  {},
	"BLACKLISTED": {},
	"RECOMMENDED": {},
}

// Validate checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Version) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if len(m.GetSwidtagVersion()) > 200 {
		return VersionValidationError{
			field:  "SwidtagVersion",
			reason: "value length must be at most 200 bytes",
		}
	}

	if len(m.GetName()) > 200 {
		return VersionValidationError{
			field:  "Name",
			reason: "value length must be at most 200 bytes",
		}
	}

	if len(m.GetRecommendation()) > 200 {
		return VersionValidationError{
			field:  "Recommendation",
			reason: "value length must be at most 200 bytes",
		}
	}

	if v, ok := interface{}(m.GetEndOfLife()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return VersionValidationError{
				field:  "EndOfLife",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndOfSupport()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return VersionValidationError{
				field:  "EndOfSupport",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VersionValidationError is the validation error returned by Version.Validate
// if the designated constraints aren't met.
type VersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionValidationError) ErrorName() string { return "VersionValidationError" }

// Error satisfies the builtin error interface
func (e VersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionValidationError{}

// Validate checks the field values on OpenSource with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OpenSource) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OpenLicences

	if _, ok := _OpenSource_OpenSourceType_InLookup[m.GetOpenSourceType()]; !ok {
		return OpenSourceValidationError{
			field:  "OpenSourceType",
			reason: "value must be in list [NONE COMMERCIAL COMMUNITY BOTH]",
		}
	}

	return nil
}

// OpenSourceValidationError is the validation error returned by
// OpenSource.Validate if the designated constraints aren't met.
type OpenSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSourceValidationError) ErrorName() string { return "OpenSourceValidationError" }

// Error satisfies the builtin error interface
func (e OpenSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSourceValidationError{}

var _OpenSource_OpenSourceType_InLookup = map[string]struct{}{
	"NONE":       {},
	"COMMERCIAL": {},
	"COMMUNITY":  {},
	"BOTH":       {},
}

// Validate checks the field values on ProductsSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// ProductsSearchParamsValidationError is the validation error returned by
// ProductsSearchParams.Validate if the designated constraints aren't met.
type ProductsSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsSearchParamsValidationError) ErrorName() string {
	return "ProductsSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsSearchParamsValidationError{}

// Validate checks the field values on GetProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetProdId()); err != nil {
		return GetProductRequestValidationError{
			field:  "ProdId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *GetProductRequest) _validateUuid(uuid string) error {
	if matched := _catalog_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetProductRequestValidationError is the validation error returned by
// GetProductRequest.Validate if the designated constraints aren't met.
type GetProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductRequestValidationError) ErrorName() string {
	return "GetProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductRequestValidationError{}

// Validate checks the field values on GetEditorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEditorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetEditorId()); err != nil {
		return GetEditorRequestValidationError{
			field:  "EditorId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *GetEditorRequest) _validateUuid(uuid string) error {
	if matched := _catalog_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetEditorRequestValidationError is the validation error returned by
// GetEditorRequest.Validate if the designated constraints aren't met.
type GetEditorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEditorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEditorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEditorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEditorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEditorRequestValidationError) ErrorName() string { return "GetEditorRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEditorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEditorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEditorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEditorRequestValidationError{}

// Validate checks the field values on CreateEditorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEditorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 200 {
		return CreateEditorRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 200 bytes",
		}
	}

	if len(m.GetGenearlInformation()) > 1000 {
		return CreateEditorRequestValidationError{
			field:  "GenearlInformation",
			reason: "value length must be at most 1000 bytes",
		}
	}

	for idx, item := range m.GetVendors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return CreateEditorRequestValidationError{
					field:  fmt.Sprintf("Vendors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPartnerManagers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return CreateEditorRequestValidationError{
					field:  fmt.Sprintf("PartnerManagers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAudits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return CreateEditorRequestValidationError{
					field:  fmt.Sprintf("Audits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetCountryCode()) > 2 {
		return CreateEditorRequestValidationError{
			field:  "CountryCode",
			reason: "value length must be at most 2 bytes",
		}
	}

	// no validation rules for Address

	// no validation rules for GroupContract

	for idx, item := range m.GetGlobalAccountManager() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return CreateEditorRequestValidationError{
					field:  fmt.Sprintf("GlobalAccountManager[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSourcers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return CreateEditorRequestValidationError{
					field:  fmt.Sprintf("Sourcers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateEditorRequestValidationError is the validation error returned by
// CreateEditorRequest.Validate if the designated constraints aren't met.
type CreateEditorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEditorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEditorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEditorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEditorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEditorRequestValidationError) ErrorName() string {
	return "CreateEditorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEditorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEditorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEditorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEditorRequestValidationError{}

// Validate checks the field values on Editor with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Editor) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return EditorValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if len(m.GetName()) > 200 {
		return EditorValidationError{
			field:  "Name",
			reason: "value length must be at most 200 bytes",
		}
	}

	if len(m.GetGenearlInformation()) > 1000 {
		return EditorValidationError{
			field:  "GenearlInformation",
			reason: "value length must be at most 1000 bytes",
		}
	}

	for idx, item := range m.GetVendors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return EditorValidationError{
					field:  fmt.Sprintf("Vendors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPartnerManagers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return EditorValidationError{
					field:  fmt.Sprintf("PartnerManagers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAudits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return EditorValidationError{
					field:  fmt.Sprintf("Audits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCreatedOn()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return EditorValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedOn()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return EditorValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductsCount

	if len(m.GetCountryCode()) > 2 {
		return EditorValidationError{
			field:  "CountryCode",
			reason: "value length must be at most 2 bytes",
		}
	}

	// no validation rules for Address

	// no validation rules for GroupContract

	for idx, item := range m.GetGlobalAccountManager() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return EditorValidationError{
					field:  fmt.Sprintf("GlobalAccountManager[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSourcers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return EditorValidationError{
					field:  fmt.Sprintf("Sourcers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

func (m *Editor) _validateUuid(uuid string) error {
	if matched := _catalog_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EditorValidationError is the validation error returned by Editor.Validate if
// the designated constraints aren't met.
type EditorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditorValidationError) ErrorName() string { return "EditorValidationError" }

// Error satisfies the builtin error interface
func (e EditorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditorValidationError{}

// Validate checks the field values on Vendors with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Vendors) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// VendorsValidationError is the validation error returned by Vendors.Validate
// if the designated constraints aren't met.
type VendorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VendorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VendorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VendorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VendorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VendorsValidationError) ErrorName() string { return "VendorsValidationError" }

// Error satisfies the builtin error interface
func (e VendorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVendors.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VendorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VendorsValidationError{}

// Validate checks the field values on Audits with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Audits) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetEntity()) > 200 {
		return AuditsValidationError{
			field:  "Entity",
			reason: "value length must be at most 200 bytes",
		}
	}

	if v, ok := interface{}(m.GetDate()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return AuditsValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Year

	return nil
}

// AuditsValidationError is the validation error returned by Audits.Validate if
// the designated constraints aren't met.
type AuditsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditsValidationError) ErrorName() string { return "AuditsValidationError" }

// Error satisfies the builtin error interface
func (e AuditsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditsValidationError{}

// Validate checks the field values on Managers with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Managers) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Email

	if len(m.GetName()) > 200 {
		return ManagersValidationError{
			field:  "Name",
			reason: "value length must be at most 200 bytes",
		}
	}

	return nil
}

// ManagersValidationError is the validation error returned by
// Managers.Validate if the designated constraints aren't met.
type ManagersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagersValidationError) ErrorName() string { return "ManagersValidationError" }

// Error satisfies the builtin error interface
func (e ManagersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagersValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}
