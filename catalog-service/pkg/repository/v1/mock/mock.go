// Code generated by MockGen. DO NOT EDIT.
// Source: optisam-backend/catalog-service/pkg/repository/v1 (interfaces: ProductCatalog)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	v1 "optisam-backend/catalog-service/pkg/api/v1"
	postgres "optisam-backend/catalog-service/pkg/repository/v1/postgres"
	db "optisam-backend/catalog-service/pkg/repository/v1/postgres/db"
	reflect "reflect"
)

// MockProductCatalog is a mock of ProductCatalog interface
type MockProductCatalog struct {
	ctrl     *gomock.Controller
	recorder *MockProductCatalogMockRecorder
}

// MockProductCatalogMockRecorder is the mock recorder for MockProductCatalog
type MockProductCatalogMockRecorder struct {
	mock *MockProductCatalog
}

// NewMockProductCatalog creates a new mock instance
func NewMockProductCatalog(ctrl *gomock.Controller) *MockProductCatalog {
	mock := &MockProductCatalog{ctrl: ctrl}
	mock.recorder = &MockProductCatalogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductCatalog) EXPECT() *MockProductCatalogMockRecorder {
	return m.recorder
}

// CreateUploadFileLog mocks base method
func (m *MockProductCatalog) CreateUploadFileLog(arg0 context.Context, arg1 db.CreateUploadFileLogParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadFileLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUploadFileLog indicates an expected call of CreateUploadFileLog
func (mr *MockProductCatalogMockRecorder) CreateUploadFileLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadFileLog", reflect.TypeOf((*MockProductCatalog)(nil).CreateUploadFileLog), arg0, arg1)
}

// DeleteEditorCatalog mocks base method
func (m *MockProductCatalog) DeleteEditorCatalog(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEditorCatalog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEditorCatalog indicates an expected call of DeleteEditorCatalog
func (mr *MockProductCatalogMockRecorder) DeleteEditorCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEditorCatalog", reflect.TypeOf((*MockProductCatalog)(nil).DeleteEditorCatalog), arg0, arg1)
}

// DeleteProductCatalog mocks base method
func (m *MockProductCatalog) DeleteProductCatalog(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductCatalog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductCatalog indicates an expected call of DeleteProductCatalog
func (mr *MockProductCatalogMockRecorder) DeleteProductCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductCatalog", reflect.TypeOf((*MockProductCatalog)(nil).DeleteProductCatalog), arg0, arg1)
}

// DeleteVersionCatalog mocks base method
func (m *MockProductCatalog) DeleteVersionCatalog(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVersionCatalog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVersionCatalog indicates an expected call of DeleteVersionCatalog
func (mr *MockProductCatalogMockRecorder) DeleteVersionCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVersionCatalog", reflect.TypeOf((*MockProductCatalog)(nil).DeleteVersionCatalog), arg0, arg1)
}

// GetAllScope mocks base method
func (m *MockProductCatalog) GetAllScope(arg0 context.Context) ([]*postgres.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllScope", arg0)
	ret0, _ := ret[0].([]*postgres.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllScope indicates an expected call of GetAllScope
func (mr *MockProductCatalogMockRecorder) GetAllScope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllScope", reflect.TypeOf((*MockProductCatalog)(nil).GetAllScope), arg0)
}

// GetEditorCatalog mocks base method
func (m *MockProductCatalog) GetEditorCatalog(arg0 context.Context, arg1 string) (db.EditorCatalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEditorCatalog", arg0, arg1)
	ret0, _ := ret[0].(db.EditorCatalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorCatalog indicates an expected call of GetEditorCatalog
func (mr *MockProductCatalogMockRecorder) GetEditorCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorCatalog", reflect.TypeOf((*MockProductCatalog)(nil).GetEditorCatalog), arg0, arg1)
}

// GetEditorCatalogByName mocks base method
func (m *MockProductCatalog) GetEditorCatalogByName(arg0 context.Context, arg1 string) (db.EditorCatalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEditorCatalogByName", arg0, arg1)
	ret0, _ := ret[0].(db.EditorCatalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorCatalogByName indicates an expected call of GetEditorCatalogByName
func (mr *MockProductCatalogMockRecorder) GetEditorCatalogByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorCatalogByName", reflect.TypeOf((*MockProductCatalog)(nil).GetEditorCatalogByName), arg0, arg1)
}

// GetEditorCatalogName mocks base method
func (m *MockProductCatalog) GetEditorCatalogName(arg0 context.Context, arg1 string) (db.GetEditorCatalogNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEditorCatalogName", arg0, arg1)
	ret0, _ := ret[0].(db.GetEditorCatalogNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorCatalogName indicates an expected call of GetEditorCatalogName
func (mr *MockProductCatalogMockRecorder) GetEditorCatalogName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorCatalogName", reflect.TypeOf((*MockProductCatalog)(nil).GetEditorCatalogName), arg0, arg1)
}

// GetProductCatalogByEditorId mocks base method
func (m *MockProductCatalog) GetProductCatalogByEditorId(arg0 context.Context, arg1 db.GetProductCatalogByEditorIdParams) (db.ProductCatalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCatalogByEditorId", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCatalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCatalogByEditorId indicates an expected call of GetProductCatalogByEditorId
func (mr *MockProductCatalogMockRecorder) GetProductCatalogByEditorId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCatalogByEditorId", reflect.TypeOf((*MockProductCatalog)(nil).GetProductCatalogByEditorId), arg0, arg1)
}

// GetProductCatalogByPrductID mocks base method
func (m *MockProductCatalog) GetProductCatalogByPrductID(arg0 context.Context, arg1 string) (db.GetProductCatalogByPrductIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCatalogByPrductID", arg0, arg1)
	ret0, _ := ret[0].(db.GetProductCatalogByPrductIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCatalogByPrductID indicates an expected call of GetProductCatalogByPrductID
func (mr *MockProductCatalogMockRecorder) GetProductCatalogByPrductID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCatalogByPrductID", reflect.TypeOf((*MockProductCatalog)(nil).GetProductCatalogByPrductID), arg0, arg1)
}

// GetProductCatalogBySwidTag mocks base method
func (m *MockProductCatalog) GetProductCatalogBySwidTag(arg0 context.Context, arg1 sql.NullString) (db.ProductCatalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCatalogBySwidTag", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCatalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCatalogBySwidTag indicates an expected call of GetProductCatalogBySwidTag
func (mr *MockProductCatalogMockRecorder) GetProductCatalogBySwidTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCatalogBySwidTag", reflect.TypeOf((*MockProductCatalog)(nil).GetProductCatalogBySwidTag), arg0, arg1)
}

// GetProductsByEditorID mocks base method
func (m *MockProductCatalog) GetProductsByEditorID(arg0 context.Context, arg1 string) ([]db.ProductCatalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByEditorID", arg0, arg1)
	ret0, _ := ret[0].([]db.ProductCatalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByEditorID indicates an expected call of GetProductsByEditorID
func (mr *MockProductCatalogMockRecorder) GetProductsByEditorID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByEditorID", reflect.TypeOf((*MockProductCatalog)(nil).GetProductsByEditorID), arg0, arg1)
}

// GetProductsNamesByEditorID mocks base method
func (m *MockProductCatalog) GetProductsNamesByEditorID(arg0 context.Context, arg1 string) ([]db.GetProductsNamesByEditorIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsNamesByEditorID", arg0, arg1)
	ret0, _ := ret[0].([]db.GetProductsNamesByEditorIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsNamesByEditorID indicates an expected call of GetProductsNamesByEditorID
func (mr *MockProductCatalogMockRecorder) GetProductsNamesByEditorID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsNamesByEditorID", reflect.TypeOf((*MockProductCatalog)(nil).GetProductsNamesByEditorID), arg0, arg1)
}

// GetScope mocks base method
func (m *MockProductCatalog) GetScope(arg0 context.Context, arg1 []string) ([]*postgres.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScope", arg0, arg1)
	ret0, _ := ret[0].([]*postgres.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScope indicates an expected call of GetScope
func (mr *MockProductCatalogMockRecorder) GetScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScope", reflect.TypeOf((*MockProductCatalog)(nil).GetScope), arg0, arg1)
}

// GetUploadFileLogs mocks base method
func (m *MockProductCatalog) GetUploadFileLogs(arg0 context.Context) ([]db.UploadFileLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadFileLogs", arg0)
	ret0, _ := ret[0].([]db.UploadFileLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadFileLogs indicates an expected call of GetUploadFileLogs
func (mr *MockProductCatalogMockRecorder) GetUploadFileLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadFileLogs", reflect.TypeOf((*MockProductCatalog)(nil).GetUploadFileLogs), arg0)
}

// GetVersionCatalogByPrductID mocks base method
func (m *MockProductCatalog) GetVersionCatalogByPrductID(arg0 context.Context, arg1 string) ([]db.VersionCatalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionCatalogByPrductID", arg0, arg1)
	ret0, _ := ret[0].([]db.VersionCatalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionCatalogByPrductID indicates an expected call of GetVersionCatalogByPrductID
func (mr *MockProductCatalogMockRecorder) GetVersionCatalogByPrductID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionCatalogByPrductID", reflect.TypeOf((*MockProductCatalog)(nil).GetVersionCatalogByPrductID), arg0, arg1)
}

// GetVersionCatalogBySwidTag mocks base method
func (m *MockProductCatalog) GetVersionCatalogBySwidTag(arg0 context.Context, arg1 sql.NullString) (db.VersionCatalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionCatalogBySwidTag", arg0, arg1)
	ret0, _ := ret[0].(db.VersionCatalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionCatalogBySwidTag indicates an expected call of GetVersionCatalogBySwidTag
func (mr *MockProductCatalogMockRecorder) GetVersionCatalogBySwidTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionCatalogBySwidTag", reflect.TypeOf((*MockProductCatalog)(nil).GetVersionCatalogBySwidTag), arg0, arg1)
}

// InsertEditorCatalog mocks base method
func (m *MockProductCatalog) InsertEditorCatalog(arg0 context.Context, arg1 db.InsertEditorCatalogParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEditorCatalog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertEditorCatalog indicates an expected call of InsertEditorCatalog
func (mr *MockProductCatalogMockRecorder) InsertEditorCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEditorCatalog", reflect.TypeOf((*MockProductCatalog)(nil).InsertEditorCatalog), arg0, arg1)
}

// InsertProductCatalog mocks base method
func (m *MockProductCatalog) InsertProductCatalog(arg0 context.Context, arg1 db.InsertProductCatalogParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductCatalog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProductCatalog indicates an expected call of InsertProductCatalog
func (mr *MockProductCatalogMockRecorder) InsertProductCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductCatalog", reflect.TypeOf((*MockProductCatalog)(nil).InsertProductCatalog), arg0, arg1)
}

// InsertProductTx mocks base method
func (m *MockProductCatalog) InsertProductTx(arg0 context.Context, arg1 *v1.Product) (*v1.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductTx", arg0, arg1)
	ret0, _ := ret[0].(*v1.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProductTx indicates an expected call of InsertProductTx
func (mr *MockProductCatalogMockRecorder) InsertProductTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductTx", reflect.TypeOf((*MockProductCatalog)(nil).InsertProductTx), arg0, arg1)
}

// InsertRecordsTx mocks base method
func (m *MockProductCatalog) InsertRecordsTx(arg0 context.Context, arg1 *v1.UploadRecords) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRecordsTx", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRecordsTx indicates an expected call of InsertRecordsTx
func (mr *MockProductCatalogMockRecorder) InsertRecordsTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRecordsTx", reflect.TypeOf((*MockProductCatalog)(nil).InsertRecordsTx), arg0, arg1)
}

// InsertVersionCatalog mocks base method
func (m *MockProductCatalog) InsertVersionCatalog(arg0 context.Context, arg1 db.InsertVersionCatalogParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVersionCatalog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertVersionCatalog indicates an expected call of InsertVersionCatalog
func (mr *MockProductCatalogMockRecorder) InsertVersionCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVersionCatalog", reflect.TypeOf((*MockProductCatalog)(nil).InsertVersionCatalog), arg0, arg1)
}

// UpdateEditorCatalog mocks base method
func (m *MockProductCatalog) UpdateEditorCatalog(arg0 context.Context, arg1 db.UpdateEditorCatalogParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEditorCatalog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEditorCatalog indicates an expected call of UpdateEditorCatalog
func (mr *MockProductCatalogMockRecorder) UpdateEditorCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEditorCatalog", reflect.TypeOf((*MockProductCatalog)(nil).UpdateEditorCatalog), arg0, arg1)
}

// UpdateEditorNameForProductCatalog mocks base method
func (m *MockProductCatalog) UpdateEditorNameForProductCatalog(arg0 context.Context, arg1 db.UpdateEditorNameForProductCatalogParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEditorNameForProductCatalog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEditorNameForProductCatalog indicates an expected call of UpdateEditorNameForProductCatalog
func (mr *MockProductCatalogMockRecorder) UpdateEditorNameForProductCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEditorNameForProductCatalog", reflect.TypeOf((*MockProductCatalog)(nil).UpdateEditorNameForProductCatalog), arg0, arg1)
}

// UpdateEditorTx mocks base method
func (m *MockProductCatalog) UpdateEditorTx(arg0 context.Context, arg1 *v1.Editor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEditorTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEditorTx indicates an expected call of UpdateEditorTx
func (mr *MockProductCatalogMockRecorder) UpdateEditorTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEditorTx", reflect.TypeOf((*MockProductCatalog)(nil).UpdateEditorTx), arg0, arg1)
}

// UpdateProductCatalog mocks base method
func (m *MockProductCatalog) UpdateProductCatalog(arg0 context.Context, arg1 db.UpdateProductCatalogParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductCatalog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductCatalog indicates an expected call of UpdateProductCatalog
func (mr *MockProductCatalogMockRecorder) UpdateProductCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductCatalog", reflect.TypeOf((*MockProductCatalog)(nil).UpdateProductCatalog), arg0, arg1)
}

// UpdateProductEditor mocks base method
func (m *MockProductCatalog) UpdateProductEditor(arg0 context.Context, arg1 db.UpdateProductEditorParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductEditor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductEditor indicates an expected call of UpdateProductEditor
func (mr *MockProductCatalogMockRecorder) UpdateProductEditor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductEditor", reflect.TypeOf((*MockProductCatalog)(nil).UpdateProductEditor), arg0, arg1)
}

// UpdateProductTx mocks base method
func (m *MockProductCatalog) UpdateProductTx(arg0 context.Context, arg1 *v1.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductTx indicates an expected call of UpdateProductTx
func (mr *MockProductCatalogMockRecorder) UpdateProductTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductTx", reflect.TypeOf((*MockProductCatalog)(nil).UpdateProductTx), arg0, arg1)
}

// UpdateVersionCatalog mocks base method
func (m *MockProductCatalog) UpdateVersionCatalog(arg0 context.Context, arg1 db.UpdateVersionCatalogParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVersionCatalog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVersionCatalog indicates an expected call of UpdateVersionCatalog
func (mr *MockProductCatalogMockRecorder) UpdateVersionCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVersionCatalog", reflect.TypeOf((*MockProductCatalog)(nil).UpdateVersionCatalog), arg0, arg1)
}

// UpdateVersionForEditor mocks base method
func (m *MockProductCatalog) UpdateVersionForEditor(arg0 context.Context, arg1 db.UpdateVersionForEditorParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVersionForEditor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVersionForEditor indicates an expected call of UpdateVersionForEditor
func (mr *MockProductCatalogMockRecorder) UpdateVersionForEditor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVersionForEditor", reflect.TypeOf((*MockProductCatalog)(nil).UpdateVersionForEditor), arg0, arg1)
}

// UpdateVersionsSysSwidatagsForEditor mocks base method
func (m *MockProductCatalog) UpdateVersionsSysSwidatagsForEditor(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVersionsSysSwidatagsForEditor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVersionsSysSwidatagsForEditor indicates an expected call of UpdateVersionsSysSwidatagsForEditor
func (mr *MockProductCatalogMockRecorder) UpdateVersionsSysSwidatagsForEditor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVersionsSysSwidatagsForEditor", reflect.TypeOf((*MockProductCatalog)(nil).UpdateVersionsSysSwidatagsForEditor), arg0, arg1)
}

// UpsertEditorCatalog mocks base method
func (m *MockProductCatalog) UpsertEditorCatalog(arg0 context.Context, arg1 db.UpsertEditorCatalogParams) (db.UpsertEditorCatalogRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEditorCatalog", arg0, arg1)
	ret0, _ := ret[0].(db.UpsertEditorCatalogRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertEditorCatalog indicates an expected call of UpsertEditorCatalog
func (mr *MockProductCatalogMockRecorder) UpsertEditorCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEditorCatalog", reflect.TypeOf((*MockProductCatalog)(nil).UpsertEditorCatalog), arg0, arg1)
}

// UpsertProductCatalog mocks base method
func (m *MockProductCatalog) UpsertProductCatalog(arg0 context.Context, arg1 db.UpsertProductCatalogParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertProductCatalog", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProductCatalog indicates an expected call of UpsertProductCatalog
func (mr *MockProductCatalogMockRecorder) UpsertProductCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProductCatalog", reflect.TypeOf((*MockProductCatalog)(nil).UpsertProductCatalog), arg0, arg1)
}

// UpsertVersionCatalog mocks base method
func (m *MockProductCatalog) UpsertVersionCatalog(arg0 context.Context, arg1 db.UpsertVersionCatalogParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertVersionCatalog", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertVersionCatalog indicates an expected call of UpsertVersionCatalog
func (mr *MockProductCatalogMockRecorder) UpsertVersionCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVersionCatalog", reflect.TypeOf((*MockProductCatalog)(nil).UpsertVersionCatalog), arg0, arg1)
}
