// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"time"
)

type LocationType string

const (
	LocationTypeNONE      LocationType = "NONE"
	LocationTypeSAAS      LocationType = "SAAS"
	LocationTypeOnPremise LocationType = "On Premise"
	LocationTypeBoth      LocationType = "Both"
)

func (e *LocationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LocationType(s)
	case string:
		*e = LocationType(s)
	default:
		return fmt.Errorf("unsupported scan type for LocationType: %T", src)
	}
	return nil
}

type OpensourceType string

const (
	OpensourceTypeNONE       OpensourceType = "NONE"
	OpensourceTypeCOMMERCIAL OpensourceType = "COMMERCIAL"
	OpensourceTypeCOMMUNITY  OpensourceType = "COMMUNITY"
	OpensourceTypeBOTH       OpensourceType = "BOTH"
)

func (e *OpensourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OpensourceType(s)
	case string:
		*e = OpensourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for OpensourceType: %T", src)
	}
	return nil
}

type EditorCatalog struct {
	ID                 string          `json:"id"`
	Name               string          `json:"name"`
	GeneralInformation sql.NullString  `json:"general_information"`
	PartnerManagers    json.RawMessage `json:"partner_managers"`
	Audits             json.RawMessage `json:"audits"`
	Vendors            json.RawMessage `json:"vendors"`
	CreatedOn          time.Time       `json:"created_on"`
	UpdatedOn          time.Time       `json:"updated_on"`
	Source             sql.NullString  `json:"source"`
}

type ProductCatalog struct {
	ID                  string          `json:"id"`
	Name                string          `json:"name"`
	Editorid            string          `json:"editorid"`
	GenearlInformation  sql.NullString  `json:"genearl_information"`
	ContractTips        sql.NullString  `json:"contract_tips"`
	SupportVendors      json.RawMessage `json:"support_vendors"`
	Metrics             json.RawMessage `json:"metrics"`
	IsOpensource        sql.NullBool    `json:"is_opensource"`
	LicencesOpensource  sql.NullString  `json:"licences_opensource"`
	IsClosesource       sql.NullBool    `json:"is_closesource"`
	LicensesClosesource json.RawMessage `json:"licenses_closesource"`
	Location            LocationType    `json:"location"`
	CreatedOn           time.Time       `json:"created_on"`
	UpdatedOn           time.Time       `json:"updated_on"`
	Recommendation      sql.NullString  `json:"recommendation"`
	UsefulLinks         json.RawMessage `json:"useful_links"`
	SwidTagProduct      sql.NullString  `json:"swid_tag_product"`
	Source              sql.NullString  `json:"source"`
	EditorName          string          `json:"editor_name"`
	OpensourceType      OpensourceType  `json:"opensource_type"`
}

type UploadFileLog struct {
	UploadID   int32          `json:"upload_id"`
	FileName   string         `json:"file_name"`
	UploadedOn time.Time      `json:"uploaded_on"`
	Message    sql.NullString `json:"message"`
}

type VersionCatalog struct {
	ID             string         `json:"id"`
	SwidTagSystem  string         `json:"swid_tag_system"`
	PID            string         `json:"p_id"`
	Name           string         `json:"name"`
	EndOfLife      sql.NullTime   `json:"end_of_life"`
	EndOfSupport   sql.NullTime   `json:"end_of_support"`
	Recommendation sql.NullString `json:"recommendation"`
	SwidTagVersion sql.NullString `json:"swid_tag_version"`
	Source         sql.NullString `json:"source"`
}
