// Copyright (C) 2019 Orange
// 
// This software is distributed under the terms and conditions of the 'Apache License 2.0'
// license which can be found in the file 'License.txt' in this package distribution 
// or at 'http://www.apache.org/licenses/LICENSE-2.0'. 

// Code generated by MockGen. DO NOT EDIT.
// Source: optisam-backend/equipment-service/pkg/repository/v1 (interfaces: Equipment)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	json "encoding/json"
	gomock "github.com/golang/mock/gomock"
	v1 "optisam-backend/equipment-service/pkg/repository/v1"
	reflect "reflect"
)

// MockEquipment is a mock of Equipment interface
type MockEquipment struct {
	ctrl     *gomock.Controller
	recorder *MockEquipmentMockRecorder
}

// MockEquipmentMockRecorder is the mock recorder for MockEquipment
type MockEquipmentMockRecorder struct {
	mock *MockEquipment
}

// NewMockEquipment creates a new mock instance
func NewMockEquipment(ctrl *gomock.Controller) *MockEquipment {
	mock := &MockEquipment{ctrl: ctrl}
	mock.recorder = &MockEquipmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEquipment) EXPECT() *MockEquipmentMockRecorder {
	return m.recorder
}

// CreateEquipmentType mocks base method
func (m *MockEquipment) CreateEquipmentType(arg0 context.Context, arg1 *v1.EquipmentType, arg2 []string) (*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEquipmentType", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEquipmentType indicates an expected call of CreateEquipmentType
func (mr *MockEquipmentMockRecorder) CreateEquipmentType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEquipmentType", reflect.TypeOf((*MockEquipment)(nil).CreateEquipmentType), arg0, arg1, arg2)
}

// DeleteEquipmentType mocks base method
func (m *MockEquipment) DeleteEquipmentType(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEquipmentType", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEquipmentType indicates an expected call of DeleteEquipmentType
func (mr *MockEquipmentMockRecorder) DeleteEquipmentType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEquipmentType", reflect.TypeOf((*MockEquipment)(nil).DeleteEquipmentType), arg0, arg1, arg2)
}

// DeleteEquipments mocks base method
func (m *MockEquipment) DeleteEquipments(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEquipments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEquipments indicates an expected call of DeleteEquipments
func (mr *MockEquipmentMockRecorder) DeleteEquipments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEquipments", reflect.TypeOf((*MockEquipment)(nil).DeleteEquipments), arg0, arg1)
}

// Equipment mocks base method
func (m *MockEquipment) Equipment(arg0 context.Context, arg1 *v1.EquipmentType, arg2 string, arg3 []string) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equipment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Equipment indicates an expected call of Equipment
func (mr *MockEquipmentMockRecorder) Equipment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equipment", reflect.TypeOf((*MockEquipment)(nil).Equipment), arg0, arg1, arg2, arg3)
}

// EquipmentChildren mocks base method
func (m *MockEquipment) EquipmentChildren(arg0 context.Context, arg1, arg2 *v1.EquipmentType, arg3 string, arg4 *v1.QueryEquipments, arg5 []string) (int32, json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentChildren", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(json.RawMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EquipmentChildren indicates an expected call of EquipmentChildren
func (mr *MockEquipmentMockRecorder) EquipmentChildren(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentChildren", reflect.TypeOf((*MockEquipment)(nil).EquipmentChildren), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EquipmentParents mocks base method
func (m *MockEquipment) EquipmentParents(arg0 context.Context, arg1, arg2 *v1.EquipmentType, arg3 string, arg4 []string) (int32, json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentParents", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(json.RawMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EquipmentParents indicates an expected call of EquipmentParents
func (mr *MockEquipmentMockRecorder) EquipmentParents(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentParents", reflect.TypeOf((*MockEquipment)(nil).EquipmentParents), arg0, arg1, arg2, arg3, arg4)
}

// EquipmentTypeByType mocks base method
func (m *MockEquipment) EquipmentTypeByType(arg0 context.Context, arg1 string, arg2 []string) (*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentTypeByType", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EquipmentTypeByType indicates an expected call of EquipmentTypeByType
func (mr *MockEquipmentMockRecorder) EquipmentTypeByType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentTypeByType", reflect.TypeOf((*MockEquipment)(nil).EquipmentTypeByType), arg0, arg1, arg2)
}

// EquipmentTypeChildren mocks base method
func (m *MockEquipment) EquipmentTypeChildren(arg0 context.Context, arg1 string, arg2 int, arg3 []string) ([]*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentTypeChildren", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EquipmentTypeChildren indicates an expected call of EquipmentTypeChildren
func (mr *MockEquipmentMockRecorder) EquipmentTypeChildren(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentTypeChildren", reflect.TypeOf((*MockEquipment)(nil).EquipmentTypeChildren), arg0, arg1, arg2, arg3)
}

// EquipmentTypes mocks base method
func (m *MockEquipment) EquipmentTypes(arg0 context.Context, arg1 []string) ([]*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentTypes", arg0, arg1)
	ret0, _ := ret[0].([]*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EquipmentTypes indicates an expected call of EquipmentTypes
func (mr *MockEquipmentMockRecorder) EquipmentTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentTypes", reflect.TypeOf((*MockEquipment)(nil).EquipmentTypes), arg0, arg1)
}

// EquipmentWithID mocks base method
func (m *MockEquipment) EquipmentWithID(arg0 context.Context, arg1 string, arg2 []string) (*v1.EquipmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EquipmentWithID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.EquipmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EquipmentWithID indicates an expected call of EquipmentWithID
func (mr *MockEquipmentMockRecorder) EquipmentWithID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EquipmentWithID", reflect.TypeOf((*MockEquipment)(nil).EquipmentWithID), arg0, arg1, arg2)
}

// Equipments mocks base method
func (m *MockEquipment) Equipments(arg0 context.Context, arg1 *v1.EquipmentType, arg2 *v1.QueryEquipments, arg3 []string) (int32, json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equipments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(json.RawMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Equipments indicates an expected call of Equipments
func (mr *MockEquipmentMockRecorder) Equipments(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equipments", reflect.TypeOf((*MockEquipment)(nil).Equipments), arg0, arg1, arg2, arg3)
}

// ListEquipmentsForProductAggregation mocks base method
func (m *MockEquipment) ListEquipmentsForProductAggregation(arg0 context.Context, arg1 string, arg2 *v1.EquipmentType, arg3 *v1.QueryEquipments, arg4 []string) (int32, json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEquipmentsForProductAggregation", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(json.RawMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEquipmentsForProductAggregation indicates an expected call of ListEquipmentsForProductAggregation
func (mr *MockEquipmentMockRecorder) ListEquipmentsForProductAggregation(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentsForProductAggregation", reflect.TypeOf((*MockEquipment)(nil).ListEquipmentsForProductAggregation), arg0, arg1, arg2, arg3, arg4)
}

// MetadataAllWithType mocks base method
func (m *MockEquipment) MetadataAllWithType(arg0 context.Context, arg1 v1.MetadataType, arg2 []string) ([]*v1.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetadataAllWithType", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetadataAllWithType indicates an expected call of MetadataAllWithType
func (mr *MockEquipmentMockRecorder) MetadataAllWithType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetadataAllWithType", reflect.TypeOf((*MockEquipment)(nil).MetadataAllWithType), arg0, arg1, arg2)
}

// MetadataWithID mocks base method
func (m *MockEquipment) MetadataWithID(arg0 context.Context, arg1 string, arg2 []string) (*v1.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetadataWithID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetadataWithID indicates an expected call of MetadataWithID
func (mr *MockEquipmentMockRecorder) MetadataWithID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetadataWithID", reflect.TypeOf((*MockEquipment)(nil).MetadataWithID), arg0, arg1, arg2)
}

// ProductEquipments mocks base method
func (m *MockEquipment) ProductEquipments(arg0 context.Context, arg1 string, arg2 *v1.EquipmentType, arg3 *v1.QueryEquipments, arg4 []string) (int32, json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductEquipments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(json.RawMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProductEquipments indicates an expected call of ProductEquipments
func (mr *MockEquipmentMockRecorder) ProductEquipments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductEquipments", reflect.TypeOf((*MockEquipment)(nil).ProductEquipments), arg0, arg1, arg2, arg3, arg4)
}

// UpdateEquipmentType mocks base method
func (m *MockEquipment) UpdateEquipmentType(arg0 context.Context, arg1, arg2 string, arg3 *v1.UpdateEquipmentRequest, arg4 []string) ([]*v1.Attribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEquipmentType", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*v1.Attribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEquipmentType indicates an expected call of UpdateEquipmentType
func (mr *MockEquipmentMockRecorder) UpdateEquipmentType(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEquipmentType", reflect.TypeOf((*MockEquipment)(nil).UpdateEquipmentType), arg0, arg1, arg2, arg3, arg4)
}

// UpsertEquipment mocks base method
func (m *MockEquipment) UpsertEquipment(arg0 context.Context, arg1, arg2, arg3 string, arg4 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEquipment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertEquipment indicates an expected call of UpsertEquipment
func (mr *MockEquipmentMockRecorder) UpsertEquipment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEquipment", reflect.TypeOf((*MockEquipment)(nil).UpsertEquipment), arg0, arg1, arg2, arg3, arg4)
}

// UpsertMetadata mocks base method
func (m *MockEquipment) UpsertMetadata(arg0 context.Context, arg1 *v1.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMetadata indicates an expected call of UpsertMetadata
func (mr *MockEquipmentMockRecorder) UpsertMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMetadata", reflect.TypeOf((*MockEquipment)(nil).UpsertMetadata), arg0, arg1)
}
