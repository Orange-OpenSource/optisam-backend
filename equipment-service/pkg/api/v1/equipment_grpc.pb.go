// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EquipmentServiceClient is the client API for EquipmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EquipmentServiceClient interface {
	CreateGenericScopeEquipmentTypes(ctx context.Context, in *CreateGenericScopeEquipmentTypesRequest, opts ...grpc.CallOption) (*CreateGenericScopeEquipmentTypesResponse, error)
	UpsertMetadata(ctx context.Context, in *UpsertMetadataRequest, opts ...grpc.CallOption) (*UpsertMetadataResponse, error)
	EquipmentsPerEquipmentType(ctx context.Context, in *EquipmentsPerEquipmentTypeRequest, opts ...grpc.CallOption) (*EquipmentsPerEquipmentTypeResponse, error)
	UpsertEquipment(ctx context.Context, in *UpsertEquipmentRequest, opts ...grpc.CallOption) (*UpsertEquipmentResponse, error)
	UpsertEquipmentAllocatedMetric(ctx context.Context, in *UpsertEquipmentAllocatedMetricRequest, opts ...grpc.CallOption) (*UpsertEquipmentResponse, error)
	ListEquipmentsMetadata(ctx context.Context, in *ListEquipmentMetadataRequest, opts ...grpc.CallOption) (*ListEquipmentMetadataResponse, error)
	GetEquipmentMetadata(ctx context.Context, in *EquipmentMetadataRequest, opts ...grpc.CallOption) (*EquipmentMetadata, error)
	EquipmentsTypes(ctx context.Context, in *EquipmentTypesRequest, opts ...grpc.CallOption) (*EquipmentTypesResponse, error)
	CreateEquipmentType(ctx context.Context, in *EquipmentType, opts ...grpc.CallOption) (*EquipmentType, error)
	DeleteEquipmentType(ctx context.Context, in *DeleteEquipmentTypeRequest, opts ...grpc.CallOption) (*DeleteEquipmentTypeResponse, error)
	// UpdateEquipmentType provides support for updating equipment
	// only addition of new attribyte is supported.
	// 1. Attributes added
	UpdateEquipmentType(ctx context.Context, in *UpdateEquipmentTypeRequest, opts ...grpc.CallOption) (*EquipmentType, error)
	ListEquipments(ctx context.Context, in *ListEquipmentsRequest, opts ...grpc.CallOption) (*ListEquipmentsResponse, error)
	DropEquipmentData(ctx context.Context, in *DropEquipmentDataRequest, opts ...grpc.CallOption) (*DropEquipmentDataResponse, error)
	GetEquipment(ctx context.Context, in *GetEquipmentRequest, opts ...grpc.CallOption) (*GetEquipmentResponse, error)
	ListEquipmentParents(ctx context.Context, in *ListEquipmentParentsRequest, opts ...grpc.CallOption) (*ListEquipmentsResponse, error)
	ListEquipmentChildren(ctx context.Context, in *ListEquipmentChildrenRequest, opts ...grpc.CallOption) (*ListEquipmentsResponse, error)
	ListEquipmentsForProductAggregation(ctx context.Context, in *ListEquipmentsForProductAggregationRequest, opts ...grpc.CallOption) (*ListEquipmentsResponse, error)
	ListEquipmentsForProduct(ctx context.Context, in *ListEquipmentsForProductRequest, opts ...grpc.CallOption) (*ListEquipmentsResponse, error)
	DropMetaData(ctx context.Context, in *DropMetaDataRequest, opts ...grpc.CallOption) (*DropMetaDataResponse, error)
}

type equipmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipmentServiceClient(cc grpc.ClientConnInterface) EquipmentServiceClient {
	return &equipmentServiceClient{cc}
}

func (c *equipmentServiceClient) CreateGenericScopeEquipmentTypes(ctx context.Context, in *CreateGenericScopeEquipmentTypesRequest, opts ...grpc.CallOption) (*CreateGenericScopeEquipmentTypesResponse, error) {
	out := new(CreateGenericScopeEquipmentTypesResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/CreateGenericScopeEquipmentTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) UpsertMetadata(ctx context.Context, in *UpsertMetadataRequest, opts ...grpc.CallOption) (*UpsertMetadataResponse, error) {
	out := new(UpsertMetadataResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/UpsertMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) EquipmentsPerEquipmentType(ctx context.Context, in *EquipmentsPerEquipmentTypeRequest, opts ...grpc.CallOption) (*EquipmentsPerEquipmentTypeResponse, error) {
	out := new(EquipmentsPerEquipmentTypeResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/EquipmentsPerEquipmentType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) UpsertEquipment(ctx context.Context, in *UpsertEquipmentRequest, opts ...grpc.CallOption) (*UpsertEquipmentResponse, error) {
	out := new(UpsertEquipmentResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/UpsertEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) UpsertEquipmentAllocatedMetric(ctx context.Context, in *UpsertEquipmentAllocatedMetricRequest, opts ...grpc.CallOption) (*UpsertEquipmentResponse, error) {
	out := new(UpsertEquipmentResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/UpsertEquipmentAllocatedMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) ListEquipmentsMetadata(ctx context.Context, in *ListEquipmentMetadataRequest, opts ...grpc.CallOption) (*ListEquipmentMetadataResponse, error) {
	out := new(ListEquipmentMetadataResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/ListEquipmentsMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) GetEquipmentMetadata(ctx context.Context, in *EquipmentMetadataRequest, opts ...grpc.CallOption) (*EquipmentMetadata, error) {
	out := new(EquipmentMetadata)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/GetEquipmentMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) EquipmentsTypes(ctx context.Context, in *EquipmentTypesRequest, opts ...grpc.CallOption) (*EquipmentTypesResponse, error) {
	out := new(EquipmentTypesResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/EquipmentsTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) CreateEquipmentType(ctx context.Context, in *EquipmentType, opts ...grpc.CallOption) (*EquipmentType, error) {
	out := new(EquipmentType)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/CreateEquipmentType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) DeleteEquipmentType(ctx context.Context, in *DeleteEquipmentTypeRequest, opts ...grpc.CallOption) (*DeleteEquipmentTypeResponse, error) {
	out := new(DeleteEquipmentTypeResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/DeleteEquipmentType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) UpdateEquipmentType(ctx context.Context, in *UpdateEquipmentTypeRequest, opts ...grpc.CallOption) (*EquipmentType, error) {
	out := new(EquipmentType)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/UpdateEquipmentType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) ListEquipments(ctx context.Context, in *ListEquipmentsRequest, opts ...grpc.CallOption) (*ListEquipmentsResponse, error) {
	out := new(ListEquipmentsResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/ListEquipments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) DropEquipmentData(ctx context.Context, in *DropEquipmentDataRequest, opts ...grpc.CallOption) (*DropEquipmentDataResponse, error) {
	out := new(DropEquipmentDataResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/DropEquipmentData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) GetEquipment(ctx context.Context, in *GetEquipmentRequest, opts ...grpc.CallOption) (*GetEquipmentResponse, error) {
	out := new(GetEquipmentResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/GetEquipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) ListEquipmentParents(ctx context.Context, in *ListEquipmentParentsRequest, opts ...grpc.CallOption) (*ListEquipmentsResponse, error) {
	out := new(ListEquipmentsResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/ListEquipmentParents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) ListEquipmentChildren(ctx context.Context, in *ListEquipmentChildrenRequest, opts ...grpc.CallOption) (*ListEquipmentsResponse, error) {
	out := new(ListEquipmentsResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/ListEquipmentChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) ListEquipmentsForProductAggregation(ctx context.Context, in *ListEquipmentsForProductAggregationRequest, opts ...grpc.CallOption) (*ListEquipmentsResponse, error) {
	out := new(ListEquipmentsResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/ListEquipmentsForProductAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) ListEquipmentsForProduct(ctx context.Context, in *ListEquipmentsForProductRequest, opts ...grpc.CallOption) (*ListEquipmentsResponse, error) {
	out := new(ListEquipmentsResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/ListEquipmentsForProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) DropMetaData(ctx context.Context, in *DropMetaDataRequest, opts ...grpc.CallOption) (*DropMetaDataResponse, error) {
	out := new(DropMetaDataResponse)
	err := c.cc.Invoke(ctx, "/optisam.equipment.v1.EquipmentService/DropMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipmentServiceServer is the server API for EquipmentService service.
// All implementations should embed UnimplementedEquipmentServiceServer
// for forward compatibility
type EquipmentServiceServer interface {
	CreateGenericScopeEquipmentTypes(context.Context, *CreateGenericScopeEquipmentTypesRequest) (*CreateGenericScopeEquipmentTypesResponse, error)
	UpsertMetadata(context.Context, *UpsertMetadataRequest) (*UpsertMetadataResponse, error)
	EquipmentsPerEquipmentType(context.Context, *EquipmentsPerEquipmentTypeRequest) (*EquipmentsPerEquipmentTypeResponse, error)
	UpsertEquipment(context.Context, *UpsertEquipmentRequest) (*UpsertEquipmentResponse, error)
	UpsertEquipmentAllocatedMetric(context.Context, *UpsertEquipmentAllocatedMetricRequest) (*UpsertEquipmentResponse, error)
	ListEquipmentsMetadata(context.Context, *ListEquipmentMetadataRequest) (*ListEquipmentMetadataResponse, error)
	GetEquipmentMetadata(context.Context, *EquipmentMetadataRequest) (*EquipmentMetadata, error)
	EquipmentsTypes(context.Context, *EquipmentTypesRequest) (*EquipmentTypesResponse, error)
	CreateEquipmentType(context.Context, *EquipmentType) (*EquipmentType, error)
	DeleteEquipmentType(context.Context, *DeleteEquipmentTypeRequest) (*DeleteEquipmentTypeResponse, error)
	// UpdateEquipmentType provides support for updating equipment
	// only addition of new attribyte is supported.
	// 1. Attributes added
	UpdateEquipmentType(context.Context, *UpdateEquipmentTypeRequest) (*EquipmentType, error)
	ListEquipments(context.Context, *ListEquipmentsRequest) (*ListEquipmentsResponse, error)
	DropEquipmentData(context.Context, *DropEquipmentDataRequest) (*DropEquipmentDataResponse, error)
	GetEquipment(context.Context, *GetEquipmentRequest) (*GetEquipmentResponse, error)
	ListEquipmentParents(context.Context, *ListEquipmentParentsRequest) (*ListEquipmentsResponse, error)
	ListEquipmentChildren(context.Context, *ListEquipmentChildrenRequest) (*ListEquipmentsResponse, error)
	ListEquipmentsForProductAggregation(context.Context, *ListEquipmentsForProductAggregationRequest) (*ListEquipmentsResponse, error)
	ListEquipmentsForProduct(context.Context, *ListEquipmentsForProductRequest) (*ListEquipmentsResponse, error)
	DropMetaData(context.Context, *DropMetaDataRequest) (*DropMetaDataResponse, error)
}

// UnimplementedEquipmentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEquipmentServiceServer struct {
}

func (UnimplementedEquipmentServiceServer) CreateGenericScopeEquipmentTypes(context.Context, *CreateGenericScopeEquipmentTypesRequest) (*CreateGenericScopeEquipmentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenericScopeEquipmentTypes not implemented")
}
func (UnimplementedEquipmentServiceServer) UpsertMetadata(context.Context, *UpsertMetadataRequest) (*UpsertMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMetadata not implemented")
}
func (UnimplementedEquipmentServiceServer) EquipmentsPerEquipmentType(context.Context, *EquipmentsPerEquipmentTypeRequest) (*EquipmentsPerEquipmentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipmentsPerEquipmentType not implemented")
}
func (UnimplementedEquipmentServiceServer) UpsertEquipment(context.Context, *UpsertEquipmentRequest) (*UpsertEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertEquipment not implemented")
}
func (UnimplementedEquipmentServiceServer) UpsertEquipmentAllocatedMetric(context.Context, *UpsertEquipmentAllocatedMetricRequest) (*UpsertEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertEquipmentAllocatedMetric not implemented")
}
func (UnimplementedEquipmentServiceServer) ListEquipmentsMetadata(context.Context, *ListEquipmentMetadataRequest) (*ListEquipmentMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEquipmentsMetadata not implemented")
}
func (UnimplementedEquipmentServiceServer) GetEquipmentMetadata(context.Context, *EquipmentMetadataRequest) (*EquipmentMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipmentMetadata not implemented")
}
func (UnimplementedEquipmentServiceServer) EquipmentsTypes(context.Context, *EquipmentTypesRequest) (*EquipmentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipmentsTypes not implemented")
}
func (UnimplementedEquipmentServiceServer) CreateEquipmentType(context.Context, *EquipmentType) (*EquipmentType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEquipmentType not implemented")
}
func (UnimplementedEquipmentServiceServer) DeleteEquipmentType(context.Context, *DeleteEquipmentTypeRequest) (*DeleteEquipmentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEquipmentType not implemented")
}
func (UnimplementedEquipmentServiceServer) UpdateEquipmentType(context.Context, *UpdateEquipmentTypeRequest) (*EquipmentType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEquipmentType not implemented")
}
func (UnimplementedEquipmentServiceServer) ListEquipments(context.Context, *ListEquipmentsRequest) (*ListEquipmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEquipments not implemented")
}
func (UnimplementedEquipmentServiceServer) DropEquipmentData(context.Context, *DropEquipmentDataRequest) (*DropEquipmentDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropEquipmentData not implemented")
}
func (UnimplementedEquipmentServiceServer) GetEquipment(context.Context, *GetEquipmentRequest) (*GetEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipment not implemented")
}
func (UnimplementedEquipmentServiceServer) ListEquipmentParents(context.Context, *ListEquipmentParentsRequest) (*ListEquipmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEquipmentParents not implemented")
}
func (UnimplementedEquipmentServiceServer) ListEquipmentChildren(context.Context, *ListEquipmentChildrenRequest) (*ListEquipmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEquipmentChildren not implemented")
}
func (UnimplementedEquipmentServiceServer) ListEquipmentsForProductAggregation(context.Context, *ListEquipmentsForProductAggregationRequest) (*ListEquipmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEquipmentsForProductAggregation not implemented")
}
func (UnimplementedEquipmentServiceServer) ListEquipmentsForProduct(context.Context, *ListEquipmentsForProductRequest) (*ListEquipmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEquipmentsForProduct not implemented")
}
func (UnimplementedEquipmentServiceServer) DropMetaData(context.Context, *DropMetaDataRequest) (*DropMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropMetaData not implemented")
}

// UnsafeEquipmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquipmentServiceServer will
// result in compilation errors.
type UnsafeEquipmentServiceServer interface {
	mustEmbedUnimplementedEquipmentServiceServer()
}

func RegisterEquipmentServiceServer(s grpc.ServiceRegistrar, srv EquipmentServiceServer) {
	s.RegisterService(&_EquipmentService_serviceDesc, srv)
}

func _EquipmentService_CreateGenericScopeEquipmentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenericScopeEquipmentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).CreateGenericScopeEquipmentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/CreateGenericScopeEquipmentTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).CreateGenericScopeEquipmentTypes(ctx, req.(*CreateGenericScopeEquipmentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_UpsertMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).UpsertMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/UpsertMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).UpsertMetadata(ctx, req.(*UpsertMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_EquipmentsPerEquipmentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentsPerEquipmentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).EquipmentsPerEquipmentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/EquipmentsPerEquipmentType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).EquipmentsPerEquipmentType(ctx, req.(*EquipmentsPerEquipmentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_UpsertEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).UpsertEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/UpsertEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).UpsertEquipment(ctx, req.(*UpsertEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_UpsertEquipmentAllocatedMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertEquipmentAllocatedMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).UpsertEquipmentAllocatedMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/UpsertEquipmentAllocatedMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).UpsertEquipmentAllocatedMetric(ctx, req.(*UpsertEquipmentAllocatedMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_ListEquipmentsMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEquipmentMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).ListEquipmentsMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/ListEquipmentsMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).ListEquipmentsMetadata(ctx, req.(*ListEquipmentMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_GetEquipmentMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).GetEquipmentMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/GetEquipmentMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).GetEquipmentMetadata(ctx, req.(*EquipmentMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_EquipmentsTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).EquipmentsTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/EquipmentsTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).EquipmentsTypes(ctx, req.(*EquipmentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_CreateEquipmentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).CreateEquipmentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/CreateEquipmentType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).CreateEquipmentType(ctx, req.(*EquipmentType))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_DeleteEquipmentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEquipmentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).DeleteEquipmentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/DeleteEquipmentType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).DeleteEquipmentType(ctx, req.(*DeleteEquipmentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_UpdateEquipmentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEquipmentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).UpdateEquipmentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/UpdateEquipmentType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).UpdateEquipmentType(ctx, req.(*UpdateEquipmentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_ListEquipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEquipmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).ListEquipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/ListEquipments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).ListEquipments(ctx, req.(*ListEquipmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_DropEquipmentData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropEquipmentDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).DropEquipmentData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/DropEquipmentData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).DropEquipmentData(ctx, req.(*DropEquipmentDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_GetEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).GetEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/GetEquipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).GetEquipment(ctx, req.(*GetEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_ListEquipmentParents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEquipmentParentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).ListEquipmentParents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/ListEquipmentParents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).ListEquipmentParents(ctx, req.(*ListEquipmentParentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_ListEquipmentChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEquipmentChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).ListEquipmentChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/ListEquipmentChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).ListEquipmentChildren(ctx, req.(*ListEquipmentChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_ListEquipmentsForProductAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEquipmentsForProductAggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).ListEquipmentsForProductAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/ListEquipmentsForProductAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).ListEquipmentsForProductAggregation(ctx, req.(*ListEquipmentsForProductAggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_ListEquipmentsForProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEquipmentsForProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).ListEquipmentsForProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/ListEquipmentsForProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).ListEquipmentsForProduct(ctx, req.(*ListEquipmentsForProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_DropMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).DropMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optisam.equipment.v1.EquipmentService/DropMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).DropMetaData(ctx, req.(*DropMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EquipmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "optisam.equipment.v1.EquipmentService",
	HandlerType: (*EquipmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGenericScopeEquipmentTypes",
			Handler:    _EquipmentService_CreateGenericScopeEquipmentTypes_Handler,
		},
		{
			MethodName: "UpsertMetadata",
			Handler:    _EquipmentService_UpsertMetadata_Handler,
		},
		{
			MethodName: "EquipmentsPerEquipmentType",
			Handler:    _EquipmentService_EquipmentsPerEquipmentType_Handler,
		},
		{
			MethodName: "UpsertEquipment",
			Handler:    _EquipmentService_UpsertEquipment_Handler,
		},
		{
			MethodName: "UpsertEquipmentAllocatedMetric",
			Handler:    _EquipmentService_UpsertEquipmentAllocatedMetric_Handler,
		},
		{
			MethodName: "ListEquipmentsMetadata",
			Handler:    _EquipmentService_ListEquipmentsMetadata_Handler,
		},
		{
			MethodName: "GetEquipmentMetadata",
			Handler:    _EquipmentService_GetEquipmentMetadata_Handler,
		},
		{
			MethodName: "EquipmentsTypes",
			Handler:    _EquipmentService_EquipmentsTypes_Handler,
		},
		{
			MethodName: "CreateEquipmentType",
			Handler:    _EquipmentService_CreateEquipmentType_Handler,
		},
		{
			MethodName: "DeleteEquipmentType",
			Handler:    _EquipmentService_DeleteEquipmentType_Handler,
		},
		{
			MethodName: "UpdateEquipmentType",
			Handler:    _EquipmentService_UpdateEquipmentType_Handler,
		},
		{
			MethodName: "ListEquipments",
			Handler:    _EquipmentService_ListEquipments_Handler,
		},
		{
			MethodName: "DropEquipmentData",
			Handler:    _EquipmentService_DropEquipmentData_Handler,
		},
		{
			MethodName: "GetEquipment",
			Handler:    _EquipmentService_GetEquipment_Handler,
		},
		{
			MethodName: "ListEquipmentParents",
			Handler:    _EquipmentService_ListEquipmentParents_Handler,
		},
		{
			MethodName: "ListEquipmentChildren",
			Handler:    _EquipmentService_ListEquipmentChildren_Handler,
		},
		{
			MethodName: "ListEquipmentsForProductAggregation",
			Handler:    _EquipmentService_ListEquipmentsForProductAggregation_Handler,
		},
		{
			MethodName: "ListEquipmentsForProduct",
			Handler:    _EquipmentService_ListEquipmentsForProduct_Handler,
		},
		{
			MethodName: "DropMetaData",
			Handler:    _EquipmentService_DropMetaData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "equipment.proto",
}
