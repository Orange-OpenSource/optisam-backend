// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: equipment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _equipment_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateGenericScopeEquipmentTypesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CreateGenericScopeEquipmentTypesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateGenericScopeEquipmentTypesRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return CreateGenericScopeEquipmentTypesRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// CreateGenericScopeEquipmentTypesRequestValidationError is the validation
// error returned by CreateGenericScopeEquipmentTypesRequest.Validate if the
// designated constraints aren't met.
type CreateGenericScopeEquipmentTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGenericScopeEquipmentTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGenericScopeEquipmentTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGenericScopeEquipmentTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGenericScopeEquipmentTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGenericScopeEquipmentTypesRequestValidationError) ErrorName() string {
	return "CreateGenericScopeEquipmentTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGenericScopeEquipmentTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGenericScopeEquipmentTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGenericScopeEquipmentTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGenericScopeEquipmentTypesRequestValidationError{}

var _CreateGenericScopeEquipmentTypesRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on CreateGenericScopeEquipmentTypesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CreateGenericScopeEquipmentTypesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// CreateGenericScopeEquipmentTypesResponseValidationError is the validation
// error returned by CreateGenericScopeEquipmentTypesResponse.Validate if the
// designated constraints aren't met.
type CreateGenericScopeEquipmentTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGenericScopeEquipmentTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGenericScopeEquipmentTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGenericScopeEquipmentTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGenericScopeEquipmentTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGenericScopeEquipmentTypesResponseValidationError) ErrorName() string {
	return "CreateGenericScopeEquipmentTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGenericScopeEquipmentTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGenericScopeEquipmentTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGenericScopeEquipmentTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGenericScopeEquipmentTypesResponseValidationError{}

// Validate checks the field values on DropMetaDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropMetaDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DropMetaDataRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DropMetaDataRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DropMetaDataRequestValidationError is the validation error returned by
// DropMetaDataRequest.Validate if the designated constraints aren't met.
type DropMetaDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropMetaDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropMetaDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropMetaDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropMetaDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropMetaDataRequestValidationError) ErrorName() string {
	return "DropMetaDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropMetaDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropMetaDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropMetaDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropMetaDataRequestValidationError{}

var _DropMetaDataRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DropMetaDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropMetaDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DropMetaDataResponseValidationError is the validation error returned by
// DropMetaDataResponse.Validate if the designated constraints aren't met.
type DropMetaDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropMetaDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropMetaDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropMetaDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropMetaDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropMetaDataResponseValidationError) ErrorName() string {
	return "DropMetaDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropMetaDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropMetaDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropMetaDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropMetaDataResponseValidationError{}

// Validate checks the field values on EquipmentsPerEquipmentTypeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *EquipmentsPerEquipmentTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_EquipmentsPerEquipmentTypeRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return EquipmentsPerEquipmentTypeRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// EquipmentsPerEquipmentTypeRequestValidationError is the validation error
// returned by EquipmentsPerEquipmentTypeRequest.Validate if the designated
// constraints aren't met.
type EquipmentsPerEquipmentTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentsPerEquipmentTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentsPerEquipmentTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentsPerEquipmentTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentsPerEquipmentTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentsPerEquipmentTypeRequestValidationError) ErrorName() string {
	return "EquipmentsPerEquipmentTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentsPerEquipmentTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentsPerEquipmentTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentsPerEquipmentTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentsPerEquipmentTypeRequestValidationError{}

var _EquipmentsPerEquipmentTypeRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on EquipmentsPerEquipmentTypeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *EquipmentsPerEquipmentTypeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTypesEquipments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return EquipmentsPerEquipmentTypeResponseValidationError{
					field:  fmt.Sprintf("TypesEquipments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EquipmentsPerEquipmentTypeResponseValidationError is the validation error
// returned by EquipmentsPerEquipmentTypeResponse.Validate if the designated
// constraints aren't met.
type EquipmentsPerEquipmentTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentsPerEquipmentTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentsPerEquipmentTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentsPerEquipmentTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentsPerEquipmentTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentsPerEquipmentTypeResponseValidationError) ErrorName() string {
	return "EquipmentsPerEquipmentTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentsPerEquipmentTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentsPerEquipmentTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentsPerEquipmentTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentsPerEquipmentTypeResponseValidationError{}

// Validate checks the field values on TypeEquipments with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TypeEquipments) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EquipType

	// no validation rules for NumEquipments

	return nil
}

// TypeEquipmentsValidationError is the validation error returned by
// TypeEquipments.Validate if the designated constraints aren't met.
type TypeEquipmentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeEquipmentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeEquipmentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeEquipmentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeEquipmentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeEquipmentsValidationError) ErrorName() string { return "TypeEquipmentsValidationError" }

// Error satisfies the builtin error interface
func (e TypeEquipmentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypeEquipments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeEquipmentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeEquipmentsValidationError{}

// Validate checks the field values on UpsertMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetadataType

	// no validation rules for MetadataSource

	if utf8.RuneCountInString(m.GetScope()) != 3 {
		return UpsertMetadataRequestValidationError{
			field:  "Scope",
			reason: "value length must be 3 runes",
		}

	}

	return nil
}

// UpsertMetadataRequestValidationError is the validation error returned by
// UpsertMetadataRequest.Validate if the designated constraints aren't met.
type UpsertMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertMetadataRequestValidationError) ErrorName() string {
	return "UpsertMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertMetadataRequestValidationError{}

// Validate checks the field values on UpsertMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertMetadataResponseValidationError is the validation error returned by
// UpsertMetadataResponse.Validate if the designated constraints aren't met.
type UpsertMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertMetadataResponseValidationError) ErrorName() string {
	return "UpsertMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertMetadataResponseValidationError{}

// Validate checks the field values on UpsertEquipmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertEquipmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetScope()) != 3 {
		return UpsertEquipmentRequestValidationError{
			field:  "Scope",
			reason: "value length must be 3 runes",
		}

	}

	// no validation rules for EqType

	if v, ok := interface{}(m.GetEqData()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpsertEquipmentRequestValidationError{
				field:  "EqData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpsertEquipmentRequestValidationError is the validation error returned by
// UpsertEquipmentRequest.Validate if the designated constraints aren't met.
type UpsertEquipmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertEquipmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertEquipmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertEquipmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertEquipmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertEquipmentRequestValidationError) ErrorName() string {
	return "UpsertEquipmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertEquipmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertEquipmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertEquipmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertEquipmentRequestValidationError{}

// Validate checks the field values on UpsertEquipmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertEquipmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertEquipmentResponseValidationError is the validation error returned by
// UpsertEquipmentResponse.Validate if the designated constraints aren't met.
type UpsertEquipmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertEquipmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertEquipmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertEquipmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertEquipmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertEquipmentResponseValidationError) ErrorName() string {
	return "UpsertEquipmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertEquipmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertEquipmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertEquipmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertEquipmentResponseValidationError{}

// Validate checks the field values on
// ListEquipmentsForProductAggregationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListEquipmentsForProductAggregationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for EqTypeId

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListEquipmentsForProductAggregationRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListEquipmentsForProductAggregationRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	// no validation rules for SortBy

	// no validation rules for SortOrder

	// no validation rules for SearchParams

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return ListEquipmentsForProductAggregationRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// ListEquipmentsForProductAggregationRequestValidationError is the validation
// error returned by ListEquipmentsForProductAggregationRequest.Validate if
// the designated constraints aren't met.
type ListEquipmentsForProductAggregationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentsForProductAggregationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentsForProductAggregationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentsForProductAggregationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentsForProductAggregationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentsForProductAggregationRequestValidationError) ErrorName() string {
	return "ListEquipmentsForProductAggregationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentsForProductAggregationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentsForProductAggregationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentsForProductAggregationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentsForProductAggregationRequestValidationError{}

// Validate checks the field values on ListEquipmentsForProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentsForProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SwidTag

	// no validation rules for EqTypeId

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListEquipmentsForProductRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListEquipmentsForProductRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	// no validation rules for SortBy

	// no validation rules for SortOrder

	// no validation rules for SearchParams

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return ListEquipmentsForProductRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// ListEquipmentsForProductRequestValidationError is the validation error
// returned by ListEquipmentsForProductRequest.Validate if the designated
// constraints aren't met.
type ListEquipmentsForProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentsForProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentsForProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentsForProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentsForProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentsForProductRequestValidationError) ErrorName() string {
	return "ListEquipmentsForProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentsForProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentsForProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentsForProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentsForProductRequestValidationError{}

// Validate checks the field values on ListEquipmentChildrenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentChildrenRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TypeId

	// no validation rules for EquipId

	// no validation rules for ChildrenTypeId

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListEquipmentChildrenRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListEquipmentChildrenRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	// no validation rules for SortBy

	// no validation rules for SortOrder

	// no validation rules for SearchParams

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return ListEquipmentChildrenRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// ListEquipmentChildrenRequestValidationError is the validation error returned
// by ListEquipmentChildrenRequest.Validate if the designated constraints
// aren't met.
type ListEquipmentChildrenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentChildrenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentChildrenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentChildrenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentChildrenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentChildrenRequestValidationError) ErrorName() string {
	return "ListEquipmentChildrenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentChildrenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentChildrenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentChildrenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentChildrenRequestValidationError{}

// Validate checks the field values on ListEquipmentParentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentParentsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TypeId

	// no validation rules for EquipId

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return ListEquipmentParentsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// ListEquipmentParentsRequestValidationError is the validation error returned
// by ListEquipmentParentsRequest.Validate if the designated constraints
// aren't met.
type ListEquipmentParentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentParentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentParentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentParentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentParentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentParentsRequestValidationError) ErrorName() string {
	return "ListEquipmentParentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentParentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentParentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentParentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentParentsRequestValidationError{}

// Validate checks the field values on GetEquipmentParentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEquipmentParentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Equipments

	return nil
}

// GetEquipmentParentsResponseValidationError is the validation error returned
// by GetEquipmentParentsResponse.Validate if the designated constraints
// aren't met.
type GetEquipmentParentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEquipmentParentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEquipmentParentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEquipmentParentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEquipmentParentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEquipmentParentsResponseValidationError) ErrorName() string {
	return "GetEquipmentParentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEquipmentParentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEquipmentParentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEquipmentParentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEquipmentParentsResponseValidationError{}

// Validate checks the field values on GetEquipmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEquipmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TypeId

	// no validation rules for EquipId

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return GetEquipmentRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// GetEquipmentRequestValidationError is the validation error returned by
// GetEquipmentRequest.Validate if the designated constraints aren't met.
type GetEquipmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEquipmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEquipmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEquipmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEquipmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEquipmentRequestValidationError) ErrorName() string {
	return "GetEquipmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEquipmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEquipmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEquipmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEquipmentRequestValidationError{}

// Validate checks the field values on GetEquipmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEquipmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Equipment

	return nil
}

// GetEquipmentResponseValidationError is the validation error returned by
// GetEquipmentResponse.Validate if the designated constraints aren't met.
type GetEquipmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEquipmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEquipmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEquipmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEquipmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEquipmentResponseValidationError) ErrorName() string {
	return "GetEquipmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEquipmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEquipmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEquipmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEquipmentResponseValidationError{}

// Validate checks the field values on ListEquipmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TypeId

	if m.GetPageNum() < 1 {
		return ListEquipmentsRequestValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 1",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListEquipmentsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	// no validation rules for SortBy

	// no validation rules for SortOrder

	// no validation rules for SearchParams

	if v, ok := interface{}(m.GetFilter()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListEquipmentsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return ListEquipmentsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// ListEquipmentsRequestValidationError is the validation error returned by
// ListEquipmentsRequest.Validate if the designated constraints aren't met.
type ListEquipmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentsRequestValidationError) ErrorName() string {
	return "ListEquipmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentsRequestValidationError{}

// Validate checks the field values on EquipFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EquipFilter) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetApplicationId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return EquipFilterValidationError{
				field:  "ApplicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return EquipFilterValidationError{
				field:  "ProductId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInstanceId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return EquipFilterValidationError{
				field:  "InstanceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EquipFilterValidationError is the validation error returned by
// EquipFilter.Validate if the designated constraints aren't met.
type EquipFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipFilterValidationError) ErrorName() string { return "EquipFilterValidationError" }

// Error satisfies the builtin error interface
func (e EquipFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipFilterValidationError{}

// Validate checks the field values on ListEquipmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	// no validation rules for Equipments

	return nil
}

// ListEquipmentsResponseValidationError is the validation error returned by
// ListEquipmentsResponse.Validate if the designated constraints aren't met.
type ListEquipmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentsResponseValidationError) ErrorName() string {
	return "ListEquipmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentsResponseValidationError{}

// Validate checks the field values on DropEquipmentDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropEquipmentDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DropEquipmentDataRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DropEquipmentDataRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DropEquipmentDataRequestValidationError is the validation error returned by
// DropEquipmentDataRequest.Validate if the designated constraints aren't met.
type DropEquipmentDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropEquipmentDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropEquipmentDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropEquipmentDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropEquipmentDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropEquipmentDataRequestValidationError) ErrorName() string {
	return "DropEquipmentDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropEquipmentDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropEquipmentDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropEquipmentDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropEquipmentDataRequestValidationError{}

var _DropEquipmentDataRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DropEquipmentDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropEquipmentDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DropEquipmentDataResponseValidationError is the validation error returned by
// DropEquipmentDataResponse.Validate if the designated constraints aren't met.
type DropEquipmentDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropEquipmentDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropEquipmentDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropEquipmentDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropEquipmentDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropEquipmentDataResponseValidationError) ErrorName() string {
	return "DropEquipmentDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropEquipmentDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropEquipmentDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropEquipmentDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropEquipmentDataResponseValidationError{}

// Validate checks the field values on UpdateEquipmentTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEquipmentTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for ParentId

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return UpdateEquipmentTypeRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return UpdateEquipmentTypeRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// UpdateEquipmentTypeRequestValidationError is the validation error returned
// by UpdateEquipmentTypeRequest.Validate if the designated constraints aren't met.
type UpdateEquipmentTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEquipmentTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEquipmentTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEquipmentTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEquipmentTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEquipmentTypeRequestValidationError) ErrorName() string {
	return "UpdateEquipmentTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEquipmentTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEquipmentTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEquipmentTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEquipmentTypeRequestValidationError{}

// Validate checks the field values on DeleteEquipmentTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEquipmentTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteEquipmentTypeRequest_EquipType_Pattern.MatchString(m.GetEquipType()) {
		return DeleteEquipmentTypeRequestValidationError{
			field:  "EquipType",
			reason: "value does not match regex pattern \"^[-_A-Za-z0-9]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetScope()) != 3 {
		return DeleteEquipmentTypeRequestValidationError{
			field:  "Scope",
			reason: "value length must be 3 runes",
		}

	}

	if !_DeleteEquipmentTypeRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DeleteEquipmentTypeRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"^[A-Z]+$\"",
		}
	}

	return nil
}

// DeleteEquipmentTypeRequestValidationError is the validation error returned
// by DeleteEquipmentTypeRequest.Validate if the designated constraints aren't met.
type DeleteEquipmentTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEquipmentTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEquipmentTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEquipmentTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEquipmentTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEquipmentTypeRequestValidationError) ErrorName() string {
	return "DeleteEquipmentTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEquipmentTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEquipmentTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEquipmentTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEquipmentTypeRequestValidationError{}

var _DeleteEquipmentTypeRequest_EquipType_Pattern = regexp.MustCompile("^[-_A-Za-z0-9]+$")

var _DeleteEquipmentTypeRequest_Scope_Pattern = regexp.MustCompile("^[A-Z]+$")

// Validate checks the field values on DeleteEquipmentTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEquipmentTypeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteEquipmentTypeResponseValidationError is the validation error returned
// by DeleteEquipmentTypeResponse.Validate if the designated constraints
// aren't met.
type DeleteEquipmentTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEquipmentTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEquipmentTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEquipmentTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEquipmentTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEquipmentTypeResponseValidationError) ErrorName() string {
	return "DeleteEquipmentTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEquipmentTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEquipmentTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEquipmentTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEquipmentTypeResponseValidationError{}

// Validate checks the field values on EquipmentMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EquipmentMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if _, ok := EquipmentMetadataRequest_Attributes_name[int32(m.GetAttributes())]; !ok {
		return EquipmentMetadataRequestValidationError{
			field:  "Attributes",
			reason: "value must be one of the defined enum values",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return EquipmentMetadataRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// EquipmentMetadataRequestValidationError is the validation error returned by
// EquipmentMetadataRequest.Validate if the designated constraints aren't met.
type EquipmentMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentMetadataRequestValidationError) ErrorName() string {
	return "EquipmentMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentMetadataRequestValidationError{}

// Validate checks the field values on ListEquipmentMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := ListEquipmentMetadataRequest_Type_name[int32(m.GetType())]; !ok {
		return ListEquipmentMetadataRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return ListEquipmentMetadataRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// ListEquipmentMetadataRequestValidationError is the validation error returned
// by ListEquipmentMetadataRequest.Validate if the designated constraints
// aren't met.
type ListEquipmentMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentMetadataRequestValidationError) ErrorName() string {
	return "ListEquipmentMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentMetadataRequestValidationError{}

// Validate checks the field values on ListEquipmentMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListEquipmentMetadataResponseValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEquipmentMetadataResponseValidationError is the validation error
// returned by ListEquipmentMetadataResponse.Validate if the designated
// constraints aren't met.
type ListEquipmentMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentMetadataResponseValidationError) ErrorName() string {
	return "ListEquipmentMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentMetadataResponseValidationError{}

// Validate checks the field values on EquipmentMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EquipmentMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	// no validation rules for Name

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return EquipmentMetadataValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// EquipmentMetadataValidationError is the validation error returned by
// EquipmentMetadata.Validate if the designated constraints aren't met.
type EquipmentMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentMetadataValidationError) ErrorName() string {
	return "EquipmentMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentMetadataValidationError{}

// Validate checks the field values on EquipmentTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EquipmentTypesRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return EquipmentTypesRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// EquipmentTypesRequestValidationError is the validation error returned by
// EquipmentTypesRequest.Validate if the designated constraints aren't met.
type EquipmentTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentTypesRequestValidationError) ErrorName() string {
	return "EquipmentTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentTypesRequestValidationError{}

// Validate checks the field values on EquipmentTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EquipmentTypesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEquipmentTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return EquipmentTypesResponseValidationError{
					field:  fmt.Sprintf("EquipmentTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EquipmentTypesResponseValidationError is the validation error returned by
// EquipmentTypesResponse.Validate if the designated constraints aren't met.
type EquipmentTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentTypesResponseValidationError) ErrorName() string {
	return "EquipmentTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentTypesResponseValidationError{}

// Validate checks the field values on EquipmentType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EquipmentType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if !_EquipmentType_Type_Pattern.MatchString(m.GetType()) {
		return EquipmentTypeValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[-_A-Za-z0-9]+$\"",
		}
	}

	// no validation rules for ParentId

	// no validation rules for ParentType

	// no validation rules for MetadataId

	// no validation rules for MetadataSource

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return EquipmentTypeValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return EquipmentTypeValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// EquipmentTypeValidationError is the validation error returned by
// EquipmentType.Validate if the designated constraints aren't met.
type EquipmentTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentTypeValidationError) ErrorName() string { return "EquipmentTypeValidationError" }

// Error satisfies the builtin error interface
func (e EquipmentTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentTypeValidationError{}

var _EquipmentType_Type_Pattern = regexp.MustCompile("^[-_A-Za-z0-9]+$")

// Validate checks the field values on Attribute with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Attribute) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ID

	if !_Attribute_Name_Pattern.MatchString(m.GetName()) {
		return AttributeValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[-_A-Za-z0-9]+$\"",
		}
	}

	if _, ok := _Attribute_DataType_InLookup[m.GetDataType()]; !ok {
		return AttributeValidationError{
			field:  "DataType",
			reason: "value must be in list [1 2 3]",
		}
	}

	// no validation rules for PrimaryKey

	// no validation rules for Displayed

	// no validation rules for Searchable

	// no validation rules for ParentIdentifier

	// no validation rules for MappedTo

	// no validation rules for Simulated

	switch m.Val.(type) {

	case *Attribute_IntVal:
		// no validation rules for IntVal

	case *Attribute_FloatVal:
		// no validation rules for FloatVal

	case *Attribute_StringVal:
		// no validation rules for StringVal

	}

	switch m.OldVal.(type) {

	case *Attribute_IntValOld:
		// no validation rules for IntValOld

	case *Attribute_FloatValOld:
		// no validation rules for FloatValOld

	case *Attribute_StringValOld:
		// no validation rules for StringValOld

	}

	return nil
}

// AttributeValidationError is the validation error returned by
// Attribute.Validate if the designated constraints aren't met.
type AttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValidationError) ErrorName() string { return "AttributeValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValidationError{}

var _Attribute_Name_Pattern = regexp.MustCompile("^[-_A-Za-z0-9]+$")

var _Attribute_DataType_InLookup = map[DataTypes]struct{}{
	1: {},
	2: {},
	3: {},
}

// Validate checks the field values on StringFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilteringOrder

	// no validation rules for Filteringkey

	// no validation rules for FilterType

	return nil
}

// StringFilterValidationError is the validation error returned by
// StringFilter.Validate if the designated constraints aren't met.
type StringFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFilterValidationError) ErrorName() string { return "StringFilterValidationError" }

// Error satisfies the builtin error interface
func (e StringFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFilterValidationError{}
