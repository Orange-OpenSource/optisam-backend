// Copyright (C) 2019 Orange
// 
// This software is distributed under the terms and conditions of the 'Apache License 2.0'
// license which can be found in the file 'License.txt' in this package distribution 
// or at 'http://www.apache.org/licenses/LICENSE-2.0'. 

// Code generated by MockGen. DO NOT EDIT.
// Source: optisam-backend/application-service/pkg/api/v1 (interfaces: ApplicationServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	v1 "optisam-backend/application-service/pkg/api/v1"
	reflect "reflect"
)

// MockApplicationServiceClient is a mock of ApplicationServiceClient interface
type MockApplicationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceClientMockRecorder
}

// MockApplicationServiceClientMockRecorder is the mock recorder for MockApplicationServiceClient
type MockApplicationServiceClientMockRecorder struct {
	mock *MockApplicationServiceClient
}

// NewMockApplicationServiceClient creates a new mock instance
func NewMockApplicationServiceClient(ctrl *gomock.Controller) *MockApplicationServiceClient {
	mock := &MockApplicationServiceClient{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationServiceClient) EXPECT() *MockApplicationServiceClientMockRecorder {
	return m.recorder
}

// ApplicationDomains mocks base method
func (m *MockApplicationServiceClient) ApplicationDomains(arg0 context.Context, arg1 *v1.ApplicationDomainsRequest, arg2 ...grpc.CallOption) (*v1.ApplicationDomainsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationDomains", varargs...)
	ret0, _ := ret[0].(*v1.ApplicationDomainsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationDomains indicates an expected call of ApplicationDomains
func (mr *MockApplicationServiceClientMockRecorder) ApplicationDomains(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationDomains", reflect.TypeOf((*MockApplicationServiceClient)(nil).ApplicationDomains), varargs...)
}

// DeleteApplication mocks base method
func (m *MockApplicationServiceClient) DeleteApplication(arg0 context.Context, arg1 *v1.DeleteApplicationRequest, arg2 ...grpc.CallOption) (*v1.DeleteApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplication", varargs...)
	ret0, _ := ret[0].(*v1.DeleteApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockApplicationServiceClientMockRecorder) DeleteApplication(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockApplicationServiceClient)(nil).DeleteApplication), varargs...)
}

// DeleteInstance mocks base method
func (m *MockApplicationServiceClient) DeleteInstance(arg0 context.Context, arg1 *v1.DeleteInstanceRequest, arg2 ...grpc.CallOption) (*v1.DeleteInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInstance", varargs...)
	ret0, _ := ret[0].(*v1.DeleteInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockApplicationServiceClientMockRecorder) DeleteInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockApplicationServiceClient)(nil).DeleteInstance), varargs...)
}

// DropApplicationData mocks base method
func (m *MockApplicationServiceClient) DropApplicationData(arg0 context.Context, arg1 *v1.DropApplicationDataRequest, arg2 ...grpc.CallOption) (*v1.DropApplicationDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropApplicationData", varargs...)
	ret0, _ := ret[0].(*v1.DropApplicationDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropApplicationData indicates an expected call of DropApplicationData
func (mr *MockApplicationServiceClientMockRecorder) DropApplicationData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropApplicationData", reflect.TypeOf((*MockApplicationServiceClient)(nil).DropApplicationData), varargs...)
}

// ListApplications mocks base method
func (m *MockApplicationServiceClient) ListApplications(arg0 context.Context, arg1 *v1.ListApplicationsRequest, arg2 ...grpc.CallOption) (*v1.ListApplicationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplications", varargs...)
	ret0, _ := ret[0].(*v1.ListApplicationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockApplicationServiceClientMockRecorder) ListApplications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockApplicationServiceClient)(nil).ListApplications), varargs...)
}

// ListInstances mocks base method
func (m *MockApplicationServiceClient) ListInstances(arg0 context.Context, arg1 *v1.ListInstancesRequest, arg2 ...grpc.CallOption) (*v1.ListInstancesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstances", varargs...)
	ret0, _ := ret[0].(*v1.ListInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances
func (mr *MockApplicationServiceClientMockRecorder) ListInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockApplicationServiceClient)(nil).ListInstances), varargs...)
}

// ObsolescenceDomainCriticity mocks base method
func (m *MockApplicationServiceClient) ObsolescenceDomainCriticity(arg0 context.Context, arg1 *v1.DomainCriticityRequest, arg2 ...grpc.CallOption) (*v1.DomainCriticityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObsolescenceDomainCriticity", varargs...)
	ret0, _ := ret[0].(*v1.DomainCriticityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObsolescenceDomainCriticity indicates an expected call of ObsolescenceDomainCriticity
func (mr *MockApplicationServiceClientMockRecorder) ObsolescenceDomainCriticity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObsolescenceDomainCriticity", reflect.TypeOf((*MockApplicationServiceClient)(nil).ObsolescenceDomainCriticity), varargs...)
}

// ObsolescenceDomainCriticityMeta mocks base method
func (m *MockApplicationServiceClient) ObsolescenceDomainCriticityMeta(arg0 context.Context, arg1 *v1.DomainCriticityMetaRequest, arg2 ...grpc.CallOption) (*v1.DomainCriticityMetaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObsolescenceDomainCriticityMeta", varargs...)
	ret0, _ := ret[0].(*v1.DomainCriticityMetaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObsolescenceDomainCriticityMeta indicates an expected call of ObsolescenceDomainCriticityMeta
func (mr *MockApplicationServiceClientMockRecorder) ObsolescenceDomainCriticityMeta(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObsolescenceDomainCriticityMeta", reflect.TypeOf((*MockApplicationServiceClient)(nil).ObsolescenceDomainCriticityMeta), varargs...)
}

// ObsolescenceMaintenanceCriticityMeta mocks base method
func (m *MockApplicationServiceClient) ObsolescenceMaintenanceCriticityMeta(arg0 context.Context, arg1 *v1.MaintenanceCriticityMetaRequest, arg2 ...grpc.CallOption) (*v1.MaintenanceCriticityMetaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObsolescenceMaintenanceCriticityMeta", varargs...)
	ret0, _ := ret[0].(*v1.MaintenanceCriticityMetaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObsolescenceMaintenanceCriticityMeta indicates an expected call of ObsolescenceMaintenanceCriticityMeta
func (mr *MockApplicationServiceClientMockRecorder) ObsolescenceMaintenanceCriticityMeta(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObsolescenceMaintenanceCriticityMeta", reflect.TypeOf((*MockApplicationServiceClient)(nil).ObsolescenceMaintenanceCriticityMeta), varargs...)
}

// ObsolescenceRiskMeta mocks base method
func (m *MockApplicationServiceClient) ObsolescenceRiskMeta(arg0 context.Context, arg1 *v1.RiskMetaRequest, arg2 ...grpc.CallOption) (*v1.RiskMetaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObsolescenceRiskMeta", varargs...)
	ret0, _ := ret[0].(*v1.RiskMetaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObsolescenceRiskMeta indicates an expected call of ObsolescenceRiskMeta
func (mr *MockApplicationServiceClientMockRecorder) ObsolescenceRiskMeta(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObsolescenceRiskMeta", reflect.TypeOf((*MockApplicationServiceClient)(nil).ObsolescenceRiskMeta), varargs...)
}

// ObsolescenseMaintenanceCriticity mocks base method
func (m *MockApplicationServiceClient) ObsolescenseMaintenanceCriticity(arg0 context.Context, arg1 *v1.MaintenanceCriticityRequest, arg2 ...grpc.CallOption) (*v1.MaintenanceCriticityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObsolescenseMaintenanceCriticity", varargs...)
	ret0, _ := ret[0].(*v1.MaintenanceCriticityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObsolescenseMaintenanceCriticity indicates an expected call of ObsolescenseMaintenanceCriticity
func (mr *MockApplicationServiceClientMockRecorder) ObsolescenseMaintenanceCriticity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObsolescenseMaintenanceCriticity", reflect.TypeOf((*MockApplicationServiceClient)(nil).ObsolescenseMaintenanceCriticity), varargs...)
}

// ObsolescenseRiskMatrix mocks base method
func (m *MockApplicationServiceClient) ObsolescenseRiskMatrix(arg0 context.Context, arg1 *v1.RiskMatrixRequest, arg2 ...grpc.CallOption) (*v1.RiskMatrixResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObsolescenseRiskMatrix", varargs...)
	ret0, _ := ret[0].(*v1.RiskMatrixResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObsolescenseRiskMatrix indicates an expected call of ObsolescenseRiskMatrix
func (mr *MockApplicationServiceClientMockRecorder) ObsolescenseRiskMatrix(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObsolescenseRiskMatrix", reflect.TypeOf((*MockApplicationServiceClient)(nil).ObsolescenseRiskMatrix), varargs...)
}

// PostObsolescenceDomainCriticity mocks base method
func (m *MockApplicationServiceClient) PostObsolescenceDomainCriticity(arg0 context.Context, arg1 *v1.PostDomainCriticityRequest, arg2 ...grpc.CallOption) (*v1.PostDomainCriticityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostObsolescenceDomainCriticity", varargs...)
	ret0, _ := ret[0].(*v1.PostDomainCriticityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostObsolescenceDomainCriticity indicates an expected call of PostObsolescenceDomainCriticity
func (mr *MockApplicationServiceClientMockRecorder) PostObsolescenceDomainCriticity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostObsolescenceDomainCriticity", reflect.TypeOf((*MockApplicationServiceClient)(nil).PostObsolescenceDomainCriticity), varargs...)
}

// PostObsolescenseMaintenanceCriticity mocks base method
func (m *MockApplicationServiceClient) PostObsolescenseMaintenanceCriticity(arg0 context.Context, arg1 *v1.PostMaintenanceCriticityRequest, arg2 ...grpc.CallOption) (*v1.PostMaintenanceCriticityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostObsolescenseMaintenanceCriticity", varargs...)
	ret0, _ := ret[0].(*v1.PostMaintenanceCriticityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostObsolescenseMaintenanceCriticity indicates an expected call of PostObsolescenseMaintenanceCriticity
func (mr *MockApplicationServiceClientMockRecorder) PostObsolescenseMaintenanceCriticity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostObsolescenseMaintenanceCriticity", reflect.TypeOf((*MockApplicationServiceClient)(nil).PostObsolescenseMaintenanceCriticity), varargs...)
}

// PostObsolescenseRiskMatrix mocks base method
func (m *MockApplicationServiceClient) PostObsolescenseRiskMatrix(arg0 context.Context, arg1 *v1.PostRiskMatrixRequest, arg2 ...grpc.CallOption) (*v1.PostRiskMatrixResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostObsolescenseRiskMatrix", varargs...)
	ret0, _ := ret[0].(*v1.PostRiskMatrixResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostObsolescenseRiskMatrix indicates an expected call of PostObsolescenseRiskMatrix
func (mr *MockApplicationServiceClientMockRecorder) PostObsolescenseRiskMatrix(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostObsolescenseRiskMatrix", reflect.TypeOf((*MockApplicationServiceClient)(nil).PostObsolescenseRiskMatrix), varargs...)
}

// UpsertApplication mocks base method
func (m *MockApplicationServiceClient) UpsertApplication(arg0 context.Context, arg1 *v1.UpsertApplicationRequest, arg2 ...grpc.CallOption) (*v1.UpsertApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertApplication", varargs...)
	ret0, _ := ret[0].(*v1.UpsertApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertApplication indicates an expected call of UpsertApplication
func (mr *MockApplicationServiceClientMockRecorder) UpsertApplication(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertApplication", reflect.TypeOf((*MockApplicationServiceClient)(nil).UpsertApplication), varargs...)
}

// UpsertInstance mocks base method
func (m *MockApplicationServiceClient) UpsertInstance(arg0 context.Context, arg1 *v1.UpsertInstanceRequest, arg2 ...grpc.CallOption) (*v1.UpsertInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertInstance", varargs...)
	ret0, _ := ret[0].(*v1.UpsertInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertInstance indicates an expected call of UpsertInstance
func (mr *MockApplicationServiceClientMockRecorder) UpsertInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInstance", reflect.TypeOf((*MockApplicationServiceClient)(nil).UpsertInstance), varargs...)
}
