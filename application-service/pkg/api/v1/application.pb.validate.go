// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: application.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _application_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetEquipmentsByApplicationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetEquipmentsByApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetEquipmentsByApplicationRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return GetEquipmentsByApplicationRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	// no validation rules for ApplicationId

	return nil
}

// GetEquipmentsByApplicationRequestValidationError is the validation error
// returned by GetEquipmentsByApplicationRequest.Validate if the designated
// constraints aren't met.
type GetEquipmentsByApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEquipmentsByApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEquipmentsByApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEquipmentsByApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEquipmentsByApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEquipmentsByApplicationRequestValidationError) ErrorName() string {
	return "GetEquipmentsByApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEquipmentsByApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEquipmentsByApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEquipmentsByApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEquipmentsByApplicationRequestValidationError{}

var _GetEquipmentsByApplicationRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on GetEquipmentsByApplicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetEquipmentsByApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	return nil
}

// GetEquipmentsByApplicationResponseValidationError is the validation error
// returned by GetEquipmentsByApplicationResponse.Validate if the designated
// constraints aren't met.
type GetEquipmentsByApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEquipmentsByApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEquipmentsByApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEquipmentsByApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEquipmentsByApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEquipmentsByApplicationResponseValidationError) ErrorName() string {
	return "GetEquipmentsByApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEquipmentsByApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEquipmentsByApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEquipmentsByApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEquipmentsByApplicationResponseValidationError{}

// Validate checks the field values on DropObscolenscenceDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropObscolenscenceDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DropObscolenscenceDataRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DropObscolenscenceDataRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DropObscolenscenceDataRequestValidationError is the validation error
// returned by DropObscolenscenceDataRequest.Validate if the designated
// constraints aren't met.
type DropObscolenscenceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropObscolenscenceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropObscolenscenceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropObscolenscenceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropObscolenscenceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropObscolenscenceDataRequestValidationError) ErrorName() string {
	return "DropObscolenscenceDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropObscolenscenceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropObscolenscenceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropObscolenscenceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropObscolenscenceDataRequestValidationError{}

var _DropObscolenscenceDataRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DropObscolenscenceDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropObscolenscenceDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DropObscolenscenceDataResponseValidationError is the validation error
// returned by DropObscolenscenceDataResponse.Validate if the designated
// constraints aren't met.
type DropObscolenscenceDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropObscolenscenceDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropObscolenscenceDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropObscolenscenceDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropObscolenscenceDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropObscolenscenceDataResponseValidationError) ErrorName() string {
	return "DropObscolenscenceDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropObscolenscenceDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropObscolenscenceDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropObscolenscenceDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropObscolenscenceDataResponseValidationError{}

// Validate checks the field values on UpsertApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for Name

	// no validation rules for Environment

	// no validation rules for Domain

	if !_UpsertApplicationRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return UpsertApplicationRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// UpsertApplicationRequestValidationError is the validation error returned by
// UpsertApplicationRequest.Validate if the designated constraints aren't met.
type UpsertApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertApplicationRequestValidationError) ErrorName() string {
	return "UpsertApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertApplicationRequestValidationError{}

var _UpsertApplicationRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on UpsertApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertApplicationResponseValidationError is the validation error returned by
// UpsertApplicationResponse.Validate if the designated constraints aren't met.
type UpsertApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertApplicationResponseValidationError) ErrorName() string {
	return "UpsertApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertApplicationResponseValidationError{}

// Validate checks the field values on UpsertApplicationEquipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertApplicationEquipRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for Scope

	if v, ok := interface{}(m.GetEquipments()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpsertApplicationEquipRequestValidationError{
				field:  "Equipments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpsertApplicationEquipRequestValidationError is the validation error
// returned by UpsertApplicationEquipRequest.Validate if the designated
// constraints aren't met.
type UpsertApplicationEquipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertApplicationEquipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertApplicationEquipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertApplicationEquipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertApplicationEquipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertApplicationEquipRequestValidationError) ErrorName() string {
	return "UpsertApplicationEquipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertApplicationEquipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertApplicationEquipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertApplicationEquipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertApplicationEquipRequestValidationError{}

// Validate checks the field values on UpsertApplicationEquipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertApplicationEquipResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertApplicationEquipResponseValidationError is the validation error
// returned by UpsertApplicationEquipResponse.Validate if the designated
// constraints aren't met.
type UpsertApplicationEquipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertApplicationEquipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertApplicationEquipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertApplicationEquipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertApplicationEquipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertApplicationEquipResponseValidationError) ErrorName() string {
	return "UpsertApplicationEquipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertApplicationEquipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertApplicationEquipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertApplicationEquipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertApplicationEquipResponseValidationError{}

// Validate checks the field values on DropApplicationDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropApplicationDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DropApplicationDataRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DropApplicationDataRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DropApplicationDataRequestValidationError is the validation error returned
// by DropApplicationDataRequest.Validate if the designated constraints aren't met.
type DropApplicationDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropApplicationDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropApplicationDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropApplicationDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropApplicationDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropApplicationDataRequestValidationError) ErrorName() string {
	return "DropApplicationDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropApplicationDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropApplicationDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropApplicationDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropApplicationDataRequestValidationError{}

var _DropApplicationDataRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DropApplicationDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DropApplicationDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DropApplicationDataResponseValidationError is the validation error returned
// by DropApplicationDataResponse.Validate if the designated constraints
// aren't met.
type DropApplicationDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropApplicationDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropApplicationDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropApplicationDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropApplicationDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropApplicationDataResponseValidationError) ErrorName() string {
	return "DropApplicationDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropApplicationDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropApplicationDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropApplicationDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropApplicationDataResponseValidationError{}

// Validate checks the field values on DeleteApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	return nil
}

// DeleteApplicationRequestValidationError is the validation error returned by
// DeleteApplicationRequest.Validate if the designated constraints aren't met.
type DeleteApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationRequestValidationError) ErrorName() string {
	return "DeleteApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationRequestValidationError{}

// Validate checks the field values on DeleteApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteApplicationResponseValidationError is the validation error returned by
// DeleteApplicationResponse.Validate if the designated constraints aren't met.
type DeleteApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationResponseValidationError) ErrorName() string {
	return "DeleteApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationResponseValidationError{}

// Validate checks the field values on UpsertInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for InstanceId

	// no validation rules for InstanceName

	if v, ok := interface{}(m.GetProducts()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpsertInstanceRequestValidationError{
				field:  "Products",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEquipments()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpsertInstanceRequestValidationError{
				field:  "Equipments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_UpsertInstanceRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return UpsertInstanceRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// UpsertInstanceRequestValidationError is the validation error returned by
// UpsertInstanceRequest.Validate if the designated constraints aren't met.
type UpsertInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertInstanceRequestValidationError) ErrorName() string {
	return "UpsertInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertInstanceRequestValidationError{}

var _UpsertInstanceRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on UpsertInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertInstanceResponseValidationError is the validation error returned by
// UpsertInstanceResponse.Validate if the designated constraints aren't met.
type UpsertInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertInstanceResponseValidationError) ErrorName() string {
	return "UpsertInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertInstanceResponseValidationError{}

// Validate checks the field values on DeleteInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for InstanceId

	return nil
}

// DeleteInstanceRequestValidationError is the validation error returned by
// DeleteInstanceRequest.Validate if the designated constraints aren't met.
type DeleteInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstanceRequestValidationError) ErrorName() string {
	return "DeleteInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstanceRequestValidationError{}

// Validate checks the field values on DeleteInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteInstanceResponseValidationError is the validation error returned by
// DeleteInstanceResponse.Validate if the designated constraints aren't met.
type DeleteInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstanceResponseValidationError) ErrorName() string {
	return "DeleteInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstanceResponseValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListApplicationsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListApplicationsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	if _, ok := ListApplicationsRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListApplicationsRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListApplicationsRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return ListApplicationsRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationsResponseValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Application) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for Name

	// no validation rules for Owner

	// no validation rules for NumOfInstances

	// no validation rules for NumOfProducts

	// no validation rules for TotalCost

	// no validation rules for Domain

	// no validation rules for ObsolescenceRisk

	// no validation rules for NumOfEquipments

	// no validation rules for Environment

	return nil
}

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

// Validate checks the field values on ApplicationSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetName()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSearchParamsValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSearchParamsValidationError{
				field:  "ProductId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDomain()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSearchParamsValidationError{
				field:  "Domain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetObsolescenceRisk()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSearchParamsValidationError{
				field:  "ObsolescenceRisk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Environment

	return nil
}

// ApplicationSearchParamsValidationError is the validation error returned by
// ApplicationSearchParams.Validate if the designated constraints aren't met.
type ApplicationSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationSearchParamsValidationError) ErrorName() string {
	return "ApplicationSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationSearchParamsValidationError{}

// Validate checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInstancesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListInstancesRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val > 200 {
		return ListInstancesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 200]",
		}
	}

	if _, ok := ListInstancesRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListInstancesRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListInstancesRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListInstancesRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetScopes() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return ListInstancesRequestValidationError{
				field:  fmt.Sprintf("Scopes[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// ListInstancesRequestValidationError is the validation error returned by
// ListInstancesRequest.Validate if the designated constraints aren't met.
type ListInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesRequestValidationError) ErrorName() string {
	return "ListInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesRequestValidationError{}

// Validate checks the field values on InstanceSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InstanceSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetApplicationId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return InstanceSearchParamsValidationError{
				field:  "ApplicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return InstanceSearchParamsValidationError{
				field:  "ProductId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// InstanceSearchParamsValidationError is the validation error returned by
// InstanceSearchParams.Validate if the designated constraints aren't met.
type InstanceSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceSearchParamsValidationError) ErrorName() string {
	return "InstanceSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceSearchParamsValidationError{}

// Validate checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInstancesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponseValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListInstancesResponseValidationError is the validation error returned by
// ListInstancesResponse.Validate if the designated constraints aren't met.
type ListInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponseValidationError) ErrorName() string {
	return "ListInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponseValidationError{}

// Validate checks the field values on Instance with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Instance) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Environment

	// no validation rules for NumOfEquipments

	// no validation rules for NumOfProducts

	return nil
}

// InstanceValidationError is the validation error returned by
// Instance.Validate if the designated constraints aren't met.
type InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceValidationError) ErrorName() string { return "InstanceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceValidationError{}

// Validate checks the field values on StringFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilteringOrder

	// no validation rules for Filteringkey

	// no validation rules for FilterType

	return nil
}

// StringFilterValidationError is the validation error returned by
// StringFilter.Validate if the designated constraints aren't met.
type StringFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFilterValidationError) ErrorName() string { return "StringFilterValidationError" }

// Error satisfies the builtin error interface
func (e StringFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFilterValidationError{}

// Validate checks the field values on ApplicationDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationDomainsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ApplicationDomainsRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return ApplicationDomainsRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// ApplicationDomainsRequestValidationError is the validation error returned by
// ApplicationDomainsRequest.Validate if the designated constraints aren't met.
type ApplicationDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationDomainsRequestValidationError) ErrorName() string {
	return "ApplicationDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationDomainsRequestValidationError{}

var _ApplicationDomainsRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on ApplicationDomainsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationDomainsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ApplicationDomainsResponseValidationError is the validation error returned
// by ApplicationDomainsResponse.Validate if the designated constraints aren't met.
type ApplicationDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationDomainsResponseValidationError) ErrorName() string {
	return "ApplicationDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationDomainsResponseValidationError{}

// Validate checks the field values on DomainCriticityMetaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DomainCriticityMetaRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DomainCriticityMetaRequestValidationError is the validation error returned
// by DomainCriticityMetaRequest.Validate if the designated constraints aren't met.
type DomainCriticityMetaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainCriticityMetaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainCriticityMetaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainCriticityMetaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainCriticityMetaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainCriticityMetaRequestValidationError) ErrorName() string {
	return "DomainCriticityMetaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DomainCriticityMetaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainCriticityMetaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainCriticityMetaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainCriticityMetaRequestValidationError{}

// Validate checks the field values on DomainCriticityMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DomainCriticityMeta) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DomainCriticId

	// no validation rules for DomainCriticName

	return nil
}

// DomainCriticityMetaValidationError is the validation error returned by
// DomainCriticityMeta.Validate if the designated constraints aren't met.
type DomainCriticityMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainCriticityMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainCriticityMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainCriticityMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainCriticityMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainCriticityMetaValidationError) ErrorName() string {
	return "DomainCriticityMetaValidationError"
}

// Error satisfies the builtin error interface
func (e DomainCriticityMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainCriticityMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainCriticityMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainCriticityMetaValidationError{}

// Validate checks the field values on DomainCriticityMetaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DomainCriticityMetaResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDomainCriticityMeta() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return DomainCriticityMetaResponseValidationError{
					field:  fmt.Sprintf("DomainCriticityMeta[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DomainCriticityMetaResponseValidationError is the validation error returned
// by DomainCriticityMetaResponse.Validate if the designated constraints
// aren't met.
type DomainCriticityMetaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainCriticityMetaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainCriticityMetaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainCriticityMetaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainCriticityMetaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainCriticityMetaResponseValidationError) ErrorName() string {
	return "DomainCriticityMetaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DomainCriticityMetaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainCriticityMetaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainCriticityMetaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainCriticityMetaResponseValidationError{}

// Validate checks the field values on MaintenanceCriticityMetaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaintenanceCriticityMetaRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MaintenanceCriticityMetaRequestValidationError is the validation error
// returned by MaintenanceCriticityMetaRequest.Validate if the designated
// constraints aren't met.
type MaintenanceCriticityMetaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaintenanceCriticityMetaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaintenanceCriticityMetaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaintenanceCriticityMetaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaintenanceCriticityMetaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaintenanceCriticityMetaRequestValidationError) ErrorName() string {
	return "MaintenanceCriticityMetaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MaintenanceCriticityMetaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaintenanceCriticityMetaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaintenanceCriticityMetaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaintenanceCriticityMetaRequestValidationError{}

// Validate checks the field values on MaintenanceCriticityMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaintenanceCriticityMeta) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaintenanceCriticId

	// no validation rules for MaintenanceCriticName

	return nil
}

// MaintenanceCriticityMetaValidationError is the validation error returned by
// MaintenanceCriticityMeta.Validate if the designated constraints aren't met.
type MaintenanceCriticityMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaintenanceCriticityMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaintenanceCriticityMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaintenanceCriticityMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaintenanceCriticityMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaintenanceCriticityMetaValidationError) ErrorName() string {
	return "MaintenanceCriticityMetaValidationError"
}

// Error satisfies the builtin error interface
func (e MaintenanceCriticityMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaintenanceCriticityMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaintenanceCriticityMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaintenanceCriticityMetaValidationError{}

// Validate checks the field values on MaintenanceCriticityMetaResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *MaintenanceCriticityMetaResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMaintenanceCriticityMeta() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return MaintenanceCriticityMetaResponseValidationError{
					field:  fmt.Sprintf("MaintenanceCriticityMeta[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MaintenanceCriticityMetaResponseValidationError is the validation error
// returned by MaintenanceCriticityMetaResponse.Validate if the designated
// constraints aren't met.
type MaintenanceCriticityMetaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaintenanceCriticityMetaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaintenanceCriticityMetaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaintenanceCriticityMetaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaintenanceCriticityMetaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaintenanceCriticityMetaResponseValidationError) ErrorName() string {
	return "MaintenanceCriticityMetaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MaintenanceCriticityMetaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaintenanceCriticityMetaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaintenanceCriticityMetaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaintenanceCriticityMetaResponseValidationError{}

// Validate checks the field values on RiskMetaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RiskMetaRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RiskMetaRequestValidationError is the validation error returned by
// RiskMetaRequest.Validate if the designated constraints aren't met.
type RiskMetaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiskMetaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiskMetaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiskMetaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiskMetaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiskMetaRequestValidationError) ErrorName() string { return "RiskMetaRequestValidationError" }

// Error satisfies the builtin error interface
func (e RiskMetaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiskMetaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiskMetaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiskMetaRequestValidationError{}

// Validate checks the field values on RiskMeta with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiskMeta) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RiskId

	// no validation rules for RiskName

	return nil
}

// RiskMetaValidationError is the validation error returned by
// RiskMeta.Validate if the designated constraints aren't met.
type RiskMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiskMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiskMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiskMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiskMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiskMetaValidationError) ErrorName() string { return "RiskMetaValidationError" }

// Error satisfies the builtin error interface
func (e RiskMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiskMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiskMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiskMetaValidationError{}

// Validate checks the field values on RiskMetaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RiskMetaResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRiskMeta() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return RiskMetaResponseValidationError{
					field:  fmt.Sprintf("RiskMeta[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RiskMetaResponseValidationError is the validation error returned by
// RiskMetaResponse.Validate if the designated constraints aren't met.
type RiskMetaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiskMetaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiskMetaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiskMetaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiskMetaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiskMetaResponseValidationError) ErrorName() string { return "RiskMetaResponseValidationError" }

// Error satisfies the builtin error interface
func (e RiskMetaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiskMetaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiskMetaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiskMetaResponseValidationError{}

// Validate checks the field values on DomainCriticityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DomainCriticityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DomainCriticityRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return DomainCriticityRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// DomainCriticityRequestValidationError is the validation error returned by
// DomainCriticityRequest.Validate if the designated constraints aren't met.
type DomainCriticityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainCriticityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainCriticityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainCriticityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainCriticityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainCriticityRequestValidationError) ErrorName() string {
	return "DomainCriticityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DomainCriticityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainCriticityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainCriticityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainCriticityRequestValidationError{}

var _DomainCriticityRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on DomainCriticity with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DomainCriticity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DomainCriticId

	// no validation rules for DomainCriticName

	return nil
}

// DomainCriticityValidationError is the validation error returned by
// DomainCriticity.Validate if the designated constraints aren't met.
type DomainCriticityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainCriticityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainCriticityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainCriticityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainCriticityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainCriticityValidationError) ErrorName() string { return "DomainCriticityValidationError" }

// Error satisfies the builtin error interface
func (e DomainCriticityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainCriticity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainCriticityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainCriticityValidationError{}

// Validate checks the field values on DomainCriticityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DomainCriticityResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDomainsCriticity() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return DomainCriticityResponseValidationError{
					field:  fmt.Sprintf("DomainsCriticity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DomainCriticityResponseValidationError is the validation error returned by
// DomainCriticityResponse.Validate if the designated constraints aren't met.
type DomainCriticityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainCriticityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainCriticityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainCriticityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainCriticityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainCriticityResponseValidationError) ErrorName() string {
	return "DomainCriticityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DomainCriticityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainCriticityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainCriticityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainCriticityResponseValidationError{}

// Validate checks the field values on PostDomainCriticityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PostDomainCriticityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_PostDomainCriticityRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return PostDomainCriticityRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	for idx, item := range m.GetDomainsCriticity() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return PostDomainCriticityRequestValidationError{
					field:  fmt.Sprintf("DomainsCriticity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PostDomainCriticityRequestValidationError is the validation error returned
// by PostDomainCriticityRequest.Validate if the designated constraints aren't met.
type PostDomainCriticityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostDomainCriticityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostDomainCriticityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostDomainCriticityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostDomainCriticityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostDomainCriticityRequestValidationError) ErrorName() string {
	return "PostDomainCriticityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostDomainCriticityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostDomainCriticityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostDomainCriticityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostDomainCriticityRequestValidationError{}

var _PostDomainCriticityRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on PostDomainCriticityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PostDomainCriticityResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// PostDomainCriticityResponseValidationError is the validation error returned
// by PostDomainCriticityResponse.Validate if the designated constraints
// aren't met.
type PostDomainCriticityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostDomainCriticityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostDomainCriticityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostDomainCriticityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostDomainCriticityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostDomainCriticityResponseValidationError) ErrorName() string {
	return "PostDomainCriticityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostDomainCriticityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostDomainCriticityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostDomainCriticityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostDomainCriticityResponseValidationError{}

// Validate checks the field values on MaintenanceCriticityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaintenanceCriticityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_MaintenanceCriticityRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return MaintenanceCriticityRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// MaintenanceCriticityRequestValidationError is the validation error returned
// by MaintenanceCriticityRequest.Validate if the designated constraints
// aren't met.
type MaintenanceCriticityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaintenanceCriticityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaintenanceCriticityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaintenanceCriticityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaintenanceCriticityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaintenanceCriticityRequestValidationError) ErrorName() string {
	return "MaintenanceCriticityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MaintenanceCriticityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaintenanceCriticityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaintenanceCriticityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaintenanceCriticityRequestValidationError{}

var _MaintenanceCriticityRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on MaintenanceCriticity with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaintenanceCriticity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaintenanceCriticId

	// no validation rules for MaintenanceLevelId

	// no validation rules for MaintenanceLevelName

	// no validation rules for StartMonth

	// no validation rules for EndMonth

	return nil
}

// MaintenanceCriticityValidationError is the validation error returned by
// MaintenanceCriticity.Validate if the designated constraints aren't met.
type MaintenanceCriticityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaintenanceCriticityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaintenanceCriticityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaintenanceCriticityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaintenanceCriticityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaintenanceCriticityValidationError) ErrorName() string {
	return "MaintenanceCriticityValidationError"
}

// Error satisfies the builtin error interface
func (e MaintenanceCriticityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaintenanceCriticity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaintenanceCriticityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaintenanceCriticityValidationError{}

// Validate checks the field values on PostMaintenanceCriticityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PostMaintenanceCriticityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_PostMaintenanceCriticityRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return PostMaintenanceCriticityRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	for idx, item := range m.GetMaintenanceCriticy() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return PostMaintenanceCriticityRequestValidationError{
					field:  fmt.Sprintf("MaintenanceCriticy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PostMaintenanceCriticityRequestValidationError is the validation error
// returned by PostMaintenanceCriticityRequest.Validate if the designated
// constraints aren't met.
type PostMaintenanceCriticityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostMaintenanceCriticityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostMaintenanceCriticityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostMaintenanceCriticityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostMaintenanceCriticityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostMaintenanceCriticityRequestValidationError) ErrorName() string {
	return "PostMaintenanceCriticityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostMaintenanceCriticityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostMaintenanceCriticityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostMaintenanceCriticityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostMaintenanceCriticityRequestValidationError{}

var _PostMaintenanceCriticityRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on MaintenanceCriticityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaintenanceCriticityResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMaintenanceCriticy() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return MaintenanceCriticityResponseValidationError{
					field:  fmt.Sprintf("MaintenanceCriticy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MaintenanceCriticityResponseValidationError is the validation error returned
// by MaintenanceCriticityResponse.Validate if the designated constraints
// aren't met.
type MaintenanceCriticityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaintenanceCriticityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaintenanceCriticityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaintenanceCriticityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaintenanceCriticityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaintenanceCriticityResponseValidationError) ErrorName() string {
	return "MaintenanceCriticityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MaintenanceCriticityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaintenanceCriticityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaintenanceCriticityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaintenanceCriticityResponseValidationError{}

// Validate checks the field values on PostMaintenanceCriticityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *PostMaintenanceCriticityResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// PostMaintenanceCriticityResponseValidationError is the validation error
// returned by PostMaintenanceCriticityResponse.Validate if the designated
// constraints aren't met.
type PostMaintenanceCriticityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostMaintenanceCriticityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostMaintenanceCriticityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostMaintenanceCriticityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostMaintenanceCriticityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostMaintenanceCriticityResponseValidationError) ErrorName() string {
	return "PostMaintenanceCriticityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostMaintenanceCriticityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostMaintenanceCriticityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostMaintenanceCriticityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostMaintenanceCriticityResponseValidationError{}

// Validate checks the field values on RiskMatrixRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RiskMatrixRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_RiskMatrixRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return RiskMatrixRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	return nil
}

// RiskMatrixRequestValidationError is the validation error returned by
// RiskMatrixRequest.Validate if the designated constraints aren't met.
type RiskMatrixRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiskMatrixRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiskMatrixRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiskMatrixRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiskMatrixRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiskMatrixRequestValidationError) ErrorName() string {
	return "RiskMatrixRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RiskMatrixRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiskMatrixRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiskMatrixRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiskMatrixRequestValidationError{}

var _RiskMatrixRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on RiskMatrix with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RiskMatrix) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ConfigurationId

	// no validation rules for DomainCriticId

	// no validation rules for DomainCriticName

	// no validation rules for MaintenanceCriticId

	// no validation rules for MaintenanceCriticName

	// no validation rules for RiskId

	// no validation rules for RiskName

	return nil
}

// RiskMatrixValidationError is the validation error returned by
// RiskMatrix.Validate if the designated constraints aren't met.
type RiskMatrixValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiskMatrixValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiskMatrixValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiskMatrixValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiskMatrixValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiskMatrixValidationError) ErrorName() string { return "RiskMatrixValidationError" }

// Error satisfies the builtin error interface
func (e RiskMatrixValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiskMatrix.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiskMatrixValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiskMatrixValidationError{}

// Validate checks the field values on RiskMatrixResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RiskMatrixResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRiskMatrix() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return RiskMatrixResponseValidationError{
					field:  fmt.Sprintf("RiskMatrix[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RiskMatrixResponseValidationError is the validation error returned by
// RiskMatrixResponse.Validate if the designated constraints aren't met.
type RiskMatrixResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RiskMatrixResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RiskMatrixResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RiskMatrixResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RiskMatrixResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RiskMatrixResponseValidationError) ErrorName() string {
	return "RiskMatrixResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RiskMatrixResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRiskMatrixResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RiskMatrixResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RiskMatrixResponseValidationError{}

// Validate checks the field values on PostRiskMatrixRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PostRiskMatrixRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_PostRiskMatrixRequest_Scope_Pattern.MatchString(m.GetScope()) {
		return PostRiskMatrixRequestValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"\\\\b[A-Z]{3}\\\\b\"",
		}
	}

	for idx, item := range m.GetRiskMatrix() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return PostRiskMatrixRequestValidationError{
					field:  fmt.Sprintf("RiskMatrix[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PostRiskMatrixRequestValidationError is the validation error returned by
// PostRiskMatrixRequest.Validate if the designated constraints aren't met.
type PostRiskMatrixRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostRiskMatrixRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostRiskMatrixRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostRiskMatrixRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostRiskMatrixRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostRiskMatrixRequestValidationError) ErrorName() string {
	return "PostRiskMatrixRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostRiskMatrixRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostRiskMatrixRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostRiskMatrixRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostRiskMatrixRequestValidationError{}

var _PostRiskMatrixRequest_Scope_Pattern = regexp.MustCompile("\\b[A-Z]{3}\\b")

// Validate checks the field values on PostRiskMatrixResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PostRiskMatrixResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// PostRiskMatrixResponseValidationError is the validation error returned by
// PostRiskMatrixResponse.Validate if the designated constraints aren't met.
type PostRiskMatrixResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostRiskMatrixResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostRiskMatrixResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostRiskMatrixResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostRiskMatrixResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostRiskMatrixResponseValidationError) ErrorName() string {
	return "PostRiskMatrixResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostRiskMatrixResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostRiskMatrixResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostRiskMatrixResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostRiskMatrixResponseValidationError{}

// Validate checks the field values on UpsertApplicationEquipRequestEquipment
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpsertApplicationEquipRequestEquipment) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpsertApplicationEquipRequestEquipment_Operation_InLookup[m.GetOperation()]; !ok {
		return UpsertApplicationEquipRequestEquipmentValidationError{
			field:  "Operation",
			reason: "value must be in list [add delete]",
		}
	}

	return nil
}

// UpsertApplicationEquipRequestEquipmentValidationError is the validation
// error returned by UpsertApplicationEquipRequestEquipment.Validate if the
// designated constraints aren't met.
type UpsertApplicationEquipRequestEquipmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertApplicationEquipRequestEquipmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertApplicationEquipRequestEquipmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertApplicationEquipRequestEquipmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertApplicationEquipRequestEquipmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertApplicationEquipRequestEquipmentValidationError) ErrorName() string {
	return "UpsertApplicationEquipRequestEquipmentValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertApplicationEquipRequestEquipmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertApplicationEquipRequestEquipment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertApplicationEquipRequestEquipmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertApplicationEquipRequestEquipmentValidationError{}

var _UpsertApplicationEquipRequestEquipment_Operation_InLookup = map[string]struct{}{
	"add":    {},
	"delete": {},
}

// Validate checks the field values on UpsertInstanceRequestProduct with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertInstanceRequestProduct) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpsertInstanceRequestProduct_Operation_InLookup[m.GetOperation()]; !ok {
		return UpsertInstanceRequestProductValidationError{
			field:  "Operation",
			reason: "value must be in list [add delete]",
		}
	}

	return nil
}

// UpsertInstanceRequestProductValidationError is the validation error returned
// by UpsertInstanceRequestProduct.Validate if the designated constraints
// aren't met.
type UpsertInstanceRequestProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertInstanceRequestProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertInstanceRequestProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertInstanceRequestProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertInstanceRequestProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertInstanceRequestProductValidationError) ErrorName() string {
	return "UpsertInstanceRequestProductValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertInstanceRequestProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertInstanceRequestProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertInstanceRequestProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertInstanceRequestProductValidationError{}

var _UpsertInstanceRequestProduct_Operation_InLookup = map[string]struct{}{
	"add":    {},
	"delete": {},
}

// Validate checks the field values on UpsertInstanceRequestEquipment with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertInstanceRequestEquipment) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpsertInstanceRequestEquipment_Operation_InLookup[m.GetOperation()]; !ok {
		return UpsertInstanceRequestEquipmentValidationError{
			field:  "Operation",
			reason: "value must be in list [add delete]",
		}
	}

	return nil
}

// UpsertInstanceRequestEquipmentValidationError is the validation error
// returned by UpsertInstanceRequestEquipment.Validate if the designated
// constraints aren't met.
type UpsertInstanceRequestEquipmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertInstanceRequestEquipmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertInstanceRequestEquipmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertInstanceRequestEquipmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertInstanceRequestEquipmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertInstanceRequestEquipmentValidationError) ErrorName() string {
	return "UpsertInstanceRequestEquipmentValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertInstanceRequestEquipmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertInstanceRequestEquipment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertInstanceRequestEquipmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertInstanceRequestEquipmentValidationError{}

var _UpsertInstanceRequestEquipment_Operation_InLookup = map[string]struct{}{
	"add":    {},
	"delete": {},
}
