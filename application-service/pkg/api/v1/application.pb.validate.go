// Copyright (C) 2019 Orange
// 
// This software is distributed under the terms and conditions of the 'Apache License 2.0'
// license which can be found in the file 'License.txt' in this package distribution 
// or at 'http://www.apache.org/licenses/LICENSE-2.0'. 

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: application.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _application_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UpsertApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Owner

	// no validation rules for Scope

	return nil
}

// UpsertApplicationRequestValidationError is the validation error returned by
// UpsertApplicationRequest.Validate if the designated constraints aren't met.
type UpsertApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertApplicationRequestValidationError) ErrorName() string {
	return "UpsertApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertApplicationRequestValidationError{}

// Validate checks the field values on UpsertApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertApplicationResponseValidationError is the validation error returned by
// UpsertApplicationResponse.Validate if the designated constraints aren't met.
type UpsertApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertApplicationResponseValidationError) ErrorName() string {
	return "UpsertApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertApplicationResponseValidationError{}

// Validate checks the field values on DeleteApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	return nil
}

// DeleteApplicationRequestValidationError is the validation error returned by
// DeleteApplicationRequest.Validate if the designated constraints aren't met.
type DeleteApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationRequestValidationError) ErrorName() string {
	return "DeleteApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationRequestValidationError{}

// Validate checks the field values on DeleteApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteApplicationResponseValidationError is the validation error returned by
// DeleteApplicationResponse.Validate if the designated constraints aren't met.
type DeleteApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationResponseValidationError) ErrorName() string {
	return "DeleteApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationResponseValidationError{}

// Validate checks the field values on UpsertInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for InstanceId

	// no validation rules for InstanceName

	if v, ok := interface{}(m.GetProducts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertInstanceRequestValidationError{
				field:  "Products",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEquipments()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertInstanceRequestValidationError{
				field:  "Equipments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Scope

	return nil
}

// UpsertInstanceRequestValidationError is the validation error returned by
// UpsertInstanceRequest.Validate if the designated constraints aren't met.
type UpsertInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertInstanceRequestValidationError) ErrorName() string {
	return "UpsertInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertInstanceRequestValidationError{}

// Validate checks the field values on UpsertInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpsertInstanceResponseValidationError is the validation error returned by
// UpsertInstanceResponse.Validate if the designated constraints aren't met.
type UpsertInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertInstanceResponseValidationError) ErrorName() string {
	return "UpsertInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertInstanceResponseValidationError{}

// Validate checks the field values on DeleteInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for InstanceId

	return nil
}

// DeleteInstanceRequestValidationError is the validation error returned by
// DeleteInstanceRequest.Validate if the designated constraints aren't met.
type DeleteInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstanceRequestValidationError) ErrorName() string {
	return "DeleteInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstanceRequestValidationError{}

// Validate checks the field values on DeleteInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteInstanceResponseValidationError is the validation error returned by
// DeleteInstanceResponse.Validate if the designated constraints aren't met.
type DeleteInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstanceResponseValidationError) ErrorName() string {
	return "DeleteInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstanceResponseValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListApplicationsRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val >= 100 {
		return ListApplicationsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 100)",
		}
	}

	if _, ok := ListApplicationsRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListApplicationsRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListApplicationsRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationsRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationsResponseValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Application) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	// no validation rules for Name

	// no validation rules for Owner

	// no validation rules for NumOfInstances

	// no validation rules for NumOfProducts

	// no validation rules for TotalCost

	return nil
}

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

// Validate checks the field values on ApplicationSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSearchParamsValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSearchParamsValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSearchParamsValidationError{
				field:  "ProductId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplicationSearchParamsValidationError is the validation error returned by
// ApplicationSearchParams.Validate if the designated constraints aren't met.
type ApplicationSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationSearchParamsValidationError) ErrorName() string {
	return "ApplicationSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationSearchParamsValidationError{}

// Validate checks the field values on ApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplicationId

	return nil
}

// ApplicationRequestValidationError is the validation error returned by
// ApplicationRequest.Validate if the designated constraints aren't met.
type ApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationRequestValidationError) ErrorName() string {
	return "ApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationRequestValidationError{}

// Validate checks the field values on ApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Edition

	// no validation rules for Editor

	// no validation rules for Metric

	// no validation rules for NumOfInstances

	return nil
}

// ApplicationResponseValidationError is the validation error returned by
// ApplicationResponse.Validate if the designated constraints aren't met.
type ApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationResponseValidationError) ErrorName() string {
	return "ApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationResponseValidationError{}

// Validate checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInstancesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageNum(); val < 1 || val >= 1000 {
		return ListInstancesRequestValidationError{
			field:  "PageNum",
			reason: "value must be inside range [1, 1000)",
		}
	}

	if val := m.GetPageSize(); val < 10 || val >= 100 {
		return ListInstancesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [10, 100)",
		}
	}

	if _, ok := ListInstancesRequest_SortBy_name[int32(m.GetSortBy())]; !ok {
		return ListInstancesRequestValidationError{
			field:  "SortBy",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := SortOrder_name[int32(m.GetSortOrder())]; !ok {
		return ListInstancesRequestValidationError{
			field:  "SortOrder",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSearchParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstancesRequestValidationError{
				field:  "SearchParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListInstancesRequestValidationError is the validation error returned by
// ListInstancesRequest.Validate if the designated constraints aren't met.
type ListInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesRequestValidationError) ErrorName() string {
	return "ListInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesRequestValidationError{}

// Validate checks the field values on InstanceSearchParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InstanceSearchParams) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetApplicationId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceSearchParamsValidationError{
				field:  "ApplicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProductId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceSearchParamsValidationError{
				field:  "ProductId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// InstanceSearchParamsValidationError is the validation error returned by
// InstanceSearchParams.Validate if the designated constraints aren't met.
type InstanceSearchParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceSearchParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceSearchParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceSearchParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceSearchParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceSearchParamsValidationError) ErrorName() string {
	return "InstanceSearchParamsValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceSearchParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceSearchParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceSearchParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceSearchParamsValidationError{}

// Validate checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInstancesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRecords

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponseValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListInstancesResponseValidationError is the validation error returned by
// ListInstancesResponse.Validate if the designated constraints aren't met.
type ListInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponseValidationError) ErrorName() string {
	return "ListInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponseValidationError{}

// Validate checks the field values on Instance with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Instance) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Environment

	// no validation rules for NumOfEquipments

	// no validation rules for NumOfProducts

	return nil
}

// InstanceValidationError is the validation error returned by
// Instance.Validate if the designated constraints aren't met.
type InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceValidationError) ErrorName() string { return "InstanceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceValidationError{}

// Validate checks the field values on StringFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilteringOrder

	// no validation rules for Filteringkey

	// no validation rules for FilterType

	return nil
}

// StringFilterValidationError is the validation error returned by
// StringFilter.Validate if the designated constraints aren't met.
type StringFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFilterValidationError) ErrorName() string { return "StringFilterValidationError" }

// Error satisfies the builtin error interface
func (e StringFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFilterValidationError{}

// Validate checks the field values on UpsertInstanceRequestProduct with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertInstanceRequestProduct) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpsertInstanceRequestProduct_Operation_InLookup[m.GetOperation()]; !ok {
		return UpsertInstanceRequestProductValidationError{
			field:  "Operation",
			reason: "value must be in list [add delete]",
		}
	}

	return nil
}

// UpsertInstanceRequestProductValidationError is the validation error returned
// by UpsertInstanceRequestProduct.Validate if the designated constraints
// aren't met.
type UpsertInstanceRequestProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertInstanceRequestProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertInstanceRequestProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertInstanceRequestProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertInstanceRequestProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertInstanceRequestProductValidationError) ErrorName() string {
	return "UpsertInstanceRequestProductValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertInstanceRequestProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertInstanceRequestProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertInstanceRequestProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertInstanceRequestProductValidationError{}

var _UpsertInstanceRequestProduct_Operation_InLookup = map[string]struct{}{
	"add":    {},
	"delete": {},
}

// Validate checks the field values on UpsertInstanceRequestEquipment with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertInstanceRequestEquipment) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpsertInstanceRequestEquipment_Operation_InLookup[m.GetOperation()]; !ok {
		return UpsertInstanceRequestEquipmentValidationError{
			field:  "Operation",
			reason: "value must be in list [add delete]",
		}
	}

	return nil
}

// UpsertInstanceRequestEquipmentValidationError is the validation error
// returned by UpsertInstanceRequestEquipment.Validate if the designated
// constraints aren't met.
type UpsertInstanceRequestEquipmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertInstanceRequestEquipmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertInstanceRequestEquipmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertInstanceRequestEquipmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertInstanceRequestEquipmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertInstanceRequestEquipmentValidationError) ErrorName() string {
	return "UpsertInstanceRequestEquipmentValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertInstanceRequestEquipmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertInstanceRequestEquipment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertInstanceRequestEquipmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertInstanceRequestEquipmentValidationError{}

var _UpsertInstanceRequestEquipment_Operation_InLookup = map[string]struct{}{
	"add":    {},
	"delete": {},
}
